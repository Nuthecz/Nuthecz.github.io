<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Android第一行代码</title>
    <link href="/posts/f131ce6d.html"/>
    <url>/posts/f131ce6d.html</url>
    
    <content type="html"><![CDATA[<h1 id="认识android"><a class="markdownIt-Anchor" href="#认识android"></a> 认识Android</h1><h2 id="系统架构"><a class="markdownIt-Anchor" href="#系统架构"></a> 系统架构</h2><p>​书中Android的架构总共为4层，分别为Linux内核层、系统运行库层、应用框架层、应用层。而下面这两篇文章，更倾向于按照官方图示分为五层，分别为Linux内核层、硬件抽象层HAL层、Native C/C++库 &amp;&amp; Android Runtime层、Java Framework层、 System Apps层。其中</p><ul><li><a href="https://cloud.tencent.com/developer/article/1415759">https://cloud.tencent.com/developer/article/1415759</a></li><li><a href="https://github.com/Omooo/Android-Notes/blob/master/blogs/Android/Framework/Android%20%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84.md">https://github.com/Omooo/Android-Notes/blob/master/blogs/Android/Framework/Android 系统架构.md</a></li></ul><h1 id="android四大组件"><a class="markdownIt-Anchor" href="#android四大组件"></a> Android四大组件</h1><blockquote><p>主要是了解一下，主要还是为了逆向而服务，感觉目前没什么作用的就没有细看，笔记很粗略</p></blockquote><h2 id="activity"><a class="markdownIt-Anchor" href="#activity"></a> Activity</h2><ul><li>任何一个活动都需要在 AndroidManifest.xml 中进行注册，<code>&lt;intent-filter&gt;</code> 中会标识活动的相关信息。</li><li>同时 <code>Intent</code> 是安卓各组件之间进行交互的一种重要方式，可以在不同活动之间进行数据的传输，分为显示Intent与隐式Intent。显示就是真实调用代码；隐式则是通过标注 <code>&lt;intent-filter&gt;</code> 中的信息来通过这些信息来表明自身，以供别人通过信息进行调用。隐式可以实现很多功能，因为可以标注的信息不同，所以可以实现打开浏览器、电话等操作。</li></ul><h3 id="活动的生命周期"><a class="markdownIt-Anchor" href="#活动的生命周期"></a> 活动的生命周期</h3><p>​Android使用任务来管理活动的，一个任务就是一组存放在栈里的活动的集合，这个栈也称为返回栈。创建活动即入栈，销毁活动栈顶数据就出栈。</p><p>​同时Android的活动状态分为4钟。运行状态(位于栈顶)、暂停状态(不在栈顶但仍可见、例如不占满整个屏幕的对话框，后面的活动就是暂停状态)、停止状态(不在栈顶并完全不可见)、销毁状态(从栈中移除)。</p><p>​由此可以根据活动的生存期获取7个回调方法。<code>Android逆向入门(1)</code>一节中有提及，它分为了完整生存期、可见生存期、前台生存期，还有一个落单的 <code>onRestart()</code> 方法(由活动由停止状态变为运行状态被调用，活动被重新启动了)。</p><ul><li>完整生存期：<code>onCreat()</code> 和 <code>onDestroy()</code> 之间，前者初始化，后者销毁</li><li>可见生存期：<code>onStart()</code> 和 <code>onStop()</code> 之间，前者资源加载，后者资源释放，从而保证不会占用过多内存</li><li>前台生存期：<code>onResume()</code> 和 <code>onPause()</code> 之间，这个期间，活动可见可交互</li></ul><h3 id="活动的启动方式"><a class="markdownIt-Anchor" href="#活动的启动方式"></a> 活动的启动方式</h3><ul><li>standard模式：标准默认的模式，每启动一个活动就入栈，不论活动是否已经被启用。</li><li>singleTop模式：活动启动前进行检查，如果<strong>返回栈栈顶</strong>已经是该活动了(需要注意只会检查栈顶，不再栈顶依然会再创建一个活动实例)，就认为可以直接使用，不再启动新的活动入栈。</li><li>singleTask模式：很好解决重复创建栈顶活动问题，检查<strong>返回栈</strong>中是否有相同的活动，有就不新创建活动实例。</li><li>singleInstance模式：解决共享活动实例问题，为共享的活动启用一个新的返回栈，其他程序访问这个活动会共用一个返回栈，实现了共享活动。因为这里每个程序都有自己的返回栈，这个活动在多个返回栈中创建的实例是不一样的，不能达到共享的目的。</li></ul><h2 id="broadcast-receiver"><a class="markdownIt-Anchor" href="#broadcast-receiver"></a> Broadcast Receiver</h2><p>​为了便于进行系统级别的消息通知，Android引入了一套类似的广播消息机制。这里分为标准广播和有序广播，前者广播发出后，所有广播接收器几乎同一时间接收到广播；后者广播发出后，同一时间只会有一个广播接收器能够收到这条广播消息，当这个广播接收器中的逻辑执行完毕后，广播才会继续传递。</p><h3 id="接收系统广播"><a class="markdownIt-Anchor" href="#接收系统广播"></a> 接收系统广播</h3><p>​这里广播的注册(注册之后，接收器就会收到对应的广播来处理)和 Intent 相似，动态注册就在代码中注册，静态注册则是在 AndroidManifest.xml 中注册(<code>&lt;receiver&gt;</code>标签中)。这里的广播需要与 <code>&lt;intent-filter&gt;</code> 进行配合，因为广播的类型是通过 Intent 来进行标注的，传递的其实也是这个。</p><h2 id="持久化技术"><a class="markdownIt-Anchor" href="#持久化技术"></a> 持久化技术</h2><p>​这里主要讲的就是存储持久化技术，它提供一种机制可以让数据在瞬时状态和持久状态之间进行转换。</p><h3 id="文件存储"><a class="markdownIt-Anchor" href="#文件存储"></a> 文件存储</h3><p>​使用 Content 类提供的方法 <code>openFileOutput()</code> 和 <code>openFileInput()</code>，前者第一个参数是文件名，不可以包含路径，因为所有的文件默认都是存储在 <code>/data/data/&lt;package name&gt;/files</code> 目录下的。</p><h3 id="sharedpreferences存储"><a class="markdownIt-Anchor" href="#sharedpreferences存储"></a> SharedPreferences存储</h3><p>​它是使用的键值对的方式来存储数据的。它使用 <code>SharedPreferences 对象</code> 来存储数据。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202403031117688.png" alt="image-20240303111754614" /></p><h3 id="sqlite数据库存储"><a class="markdownIt-Anchor" href="#sqlite数据库存储"></a> SQLite数据库存储</h3><p>​就是使用数据库进行的一系列操作，这里没怎么看</p><h2 id="content-provider"><a class="markdownIt-Anchor" href="#content-provider"></a> Content Provider</h2><p>​Content Provider主要用于在不同的应用程序之间实现数据共享的功能。</p><h3 id="运行时权限"><a class="markdownIt-Anchor" href="#运行时权限"></a> 运行时权限</h3><p>​对于程序需要的权限，用户不需要一次性授权全部申请的权限，而是可以在软件的使用过程中再对某一项权限申请进行授权。</p><h3 id="content-provider-2"><a class="markdownIt-Anchor" href="#content-provider-2"></a> content provider</h3><p>​使用 uri(example:content://com.example.app.provider/table1)来表示路径进行访问，从而可以使用同一个文件。</p><h2 id="service"><a class="markdownIt-Anchor" href="#service"></a> Service</h2><p>​服务会执行不需要和用户交互而且要求长期运行的任务。</p><h3 id="异步消息处理机制"><a class="markdownIt-Anchor" href="#异步消息处理机制"></a> 异步消息处理机制</h3><ul><li>Message：在线程中传递的消息，可以在内部携带少量信息，用于不同线程之间交互数据。</li><li>Handle：主要用于发送和处理消息 -&gt; <code>sendMessage()</code> 和 <code>handleMessage()</code>。</li><li>MessageQueue：消息队列，存放所有通过Handle发送的消息，这部分消息会存在于队列中，等待被处理。每个线程中只有一个 MessageQueue对象</li><li>Looper：每个线程中 MessageQueue 的管家，调用它的 <code>loop()</code> 方法后，就会进入一个无限的循环中，然后每当发现 MessageQueue 中存在一条消息，就会取出，然后传递给 Handle 的 handleMessage() 方法中，每个线程中也只存在一个looper对象。</li></ul><p>​首先需要在主线程当中创建一个 Handler 对象，并重写 handleMessage() 方法。然后当子线程中需要进行UI操作时，就创建一个 Message 对象，并通过 Handler 将这条消息发送出去。之后这条消息会被添加到 MessageQueue 的队列中等待被处理。而 Looper 则会一直尝试从 MessageQueue 中取出待处理消息，最后分发回 Handler 的 handleMessage() 方法中。由于 Handler 是在主线程中创建的，所以此时 handleMessage() 方法中的代码也会在主线程中运行，于是我们在这里就可以安心地进行 UI操作了。(示例如下图)</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202403031509228.png" alt="image-20240303150909138" /></p><h1 id="kotlin学习"><a class="markdownIt-Anchor" href="#kotlin学习"></a> Kotlin学习</h1><h2 id="基础相关"><a class="markdownIt-Anchor" href="#基础相关"></a> 基础相关</h2><h3 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h3><ul><li><code>val</code> 类似与final，标识变量不可更改</li><li><code>var</code> kotlin会自动推断数据类型，或者也可以显示声明变量</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> main&#123;</span><br>    <span class="hljs-keyword">val</span> a:<span class="hljs-built_in">Int</span> = <span class="hljs-number">1</span> <span class="hljs-comment">//显示声明变量，注意这里 Int 的首字母大写，表明它是一个对象，它已经抛弃了的java的int等基本数据类型，完全使用对象表示数据类型</span><br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">1.5</span><br>    b = b * <span class="hljs-number">2</span><br>    println(<span class="hljs-string">&quot;num a is immutable: &quot;</span> + a)<br>    println(<span class="hljs-string">&quot;num b is variable: &quot;</span> + b)<br>&#125;<span class="hljs-comment">//kotlin不需要&quot;;&quot;结尾</span><br></code></pre></td></tr></table></figure><h3 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">methodName</span><span class="hljs-params">(param1: <span class="hljs-type">Int</span>, param2: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<span class="hljs-comment">//这里参数的类型还是需要指定的，不过返回值可以推断出来而省略</span><br><br><span class="hljs-comment">// 函数体只有一行可以简化</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">largeNumber</span><span class="hljs-params">(num1: <span class="hljs-type">Int</span>, num2: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> = max(num1, num2)<br></code></pre></td></tr></table></figure><h3 id="逻辑控制"><a class="markdownIt-Anchor" href="#逻辑控制"></a> 逻辑控制</h3><h4 id="if语句"><a class="markdownIt-Anchor" href="#if语句"></a> if语句</h4><p>​与java类似，但是可以存在返回值，返回值就是if语句每一个条件中最后一行代码的返回值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">largerNumber</span><span class="hljs-params">(num1: <span class="hljs-type">Int</span>, num2: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>    <span class="hljs-keyword">var</span> value = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> (num1 &gt; num2) &#123;<br>        value = num1<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        value = num2<br>    &#125;<br>    <span class="hljs-comment">//上下相同</span><br>    <span class="hljs-keyword">var</span> value <span class="hljs-keyword">if</span> (num1 &gt; num2) &#123;<br>        num1<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        num2<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> value<br>&#125;<br><br><br><span class="hljs-comment">//再压缩，只有一行代码的情况下</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">largerNumber</span><span class="hljs-params">(num1: <span class="hljs-type">Int</span>, num2: <span class="hljs-type">Int</span>)</span></span> = <span class="hljs-keyword">if</span> (num1 &gt; num2) num1 <span class="hljs-keyword">else</span> num2<br></code></pre></td></tr></table></figure><h4 id="when语句"><a class="markdownIt-Anchor" href="#when语句"></a> when语句</h4><p>​类似java的switch语句</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getScore</span><span class="hljs-params">(name: <span class="hljs-type">String</span>)</span></span> = <span class="hljs-keyword">when</span> (name) &#123;<br>    <span class="hljs-string">&quot;Tom&quot;</span> -&gt; <span class="hljs-number">86</span><br>    <span class="hljs-string">&quot;Jim&quot;</span> -&gt; <span class="hljs-number">77</span><br>    <span class="hljs-string">&quot;Jack&quot;</span> -&gt; <span class="hljs-number">95</span><br>    <span class="hljs-string">&quot;Lily&quot;</span> -&gt; <span class="hljs-number">100</span><br>    <span class="hljs-keyword">else</span> -&gt; <span class="hljs-number">0</span><br>&#125;<span class="hljs-comment">//返回值省略了，为Int。这里就是根据name的值确定返回值</span><br><br><span class="hljs-comment">//同时支持类型匹配，Number为内置的数据类型，Int，Long等都是它的子类</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">checkNumber</span><span class="hljs-params">(num: <span class="hljs-type">Number</span>)</span></span> &#123;<br>    <span class="hljs-keyword">when</span> (num) &#123;<br>        <span class="hljs-keyword">is</span> <span class="hljs-built_in">Int</span> -&gt; println(<span class="hljs-string">&quot;number is Int&quot;</span>)<br>        <span class="hljs-keyword">is</span> <span class="hljs-built_in">Double</span> -&gt; println(<span class="hljs-string">&quot;number is Double&quot;</span>)<br>        <span class="hljs-keyword">else</span> -&gt; println(<span class="hljs-string">&quot;number not support&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="循环语句"><a class="markdownIt-Anchor" href="#循环语句"></a> 循环语句</h4><p>​while差不多，for与java相比有改变</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">0.</span><span class="hljs-number">.10</span>) &#123;<span class="hljs-comment">//..是创建两端闭区间的关键字，这里就是创建了[0,10]</span><br>        println(i)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> until <span class="hljs-number">10</span> step <span class="hljs-number">2</span>) &#123;<span class="hljs-comment">//[0,10)</span><br>        println(i)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">10</span> downTo <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//降序[10,1]</span><br>        println(i)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="类"><a class="markdownIt-Anchor" href="#类"></a> 类</h2><h3 id="继承关系"><a class="markdownIt-Anchor" href="#继承关系"></a> 继承关系</h3><p>​kotlin的类都是默认非抽象类，不能被继承(类似java中final)。所以，要表示一个类可以继承，必须加上 <code>open</code> ，同时kotlin中的继承为 <code>:</code>，后面 Person() 意识是调用的 Person类的无参主构造函数，子类的主构造函数调用父类中的哪个构造函数，在继承的时候通过括号来指定。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">open</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    ...<br>&#125;<br><br><span class="hljs-comment">//Person类后面的一对空括号表示Student类的主构造函数在初始化的时候会调用Person类的无参数构造函数</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> : <span class="hljs-type">Person</span>() &#123;<br>    <span class="hljs-keyword">var</span> sno = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">var</span> grade = <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">//这里主构造函数有两个参数，没有无参构造函数了，他没有函数体。后面init是次构造函数，可以写入逻辑</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-keyword">val</span> name: String, <span class="hljs-keyword">val</span> age: <span class="hljs-built_in">Int</span>)&#123;<br><span class="hljs-keyword">init</span>&#123;<br>        println(<span class="hljs-string">&quot;name is: &quot;</span> + name)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(<span class="hljs-keyword">val</span> sno: String, <span class="hljs-keyword">val</span> grade: <span class="hljs-built_in">Int</span>, name: String): Person(name)&#123;<span class="hljs-comment">//这里需要实现父类的构造函数，就是使用括号来实现，name是父类的参数，不写关键字，让作用域仅限定在主构造函数</span><br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​一个类只有一个主构造函数，但是可以存在多个次构造函数。当一个类既有主构造函数，又有次构造函数时，所有的次构造函数都必须调用主构造函数(包括间接调用)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(<span class="hljs-keyword">val</span> sno: String, <span class="hljs-keyword">val</span> grade: <span class="hljs-built_in">Int</span>, name: String, age: <span class="hljs-built_in">Int</span>): Person(name, age) &#123;<br>    <span class="hljs-keyword">constructor</span>(name: String, age: <span class="hljs-built_in">Int</span>) : <span class="hljs-keyword">this</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0</span>, name, age) &#123;<br>    <br>    &#125;<br>    <span class="hljs-keyword">constructor</span>() : <span class="hljs-keyword">this</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0</span>) &#123;<br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​次构造函数是通过constructor关键字来定义的，这里我们定义了两个次构造函数：第一个次构造函数接收name和age参数，然后它又通过this关键字调用了主构造函数，并将sno和grade这两个参数赋值成初始值；第二个次构造函数不接收任何参数，它通过this关键字调用了我们刚才定义的第一个次构造函数，并将name和age参数也赋值成初始值，由于第二个次构造函数间接调用了主构造函数，因此这仍然是合法的。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> student1 = Student()<br><span class="hljs-keyword">val</span> student2 = Student(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-number">19</span>)<br><span class="hljs-keyword">val</span> student3 = Student(<span class="hljs-string">&quot;a123&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-number">19</span>)<br></code></pre></td></tr></table></figure><p>​然后就拥有了3种方式来对Student类进行实体化，分别是通过不带参数的构造函数、通过带两个参数的构造函数和通过带4个参数的构造函数</p><blockquote><p>这里还是有点迷糊，无参的构造函数哪里来的，两个参数的又是哪里的</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《软件分析》Lab3</title>
    <link href="/posts/ecb00fb5.html"/>
    <url>/posts/ecb00fb5.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="eb8b2d814b97425e54ee6e0710d5063715e47141662a9a661ae46020a07551ed"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>静态分析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ARM汇编</title>
    <link href="/posts/7dbaa5b1.html"/>
    <url>/posts/7dbaa5b1.html</url>
    
    <content type="html"><![CDATA[<h1 id="寄存器"><a class="markdownIt-Anchor" href="#寄存器"></a> 寄存器</h1><table><thead><tr><th style="text-align:left">寄存器名称</th><th style="text-align:left">功能介绍</th></tr></thead><tbody><tr><td style="text-align:left"><code>R0-R12</code></td><td style="text-align:left">通用寄存器，用于存储临时数据。在函数调用时，<code>R0-R3</code>用于存储前四个参数，其余的参数通过堆栈传递。返回值也通过<code>R0</code>和<code>R1</code>传递。<code>R7</code>一般放系统调用号</td></tr><tr><td style="text-align:left"><code>R13(SP)</code></td><td style="text-align:left">堆栈指针寄存器，指向当前堆栈的顶部。</td></tr><tr><td style="text-align:left"><code>R14(LR)</code></td><td style="text-align:left">链接寄存器，存储子程序的返回地址。</td></tr><tr><td style="text-align:left"><code>R15(PC)</code></td><td style="text-align:left">程序计数器，指向下一条要执行的指令。</td></tr><tr><td style="text-align:left"><code>CPSR</code></td><td style="text-align:left">当前程序状态寄存器，保存程序的状态信息，如算术运算的结果标志、中断禁止标志等。</td></tr><tr><td style="text-align:left"><code>FPSCR</code></td><td style="text-align:left">浮点状态和控制寄存器，如果你在调试的代码中涉及到浮点运算，那么这个寄存器会比较重要。</td></tr></tbody></table><p>​寄存器比对</p><table><thead><tr><th>ARM</th><th>描述</th><th>X86</th></tr></thead><tbody><tr><td>R0</td><td>通用寄存器</td><td>EAX</td></tr><tr><td>R1-R5</td><td>通用寄存器</td><td>EBX,ECX,EDX,ESI,EDI</td></tr><tr><td>R6-R10</td><td>通用寄存器</td><td>-</td></tr><tr><td>R11(FP)</td><td>栈帧指针</td><td>EBP</td></tr><tr><td>R12</td><td>内部程序调用</td><td>-</td></tr><tr><td>R13(SP)</td><td>栈指针</td><td>ESP</td></tr><tr><td>R14(LR)</td><td>链接寄存器</td><td>-</td></tr><tr><td>R14(LR)</td><td>程序计数器/机器码指针</td><td>EIP</td></tr><tr><td>CPSR</td><td>程序状态寄存器</td><td>EFLAGS</td></tr></tbody></table><ul><li>R0-R12：用来在通用操作中存储临时的值，指针等。R0被用来存储函数调用的返回值。R7经常被用作存储系统调用号，R11存放着帮助我们找到栈帧边界的指针。以及，在ARM的函数调用约定中，前四个参数按顺序存放在R0-R3中。</li><li>R13：SP(栈指针)。栈指针寄存器用来指向当前的栈顶。</li><li>R14：LR(链接寄存器)。当一个函数调用发生，链接寄存器就被用来记录函数调用发生所在位置的下一条指令的地址。这么做允许我们快速的从子函数返回到父函数。</li><li>R15：PC(程序计数器)。程序计数器是一个在程序指令执行时自增的计数器。它的大小在ARM模式下总是4字节对齐，在Thumb模式下总是两字节对齐。当执行一个分支指令时，PC存储目的地址。在程序执行中，ARM模式下的PC存储着当前指令加8(两条ARM指令后)的位置，Thumb(v1)模式下的PC存储着当前指令加4(两条Thumb指令后)的位置。这也是X86与ARM在PC上的主要不同之处。</li></ul><h1 id="寻址方式"><a class="markdownIt-Anchor" href="#寻址方式"></a> 寻址方式</h1><table><thead><tr><th style="text-align:left">寻址方式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">立即数寻址</td><td style="text-align:left">直接使用立即数值作为操作数，例如：<code>MOV R0, #5</code></td></tr><tr><td style="text-align:left">寄存器直接寻址</td><td style="text-align:left">使用寄存器中的值作为操作数，例如：<code>MOV R0, R1</code></td></tr><tr><td style="text-align:left">寄存器间接寻址</td><td style="text-align:left">使用寄存器中的值作为内存地址，访问该地址中的数据，例如：<code>LDR R0, [R1]</code></td></tr><tr><td style="text-align:left">寄存器相对寻址</td><td style="text-align:left">使用寄存器中的值加上一个立即偏移量作为内存地址，例如：<code>LDR R0, [R1, #4]</code></td></tr><tr><td style="text-align:left">寄存器变址寻址</td><td style="text-align:left">使用两个寄存器中的值相加作为内存地址，例如：<code>LDR R0, [R1, R2]</code></td></tr><tr><td style="text-align:left">寄存器偏移寻址</td><td style="text-align:left">使用寄存器中的值加上另一个寄存器的值乘以一个比例因子作为内存地址，例如：<code>LDR R0, [R1, R2, LSL #2]</code> -&gt; LSL 逻辑左移，低端补零</td></tr><tr><td style="text-align:left">堆栈寻址</td><td style="text-align:left">使用堆栈指针寄存器(如SP)进行操作，例如：<code>PUSH &#123;R0, R1&#125;</code> 或 <code>POP &#123;R0, R1&#125;</code></td></tr><tr><td style="text-align:left">批量寄存器寻址</td><td style="text-align:left"><code>ldmia r0, &#123;r1 - r4&#125;</code> 将r1,r2,r3,r4中的数据依次放入r0指向的内存地址，r0+4指向的内存地址…</td></tr></tbody></table><h1 id="栈相关"><a class="markdownIt-Anchor" href="#栈相关"></a> 栈相关</h1><table><thead><tr><th style="text-align:left">指令类型</th><th style="text-align:left">指令示例</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">压栈</td><td style="text-align:left"><code>PUSH &#123;R0, R1&#125;</code></td><td style="text-align:left">将寄存器R0和R1的内容压入堆栈中</td></tr><tr><td style="text-align:left">压栈</td><td style="text-align:left"><code>PUSH &#123;R0-R5&#125;</code></td><td style="text-align:left">将寄存器R0到R5的内容压入堆栈中</td></tr><tr><td style="text-align:left">压栈</td><td style="text-align:left"><code>STMDB SP!, &#123;R0-R5&#125;</code></td><td style="text-align:left">将寄存器R0到R5的内容压入堆栈中(与PUSH等效)</td></tr><tr><td style="text-align:left">出栈</td><td style="text-align:left"><code>POP &#123;R0, R1&#125;</code></td><td style="text-align:left">从堆栈中弹出数据，恢复到寄存器R0和R1中</td></tr><tr><td style="text-align:left">出栈</td><td style="text-align:left"><code>POP &#123;R0-R5&#125;</code></td><td style="text-align:left">从堆栈中弹出数据，恢复到寄存器R0到R5中</td></tr></tbody></table><h1 id="跳转指令"><a class="markdownIt-Anchor" href="#跳转指令"></a> 跳转指令</h1><table><thead><tr><th style="text-align:left">指令类型</th><th style="text-align:left">指令示例</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">无条件跳转</td><td style="text-align:left"><code>B label</code></td><td style="text-align:left">无条件跳转到标签<code>label</code>指向的位置</td></tr><tr><td style="text-align:left">子程序调用</td><td style="text-align:left"><code>BL label</code></td><td style="text-align:left">调用子程序，将当前指令的下一条指令地址存入链接寄存器(LR)，然后跳转到标签<code>label</code>指向的位置</td></tr><tr><td style="text-align:left">子程序返回</td><td style="text-align:left"><code>BX LR</code></td><td style="text-align:left">返回子程序调用前的位置，跳转到链接寄存器(LR)中存储的地址</td></tr><tr><td style="text-align:left">寄存器跳转</td><td style="text-align:left"><code>BX Rn</code></td><td style="text-align:left">跳转到寄存器Rn中存储的地址</td></tr></tbody></table><h1 id="算数运算指令"><a class="markdownIt-Anchor" href="#算数运算指令"></a> 算数运算指令</h1><table><thead><tr><th style="text-align:left">指令</th><th style="text-align:left">计算公式</th><th style="text-align:left">备注</th></tr></thead><tbody><tr><td style="text-align:left"><code>ADD Rd, Rn, Rm</code></td><td style="text-align:left">Rd = Rn + Rm</td><td style="text-align:left">加法运算，指令为 ADD</td></tr><tr><td style="text-align:left"><code>ADD Rd, Rn, #immed</code></td><td style="text-align:left">Rd = Rn + #immed</td><td style="text-align:left">加法运算，指令为 ADD</td></tr><tr><td style="text-align:left"><code>ADC Rd, Rn, Rm</code></td><td style="text-align:left">Rd = Rn + Rm + 进位</td><td style="text-align:left">带进位的加法运算，指令为 ADC</td></tr><tr><td style="text-align:left"><code>ADC Rd, Rn, #immed</code></td><td style="text-align:left">Rd = Rn + #immed + 进位</td><td style="text-align:left">带进位的加法运算，指令为 ADC</td></tr><tr><td style="text-align:left"><code>SUB Rd, Rn, Rm</code></td><td style="text-align:left">Rd = Rn - Rm</td><td style="text-align:left">减法</td></tr><tr><td style="text-align:left"><code>SUB Rd, #immed</code></td><td style="text-align:left">Rd = Rd - #immed</td><td style="text-align:left">减法</td></tr><tr><td style="text-align:left"><code>SUB Rd, Rn, #immed</code></td><td style="text-align:left">Rd = Rn - #immed</td><td style="text-align:left">减法</td></tr><tr><td style="text-align:left"><code>SBC Rd, Rn, #immed</code></td><td style="text-align:left">Rd = Rn - #immed - 借位</td><td style="text-align:left">带借位的减法</td></tr><tr><td style="text-align:left"><code>SBC Rd, Rn ,Rm</code></td><td style="text-align:left">Rd = Rn - Rm - 借位</td><td style="text-align:left">带借位的减法</td></tr><tr><td style="text-align:left"><code>MUL Rd, Rn, Rm</code></td><td style="text-align:left">Rd = Rn * Rm</td><td style="text-align:left">乘法 (32 位)</td></tr><tr><td style="text-align:left"><code>UDIV Rd, Rn, Rm</code></td><td style="text-align:left">Rd = Rn / Rm</td><td style="text-align:left">无符号除法</td></tr><tr><td style="text-align:left"><code>SDIV Rd, Rn, Rm</code></td><td style="text-align:left">Rd = Rn / Rm</td><td style="text-align:left">有符号除法</td></tr></tbody></table><h1 id="逻辑运算"><a class="markdownIt-Anchor" href="#逻辑运算"></a> 逻辑运算</h1><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202402262247770.png" alt="image-20240226224727666" /></p><h1 id="移位操作"><a class="markdownIt-Anchor" href="#移位操作"></a> 移位操作</h1><ul><li>逻辑移位：逻辑移位是指逻辑左移和逻辑右移，移出的空位都用0来补。</li><li>算术移位：需要分有符号型值和无符号型值。对于无符号型值，算术移位等同于逻辑移位。而对于有符号型值，算术左移等同于逻辑左移，算术右移补的是符号位，正数补0，负数补1。</li></ul><table><thead><tr><th>指令</th><th>计算公式</th><th>描述</th></tr></thead><tbody><tr><td>LSL Rd, Rn, #imm</td><td>Rd = Rn &lt;&lt; #imm</td><td>逻辑左移</td></tr><tr><td>LSR Rd, Rn, #imm</td><td>Rd = Rn &gt;&gt; #imm</td><td>逻辑右移</td></tr><tr><td>ASR Rd, Rn, #imm</td><td>Rd = Rn &gt;&gt; #imm</td><td>算术右移</td></tr><tr><td>ROR Rd, Rn, #imm</td><td>Rd = (Rn &amp; 2^#imm) &amp; Rn &gt;&gt; #imm</td><td>循环右移</td></tr></tbody></table><h1 id="指令总结"><a class="markdownIt-Anchor" href="#指令总结"></a> 指令总结</h1><table><thead><tr><th>指令</th><th>含义</th><th>指令</th><th>含义</th></tr></thead><tbody><tr><td>MOV</td><td>移动数据</td><td>EOR</td><td>比特位异或</td></tr><tr><td>MVN</td><td>取反码移动数据</td><td>LDR</td><td>加载数据</td></tr><tr><td>ADD</td><td>数据相加</td><td>STR</td><td>存储数据</td></tr><tr><td>SUB</td><td>数据相减</td><td>LDM</td><td>多次加载</td></tr><tr><td>MUL</td><td>数据相乘</td><td>STM</td><td>多次存储</td></tr><tr><td>LSL</td><td>逻辑左移</td><td>PUSH</td><td>压栈</td></tr><tr><td>LSR</td><td>逻辑右移</td><td>POP</td><td>出栈</td></tr><tr><td>ASR</td><td>算术右移</td><td>B</td><td>分支跳转</td></tr><tr><td>ROR</td><td>循环右移</td><td>BL</td><td>链接分支跳转</td></tr><tr><td>CMP</td><td>比较操作</td><td>BX</td><td>分支跳转切换</td></tr><tr><td>AND</td><td>比特位与</td><td>BLX</td><td>链接分支跳转切换</td></tr><tr><td>ORR</td><td>比特位或</td><td>SWI/SVC</td><td>系统调用</td></tr></tbody></table><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><ul><li><a href="https://www.cnblogs.com/hilfloser/p/10516610.html">ARM汇编基础 - hilfloser - 博客园 (cnblogs.com)</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android逆向入门(3)</title>
    <link href="/posts/bc0e5805.html"/>
    <url>/posts/bc0e5805.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>吾爱破解教程入门–hook专题</p></blockquote><h1 id="xposed"><a class="markdownIt-Anchor" href="#xposed"></a> Xposed</h1><p>配置教程 -&gt; <a href="https://www.52pojie.cn/thread-1740944-1-1.html">《安卓逆向这档事》七、Sorry，会Hook真的可以为所欲为-Xposed快速上手(上)模块编… - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><h2 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2><p>用自己实现的<strong>app_process</strong>替换掉了系统原本提供的<strong>app_process</strong>，加载一个额外的jar包，入口从原来的： <strong>com.android.internal.osZygoteInit.main()被替换成了： de.robv.android.xposed.XposedBridge.main()</strong>，创建的Zygote进程就变成Hook的Zygote进程了，从而完成对zygote进程及其创建的Dalvik/ART虚拟机的劫持(zytoge注入)</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202402260801817.png" alt="image-20240226080124647" /></p><h2 id="常用api"><a class="markdownIt-Anchor" href="#常用api"></a> 常用API</h2><p>​这里通过 Android Studio的 Logcat 打印日志来对程序的方法进行分析。一个空白的文档，可以在这个上面进行开发 -&gt; <a href="https://github.com/lz-ang/XposedSample">GitHub - lz-ang/XposedSample: Xposed框架在项目中使用</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hook</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IXposedHookLoadPackage</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleLoadPackage</span><span class="hljs-params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-keyword">if</span>(!loadPackageParam.packageName.equals(<span class="hljs-string">&quot;com.zj.wuaipojie&quot;</span>))&#123; <span class="hljs-comment">// 过滤出目标的程序的包</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//之后的hook代码就是在这个框架中填写</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hook-变量"><a class="markdownIt-Anchor" href="#hook-变量"></a> hook 变量</h3><p>静态变量与实例变量：</p><ul><li>静态变量(static)：类被初始化，同步进行初始化</li><li>非静态变量：类需要被实例化(产生一个对象的时候)，进行初始化</li></ul><h4 id="静态变量"><a class="markdownIt-Anchor" href="#静态变量"></a> 静态变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">&quot;类名&quot;</span>, loadPackageParam.classLoader);  <br>XposedHelpers.setStaticObjectField(clazz, <span class="hljs-string">&quot;变量名&quot;</span>, <span class="hljs-string">&quot;String使用Object&quot;</span>);<br>Log.e(<span class="hljs-string">&quot;tag&quot;</span>, XposedHelpers.getStaticObjectField(clazz, <span class="hljs-string">&quot;变量名&quot;</span>).toString());<br><span class="hljs-comment">// 这里hook后打印可以看出效果，按时其他方法调用这个变量可能在hook之前，存在没有修改的情况</span><br></code></pre></td></tr></table></figure><h4 id="实例变量"><a class="markdownIt-Anchor" href="#实例变量"></a> 实例变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">&quot;类名&quot;</span>, classLoader);  <br>XposedBridge.hookAllConstructors(clazz, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<span class="hljs-comment">// hook所有构造函数(初始化变量)</span><br>     <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-built_in">super</span>.afterHookedMethod(param);  <br>        <span class="hljs-comment">//param.thisObject获取当前所属的对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">ob</span> <span class="hljs-operator">=</span> param.thisObject;  <br>        XposedHelpers.setIntField(ob,<span class="hljs-string">&quot;变量名&quot;</span>,<span class="hljs-number">9999</span>);  <br>    &#125;  <br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="hook-构造函数"><a class="markdownIt-Anchor" href="#hook-构造函数"></a> hook 构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookConstructor(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>, classLoader, String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<span class="hljs-comment">//这是有参构造函数，无参的把String.class的参数去掉即可</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="hook-普通方法"><a class="markdownIt-Anchor" href="#hook-普通方法"></a> hook 普通方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<span class="hljs-string">&quot;类名&quot;</span>, loadPackageParam.classLoader, <span class="hljs-string">&quot;方法名&quot;</span>, String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<span class="hljs-comment">//依次为hook的类名，类加载器，方法名，参数，jar包引用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<span class="hljs-comment">//主要用来读取和修改参数</span><br>        <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br>        Log.e(<span class="hljs-string">&quot;tag&quot;</span>, param.args[<span class="hljs-number">0</span>].toString());<span class="hljs-comment">//eroor log，更显著</span><br>        <span class="hljs-comment">//XposedBridge.log(param.args[0].toString());// 另一种log的方法</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">arg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;new value&quot;</span>;<br>        param.args[<span class="hljs-number">0</span>] = arg;<span class="hljs-comment">//修改参数</span><br>        Log.e(<span class="hljs-string">&quot;tag&quot;</span>,param.args[<span class="hljs-number">0</span>].toString());<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<span class="hljs-comment">//主要用来修改返回值以及查看修改是否生效</span><br>        <span class="hljs-built_in">super</span>.afterHookedMethod(param);<br>        Log.e(<span class="hljs-string">&quot;tag&quot;</span>,param.getResult().toString());<br>        param.setResult(<span class="hljs-string">&quot;tag&quot;</span>);<span class="hljs-comment">//修改返回值</span><br>        Log.e(<span class="hljs-string">&quot;tag&quot;</span>,param.getResult().toString());<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="hook-复杂自定义参数"><a class="markdownIt-Anchor" href="#hook-复杂自定义参数"></a> hook 复杂&amp;自定义参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> loadPackageParam.classLoader.loadClass(<span class="hljs-string">&quot;类名&quot;</span>);<br>XposedBridge.hookAllMethods(clazz, <span class="hljs-string">&quot;方法名&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-built_in">super</span>.beforeHookedMethod(param);<br><span class="hljs-comment">// 同上修改</span><br>        &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="hook-替换函数"><a class="markdownIt-Anchor" href="#hook-替换函数"></a> hook 替换函数</h3><p>​这里指替换函数运行，也即hook之前的函数不再运行，而只运行hook之后的函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> classLoader.loadClass(<span class="hljs-string">&quot;类名&quot;</span>)<br>XposedBridge.hookAllMethods(clazz, <span class="hljs-string">&quot;方法名&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodReplacement</span>() &#123;  <br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">replaceHookedMethod</span><span class="hljs-params">(MethodHookParam methodHookParam)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;  <br>    &#125;  <br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="hook-加固通杀"><a class="markdownIt-Anchor" href="#hook-加固通杀"></a> hook 加固通杀</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(Application.class, <span class="hljs-string">&quot;attach&quot;</span>, Context.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (Context) param.args[<span class="hljs-number">0</span>];  <br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> context.getClassLoader();<br>        <span class="hljs-comment">//hook逻辑在这里面写。可以将 hook 普通函数的 Hook 方法填在这里</span><br>    &#125;  <br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="hook-multidex方法"><a class="markdownIt-Anchor" href="#hook-multidex方法"></a> hook multiDex方法</h3><p>​一个文件中存在多个dex的情况，一个dex中最多包含65535个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(Application.class, <span class="hljs-string">&quot;attach&quot;</span>, Context.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        ClassLoader cl= ((Context)param.args[<span class="hljs-number">0</span>]).getClassLoader();  <br>        Class&lt;?&gt; hookclass=<span class="hljs-literal">null</span>;  <br>        <span class="hljs-keyword">try</span> &#123;  <span class="hljs-comment">//这里是根据classLoader来寻找指定类名</span><br>            hookclass=cl.loadClass(<span class="hljs-string">&quot;类名&quot;</span>);  <br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;  <br>            Log.e(<span class="hljs-string">&quot;zj2595&quot;</span>,<span class="hljs-string">&quot;未找到类&quot;</span>,e);  <br>            <span class="hljs-keyword">return</span>;        <br>        &#125;  <br>        XposedHelpers.findAndHookMethod(hookclass, <span class="hljs-string">&quot;方法名&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>            <span class="hljs-meta">@Override</span>  <br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>            &#125;        <br>        &#125;);  <br>    &#125;  <br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="主动调用"><a class="markdownIt-Anchor" href="#主动调用"></a> 主动调用</h3><p>​通过hook主动调用程序的方法</p><h4 id="静态方法"><a class="markdownIt-Anchor" href="#静态方法"></a> 静态方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">&quot;类名&quot;</span>, loadPackageParam.classLoader);<br>XposedHelpers.callStaticMethod(clazz, <span class="hljs-string">&quot;方法名&quot;</span>, 参数(非必须));<br></code></pre></td></tr></table></figure><h4 id="实例方法"><a class="markdownIt-Anchor" href="#实例方法"></a> 实例方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">&quot;类名&quot;</span>, loadPackageParam.classLoader);<br>XposedHelpers.callMethod(clazz.newInstance(), <span class="hljs-string">&quot;方法名&quot;</span>, 参数(非必须));<br></code></pre></td></tr></table></figure><h3 id="hook-内部类"><a class="markdownIt-Anchor" href="#hook-内部类"></a> hook 内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo$InnerClass&quot;</span>, loadPackageParam.classLoader, <span class="hljs-string">&quot;方法名&quot;</span>, String.class,  <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123; <span class="hljs-comment">// 通过 $ 拼接上内部类名</span><br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-built_in">super</span>.beforeHookedMethod(param); <br>    &#125;  <br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="反射大法"><a class="markdownIt-Anchor" href="#反射大法"></a> 反射大法</h3><p>​我认为反射就是通过底层的类影响上层的类，这里就是在内部类中主动调用上层的一个实例方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>, lpparam.classLoader);<br>XposedHelpers.findAndHookMethod(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo$InnerClass&quot;</span>, lpparam.classLoader, <span class="hljs-string">&quot;innerFunc&quot;</span>, String.class,  <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-built_in">super</span>.beforeHookedMethod(param);  <br>        <span class="hljs-comment">// 第一步找到类</span><br>        <span class="hljs-comment">// 找到方法，如果是私有方法就要setAccessible设置访问权限</span><br>        <span class="hljs-comment">// invoke主动调用或者set修改值(变量)</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">democlass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>, <span class="hljs-literal">false</span>, loadPackageParam.classLoader);  <br>        <span class="hljs-type">Method</span> <span class="hljs-variable">demomethod</span> <span class="hljs-operator">=</span> democlass.getDeclaredMethod(<span class="hljs-string">&quot;refl&quot;</span>);  <br>        demomethod.setAccessible(<span class="hljs-literal">true</span>);  <br>        demomethod.invoke(clazz.newInstance()); <span class="hljs-comment">//实例化 </span><br>    &#125;  <br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="遍历所有类下所有方法"><a class="markdownIt-Anchor" href="#遍历所有类下所有方法"></a> 遍历所有类下所有方法</h3><p>​通常用来查看堆栈调用关系，从而理清楚调用逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(ClassLoader.class, <span class="hljs-string">&quot;loadClass&quot;</span>, String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-built_in">super</span>.afterHookedMethod(param);  <br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> (Class) param.getResult();  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">clazzName</span> <span class="hljs-operator">=</span> clazz.getName();  <br>        <span class="hljs-comment">//排除非包名的类  </span><br>        <span class="hljs-keyword">if</span>(clazzName.contains(<span class="hljs-string">&quot;com.zj.wuaipojie&quot;</span>))&#123;  <br>            Method[] mds = clazz.getDeclaredMethods();  <br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i&lt;mds.length;i++)&#123;  <br>                <span class="hljs-keyword">final</span> <span class="hljs-type">Method</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> mds[i];  <br>                <span class="hljs-type">int</span> <span class="hljs-variable">mod</span> <span class="hljs-operator">=</span> mds[i].getModifiers();  <br>                <span class="hljs-comment">//去除抽象、native、接口方法  </span><br>                <span class="hljs-keyword">if</span>(!Modifier.isAbstract(mod)  <br>                    &amp;&amp; !Modifier.isNative(mod)  <br>                    &amp;&amp;!Modifier.isAbstract(mod))&#123;  <br>                    XposedBridge.hookMethod(mds[i], <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>                        <span class="hljs-meta">@Override</span>  <br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>                            <span class="hljs-built_in">super</span>.beforeHookedMethod(param);  <br>                            Log.d(<span class="hljs-string">&quot;Tag&quot;</span>, md.toString());  <br>                        &#125;  <br>                    &#125;);  <br>                &#125;  <br><br>           &#125;  <br>        &#125;  <br><br>    &#125;  <br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="xposed-妙用"><a class="markdownIt-Anchor" href="#xposed-妙用"></a> Xposed 妙用</h3><h4 id="字符串赋值定位"><a class="markdownIt-Anchor" href="#字符串赋值定位"></a> 字符串赋值定位</h4><p>​常用于查看某一个文本是怎么来的，可以定位到关键的方法处</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<span class="hljs-string">&quot;android.widget.TextView&quot;</span>, loadPackageParam.classLoader, <span class="hljs-string">&quot;setText&quot;</span>, CharSequence.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-built_in">super</span>.beforeHookedMethod(param);  <br>        Log.d(<span class="hljs-string">&quot;zj2595&quot;</span>,param.args[<span class="hljs-number">0</span>].toString());  <br>                <span class="hljs-keyword">if</span>(param.args[<span class="hljs-number">0</span>].equals(<span class="hljs-string">&quot;wuaipojie&quot;</span>))&#123;<span class="hljs-comment">//这里设置Text文本  </span><br>                    printStackTrace();  <br>                &#125;<br>    &#125;  <br>&#125;);<br><span class="hljs-comment">// printStackTrace()与handleLoadPackage(……)同级</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printStackTrace</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-type">Throwable</span> <span class="hljs-variable">ex</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>();  <br>    StackTraceElement[] stackElements = ex.getStackTrace();  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; stackElements.length; i++) &#123;  <br>        <span class="hljs-type">StackTraceElement</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> stackElements[i];  <br>        Log.d(<span class="hljs-string">&quot;Tag&quot;</span>,<span class="hljs-string">&quot;at &quot;</span> + element.getClassName() + <span class="hljs-string">&quot;.&quot;</span> + element.getMethodName() + <span class="hljs-string">&quot;(&quot;</span> + element.getFileName() + <span class="hljs-string">&quot;:&quot;</span> + element.getLineNumber() + <span class="hljs-string">&quot;)&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="点击事件的监听"><a class="markdownIt-Anchor" href="#点击事件的监听"></a> 点击事件的监听</h4><p>​点击按钮，查看触发了什么方法来定位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> XposedHelpers.findClass(<span class="hljs-string">&quot;android.view.View&quot;</span>, loadPackageParam.classLoader);<br>XposedBridge.hookAllMethods(clazz, <span class="hljs-string">&quot;performClick&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;<span class="hljs-comment">//performClick是通用的</span><br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-built_in">super</span>.afterHookedMethod(param);  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">listenerInfoObject</span> <span class="hljs-operator">=</span> XposedHelpers.getObjectField(param.thisObject, <span class="hljs-string">&quot;mListenerInfo&quot;</span>);  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">mOnClickListenerObject</span> <span class="hljs-operator">=</span> XposedHelpers.getObjectField(listenerInfoObject, <span class="hljs-string">&quot;mOnClickListener&quot;</span>);  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">callbackType</span> <span class="hljs-operator">=</span> mOnClickListenerObject.getClass().getName();  <br>        Log.d(<span class="hljs-string">&quot;Tag&quot;</span>,callbackType);  <br>    &#125;  <br>&#125;);<br><br></code></pre></td></tr></table></figure><h4 id="改写布局"><a class="markdownIt-Anchor" href="#改写布局"></a> 改写布局</h4><p>​使用demo第6关的代码举例，这里通过定位资源来隐藏，可以实现对于广告的隐藏效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">XposedHelpers.findAndHookMethod(<span class="hljs-string">&quot;com.zj.wuaipojie.ui.ChallengeSixth&quot;</span>, lpparam.classLoader,  <br>        <span class="hljs-string">&quot;onCreate&quot;</span>, Bundle.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XC_MethodHook</span>() &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHookedMethod</span><span class="hljs-params">(MethodHookParam param)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>        <span class="hljs-built_in">super</span>.afterHookedMethod(param);  <br>        <span class="hljs-type">View</span> <span class="hljs-variable">img</span> <span class="hljs-operator">=</span> (View)XposedHelpers.callMethod(param.thisObject,  <br>                <span class="hljs-string">&quot;findViewById&quot;</span>, <span class="hljs-number">0x7f0800de</span>);  <br>        img.setVisibility(View.GONE);  <br><br>    &#125;  <br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="frida"><a class="markdownIt-Anchor" href="#frida"></a> Frida</h1><h2 id="动态二进制插桩"><a class="markdownIt-Anchor" href="#动态二进制插桩"></a> 动态二进制插桩</h2><h3 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h3><ul><li>动态二进制插桩(Dynamic Binary Instrumentation，DBI)是一种在程序运行时动态地修改二进制代码的技术。它通过在程序运行时注入代码，实现对程序的监控、分析和修改。DBI 可以用于各种用途，如调试、性能分析、安全检测、代码覆盖率测试等。</li><li>DBI 技术通常需要借助一些工具来实现，例如 Pin、DynamoRIO、Frida 等。这些工具可以通过动态插入代码来监控程序运行时的行为，例如记录函数调用、内存读写、系统调用等操作。通过分析这些信息，可以帮助开发人员调试程序、优化性能，也可以帮助安全研究人员检测漏洞、防御攻击。</li><li>DBI 技术的优点在于它可以不需要源代码就能够对程序进行修改和分析，而且可以对程序的任何部分进行监控，包括操作系统调用、库函数调用等。但是，由于在程序运行时插入代码会带来一定的性能损失，因此需要权衡性能和功能的需求。</li></ul><h3 id="两种模式"><a class="markdownIt-Anchor" href="#两种模式"></a> 两种模式</h3><p>二进制插桩主要可以分为两种主要模式：attach模式和spawn模式</p><ul><li>attach模式是在程序已经启动运行的情况下，通过DBI工具将监控代码注入到进程中，从而实现对该进程的监控和修改。这种模式适用于已经运行的进程，可以在不重启进程的情况下进行调试和分析。但是需要注意的是，attach模式可能会影响程序的性能，因为需要在进程运行时注入代码。</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202402280848070.png" alt="image-20240228084813984" /></p><ul><li>spawn模式是在启动进程的时候，通过DBI工具将监控代码注入到进程中，从而实现对该进程的监控和修改。这种模式适用于需要对进程进行全面监控的情况，可以在进程启动时就开始监控，避免了attach模式可能带来的性能影响。但是需要注意的是，spawn模式需要对启动命令进行修改，可能会影响到进程的启动方式和参数。</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202402280848022.png" alt="image-20240228084823958" /></p><table><thead><tr><th style="text-align:left">注入模式</th><th style="text-align:left">描述</th><th style="text-align:left">命令或参数</th><th style="text-align:left">优点</th><th style="text-align:left">主要用途</th></tr></thead><tbody><tr><td style="text-align:left">Spawn模式</td><td style="text-align:left">将启动App的权利交由Frida来控制，即使目标App已经启动，在使用Frida注入程序时还是会重新启动App</td><td style="text-align:left">在CLI模式中，Frida通过加上 -f 参数指定包名以spawn模式操作App</td><td style="text-align:left">适合于需要在App启动时即进行注入的场景，可以在App启动时即捕获其行为</td><td style="text-align:left">当需要监控App从启动开始的所有行为时使用</td></tr><tr><td style="text-align:left">Attach模式</td><td style="text-align:left">在目标App已经启动的情况下，Frida通过ptrace注入程序从而执行Hook的操作</td><td style="text-align:left">在CLI模式中，如果不添加 -f 参数，则默认会通过attach模式注入App</td><td style="text-align:left">适合于已经运行的App，不会重新启动App，对用户体验影响较小</td><td style="text-align:left">在App已经启动，或者我们只关心特定时刻或特定功能的行为时使用</td></tr></tbody></table><h3 id="三种执行模式"><a class="markdownIt-Anchor" href="#三种执行模式"></a> 三种执行模式</h3><ol><li><p>即时模式(Just-In-Time Mode)：即时模式是指在测试时，原始的二进制或可执行文件没有被修改或执行，而是将修改部分的二进制代码生成文件副本存储在新的内存区域中，在测试时仅执行修改部分的目标代码。这种方式可以减少对原始代码的侵入性，降低测试对系统性能的影响，同时也能够快速地进行测试。</p></li><li><p>解释模式(Interpretation Mode)：解释模式是指在测试时，目标代码被视为数据，测试人员插入的测试代码作为目标代码指令的解释语言，每当执行一条目标代码指令，程序就会在测试代码中查找并执行相应的替代指令，测试通过替代指令的执行信息就可以获取程序的运行信息。这种方式可以在不修改目标代码的情况下进行测试，但是对测试人员的技术水平要求比较高，同时也会对系统性能产生较大的影响。</p></li><li><p>探测模式(Probe Mode)：探测模式是指使用新指令覆盖旧指令进行测试，这种模式在某些体系结构(如x86)中比较好用。在探测模式中，测试人员可以在目标代码中插入监控代码，当目标代码执行到监控代码时，就会触发相应的操作，例如记录日志、修改寄存器等。探测模式可以在不修改目标代码的情况下进行测试，但是需要对目标代码进行覆盖，可能会对系统性能产生一定的影响。</p></li></ol><h2 id="原理-2"><a class="markdownIt-Anchor" href="#原理-2"></a> 原理</h2><p>​frida注入的原理就是找到目标进程，使用ptrace来跟踪目标进程，并获取mmap，dlpoen，dlsym等函数库的偏移。然后，它利用获取到的mmap在目标进程中申请一段内存空间。并在这段内存空间中找到并启动存放frida-agent-32/64.so的空间。最后，由agent执行各种操作。</p><table><thead><tr><th style="text-align:left">组件名称</th><th style="text-align:left">功能描述</th></tr></thead><tbody><tr><td style="text-align:left">frida-gum</td><td style="text-align:left">提供了inline-hook的核心实现，还包含了代码跟踪模块Stalker，用于内存访问监控的MemoryAccessMonitor，以及符号查找、栈回溯实现、内存扫描、动态代码生成和重定位等功能</td></tr><tr><td style="text-align:left">frida-core</td><td style="text-align:left">fridahook的核心，具有进程注入、进程间通信、会话管理、脚本生命周期管理等功能，屏蔽部分底层的实现细节并给最终用户提供开箱即用的操作接口。包含了frida-server、frida-gadget、frida-agent、frida-helper、frida-inject等关键模块和组件，以及之间的互相通信底座</td></tr><tr><td style="text-align:left">frida-gadget</td><td style="text-align:left">本身是一个动态库，可以通过重打包修改动态库的依赖或者修改smali代码去实现向三方应用注入gadget，从而实现Frida的持久化或免root</td></tr><tr><td style="text-align:left">frida-server</td><td style="text-align:left">本质上是一个二进制文件，类似于前面学习到的android_server，需要在目标设备上运行并转发端口，在Frida hook中起到关键作用</td></tr></tbody></table><h2 id="基础语法"><a class="markdownIt-Anchor" href="#基础语法"></a> 基础语法</h2><h3 id="java层"><a class="markdownIt-Anchor" href="#java层"></a> java层</h3><table><thead><tr><th style="text-align:left">API名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>Java.use(className)</code></td><td style="text-align:left">获取指定的Java类并使其在JavaScript代码中可用。</td></tr><tr><td style="text-align:left"><code>Java.perform(callback)</code></td><td style="text-align:left">确保回调函数在Java的主线程上执行。</td></tr><tr><td style="text-align:left"><code>Java.choose(className, callbacks)</code></td><td style="text-align:left">枚举指定类的所有实例。</td></tr><tr><td style="text-align:left"><code>Java.cast(obj, cls)</code></td><td style="text-align:left">将一个Java对象转换成另一个Java类的实例。</td></tr><tr><td style="text-align:left"><code>Java.enumerateLoadedClasses(callbacks)</code></td><td style="text-align:left">枚举进程中已经加载的所有Java类。</td></tr><tr><td style="text-align:left"><code>Java.enumerateClassLoaders(callbacks)</code></td><td style="text-align:left">枚举进程中存在的所有Java类加载器。</td></tr><tr><td style="text-align:left"><code>Java.enumerateMethods(targetClassMethod)</code></td><td style="text-align:left">枚举指定类的所有方法。</td></tr></tbody></table><h3 id="native层"><a class="markdownIt-Anchor" href="#native层"></a> native层</h3><p>​<code>Process</code> 对象代表当前被Hook的进程，能获取进程的信息，枚举模块，枚举范围等</p><table><thead><tr><th style="text-align:left">API</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>Process.id</code></td><td style="text-align:left">返回附加目标进程的 <code>PID</code></td></tr><tr><td style="text-align:left"><code>Process.isDebuggerAttached()</code></td><td style="text-align:left">检测当前是否对目标程序已经附加</td></tr><tr><td style="text-align:left"><code>Process.enumerateModules()</code></td><td style="text-align:left">枚举当前加载的模块，返回模块对象的数组</td></tr><tr><td style="text-align:left"><code>Process.enumerateThreads()</code></td><td style="text-align:left">枚举当前所有的线程，返回包含 <code>id</code>, <code>state</code>, <code>context</code> 等属性的对象数组</td></tr></tbody></table><p>​<code>Module</code> 对象代表一个加载到进程的模块(例如，在 Windows 上的 DLL，或在 Linux/Android 上的 .so 文件),能查询模块的信息，如模块的基址、名称、导入/导出的函数等</p><table><thead><tr><th style="text-align:left">API</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>Module.load()</code></td><td style="text-align:left">加载指定so文件，返回一个Module对象</td></tr><tr><td style="text-align:left"><code>enumerateImports()</code></td><td style="text-align:left">枚举所有Import库函数，返回Module数组对象</td></tr><tr><td style="text-align:left"><code>enumerateExports()</code></td><td style="text-align:left">枚举所有Export库函数，返回Module数组对象</td></tr><tr><td style="text-align:left"><code>enumerateSymbols()</code></td><td style="text-align:left">枚举所有Symbol库函数，返回Module数组对象</td></tr><tr><td style="text-align:left"><code>Module.findExportByName(exportName)、Module.getExportByName(exportName)</code></td><td style="text-align:left">寻找指定so中export库中的函数地址</td></tr><tr><td style="text-align:left"><code>Module.findBaseAddress(name)、Module.getBaseAddress(name)</code></td><td style="text-align:left">返回so的基地址</td></tr></tbody></table><p>​<code>Memory</code>是一个工具对象，提供直接读取和修改进程内存的功能，能够读取特定地址的值、写入数据、分配内存等</p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left"><code>Memory.copy()</code></td><td style="text-align:left">复制内存</td></tr><tr><td style="text-align:left"><code>Memory.scan()</code></td><td style="text-align:left">搜索内存中特定模式的数据</td></tr><tr><td style="text-align:left"><code>Memory.scanSync()</code></td><td style="text-align:left">同上，但返回多个匹配的数据</td></tr><tr><td style="text-align:left"><code>Memory.alloc()</code></td><td style="text-align:left">在目标进程的堆上申请指定大小的内存，返回一个<code>NativePointer</code></td></tr><tr><td style="text-align:left"><code>Memory.writeByteArray()</code></td><td style="text-align:left">将字节数组写入一个指定内存</td></tr><tr><td style="text-align:left"><code>Memory.readByteArray</code></td><td style="text-align:left">读取内存</td></tr></tbody></table><h2 id="java层常用api"><a class="markdownIt-Anchor" href="#java层常用api"></a> java层常用API</h2><p>​下面是 hook 的基本框架，下面对于方法的hook都是在这个上面进行添加的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">hookTest1</span>();<br>    &#125;);<br>&#125;<br><span class="hljs-title function_">setImmediate</span>(main);<br></code></pre></td></tr></table></figure><h3 id="hook-普通方法-2"><a class="markdownIt-Anchor" href="#hook-普通方法-2"></a> hook 普通方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//定义一个名为hookTest1的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//获取一个名为&quot;类名&quot;的Java类，并将其实例赋值给JavaScript变量utils</span><br>    <span class="hljs-keyword">var</span> utils = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;类名&quot;</span>);<br>    <span class="hljs-comment">//修改&quot;类名&quot;的&quot;method&quot;方法的实现。这个新的实现会接收两个参数（a和b）</span><br>    utils.<span class="hljs-property">method</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>)&#123;<br>        <span class="hljs-comment">//将参数a和b的值改为123和456。</span><br>        a = <span class="hljs-number">123</span>;<br>        b = <span class="hljs-number">456</span>;<br>        <span class="hljs-comment">//调用修改过的&quot;method&quot;方法，并将返回值存储在`retval`变量中</span><br>        <span class="hljs-keyword">var</span> retval = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">method</span>(a, b);<br>        <span class="hljs-comment">//在控制台上打印参数a，b的值以及&quot;method&quot;方法的返回值</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b, retval);<br>        <span class="hljs-comment">//返回&quot;method&quot;方法的返回值</span><br>        <span class="hljs-keyword">return</span> retval;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hook-重载方法"><a class="markdownIt-Anchor" href="#hook-重载方法"></a> hook 重载方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// .overload()</span><br><span class="hljs-comment">// .overload(&#x27;自定义参数&#x27;)</span><br><span class="hljs-comment">// .overload(&#x27;int&#x27;)</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest2</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> utils = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>);<br>    <span class="hljs-comment">//overload定义重载函数，根据函数的参数类型填，下面的Inner就是上面的method</span><br>    utils.<span class="hljs-property">Inner</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;com.zj.wuaipojie.Demo$Animal&#x27;</span>,<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">a，b</span>)&#123;<br>        b = <span class="hljs-string">&quot;aaaaaaaaaa&quot;</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title class_">Inner</span>(a,b);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hook-构造函数-2"><a class="markdownIt-Anchor" href="#hook-构造函数-2"></a> hook 构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest3</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> utils = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>);<br>    <span class="hljs-comment">//修改类的构造函数的实现，$init表示构造函数</span><br>    utils.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">str</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br>        str = <span class="hljs-string">&quot;52&quot;</span>;<br>        <span class="hljs-variable language_">this</span>.$init(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hook-字段"><a class="markdownIt-Anchor" href="#hook-字段"></a> hook 字段</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest5</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//静态字段的修改</span><br>        <span class="hljs-keyword">var</span> utils = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>);<br>        <span class="hljs-comment">//修改类的静态字段&quot;flag&quot;的值</span><br>        utils.<span class="hljs-property">staticField</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;我是被修改的静态变量&quot;</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(utils.<span class="hljs-property">staticField</span>.<span class="hljs-property">value</span>);<br>        <br>        <span class="hljs-comment">//非静态字段的修改</span><br>        <span class="hljs-comment">//使用`Java.choose()`枚举类的所有实例</span><br>        <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">choose</span>(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>, &#123;<br>            <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>)&#123;<br>                <span class="hljs-comment">//修改实例的非静态字段&quot;_privateInt&quot;的值为&quot;123&quot;，并修改非静态字段&quot;privateInt&quot;的值为99.</span><br>                obj.<span class="hljs-property">_privateInt</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;123&quot;</span>; <span class="hljs-comment">//字段名与函数名相同 前面加个下划线</span><br>                obj.<span class="hljs-property">privateInt</span>.<span class="hljs-property">value</span> = <span class="hljs-number">99</span>;<br>            &#125;,<br>            <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hook-内部类-2"><a class="markdownIt-Anchor" href="#hook-内部类-2"></a> hook 内部类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest6</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//内部类</span><br>        <span class="hljs-keyword">var</span> innerClass = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo$innerClass&quot;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(innerClass);<br>        innerClass.<span class="hljs-property">$init</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;eeeeeeee&quot;</span>);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="主动调用-2"><a class="markdownIt-Anchor" href="#主动调用-2"></a> 主动调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 静态方法</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">ClassName</span>=<span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>); <br><span class="hljs-title class_">ClassName</span>.<span class="hljs-title function_">privateFunc</span>(<span class="hljs-string">&quot;传参&quot;</span>);<br><br><br><span class="hljs-comment">// 非静态方法</span><br><span class="hljs-keyword">var</span> ret = <span class="hljs-literal">null</span>;<br><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">choose</span>(<span class="hljs-string">&quot;com.zj.wuaipojie.Demo&quot;</span>,&#123;    <span class="hljs-comment">//要hook的类</span><br>        <span class="hljs-attr">onMatch</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">instance</span>)&#123;<br>            ret=instance.<span class="hljs-title function_">privateFunc</span>(<span class="hljs-string">&quot;aaaaaaa&quot;</span>); <span class="hljs-comment">//要hook的方法(aaaaaaa)</span><br>        &#125;,<br>        <span class="hljs-attr">onComplete</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-comment">//console.log(&quot;result: &quot; + ret);</span><br>        &#125;<br>    &#125;);<br>&#125;)<br><span class="hljs-comment">//return ret;</span><br></code></pre></td></tr></table></figure><h3 id="inline-hook"><a class="markdownIt-Anchor" href="#inline-hook"></a> inline hook</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> inline_B34 = base.<span class="hljs-title function_">add</span>(<span class="hljs-number">0xB34</span>).<span class="hljs-title function_">add</span>(<span class="hljs-number">0x0</span>)# 根据so文件获取固定地址<br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(inline_B34,&#123;<br>        <span class="hljs-attr">onEnter</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>)&#123;<br>        <span class="hljs-comment">// 这里通过this.context.寄存器得到寄存器的值</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;called enter inline_B34  = &quot;</span> +<span class="hljs-title function_">hexdump</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-property">x0</span>))<br>        &#125;,<br>        <span class="hljs-attr">onLeave</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">retval</span>)&#123;<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="so层常用api"><a class="markdownIt-Anchor" href="#so层常用api"></a> so层常用API</h2><h3 id="基址获取方法"><a class="markdownIt-Anchor" href="#基址获取方法"></a> 基址获取方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> moduleAddr1 = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>).<span class="hljs-property">base</span>;  <br><span class="hljs-keyword">var</span> moduleAddr2 = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">getModuleByName</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>).<span class="hljs-property">base</span>;  <br><span class="hljs-keyword">var</span> moduleAddr3 = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="枚举导入导出表"><a class="markdownIt-Anchor" href="#枚举导入导出表"></a> 枚举导入导出表</h3><ol><li><strong>导出表（Export Table）</strong>：列出了库中可以被其他程序或库访问的所有公开函数和符号的名称。</li><li><strong>导入表（Import Table）</strong>：列出了库需要从其他库中调用的函数和符号的名称。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//打印导入表</span><br>        <span class="hljs-keyword">var</span> imports = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">enumerateImports</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>; i &lt; imports.<span class="hljs-property">length</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(imports[i].<span class="hljs-property">name</span> == <span class="hljs-string">&quot;vip&quot;</span>)&#123;<span class="hljs-comment">//导入表包含关键字</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(imports[i])); <span class="hljs-comment">//通过JSON.stringify打印object数据</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(imports[i].<span class="hljs-property">address</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//打印导出表</span><br>        <span class="hljs-keyword">var</span> <span class="hljs-built_in">exports</span> = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">enumerateExports</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">exports</span>.<span class="hljs-property">length</span>;i++)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-built_in">exports</span>[i]));<br>        &#125;<br><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hook为导出函数"><a class="markdownIt-Anchor" href="#hook为导出函数"></a> hook为导出函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest6</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//根据导出函数名打印基址</span><br>        <span class="hljs-keyword">var</span> soAddr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(soAddr);<br>        <span class="hljs-keyword">var</span> funcaddr = soAddr.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x1071C</span>);  <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(funcaddr);<br>        <span class="hljs-keyword">if</span>(funcaddr != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(funcaddr,&#123;<br>                <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>)&#123;  <span class="hljs-comment">//args参数</span><br><br>                &#125;,<br>                <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">retval</span>)&#123;  <span class="hljs-comment">//retval返回值</span><br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(retval.<span class="hljs-title function_">toInt32</span>());<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>​这里函数地址有所不同</p><ol><li>安卓里一般32 位的 so 中都是 <code>thumb</code> 指令，64 位的 so 中都是 <code>arm</code> 指令</li><li>通过IDA里的opcode bytes来判断，arm 指令为 4 个字节对齐，thumb 指令为 2 个字节对齐</li><li>thumb 指令，函数地址计算方式： so 基址 + 函数在 so 中的偏移 + 1<br />arm 指令，  函数地址计算方式： so 基址 + 函数在 so 中的偏移</li></ol><h3 id="hook-基本方法"><a class="markdownIt-Anchor" href="#hook-基本方法"></a> hook 基本方法</h3><h4 id="参数整型-布尔-char类型"><a class="markdownIt-Anchor" href="#参数整型-布尔-char类型"></a> 参数整型、布尔、char类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest2</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//根据导出函数名打印地址</span><br>    <span class="hljs-keyword">var</span> helloAddr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>,<span class="hljs-string">&quot;Java_com_zj_wuaipojie_util_SecurityUtil_checkVip&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(helloAddr); <br>    <span class="hljs-keyword">if</span>(helloAddr != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">//Interceptor.attach是Frida里的一个拦截器</span><br>        <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(helloAddr,&#123;<br>           <span class="hljs-comment">//onEnter里可以打印和修改参数</span><br>            <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>)&#123;  <span class="hljs-comment">//args传入参数</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args[<span class="hljs-number">0</span>]);  <span class="hljs-comment">//打印第一个参数的值</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-property">x1</span>);  <span class="hljs-comment">// 打印寄存器内容</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args[<span class="hljs-number">1</span>].<span class="hljs-title function_">toInt32</span>()); <span class="hljs-comment">//toInt32()转十进制</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args[<span class="hljs-number">2</span>].<span class="hljs-title function_">readCString</span>()); <span class="hljs-comment">//读取字符串 char类型</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">hexdump</span>(args[<span class="hljs-number">2</span>])); <span class="hljs-comment">//内存dump</span><br>                args[<span class="hljs-number">0</span>] = <span class="hljs-title function_">ptr</span>(<span class="hljs-number">1000</span>); <span class="hljs-comment">//第一个参数修改为整数 1000，先转为指针再赋值</span><br><br>            &#125;,<br>            <span class="hljs-comment">//onLeave里可以打印和修改返回值</span><br>            <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">retval</span>)&#123;  <span class="hljs-comment">//retval返回值</span><br>                retval.<span class="hljs-title function_">replace</span>(<span class="hljs-number">20000</span>);  <span class="hljs-comment">//返回值修改</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(retval);<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;retval&quot;</span>,retval.<span class="hljs-title function_">toInt32</span>());<br>            &#125;<br>        &#125;)<br>    &#125;<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="参数string类型"><a class="markdownIt-Anchor" href="#参数string类型"></a> 参数string类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hookTest2</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//根据导出函数名打印地址</span><br>        <span class="hljs-keyword">var</span> helloAddr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>,<span class="hljs-string">&quot;Java_com_zj_wuaipojie_util_SecurityUtil_vipLevel&quot;</span>);<br>        <span class="hljs-keyword">if</span>(helloAddr != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(helloAddr,&#123;<br>                <span class="hljs-comment">//onEnter里可以打印和修改参数</span><br>                <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>)&#123;  <span class="hljs-comment">//args传入参数</span><br>                    <span class="hljs-comment">// 方法一读取</span><br>                    <span class="hljs-keyword">var</span> jString = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">cast</span>(args[<span class="hljs-number">2</span>], <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>));<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;参数:&quot;</span>, jString.<span class="hljs-title function_">toString</span>());<br>                    <span class="hljs-comment">// 方法二读取</span><br>                    <span class="hljs-keyword">var</span> <span class="hljs-title class_">JNIEnv</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-property">vm</span>.<span class="hljs-title function_">getEnv</span>();<br>                    <span class="hljs-keyword">var</span> originalStrPtr = <span class="hljs-title class_">JNIEnv</span>.<span class="hljs-title function_">getStringUtfChars</span>(args[<span class="hljs-number">2</span>], <span class="hljs-literal">null</span>).<span class="hljs-title function_">readCString</span>();        <br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;参数:&quot;</span>, originalStrPtr);<br>                    <br>                    <span class="hljs-comment">//修改</span><br>                    <span class="hljs-keyword">var</span> newJString = <span class="hljs-title class_">JNIEnv</span>.<span class="hljs-title function_">newStringUtf</span>(modifiedContent);<br>                args[<span class="hljs-number">2</span>] = newJString; <br>                &#125;,<br>                <span class="hljs-comment">//onLeave里可以打印和修改返回值</span><br>                <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">retval</span>)&#123;  <span class="hljs-comment">//retval返回值</span><br>                    <span class="hljs-keyword">var</span> returnedJString = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">cast</span>(retval, <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>));<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;返回值:&quot;</span>, returnedJString.<span class="hljs-title function_">toString</span>());<br>                    <br>                    <span class="hljs-comment">//修改</span><br>                    <span class="hljs-keyword">var</span> <span class="hljs-title class_">JNIEnv</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-property">vm</span>.<span class="hljs-title function_">getEnv</span>();<br>                <span class="hljs-keyword">var</span> modifiedContent = <span class="hljs-string">&quot;无敌&quot;</span>;<br>                <span class="hljs-keyword">var</span> newJString = <span class="hljs-title class_">JNIEnv</span>.<span class="hljs-title function_">newStringUtf</span>(modifiedContent);<br>                retval.<span class="hljs-title function_">replace</span>(newJString);<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hook-dlopen"><a class="markdownIt-Anchor" href="#hook-dlopen"></a> hook dlopen</h3><p>​dlopen主要加载库文件，在so加载之前被调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook_dlopen</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> dlopen = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;dlopen&quot;</span>);<br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(dlopen, &#123;<br>        <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>            <span class="hljs-keyword">var</span> so_name = args[<span class="hljs-number">0</span>].<span class="hljs-title function_">readCString</span>();<br>            <span class="hljs-keyword">if</span> (so_name.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>) != -<span class="hljs-number">1</span>) <span class="hljs-variable language_">this</span>.<span class="hljs-property">call_hook</span> = <span class="hljs-literal">true</span>;<br>        &#125;, <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">call_hook</span>) <span class="hljs-title function_">hookTest2</span>();<span class="hljs-comment">//这是是自己设置的hook函数，上文的hookTest2</span><br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">// 高版本Android系统使用android_dlopen_ext</span><br>    <span class="hljs-keyword">var</span> android_dlopen_ext = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;android_dlopen_ext&quot;</span>);<br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(android_dlopen_ext, &#123;<br>        <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>            <span class="hljs-keyword">var</span> so_name = args[<span class="hljs-number">0</span>].<span class="hljs-title function_">readCString</span>();<br>            <span class="hljs-keyword">if</span> (so_name.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;lib52pojie.so&quot;</span>) != -<span class="hljs-number">1</span>) <span class="hljs-variable language_">this</span>.<span class="hljs-property">call_hook</span> = <span class="hljs-literal">true</span>;<br>        &#125;, <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">call_hook</span>) <span class="hljs-title function_">hookTest2</span>();<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="objection"><a class="markdownIt-Anchor" href="#objection"></a> objection</h1><h2 id="环境配置"><a class="markdownIt-Anchor" href="#环境配置"></a> 环境配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">不再更新了，所以建议python版本为3.8</span><br>pip install objection==1.11.0<br>pip install frida-tools==9.2.4<br></code></pre></td></tr></table></figure><h2 id="基础使用"><a class="markdownIt-Anchor" href="#基础使用"></a> 基础使用</h2><h3 id="命令注入"><a class="markdownIt-Anchor" href="#命令注入"></a> 命令注入</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">objection -g 包名 explore<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">help</span>：不知道当前命令的效果是什么，在当前命令前加<span class="hljs-built_in">help</span>比如：<span class="hljs-built_in">help</span> [<span class="hljs-built_in">command</span>]，回车之后会出现当前命令的解释信息</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">按空格：不知道输入什么就按空格，会有提示出来</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">jobs</span>：可以进行多项hook</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">日志：objection的日志文件生成在 C:\Users\Administrator\.objection</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动前hook，spawn模式</span><br>objection -g 进程名 explore --startup-command &quot;android hooking watch class 路径.类名&quot;<br></code></pre></td></tr></table></figure><h3 id="基础api"><a class="markdownIt-Anchor" href="#基础api"></a> 基础api</h3><ul><li><p><code>memory list modules</code></p><ul><li>查看内存中加载的库</li></ul></li><li><p><code>memory list exports so名称</code></p><ul><li>查看库的导出函数</li></ul></li><li><p><code>android intent launch_activity 类名</code></p><ul><li>启动<code>activity</code>或<code>service</code>(可以用于一些没有验证的activity,在一些简单的ctf中有时候可以出奇效)</li></ul></li><li><p><code>android sslpinning disable</code></p><ul><li>关闭ssl校验</li></ul></li><li><p><code>android root disable</code></p><ul><li>关闭root检测</li></ul></li></ul><h3 id="内存漫游"><a class="markdownIt-Anchor" href="#内存漫游"></a> 内存漫游</h3><p>​这里需要提前打开软件，才能在内存中存在</p><ul><li><code>android heap search instances 类名</code><ul><li>获得 HashCode</li></ul></li><li><code>android hooking list classes</code><ul><li>列举内存中所有的类</li></ul></li><li><code>android hooking search classes 类名</code><ul><li>在内存中所有已加载的类中搜索包含特定关键词的类</li></ul></li><li><code>android hooking list class_methods 类名</code><ul><li>内存漫游类中的所有方法</li></ul></li></ul><h3 id="hook"><a class="markdownIt-Anchor" href="#hook"></a> hook</h3><ul><li><code>android hooking watch class 类名</code><ul><li>hook所有方法</li></ul></li><li><code>android hooking watch class_method 类名.方法名 --dump-args --dump-return --dump-backtrace</code><ul><li>hook方法的参数，返回值，调用栈</li></ul></li><li><code>android hooking watch class_method 类名.$init</code><ul><li>hook构造函数</li></ul></li><li><code>android hooking watch class_method 类名.方法名</code><ul><li>hook方法的所有重载</li></ul></li></ul><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><ul><li><p><a href="https://www.52pojie.cn/thread-1823118-1-1.html">《安卓逆向这档事》十三、是时候学习一下Frida一把梭了(上) - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/Q8ajlXSetPf-5x_ytSDqlQ">https://mp.weixin.qq.com/s/Q8ajlXSetPf-5x_ytSDqlQ</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android实战练习</title>
    <link href="/posts/7b521994.html"/>
    <url>/posts/7b521994.html</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio配置</title>
    <link href="/posts/64c50d77.html"/>
    <url>/posts/64c50d77.html</url>
    
    <content type="html"><![CDATA[<h1 id="gradle下载配置"><a class="markdownIt-Anchor" href="#gradle下载配置"></a> Gradle下载配置</h1><p>​直接更换国内腾讯<a href="https://mirrors.cloud.tencent.com/gradle/">镜像源</a>，打开<code>gradle - wrapper -gradle-weapper.properties</code> 进行更改。然后点击 <code>Sync Now</code> 进行同步。参考-&gt; <a href="https://blog.csdn.net/Systemmax20/article/details/131343623">Android导入项目时Gradle下载速度慢\超时\失败解决方法_导入gradle项目特别慢-CSDN博客</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">#Sun Feb 25 20:22:32 GMT+08:00 2024<br>distributionBase=GRADLE_USER_HOME<br>distributionPath=wrapper/dists<br>distributionUrl=https\://mirrors.cloud.tencent.com/gradle/gradle-8.2-bin.zip # 这里就对应替换为腾讯的镜像地址<br>zipStoreBase=GRADLE_USER_HOME<br>zipStorePath=wrapper/dists<br></code></pre></td></tr></table></figure><p>​但是这样也是很慢，还是得等，有时候还会突然跑到源地址去下载，搞不明白。(后续补充：有时候改了国内源，然后停止加载zip文件，之后重试一下就快很多了)</p><h1 id="生成apk"><a class="markdownIt-Anchor" href="#生成apk"></a> 生成APK</h1><ul><li><code>build -&gt; Generate Signed Bundle or APK</code>：选择APK，然后创建key(注意需要路径完整)，之后再选择release即可</li></ul><h1 id="存储空间管理"><a class="markdownIt-Anchor" href="#存储空间管理"></a> 存储空间管理</h1><ul><li>移动 <code>.gradle</code> 到指定位置<ul><li><a href="https://www.cnblogs.com/tc310/p/16884368.html">将 .gradle文件 从C盘移动到D盘 - tc310 - 博客园 (cnblogs.com)</a>，这里同时还需要相应修改 <code>idea.plugins.path</code> 和 <code>idea.log.path</code></li></ul></li><li>移动 <code>.android</code> 到指定位置<ul><li><a href="https://blog.csdn.net/weixin_42768634/article/details/115142632">https://blog.csdn.net/weixin_42768634/article/details/115142632</a></li></ul></li></ul><h1 id="报错汇总"><a class="markdownIt-Anchor" href="#报错汇总"></a> 报错汇总</h1><ul><li><p>遇到问题 <code>Cannot use connection to Gradle distribution 'https://mirrors.cloud.tencent.com/gradle/gradle-8.2-bin.zip' as it has been stopped.</code></p><ul><li>这里直接关闭项目，再重新打开即可。</li></ul></li><li><p><code>Error running 'app': Default Activity not found</code></p><ul><li>这里修改 configuration，更改 Launch Options -&gt; <code>Launch:nothing</code></li><li><a href="https://blog.csdn.net/qq_36792930/article/details/91041904">android studio怎么运行没有activity的service、broadcastReceiver、cotentProvicer等_androidstudio 如何启动服务?-CSDN博客</a></li></ul></li><li><p>日志不能在 As 中显示</p><ul><li>检查算法助手有没有 hook 对应程序，如果存在，那么它好像开机自启，自动将日志捕获了。关闭应用 hook 就可以显示日志了</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android逆向入门(2)</title>
    <link href="/posts/a5156944.html"/>
    <url>/posts/a5156944.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>吾爱破解教程入门–Apk签名专题</p></blockquote><h1 id="apk-签名"><a class="markdownIt-Anchor" href="#apk-签名"></a> Apk 签名</h1><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><p>​通过对 Apk 进行签名，开发者可以证明对 Apk 的所有权和控制权，可用于安装和更新其应用。而在 Android 设备上的安装 Apk，如果是一个没有被签名的 Apk，则会被拒绝安装。在安装 Apk 的时候，软件包管理器也会验证 Apk 是否已经被正确签名，并且通过签名证书和数据摘要验证是否合法没有被篡改。只有确认安全无篡改的情况下，才允许安装在设备上。</p><p>简单来说，APK 的签名主要作用有两个：</p><ol><li><p>证明 APK 的所有者。</p></li><li><p>允许 Android 市场和设备校验 APK 的正确性。</p></li></ol><p>​Android 目前支持以下四种应用签名方案：</p><ul><li>v1 方案：基于 JAR 签名</li><li>v2 方案：APK 签名方案 v2(在 Android 7.0 中引入)</li><li>v3 方案：APK 签名方案 v3(在 Android 9 中引入)</li><li>v4 方案：APK 签名方案 v4(在 Android 11 中引入)</li></ul><h2 id="v1-签名"><a class="markdownIt-Anchor" href="#v1-签名"></a> V1 签名</h2><p>​V1 签名的机制主要就在 META-INF 目录下的三个文件，MANIFEST.MF，ANDROID.SF，ANDROID.RSA，他们都是 V1 签名的产物。在某些情况下，直接对apk进行v1签名可以绕过apk的签名校验(我认为直接覆盖了之前的签名文件)</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202402272330925.png" alt="image-20240227233002806" /></p><ul><li><code>MANIFEST.MF</code>：摘要文件。程序遍历Apk包中的所有文件(entry)，对非文件夹非签名文件的文件，逐个用SHA1(安全哈希算法)生成摘要信息，再用Base64进行编码</li><li><code>CERT.SF</code>：对摘要的签名文件。对前一步生成的MANIFEST.MF，使用SHA1-RSA算法，用开发者的私钥进行签名。在安装时只能使用公钥才能解密它。解密之后，将它与未加密的摘要信息(MANIFEST.MF文件)进行对比，如果相符，则表明内容没有被异常修改。</li><li><code>CERT.RSA</code>：保存了公钥、所采用的加密算法等信息，实际包含了对CERT.SF文件的数字签名以及签名时所用的platform.x509.pem这个数字证书，可以用 keytool 进行查看</li></ul><h2 id="v2-签名"><a class="markdownIt-Anchor" href="#v2-签名"></a> V2 签名</h2><p>​V2方案会将 APK 文件视为 blob，并对整个文件进行签名检查。对 APK 进行的任何修改(包括对 ZIP 元数据进行的修改)都会使 APK 签名作废。这种形式的 APK 验证不仅速度要快得多，而且能够发现更多种未经授权的修改。</p><h2 id="签名检验"><a class="markdownIt-Anchor" href="#签名检验"></a> 签名检验</h2><p>​不做任何修改，直接签名安装，应用闪退则说明大概率有签名校验。一般来说，普通的签名校验会导致软件的闪退，黑屏，卡启动页等。</p><p>​以下是签名可能使用的一些方法</p><ul><li><code>kill/KillProcess()</code> 可以杀死当前应用活动的进程，这一操作将会把所有该进程内的资源（包括线程全部清理掉）。当然，由于ActivityManager时刻监听着进程，一旦发现进程被非正常Kill，它将会试图去重启这个进程。这就是为什么，有时候当我们试图这样去结束掉应用时，发现它又自动重新启动的原因。</li><li><code>system.exit</code> 杀死了整个进程，这时候活动所占的资源也会被释放。</li><li><code>finish</code> 仅仅针对Activity，当调用finish()时，只是将活动推向后台，并没有立即释放内存，活动的资源并没有被清理</li></ul><h1 id="challenge"><a class="markdownIt-Anchor" href="#challenge"></a> Challenge</h1><h2 id="第五关"><a class="markdownIt-Anchor" href="#第五关"></a> 第五关</h2><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><ul><li><p><a href="https://www.52pojie.cn/thread-1731181-1-1.html">《安卓逆向这档事》六、校验的N次方-签名校验对抗、PM代{过}{滤}理、IO重定向 - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p></li><li><p><a href="https://bbs.kanxue.com/thread-278982.htm">https://bbs.kanxue.com/thread-278982.htm</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android逆向入门(1)</title>
    <link href="/posts/d491e335.html"/>
    <url>/posts/d491e335.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>吾爱破解教程入门–了解android</p></blockquote><h1 id="android系统架构"><a class="markdownIt-Anchor" href="#android系统架构"></a> Android系统架构</h1><p>​从下往上，Android主要有五个层次，依次为Linux内核层、HAL硬件抽象层、系统运行库层、应用框架层、应用层。</p><h2 id="linux内核层"><a class="markdownIt-Anchor" href="#linux内核层"></a> Linux内核层</h2><h2 id="系统运行库层"><a class="markdownIt-Anchor" href="#系统运行库层"></a> 系统运行库层</h2><h1 id="apk-结构"><a class="markdownIt-Anchor" href="#apk-结构"></a> APK 结构</h1><h2 id="总览"><a class="markdownIt-Anchor" href="#总览"></a> 总览</h2><p>APK 的全称为  Android Package，它是使用 zip 算法压缩的文件，使用修改后缀名为 zip 即可被解压缩工具解压缩</p><table><thead><tr><th>文件</th><th>信息</th></tr></thead><tbody><tr><td>assets目录</td><td>存放APK的静态资源文件，比如视频，音频，图片等</td></tr><tr><td>lib目录</td><td>存放的.so文件是c或c++编译的动态链接库文件，它们通常用于混淆等一系列操作，增加逆向的难度。armeabi-v7a基本通用所有android设备，arm64-v8a只适用于64位的android设备，x86常见用于android模拟器，</td></tr><tr><td>META-INF目录</td><td>保存应用的签名信息，签名信息可以验证APK文件的完整性，其中</td></tr><tr><td>res目录</td><td>res目录存放资源文件，包括图片，字符串等等</td></tr><tr><td>AndroidMainfest.xml文件</td><td>APK的应用清单信息，它描述了应用的名字，版本，权限，引用的库文件等等信息</td></tr><tr><td>classes.dex文件</td><td>classes.dex是java源码编译后生成的java字节码文件，APK运行的主要逻辑</td></tr><tr><td>resources.arsc文件</td><td>resources.arsc是编译后的二进制资源文件，它是一个映射表，映射着资源和id，通过R文件中的id就可以找到对应的资源</td></tr></tbody></table><ul><li>每个app安装后，会在 <code>/data/data/&#123;apk package name&#125;/</code> 路径下生成一个安装目录，这个位置对于当前 apk 来说是可以读写的，不过对于没有root的设备，用户看不到</li><li>app安装后，原apk安装包会在 <code>/data/app/*.apk</code> 备份</li><li>app删除时，其安装目录和相关备份都会被删除</li></ul><h2 id="assets"><a class="markdownIt-Anchor" href="#assets"></a> assets</h2><h3 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h3><p>​assets 通常存储着图像、音视频、配置文件、字体、自带数据库等外部文件。应用程序在编译时不会去处理这个目录下的文件，同时在这个目录中可以创建任意目录层级关系(res就不可以)。并且它<strong>不会为里面的文件建立索引、不会限制目录层级关系、不会处理里面的文件</strong>。但是它有一个小缺陷就是它是只读的，因为在apk安装之后它被绑定在apk中，并不会解压到 <code>/data/data/&#123;apk package name&#125;/</code> 中，所以无法获得其绝对路径，也就根本不存在。</p><h3 id="开发"><a class="markdownIt-Anchor" href="#开发"></a> 开发</h3><p>​Android提供了一个 <code>android.content.res.AssetManager</code> 类来实现读取assets目录下的文件。</p><h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3><ul><li>讲述 <code>android.content.res.AssetManager</code> 类的实现 -&gt; <a href="https://www.cnblogs.com/chorm590/p/11308107.html">轻读一下 Android 应用开发中的 assets 目录 - 大窟窿 - 博客园 (cnblogs.com)</a></li></ul><h2 id="res"><a class="markdownIt-Anchor" href="#res"></a> res</h2><p>​这是一种可编译的资源文件，通过 <code>R.xxx.id</code> 来访问。其中对于图像可以放在 <code>res/drawable</code> 目录或者是 <code>res/mipmap</code> 目录下。对于其它类型文件可以存放在 <code>res/raw</code> 目录下。</p><ul><li>在 <code>drawable</code> 或 <code>mipmap</code> 下只能保存图像文件或图像描述文件，但在这两个目录下保存的图像文件在编译时会建立一张&quot;索引表&quot;。这个索引信息会被统一保存在一个名称为 R.java 的文件中。在程序的任何地方都可以直接通过 <a href="http://R.drawable.xxx">R.drawable.xxx</a> 的形式来使用图片资源。</li><li><code>res/raw</code> 比较特殊。它被设计用于保存一些二进制文件，即在这个目录下的所有文件都会被记录到&quot;索引表&quot;中，但是编译系统不会去动里面的文件。raw 目录下的文件放进去时是什么样的，编译成 APK 以后还是什么样。这个目录比较适合保存一些音视频等二进制文件。</li><li>res 目录下的资源目录，都<strong>不能自由地设计子目录层级关系</strong>，不管你有多少文件，都只能放在同一级目录中。</li></ul><table><thead><tr><th>文件或目录</th><th>作用</th></tr></thead><tbody><tr><td>anim</td><td>存放动画文件</td></tr><tr><td>color</td><td>存放色彩相关文件</td></tr><tr><td>drawable</td><td>存放图像资源</td></tr><tr><td>layout</td><td>存放布局文件</td></tr><tr><td>raw</td><td>可以直接复制到设备中的任意文件</td></tr><tr><td>xml</td><td>存放任意xml文件</td></tr><tr><td>menu</td><td>布局信息</td></tr><tr><td>values</td><td>资源信息</td></tr></tbody></table><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202402271239832.png" alt="img" /></p><p>​之所以有不同的 drawable 等，主要是为了让程序可以更好地兼容各种设备。</p><h2 id="lib"><a class="markdownIt-Anchor" href="#lib"></a> lib</h2><h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><p>​这个目录下的文件通常是 <code>.so</code> 文件，它是由 c/c++ 编译生成的，通常为了弥补java的弱安全性。这里涉及 JNI 和 NDK 的使用。</p><ul><li><code>JNI</code>(Java Native Interface) 是 java 的本地接口，JNI是Java调用Native 语言的一种特性，通过JNI可以使得Java与C/C<ins>机型交互。简单点说就是JNI是Java中调用C/C</ins>的统称。</li><li><code>NDK</code>(Native Develop Kit)，Android NDK 是一套允许使用 C 和 C++ 等语言，以原生代码实现部分应用的工具集。在开发某些类型的应用时，这有助于重复使用以这些语言编写的代码库。</li><li>二者没有显著的区别，相较而言：<strong>JNI可以在Java和Android中同时使用，NDK只能在Android里面使用</strong>。</li></ul><h3 id="参考-2"><a class="markdownIt-Anchor" href="#参考-2"></a> 参考</h3><ul><li>讲述 JNI 的开发 -&gt; <a href="https://zhuanlan.zhihu.com/p/97691316">Android JNI使用全面讲解 - 知乎 (zhihu.com)</a></li><li>逆向中 JNI 的利用 -&gt; <a href="https://zhuanlan.zhihu.com/p/33982945">Android逆向新手答疑解惑篇——JNI与动态注册 - 知乎 (zhihu.com)</a></li></ul><h2 id="meta-inf"><a class="markdownIt-Anchor" href="#meta-inf"></a> META-INF</h2><p>​主要关注以下三个文件</p><ul><li><code>MANIFEST.MF</code>：摘要文件。程序遍历Apk包中的所有文件(entry)，对非文件夹非签名文件的文件，逐个用SHA1(安全哈希算法)生成摘要信息，再用Base64进行编码</li><li><code>CERT.SF</code>：对摘要的签名文件。对前一步生成的MANIFEST.MF，使用SHA1-RSA算法，用开发者的私钥进行签名。在安装时只能使用公钥才能解密它。解密之后，将它与未加密的摘要信息(MANIFEST.MF文件)进行对比，如果相符，则表明内容没有被异常修改。</li><li><code>CERT.RSA</code>：保存了公钥、所采用的加密算法等信息，实际包含了对CERT.SF文件的数字签名以及签名时所用的platform.x509.pem这个数字证书，可以用 keytool 进行查看</li></ul><h3 id="参考-3"><a class="markdownIt-Anchor" href="#参考-3"></a> 参考</h3><ul><li>介绍数字签名相关知识 -&gt; <a href="https://blog.csdn.net/lewif/category_5877975.html?spm=1001.2014.3001.5482">android-security_lyf5231的博客-CSDN博客</a></li></ul><h2 id="androidmainfestxml"><a class="markdownIt-Anchor" href="#androidmainfestxml"></a> AndroidMainfest.xml</h2><h3 id="简介-2"><a class="markdownIt-Anchor" href="#简介-2"></a> 简介</h3><p>​这个文件中包含了APP的配置信息，系统需要根据里面的内容运行APP的代码，显示界面。它包含了应用的包名，版本号，权限信息，所有的四大组件等信息。在逆向的过程中，通过 apk 的清单文件，我们可以了解应用的一些基本信息，程序的入口 Activity，注册的服务，广播，内容提供者等等。</p><p>​它定义了应用程序中包含的Activity,Service,Content provider和BroadcastReceiver组件信息。每个应用程序在根目录下必须包含一个AndroidManifest.xml文件，且文件名不能修改。它描述了package中暴露的组件，他们各自的实现类，各种能被处理的数据和启动位置。</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">定义</th></tr></thead><tbody><tr><td style="text-align:left">versionCode</td><td style="text-align:left">版本号，主要用来更新，例如:12</td></tr><tr><td style="text-align:left">versionName</td><td style="text-align:left">版本名，给用户看的，例如:1.2</td></tr><tr><td style="text-align:left">package</td><td style="text-align:left">包名，例如：com.zj.wuaipojie</td></tr><tr><td style="text-align:left">uses-permission android:name=“”</td><td style="text-align:left">应用权限，例如：android.permission.INTERNET 代表网络权限</td></tr><tr><td style="text-align:left">android:label=“@string/app_name”</td><td style="text-align:left">应用名称</td></tr><tr><td style="text-align:left">android:icon=“@mipmap/ic_launcher”</td><td style="text-align:left">应用图标路径</td></tr><tr><td style="text-align:left">android:debuggable=“true”</td><td style="text-align:left">应用是否开启debug权限</td></tr></tbody></table><h3 id="参考-4"><a class="markdownIt-Anchor" href="#参考-4"></a> 参考</h3><ul><li>详细分析文件各个字段 -&gt; <a href="https://www.jianshu.com/p/3b5b89d4e154">AndroidManifest.xml详解 - 简书 (jianshu.com)</a></li><li>从二进制角度分析文件格式 -&gt; <a href="https://zhuanlan.zhihu.com/p/66800574">Android逆向笔记 —— AndroidManifest.xml 文件格式解析 - 知乎 (zhihu.com)</a></li></ul><h2 id="classesdex"><a class="markdownIt-Anchor" href="#classesdex"></a> classes.dex</h2><h3 id="简介-3"><a class="markdownIt-Anchor" href="#简介-3"></a> 简介</h3><p>​这个文件包含了程序的所有代码。这里Android 并不直接使用 Class 文件，而是将所有的 Class 文件聚合打包成 <strong>DEX</strong> 文件(Dalvik可执行文件，smali语法)，DEX 文件相比单个单个的 Class 文件更加紧凑，可以直接在 Android Runtime 下执行。下面是一个dex文件的例子。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!---声明实现应用部分可视化界面的 Activity，必须使用 AndroidManifest 中的 &lt;activity&gt; 元素表示所有 Activity。系统不会识别和运行任何未进行声明的Activity。-----&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span>  </span><br><span class="hljs-tag">          <span class="hljs-attr">android:label</span>=<span class="hljs-string">&quot;@string/app_name&quot;</span>  </span><br><span class="hljs-tag">          <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.zj.wuaipojie.ui.MainActivity&quot;</span>  </span><br><span class="hljs-tag">          <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!--当前Activity是否可以被另一个Application的组件启动：true允许被启动；false不允许被启动--&gt;</span><br>    <span class="hljs-comment">&lt;!---指明这个activity可以以什么样的意图(intent)启动---&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span>  <br>        <span class="hljs-comment">&lt;!--表示activity作为一个什么动作启动，android.intent.action.MAIN表示作为主activity启动---&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span>  </span><br><span class="hljs-tag">                <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span>  <br>        <span class="hljs-comment">&lt;!--这是action元素的额外类别信息，android.intent.category.LAUNCHER表示这个activity为当前应用程序优先级最高的Activity--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span>  </span><br><span class="hljs-tag">                  <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span>  </span><br><span class="hljs-tag">          <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.zj.wuaipojie.ui.ChallengeFirst&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span>  </span><br><span class="hljs-tag">          <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.zj.wuaipojie.ui.ChallengeFifth&quot;</span>  </span><br><span class="hljs-tag">          <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span>  </span><br><span class="hljs-tag">          <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.zj.wuaipojie.ui.ChallengeFourth&quot;</span>  </span><br><span class="hljs-tag">          <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span>  </span><br><span class="hljs-tag">          <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.zj.wuaipojie.ui.ChallengeThird&quot;</span>  </span><br><span class="hljs-tag">          <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span>  </span><br><span class="hljs-tag">          <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.zj.wuaipojie.ui.ChallengeSecond&quot;</span>  </span><br><span class="hljs-tag">          <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span>  </span><br><span class="hljs-tag">          <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.zj.wuaipojie.ui.AdActivity&quot;</span> /&gt;</span>  <br></code></pre></td></tr></table></figure><ul><li>SDK(软件开发工具包)，软件开发工具包一般都是一些软件工程师为特定的软件包、软件框架、硬件平台、操作系统等建立应用软件时的开发工具的集合。简单讲，就是通过第三方服务商实现产品功能的软件工具包。也就是说，它就是为了开发而提供的一系列工具的集合，其中 <code>build-tools</code> 目录下的 <code>dx</code> 工具可以将 <code>.cladd</code> 转化为 DEX文件。</li></ul><h3 id="参考-5"><a class="markdownIt-Anchor" href="#参考-5"></a> 参考</h3><ul><li>DEX文件格式解析 -&gt; <a href="https://zhuanlan.zhihu.com/p/66800634">Android逆向笔记 —— DEX 文件格式解析 - 知乎 (zhihu.com)</a></li></ul><h2 id="resourceasrc"><a class="markdownIt-Anchor" href="#resourceasrc"></a> resource.asrc</h2><p>​这个文件是APK打包过程中的产生的一个资源索引文件。存储着实际资源路径或资源值，可以通过资源索引(<code>R.drawable.xxx</code>、<code>R.layout.xxx</code>、<code>R.string.xxx</code>等，存储在 <code>R.jar</code> 或 <code>R.java</code> 文件中)在该文件中查找资源。</p><ul><li>文件结构分析 -&gt; <a href="https://zhuanlan.zhihu.com/p/262000709">一文读懂resource.arsc文件结构 - 知乎 (zhihu.com)</a></li></ul><h1 id="apk-流程"><a class="markdownIt-Anchor" href="#apk-流程"></a> APK 流程</h1><h2 id="apk-打包过程"><a class="markdownIt-Anchor" href="#apk-打包过程"></a> APK 打包过程</h2><ol><li>除了assets和res/raw资源被原封不动打包进APK外，其他资源都被编译为二进制xml，所以解压apk后，无法直接打开xml文件；</li><li>除了asserts资源之外，其他资源都会被赋予一个资源ID；</li><li>打包工具负责编译和打包资源，编译完成后，会生成一个resources.arsc文件和一个R.java，前者为资源索引表，后者为各个资源ID常量，提供在代码中索引资源；</li><li>应用配置文件AndroidManifest.xml同样会被编译成二进制XML文件，再打包进APK；</li><li>应用程序在运行时通过AssetManager或资源ID或文件名访问资源；</li><li>直接解压后，会发现打不开xml文件，因为其已经变成二进制xml了；</li></ol><h2 id="apk-安装过程"><a class="markdownIt-Anchor" href="#apk-安装过程"></a> APK 安装过程</h2><ol><li>将APK安装包复制到 <code>/data/app</code> 下，校验APK签名是否正确，检查APK结构是否正常；</li><li>解压并校验APK中的 dex 文件，确定 dex 文件没有被损坏，将 dex 优化成 <code>odex</code> ，使得应用程序启动时间加快；</li><li>在 <code>/data/data</code> 目录下建立与APK包名同名的文件夹;</li><li>若APK中存在lib库，系统会判断这些so库的名字，查看是否以lib开头，以.so结尾，根据CPU的架构解压对应so库到 <code>/data/data/packagename/lib</code> 下；</li></ol><ul><li>优化后的obex结构如下：<ul><li>odex文件头(添加了一些数据)</li><li>dex文件</li><li>依赖库(新增)</li><li>辅助数据(新增)</li></ul></li></ul><h2 id="so-加载流程"><a class="markdownIt-Anchor" href="#so-加载流程"></a> so 加载流程</h2><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202402281502132.png" alt="image-20240228150220010" /></p><p>linker的调用流程：</p><ol><li>在do_dlopen中通过find_library进行加载so</li><li>在加载完so后通过call_constructors完成init_array的加载</li><li>find_library最后调用load_libray完成so的转载</li><li>最后通过load_library的elf_reader.load完成so的装载</li></ol><table><thead><tr><th style="text-align:left">函数名</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>android_dlopen_ext()</code> 、<code>dlopen()</code>、<code>do_dlopen()</code></td><td style="text-align:left">这三个函数主要用于加载库文件。<code>android_dlopen_ext</code> 是系统的一个函数，用于在运行时动态加载共享库。与标准的 <code>dlopen()</code> 函数相比，<code>android_dlopen_ext</code> 提供了更多的参数选项和扩展功能，例如支持命名空间、符号版本等特性。</td></tr><tr><td style="text-align:left"><code>find_library()</code></td><td style="text-align:left"><code>find_library()</code> 函数用于查找库，基本的用途是给定一个库的名字，然后查找并返回这个库的路径。</td></tr><tr><td style="text-align:left"><code>call_constructors()</code></td><td style="text-align:left"><code>call_constructors()</code> 是用于调用动态加载库中的构造函数的函数。</td></tr><tr><td style="text-align:left"><code>init</code></td><td style="text-align:left">库的构造函数，用于初始化库中的静态变量或执行其他需要在库被加载时完成的任务。如果没有定义<code>init</code>函数，系统将不会执行任何动作。需要注意的是，<code>init</code>函数不应该有任何参数，并且也没有返回值。</td></tr><tr><td style="text-align:left"><code>init_array</code></td><td style="text-align:left"><code>init_array</code>是ELF（Executable and Linkable Format，可执行和可链接格式）二进制格式中的一个特殊段（section），这个段包含了一些函数的指针，这些函数将在<code>main()</code>函数执行前被调用，用于初始化静态局部变量和全局变量。</td></tr><tr><td style="text-align:left"><code>jni_onload</code></td><td style="text-align:left">这是Android JNI(Java Native Interface)中的一个函数。当一个native库被系统加载时，该函数会被自动调用。<code>JNI_OnLoad</code>可以做一些初始化工作，例如注册你的native方法或者初始化一些数据结构。如果你的native库没有定义这个函数，那么JNI会使用默认的行为。<code>JNI_OnLoad</code>的返回值应该是需要的JNI版本，一般返回<code>JNI_VERSION_1_6</code>。</td></tr></tbody></table><p>下断点时机：<br />应用级别的：java_com_XXX；<br />外壳级别的：JNI_Onload，.init，.init_array(反调试);<br />系统级别的：fopen，fget，dvmdexfileopen(脱壳)；</p><h1 id="虚拟机相关"><a class="markdownIt-Anchor" href="#虚拟机相关"></a> 虚拟机相关</h1><h2 id="虚拟机"><a class="markdownIt-Anchor" href="#虚拟机"></a> 虚拟机</h2><h3 id="jvm虚拟机"><a class="markdownIt-Anchor" href="#jvm虚拟机"></a> JVM虚拟机</h3><p>​JVM是java虚拟机，运行java字节码程序。为了可以跨平台运行(不同的平台寄存器数量设置有不同)，JVM采用基于栈的方式构建，没有寄存器，指令集都是由栈来存储中间数据。</p><p>​Google 公司参考 java 虚拟机设计了用于Android平台的虚拟机，它是面向Linux、嵌入式操作系统的虚拟机，主要负责生命周期管理、堆栈管理、安全和线程管理、垃圾回收等。Android虚拟机分为<strong>Dalvik虚拟机</strong>和<strong>ART虚拟机</strong>。Android虚拟机是<strong>基于寄存器</strong>的指令集，这使得 Android 虚拟机性能更好、执行更高效。每个进程对应一个虚拟机。</p><h3 id="dalvik"><a class="markdownIt-Anchor" href="#dalvik"></a> Dalvik</h3><p>​采用动态编译，一句一句边运行边翻译</p><h3 id="art"><a class="markdownIt-Anchor" href="#art"></a> ART</h3><p>​采用静态编译，执行前全部被翻译为机器码</p><h2 id="android-发展"><a class="markdownIt-Anchor" href="#android-发展"></a> Android 发展</h2><h3 id="android-11"><a class="markdownIt-Anchor" href="#android-11"></a> Android 1.1</h3><p>​Dalvik：解释器。采用采用的是边编译，边执行。每次执行代码，都需要 Dalvik 将代码转化为机器指令集合，然后交给 CPU 去执行。</p><h3 id="android-22"><a class="markdownIt-Anchor" href="#android-22"></a> Android 2.2</h3><p>​Dalvik：解释器+JIT(just-in-time)。执行过程中，每遇到一个新的类别，都会被编译优化成相当精简的原生型指令码，下次执行到相同逻辑的时候，速度就会更快。最开始指在执行前编译，但是到现在已经发展成为，一开始解释执行，只有被多次调用的程序段才被编译，编译后存放在内存中，下次直接执行编译后的机器码。</p><p>​JIT 编译产生的机器指令保存在内存中，不会进行持久化存储，所以应用每次启动都会重新进行编译。</p><h3 id="android-44"><a class="markdownIt-Anchor" href="#android-44"></a> Android 4.4</h3><p>​ART(Android RunTime)：Art 采用的是 AOT 模式，AOT(Ahead-of-time)即在应用安装的时候，dex 文件就会被预编译成可执行文件。</p><p>​具体过程，安装 APK 的时候调用 dex2oat，把 dex 文件编译 oat 文件并保存到磁盘中，该文件采用的是成 ELF 文件格式，机器可以直接运行的格式，每次应用启动不用重新编译。所以每次应用启动的时候，启动速度有很大提升，增加了存储空间的使用，也是一种空间换时间的策略，但是安装过程中耗时增加。Android 5.0 之后系统虚拟机彻底切换为 ART 虚拟机。</p><h3 id="android-70"><a class="markdownIt-Anchor" href="#android-70"></a> Android 7.0</h3><p>​AOT+解释执行+JIT：为了解决在 ART 上的安装时间太长的问题，同时保证在启动 APP 的时候性能不变，从 android7.0 开始采用混合模式，即 <strong>AOT+JIT+解释执行</strong> 3 种模式共存的方式。</p><p>​具体的工作过程如下：首先，在应用安装时 dex 文件不会被预先编译成机器码。而是在 App 运行时，dex 文件先通过解释器直接执行，热点函数会被识别并被 JIT 编译后存储在 JIT code cache 中并生成 profile 文件记录热点函数信息。最后当手机进入 idle 状态或者充电状态，系统扫描 app 目录下的 profile 文件进行AOT 编译。在这种模式下，无论是首次安装还是 APP 启动都能够保证很好的效率。</p><h1 id="smail-语法"><a class="markdownIt-Anchor" href="#smail-语法"></a> smail 语法</h1><p>​smali是Dalvik的寄存器语言，smali代码是dex反编译而来的。在smali里的所有操作都必须经过寄存器来进行：</p><ul><li><strong>本地寄存器</strong>用v开头数字结尾的符号来表示，如v0、v1、v2。</li><li><strong>参数寄存器</strong>则使用p开头数字结尾的符号来表示，如p0、p1、p2。<ul><li>特别注意的是，p0不一定是函数中的第一个参数。</li><li>在非static函数中，p0代指&quot;this&quot;，p1表示函数的第一个参数，p2代表函数中的第二个参数。</li><li>而在static函数中 p0 才对应第一个参数(因为Java的static方法中没有this方法)。</li></ul></li><li>具体语法可以参考 -&gt; <a href="https://www.52pojie.cn/thread-1701353-1-1.html">《安卓逆向这档事》三、初识smali，vip终结者 - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></li></ul><p>补充：</p><ul><li>区分 <code>invoke-static</code> 与 <code>invoke-virtual</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">invoke-static &#123;p1, p0, p5&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;<br></code></pre></td></tr></table></figure><ul><li>这里将弹窗文本、显示时间等信息传给p1，这里 <code>invoke-static</code> 调用静态方法，{}中的寄存器就是指令的参数，代表了后面方法描述符中的参数类型，makeText()中是参数，后面紧跟着返回值。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">invoke-virtual &#123;p0&#125;, Landroid/widget/Toast;-&gt;show()V<br># 举例<br>invoke-virtual &#123;parameter_list&#125;, class_name-&gt;method_name(parameter_types)return_type<br></code></pre></td></tr></table></figure><ul><li>Toast;-&gt;show是弹窗代码，这里<code>invoke-virtual</code>是在Smali语言中用于调用对象的虚拟方法的指令，与<code>invoke-static</code>不同，<code>invoke-virtual</code>是针对对象的，它需要一个对象实例来调用方法。</li></ul><h1 id="android-四大组件"><a class="markdownIt-Anchor" href="#android-四大组件"></a> Android 四大组件</h1><h2 id="简介-4"><a class="markdownIt-Anchor" href="#简介-4"></a> 简介</h2><p>​它们都需要在 AndroidManifest.xml 文件中进行注册才能生效。</p><table><thead><tr><th style="text-align:left">组件</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">Activity(活动)</td><td style="text-align:left">在应用中的一个Activity可以用来表示一个界面，意思可以理解为&quot;活动&quot;，即一个活动开始，代表 Activity 组件启动，活动结束，代表一个Activity的生命周期结束。一个Android应用必须通过Activity来运行和启动，Activity的生命周期交给系统统一管理。</td></tr><tr><td style="text-align:left">Service(服务)</td><td style="text-align:left">Service它可以在后台执行长时间运行操作而没有用户界面的应用组件，不依赖任何用户界面，例如后台播放音乐，后台下载文件等。</td></tr><tr><td style="text-align:left">Broadcast Receiver(广播接收器)</td><td style="text-align:left">一个用于接收广播信息，并做出对应处理的组件。比如我们常见的系统广播：通知时区改变、电量低、用户改变了语言选项等。</td></tr><tr><td style="text-align:left">Content Provider(内容提供者)</td><td style="text-align:left">作为应用程序之间唯一的共享数据的途径，Content Provider主要的功能就是存储并检索数据以及向其他应用程序提供访问数据的接口。Android内置的许多数据都是使用Content Provider形式，供开发者调用的(如视频，音频，图片，通讯录等)</td></tr></tbody></table><h2 id="activity生命周期"><a class="markdownIt-Anchor" href="#activity生命周期"></a> Activity生命周期</h2><table><thead><tr><th style="text-align:left">函数名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">onCreate()</td><td style="text-align:left">一个Activity启动后第一个被调用的函数，常用来在此方法中进行Activity的一些初始化操作。例如创建View，绑定数据，注册监听，加载参数等。</td></tr><tr><td style="text-align:left">onStart()</td><td style="text-align:left">当Activity显示在屏幕上时，此方法被调用但此时还无法进行与用户的交互操作。</td></tr><tr><td style="text-align:left">onResume()</td><td style="text-align:left">这个方法在onStart()之后调用，也就是在Activity准备好与用户进行交互的时候调用，此时的Activity一定位于Activity栈顶，处于运行状态。</td></tr><tr><td style="text-align:left">onPause()</td><td style="text-align:left">这个方法是在系统准备去启动或者恢复另外一个Activity的时候调用，通常在这个方法中执行一些释放资源的方法，以及保存一些关键数据。</td></tr><tr><td style="text-align:left">onStop()</td><td style="text-align:left">这个方法是在Activity完全不可见的时候调用的。</td></tr><tr><td style="text-align:left">onDestroy()</td><td style="text-align:left">这个方法在Activity销毁之前调用，之后Activity的状态为销毁状态。</td></tr><tr><td style="text-align:left">onRestart()</td><td style="text-align:left">当Activity从停止stop状态恢进入start状态时调用状态。</td></tr></tbody></table><p>​借用流程图片</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202402251135842.png" alt="" /></p><h1 id="动态调试"><a class="markdownIt-Anchor" href="#动态调试"></a> 动态调试</h1><h2 id="调试配置"><a class="markdownIt-Anchor" href="#调试配置"></a> 调试配置</h2><h3 id="修改debug权限"><a class="markdownIt-Anchor" href="#修改debug权限"></a> 修改debug权限</h3><ul><li><p>在AndroidManifest.xml里添加可调试权限 <code>android:debuggable=&quot;true&quot;</code></p></li><li><p>Magisk命令(重启失效)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb shell # adb进入命令行模式<br>su # 切换至超级用户<br>magisk resetprop ro.debuggable 1# 修改权限<br>stop;start; # 一定要通过该方式重启<br></code></pre></td></tr></table></figure></li></ul><h3 id="动调"><a class="markdownIt-Anchor" href="#动调"></a> 动调</h3><p>​之后就可以在 jeb 中启动动态调试了，首先在 jeb 中相应语句下断点 <code>ctrl + b</code>，之后debug模式启动app</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb shell am start -D -n com.zj.wuaipojie/.ui.MainActivity<br><span class="hljs-meta prompt_"># </span><span class="language-bash">分析</span><br>adb shell am start -D -n 包名/类名<br><span class="hljs-meta prompt_">#</span><span class="language-bash">am start -n 表示启动一个activity，也可以用这种方式直接启动MainActivity之外的Activity</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">am start -D 表示将应用设置为可调试模式</span><br></code></pre></td></tr></table></figure><p>​然后jeb直接附加程序进行动调即可，具体步骤看这个 -&gt; <a href="https://www.52pojie.cn/thread-1598242-1-1.html">JEB动态调试Smali-真机/模拟器(详细，新手必看) - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><h1 id="ndk开发"><a class="markdownIt-Anchor" href="#ndk开发"></a> NDK开发</h1><p>​NDK(Native Development Kit)是一套用于开发Android应用程序的工具集，它允许在C/C++中编写性能关键的部分代码，并将这些代码与Java代码进行连接。</p><h2 id="cpp文件说明"><a class="markdownIt-Anchor" href="#cpp文件说明"></a> cpp文件说明</h2><p>​cpp目录下包含两个文件 CMakeLists.txt 和 natice-lib.cpp。</p><table><thead><tr><th style="text-align:left">文件名</th><th style="text-align:left">作用</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">CMakeLists.txt</td><td style="text-align:left">构建配置文件</td><td style="text-align:left">CMakeLists.txt是用于配置NDK项目的构建系统的文件。它指定了构建所需的源文件、依赖项、编译选项等。在构建过程中，CMake会根据该文件的指示生成对应的构建脚本，用于编译本地代码并生成本地库。</td></tr><tr><td style="text-align:left">native-lib.cpp</td><td style="text-align:left">本地代码实现文件</td><td style="text-align:left">native-lib.cpp是包含本地代码实现的文件。它定义了通过Java和本地代码之间进行通信的本地方法。该文件中的函数实现将被编译为本地库，供Java代码调用。</td></tr></tbody></table><h3 id="cmakeliststxt"><a class="markdownIt-Anchor" href="#cmakeliststxt"></a> CMakeLIsts.txt</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># For more information about using CMake with Android Studio, read the</span><br><span class="hljs-comment"># documentation: https://d.android.com/studio/projects/add-native-code.html</span><br><br><span class="hljs-comment"># 设置构建本地库所需的CMake的最小版本要求</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.22</span>.<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 声明和命名项目</span><br><span class="hljs-keyword">project</span>(<span class="hljs-string">&quot;ndkdemo&quot;</span>)<br><br><span class="hljs-comment"># 创建并命名一个库，设置其类型为STATIC或SHARED，并指定源代码的相对路径</span><br><span class="hljs-comment"># 可以定义多个库，CMake会为您构建它们</span><br><span class="hljs-comment"># Gradle会自动将共享库打包到APK中</span><br><span class="hljs-keyword">add_library</span>(<br>        <span class="hljs-comment"># 设置库的名称</span><br>        ndkdemo<br><br>        <span class="hljs-comment"># 设置库类型为共享库</span><br>        SHARED<br><br>        <span class="hljs-comment"># 提供源文件的相对路径</span><br>        native-lib.cpp)<br><br><span class="hljs-comment"># 搜索指定的预构建库并将路径存储为变量。</span><br><span class="hljs-comment"># 由于CMake默认在搜索路径中包含系统库，因此您只需指定要添加的公共NDK库的名称。</span><br><span class="hljs-comment"># CMake会在完成构建之前验证该库是否存在。</span><br><span class="hljs-keyword">find_library</span>(<br>        <span class="hljs-comment"># 设置路径变量的名称</span><br>        log-lib<br><br>        <span class="hljs-comment"># 指定要让CMake定位的NDK库的名称</span><br>        log)<br><br><span class="hljs-comment"># 指定CMake应链接到目标库的库。</span><br><span class="hljs-comment"># 您可以链接多个库，例如在此构建脚本中定义的库、预构建的第三方库或系统库。</span><br><span class="hljs-keyword">target_link_libraries</span>(<br>        <span class="hljs-comment"># 指定目标库</span><br>        ndkdemo<br><br>        <span class="hljs-comment"># 将目标库链接到NDK中包含的log库</span><br>        <span class="hljs-variable">$&#123;log-lib&#125;</span>)<br></code></pre></td></tr></table></figure><h3 id="native-libcpp"><a class="markdownIt-Anchor" href="#native-libcpp"></a> native-lib.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;jni.h&gt;</span> <span class="hljs-comment">// JNI头文件，提供了JNI函数和数据类型的定义</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span> <span class="hljs-comment">// C++标准库的string类</span></span><br><br><span class="hljs-comment">// 声明一个jni函数，该函数将会被Java代码调用</span><br><span class="hljs-comment">// JNIEXPORT表示这个函数是可导出的，并且可以被其他代码使用</span><br><span class="hljs-comment">// jstring表示这个函数返回的是一个Java字符串对象</span><br><span class="hljs-comment">// JNICALL是JNI函数的调用约定</span><br><span class="hljs-comment">// Java_com_example_ndkdemo_MainActivity_stringFromJNI是JNI函数的命名规则，与Java中对应的方法名对应</span><br><span class="hljs-comment">// Java打头，1包名,2类名,3方法名字;&quot;_&quot;号隔开</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function">JNIEXPORT jstring JNICALL</span><br><span class="hljs-function"><span class="hljs-title">Java_com_example_ndkdemo_MainActivity_stringFromJNI</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        JNIEnv* env, <span class="hljs-comment">// JNIEnv是指向JNI环境的指针，可以用来访问JNI提供的功能</span></span></span><br><span class="hljs-params"><span class="hljs-function">        jobject <span class="hljs-comment">/* this */</span>)</span> </span>&#123; <span class="hljs-comment">// jobject是指向Java对象的指针，在本例中并没有使用</span><br><br>    std::string hello = <span class="hljs-string">&quot;Hello from C++&quot;</span>; <span class="hljs-comment">// 创建一个C++字符串对象</span><br>    <span class="hljs-keyword">return</span> env-&gt;<span class="hljs-built_in">NewStringUTF</span>(hello.<span class="hljs-built_in">c_str</span>()); <span class="hljs-comment">// 将C++字符串对象转换为Java字符串对象并返回</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mainactivityjava"><a class="markdownIt-Anchor" href="#mainactivityjava"></a> MainActivity.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-comment">// Used to load the &#x27;ndkdemo&#x27; library on application startup.</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.loadLibrary(<span class="hljs-string">&quot;ndkdemo&quot;</span>); <span class="hljs-comment">// 加载名为&quot;ndkdemo&quot;的库</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ActivityMainBinding binding; <span class="hljs-comment">// 声明一个ActivityMainBinding变量</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br><br>        binding = ActivityMainBinding.inflate(getLayoutInflater()); <span class="hljs-comment">// 使用ViewBinding将布局文件解析为一个ActivityMainBinding对象</span><br>        setContentView(binding.getRoot()); <span class="hljs-comment">// 将Activity的布局设置为根布局</span><br><br>        <span class="hljs-comment">// Example of a call to a native method</span><br>        <span class="hljs-type">TextView</span> <span class="hljs-variable">tv</span> <span class="hljs-operator">=</span> binding.sampleText; <span class="hljs-comment">// 获取布局文件中的TextView控件</span><br>        tv.setText(stringFromJNI()); <span class="hljs-comment">// 调用本地方法stringFromJNI()并将其返回的字符串设置为TextView的文本内容</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * A native method that is implemented by the &#x27;ndkdemo&#x27; native library,</span><br><span class="hljs-comment">     * which is packaged with this application.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> String <span class="hljs-title function_">stringFromJNI</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 声明一个native方法stringFromJNI()</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="jni"><a class="markdownIt-Anchor" href="#jni"></a> JNI</h2><p>​NDK是开发套件，JNI才是调用的框架。所以与其说是NDK开发，不如说是JNI的开发。不过NDK是Android提供的开发套件。JNI可不是，JNI全称Java Native Interface，即Java本地接口，JNI是Java调用Native 语言的一种特性。通过JNI可以使得 Java与 C/C++ 机型交互。</p><p>​即可以在Java代码中调用 C/C++ 等语言的代码或者在 C/C++ 代码中调用 Java 代码。</p><h3 id="注册方式"><a class="markdownIt-Anchor" href="#注册方式"></a> 注册方式</h3><h4 id="静态注册"><a class="markdownIt-Anchor" href="#静态注册"></a> 静态注册</h4><p>​上述过程就是静态注册</p><ul><li>优点: 理解和使用方式简单, 属于傻瓜式操作, 使用相关工具按流程操作就行, 出错率低</li><li>缺点: 当需要更改类名,包名或者方法时, 需要按照之前方法重新生成头文件, 灵活性不高</li></ul><h4 id="动态注册"><a class="markdownIt-Anchor" href="#动态注册"></a> 动态注册</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;jni.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><br><span class="hljs-function">JNIEXPORT jstring JNICALL <span class="hljs-title">Java_com_example_ndkdemo_MainActivity_nativeGetStringFromJNI</span><span class="hljs-params">(JNIEnv* env, jobject obj)</span> </span>&#123;<br>    std::string hello = <span class="hljs-string">&quot;Hello wuaipojie&quot;</span>;<br>    <span class="hljs-keyword">return</span> env-&gt;<span class="hljs-built_in">NewStringUTF</span>(hello.<span class="hljs-built_in">c_str</span>());<br>&#125;<br><br><span class="hljs-comment">// 定义本地方法注册函数</span><br><span class="hljs-function">JNIEXPORT jint JNICALL <span class="hljs-title">JNI_OnLoad</span><span class="hljs-params">(JavaVM* vm, <span class="hljs-type">void</span>* reserved)</span> </span>&#123;<br>    JNIEnv* env;<br>    <span class="hljs-keyword">if</span> (vm-&gt;<span class="hljs-built_in">GetEnv</span>(<span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">void</span>**&gt;(&amp;env), JNI_VERSION_1_6) != JNI_OK) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 定义要注册的本地方法</span><br>    JNINativeMethod methods[] = &#123;<br>        &#123;<span class="hljs-string">&quot;nativeGetStringFromJNI&quot;</span>, <span class="hljs-string">&quot;()Ljava/lang/String;&quot;</span>, <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">void</span>*&gt;(Java_com_example_ndkdemo_MainActivity_nativeGetStringFromJNI)&#125;<br>    &#125;;<br><br>    <span class="hljs-comment">// 获取类引用</span><br>    jclass clazz = env-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-string">&quot;com/example/ndkdemo/MainActivity&quot;</span>);<br>    <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 注册本地方法</span><br>    <span class="hljs-keyword">if</span> (env-&gt;<span class="hljs-built_in">RegisterNatives</span>(clazz, methods, <span class="hljs-built_in">sizeof</span>(methods) / <span class="hljs-built_in">sizeof</span>(methods[<span class="hljs-number">0</span>])) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> JNI_VERSION_1_6;<br>&#125;<br><br>&#125; <span class="hljs-comment">// extern &quot;C&quot;</span><br></code></pre></td></tr></table></figure><h3 id="数据类型比对"><a class="markdownIt-Anchor" href="#数据类型比对"></a> 数据类型比对</h3><p>​这里比对C++，java，JNI的数据类型，使用的时候需要正确转化</p><table><thead><tr><th style="text-align:left">C++ 数据类型</th><th style="text-align:left">Java 数据类型</th><th style="text-align:left">JNI 数据类型签名</th></tr></thead><tbody><tr><td style="text-align:left">jint</td><td style="text-align:left">int</td><td style="text-align:left">“I”</td></tr><tr><td style="text-align:left">jboolean</td><td style="text-align:left">boolean</td><td style="text-align:left">“Z”</td></tr><tr><td style="text-align:left">jbyte</td><td style="text-align:left">byte</td><td style="text-align:left">“B”</td></tr><tr><td style="text-align:left">jchar</td><td style="text-align:left">char</td><td style="text-align:left">“C”</td></tr><tr><td style="text-align:left">jshort</td><td style="text-align:left">short</td><td style="text-align:left">“S”</td></tr><tr><td style="text-align:left">jlong</td><td style="text-align:left">long</td><td style="text-align:left">“J”</td></tr><tr><td style="text-align:left">jfloat</td><td style="text-align:left">float</td><td style="text-align:left">“F”</td></tr><tr><td style="text-align:left">jdouble</td><td style="text-align:left">double</td><td style="text-align:left">“D”</td></tr><tr><td style="text-align:left">jobject</td><td style="text-align:left">Object</td><td style="text-align:left">“Ljava/lang/Object;”</td></tr><tr><td style="text-align:left">jstring</td><td style="text-align:left">String</td><td style="text-align:left">“Ljava/lang/String;”</td></tr><tr><td style="text-align:left">jarray</td><td style="text-align:left">Array</td><td style="text-align:left">“[elementType”</td></tr><tr><td style="text-align:left">jobjectArray</td><td style="text-align:left">Object[]</td><td style="text-align:left">“[Ljava/lang/Object;”</td></tr><tr><td style="text-align:left">jbooleanArray</td><td style="text-align:left">boolean[]</td><td style="text-align:left">“[Z”</td></tr><tr><td style="text-align:left">jbyteArray</td><td style="text-align:left">byte[]</td><td style="text-align:left">“[B”</td></tr><tr><td style="text-align:left">jcharArray</td><td style="text-align:left">char[]</td><td style="text-align:left">“[C”</td></tr><tr><td style="text-align:left">jshortArray</td><td style="text-align:left">short[]</td><td style="text-align:left">“[S”</td></tr><tr><td style="text-align:left">jintArray</td><td style="text-align:left">int[]</td><td style="text-align:left">“[I”</td></tr><tr><td style="text-align:left">jlongArray</td><td style="text-align:left">long[]</td><td style="text-align:left">“[J”</td></tr><tr><td style="text-align:left">jfloatArray</td><td style="text-align:left">float[]</td><td style="text-align:left">“[F”</td></tr><tr><td style="text-align:left">jdoubleArray</td><td style="text-align:left">double[]</td><td style="text-align:left">“[D”</td></tr></tbody></table><h1 id="challenge"><a class="markdownIt-Anchor" href="#challenge"></a> Challenge</h1><h2 id="第一关"><a class="markdownIt-Anchor" href="#第一关"></a> 第一关</h2><blockquote><p>APK结构 &amp; 双开 &amp; 汉化 &amp; APK基础修改</p></blockquote><h3 id="双开"><a class="markdownIt-Anchor" href="#双开"></a> 双开</h3><h4 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h4><p>​双开：简单来说，就是手机同时运行两个或多个相同的应用，例如同时运行两个微信</p><table><thead><tr><th style="text-align:left">原理</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left">修改包名</td><td style="text-align:left">让手机系统认为这是2个APP，这样的话就能生成2个数据存储路径，此时的多开就等于你打开了两个互不干扰的APP</td></tr><tr><td style="text-align:left">修改Framework</td><td style="text-align:left">对于有系统修改权限的厂商，可以修改Framework来实现双开的目的，例如：小米自带多开</td></tr><tr><td style="text-align:left">通过虚拟化技术实现</td><td style="text-align:left">虚拟Framework层、虚拟文件系统、模拟Android对组件的管理、虚拟应用进程管理 等一整套虚拟技术，将APK复制一份到虚拟空间中运行，例如：平行空间</td></tr><tr><td style="text-align:left">以插件机制运行</td><td style="text-align:left">利用反射替换，动态代{过}{滤}理，hook了系统的大部分与system—server进程通讯的函数，以此作为&quot;欺上瞒下&quot;的目的，欺骗系统&quot;以为&quot;只有一个apk在运行，瞒过插件让其&quot;认为&quot;自己已经安装。例如：VirtualApp</td></tr></tbody></table><h4 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h4><p>​首先在 <strong>MT管理器</strong> 或者 <strong>NP管理器</strong> 提取安装包，然后使用 <code>APK共存功能</code>，修改包名，然后这两个管理器可以自动签名，之后就可以安装共存了。同时安装可能出现签名不对的情况，这个是因为两次签名的文件不同，直接把原先的软件卸载即可。但是若是开发者使用了签名校验，那么这个就过不去，会导致闪退崩溃等情况。</p><h3 id="基础修改"><a class="markdownIt-Anchor" href="#基础修改"></a> 基础修改</h3><p>​对于文本，这里就是使用 <code>开发者助手</code> -&gt; <code>界面资源分析</code> -&gt; 复制文本(Я не могу поверить, что это работает, почему?)。之后在 MT管理器 中搜索字符串，找到在 <code>resources.arsc</code> 文件中，然后使用 <strong>arsc编辑器</strong> 打开，利用搜索资源值找到位置进行修改，或者对.arsc文件利用 <strong>翻译模式</strong>，在 [DEFAULT] 中修改字符串。</p><p>​对于图片，使用 <code>开发助手</code> -&gt; <code>布局查看</code>，找到图片的 <code>View Id(Hex)</code> 为 0x7f0800dd，之后在MT管理器中使用XML搜索，以十六进制搜索资源ID，然后得到文件，获得ID值，这里src就是指代 resource.arsc 文件，之后点击文件编辑，以 ID定位资源 可以找到具体的图片路径，然后进行修改。</p><table style="border:none;text-align:center;width:auto;margin: 0 auto;"><tbody><tr><td style="padding: 6px"><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202402242311805.png" ></td>      <td><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202402242312067.png" ></td></tr>        <tr>        <td><strong> 搜索资源ID </strong></td>        <td><strong> 找到配套资源 </td>        </tr></tbody></table><h2 id="第二关"><a class="markdownIt-Anchor" href="#第二关"></a> 第二关</h2><p>修改方法：修改判断、强制跳转、修改寄存器的值。</p><p>tips：在 jadx 中分析 java代码时，这里java代码中每个方法上面的注释对应着smail中方法的名称，可以根据这个来快速查找相应代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* renamed from: onCreate$lambda-2 */</span> <span class="hljs-comment">//这里就是对应smail代码的方法名</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> m38onCreate$lambda2(Ref.IntRef intRef, ChallengeSecond challengeSecond, ImageView imageView, ImageView imageView2, ImageView imageView3, View view) &#123;<br>    <span class="hljs-keyword">if</span> (intRef.element &lt; <span class="hljs-number">10</span>) &#123;<br>        Toast.makeText(challengeSecond, <span class="hljs-string">&quot;请先获取10个硬币哦&quot;</span>, <span class="hljs-number">1</span>).show();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (challengeSecond.isvip()) &#123;<br>        <span class="hljs-type">ChallengeSecond</span> <span class="hljs-variable">challengeSecond2</span> <span class="hljs-operator">=</span> challengeSecond;<br>        Toast.makeText(challengeSecond2, <span class="hljs-string">&quot;当前已经是大会员了哦！&quot;</span>, <span class="hljs-number">1</span>).show();<br>        imageView.setImageResource(R.mipmap.zan_active);<br>        imageView2.setImageResource(R.mipmap.coin_active);<br>        imageView3.setImageResource(R.mipmap.collect_active);<br>        SPUtils.INSTANCE.saveInt(challengeSecond2, <span class="hljs-string">&quot;level&quot;</span>, <span class="hljs-number">2</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Toast.makeText(challengeSecond, <span class="hljs-string">&quot;请先充值大会员哦！&quot;</span>, <span class="hljs-number">1</span>).show();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="修改判断"><a class="markdownIt-Anchor" href="#修改判断"></a> 修改判断</h3><p>​首先在dex文件中搜索关键字定位smail代码，然后修改获取硬币处和判断大会员处的判断即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">124: if-ge p0, v0, :cond_15  -&gt; if-le p0, v0, :cond_15# 修改硬币数量判断<br>147: if-eqz p0, :cond_43 -&gt; if-nez p0, :cond_43# 修改大会员判断<br></code></pre></td></tr></table></figure><h3 id="强制跳转"><a class="markdownIt-Anchor" href="#强制跳转"></a> 强制跳转</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">147: if-eqz p0, :cond_43 -&gt; #if-eqz p0, :cond_43# 直接注释判断，直接运行之后程序<br></code></pre></td></tr></table></figure><h3 id="修改寄存器"><a class="markdownIt-Anchor" href="#修改寄存器"></a> 修改寄存器</h3><p>​这里长按 <code>isvip()Z</code> 的判断，修改最后的返回值 <code>v0</code>为0x1， 然后就可以通过检测</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202402251128828.png" alt="image-20240225112822729" /></p><h2 id="第三关"><a class="markdownIt-Anchor" href="#第三关"></a> 第三关</h2><h3 id="启动广告"><a class="markdownIt-Anchor" href="#启动广告"></a> 启动广告</h3><p>​启动广告流程：启动Activity-&gt;广告Activity-&gt;主页Activity。所以可以修改加载时间，或者直接修改Acitivity切换定位，修改Intent的Activity类名</p><h4 id="修改加载时间"><a class="markdownIt-Anchor" href="#修改加载时间"></a> 修改加载时间</h4><p>​直接启动 MT管理器的 <code>Activity记录</code> 功能，然后获得广告启动的activity：<code>com.zj.wuaipojie.ui.AdActivity</code>，之后在dex文件中搜索类名，获取位置，然后修改3000为0(注意只能修改smail代码)即可直接跳过广告。</p><h4 id="修改切换定位"><a class="markdownIt-Anchor" href="#修改切换定位"></a> 修改切换定位</h4><p>​在MT管理器中搜索<code>com.zj.wuaipojie.ui.AdActivity</code>，之后长按复制smail代码的名称<code>Lcom/zj/wuaipojie/ui/AdActivity;</code>，之后将这个作为代码进行搜索，查看什么调用了这个代码，然后发现<code>com.zj.wuaipojie.ui.Adapter.ChallengeAdapter</code>类调用这个代码，发现使用switch来进行切换，这里直接将AdActivity改为ChallengeThrid即可，这样就跳过了广告。(补充：这里也可以直接通过修改xml上面的<code>AdActivity</code>为<code>ChallengeThird</code>来通过)</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202402251153187.png" alt="image-20240225115316143" /></p><h3 id="弹窗广告"><a class="markdownIt-Anchor" href="#弹窗广告"></a> 弹窗广告</h3><h4 id="更新弹窗"><a class="markdownIt-Anchor" href="#更新弹窗"></a> 更新弹窗</h4><p>​修改 <code>android:versionCode=&quot;1&quot;</code> 为2即可去除</p><h4 id="一号与二号弹窗"><a class="markdownIt-Anchor" href="#一号与二号弹窗"></a> 一号与二号弹窗</h4><p>​这里使用算法助手进行弹窗hook(首先需要在LSPosed中启动模块与对应程序)，找到弹窗的方法，并使用NP管理器在dex中寻找方法名(com.zj.wuaipojie.ui.ChallengeThird.onCreate方法)找到指定位置，之后注释掉用于弹窗展示的<strong>show</strong>方法即可</p><h4 id="图片广告"><a class="markdownIt-Anchor" href="#图片广告"></a> 图片广告</h4><p>​使用开发助手定位资源ID，然后在NP管理器中搜索相应XML资源，之后定位到具体的xml代码，可以修改宽高为0来隐藏弹窗，或者可以直接添加<code>android:visibility=&quot;gone&quot;</code>对内容进行隐藏</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202402251614258.png" alt="image-20240225161436167" /></p><h2 id="第四关"><a class="markdownIt-Anchor" href="#第四关"></a> 第四关</h2><p>​首先找到关键的 <code>check</code> 方法，之后下断点进行调试，进入<code>invoke-virtual Base64Utils-&gt;encodeToString([B)String, v1, v0</code>，之后查看赋值后的 v0 的值，即为flag。这里需要注意调试的时候有很多bug，需要进入方法内才能看到返回值。</p><p>​或者使用 log 插桩方法，具体看这个-&gt;<a href="https://www.52pojie.cn/thread-1714727-1-1.html">《安卓逆向这档事》五、1000-7=？&amp;动态调试&amp;Log插桩 - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><h1 id="参考-6"><a class="markdownIt-Anchor" href="#参考-6"></a> 参考</h1><ul><li><a href="https://www.52pojie.cn/home.php?mod=space&amp;uid=1109458&amp;do=thread&amp;view=me&amp;from=space">正己的帖子 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Pwn.college(3)</title>
    <link href="/posts/a9b269a3.html"/>
    <url>/posts/a9b269a3.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="84978abab22f30cb0f2b63df76568eaa648484a8d794208dd8f81848cc38e547"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Pwn笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Pwn.college(2)</title>
    <link href="/posts/b0a958e2.html"/>
    <url>/posts/b0a958e2.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="73ede144530fd3689fdddd0aab834170acbbc6902b6003ec02498883b0192788">6ca2c47afb202d5322d0c67c479bdef2ffc2ef06766e8f95a6982bb813c6a94c9f9ba9ee39850cc6d2d4b6b1358e245c17e38e2e23bb2f88326c77626b5ececee0a059df47b9528f3372ff6945d26f5acf782201a65c5d04fa9c58c95ae265a6932d7cfde5fd56140bb38ec5ce2381519c94abe07a0fb7ffc02648b19fc988efbfe677d3ee990a0cd9665bfd4d1d94051534bd78caaf9ef3e652d777208742c1e7d2f2bf22d47649774995dd176acf99acea10df5e1a2ce532ce11e7aff608956cca713b528df57cd1da17f6c65273274f1ec95810d9883fe609082890570e7383542937a98dc10f79f3b1176e3626b20294ed0bb6396ef41ee07c6fe078c527c6e0ea46da82f159773a0f14e0276e6e9626896af5bcc19c14b3ec9989781faecc15eba6e14aa86d9059224511545fd9aebbdcbc125081ddefff11c0f58248f61ced5bad67202f1067653f4a9c214c4b864ff3e9218ed6487f18ab130906cafb5f1c989ad3be328c450a964d35e29d32fc736a37b1c5c2872765c48cb34d1553e8b5d70ee91273a733337ca45efda12766907f4e9f818a22b846a60423e2e6ed8cd9620fc5fd3bbecd8f8ff7c263bf652d3f3c5075691587c690086e97ad14afd1db5561cfc869eccc92bf6f29b9293fa8d2a373854c2a3e935998fd2f57699d2497be73e67f4aed59fe5d55cc03cbc047052166606196a088c1947961b8d0ba86b7ac19080211b4218795a3a1447ac012db8d5704497bf5e53a7d9d50533f4bcb563f68448aa2e8e9e0e63f58012397c1dd4f42a2ab46d9c2dd3d2be9dbc18d87c6a90e8cf3b6b53637e3409d2d648af5768d0382be470bd4118e8373320aa800bd0071896787bd5ffc21cc007542f85d0bb6e6bd4031c5b6576a45f603a70bca8c13fab827a13f8cf96f7f0957742b9c26ec32f9a3a8068c74bfba5eca98892e4545f165e54f872dedcc03737c3dc56e3eab2ce11b89dd87d24f42bd8ae9141b545380b1dc0479461685839e2ef186851677c8fc59fc48d082f20f0a4db2fb03116760f0170bfea3f066aad2cdc1990194568edceb763d1941ac79525f3bb56a74a39c6b9746611687c9075e947da75b8c135502a95195266819f8175651dfdd74c29bd6e529f9060e020cd21b9e20e1e1b6df2876650339c14c310f363f26cf5aa14df2cfd00d068dc479b2873f5a02f8d20c67a25461eddfef9cd9850102f8582f9f3457c8dd7e1e12beb217cee042f039a94dd3ceb098c3b476334dfffe07eafa1b698c8bd7964823ba15208ae3eb18dbbd89ed4bfa9eec06390d81bbb5e545c792ac28cd6f8df56b1779a005061849784a5613e56c43bc5428c26f53768c09a8ceb05fdb18532b3395d789c0820dbe35979cf04e6a0b078a6e130a894fb9ddf5e8779bcc5ab02d77f3dcb5c84fcc00ca57563fbc854094c902388a94684323361c9a1dff3910a86893b1bbf3b3a762ff7f1902821acf395d1afd253d7940f7978378643b0ed3976faeeeb214fac2fc55eab9b4fa8817d1196c7b2c498bb39fde5fa41190bbcec41a7061cc874eda68000a159c5d3a6be1eb82a5adfcb806da57f8ec84e48950432475583fa481c75630dcfcc53d1a2d30e64da3c26554ea0b324a53aba68134f03ae55e3dca1f5ecf63b2a6ddcf48d395f3cbe31719db989772468985f61825c750da63a17416b007c66dd1f8a7b36c0400f6207471b5f9648c6ada83e1bca49817930ab436a07eff3d333338194b60f911816d6191ca3eec48101e6c56b82229c6df1c0d2039d3d388d1db6b138093c49fc182702169c2a777f2cdd2ef4a5c73656962bf7cea5208ea05a92af15a4703e4e3157e23ea53b238e3969b1c69572cd204fc61c3785575b8a86a759a40dd416e296a74cf83dbc77f0bdeb4974fc2b4b1d071265a02628da9a5592197548a69ae7f1b82231d8190d501707b403a989e76052012923f2d5497ba06d75eea0142ec515d8ea1ff85b036ab7806ee14db98f87c6a8b176dd23e39a33168b75694a1f4d5a1bb4ca387622a534e51d143f6e1d6aefc35e37db793329ece4dd1678ed639189f34470bddd0a501c70b146c11eca73583022cc5132b5e8389f1077aa5767f20e78f16369eb4dd27f911348fcab50a16f8c65269506003963c408728e6eff15be3e5e4331a692f2a06c46ad293c4e59eea82a2e0b761b07e79a9573dfd7e853a084ad68f0e08fae7844db079addc0976dd0fd1fe6e60aefcaec1cb5014f2f67d22c77210a9aec2210b450658048960d1621e59f52ef8438338545a7c770631725fbf196c4c75ab8923f98285554a2e2cd60202f5115b7915e0ac683209c17529d9d5ff17c2f93ff35a2622864f3d6d3d938864eccd505ce676fb47fb66c6b8b860b46eacfe275e15c90126e43d9009518c1edfc95ba19e82a18b1207d9efbde8f0382b98dfb4e33c73aaaf7cde6dbd69b7bea3bf7237d798f5309b2f00a42120d547e465fe1eb33fb7c30bb7d4400ec1c40fd6bafd666c30becd4894d2a09b18579630eb9db816cc1b469037d9e4596f233702003289f7d9d703b125f3f6605041249f75123f4cd8f1d33ea916297be6d09b34ca80179881e1d60fb9beec1f5cbba608bad1ebbcc9fe98ea93b2e47a97ca3960aeb890f1e49ad6fbb888cb7ac65a5d79d6756c99a6423ee40abe327aa937c7c7b40cabd1cd5d077ac799eab8389f6cfba218ba0de9993e80a69e6950d57310284ee660aa781e2b6510d1d89a82d4bd045d1ac0224a82b406ac75a409dbb4d26fab8295c29961f5908ff18bea3625098558a1daa76cc85fd67806c24fd74b03bf3469fb2c34fcfc7b6a4587218fb13293ce15951a99f3d4aacba0810f16779c54927adb0f30e91fe224877cb0bb0c772f8672887084ec4f8ce5249456e5bcdd49485a002b57fba69989171ff84dc2ff75c2a28bcf6f0fdada53eae544b8623eb52a7c9ca549863495f879c46020055ad26ba068cdaa76918224c17a440c880fdb0ccfee7c8c4c607c05865bf44777379a86d091b1049e842e7f331fee3a8faf19c6082cf3507f38d3847a900d17e68fa1c11bdcd2a241b60b50cbb29e7f453a35d122f72808c013a9742bb7953a0f104d03e0aa23f6ba6f34da46f485b61e527b921c778c7143ae174d8bf416093456ae9a02f9b18c89bf5aba371edd6941a279d00f5c3054e1f9f1cfd3ff584fac5a26949de662c9ec8b275e3bdd7112a67c61779de0db7f87f46aadd8ba3a53cbb70d2f7dcde8f7cd038b908f12fa32e2468e52a693bc9dd7e34ebc30c4ee8bb319d1d71cfe763e9361919b8c465b44068ce1da278dbec68100c3ae6611f8fbe30139b655ecd45c778b0f2bf10df13869f7613abb4582ef3f71c1bd47e3b0cdfcf94a26df786e9428fbc64d2742fcd9ea852c46f05cf3ba58c2a9de907915075bdc88b6bec79bd97532d7182dd9509497af5d385e95795b8158ad82b34b098fbef212f6a5a056953df3b5e65d8893f7cafc9864a3b0a24d851bcd501e9094aa5d136fc87ef93046d06faefc4823b021a1bd9637f7b7999c6fe5e6c439f2dc0d623d30cbc8a0fabd834e5f9f47c635caa704305b9cc0257932c7bef6776058fdd41aee1558a927cc6021df6f40823e9b0635d24805bfa7c9afbcdc7eaafb71480ff318b211a4d9cecffd7eb9fb652ac37d18faa8a8d48fe1af42745d1ba6e04883e63097cbfb9e96def1a097cbd3e3e2ccfbd40165efecbc2603bada155e40944476dfbec8ce6fe120fe338e9695fb830d45307fd342ef2e1385be00f616218c8d8cad2c2a3ec67e69a97b70c02f0d7b0f412e958fe1f76ec8be7d62beab745a3c791ff3c8ba05b4bdeea08fcc1258a0c65d6d00187fff142d0a92f07b10ad402c6c59c62cb1270d83a086917edb352ef29bdf237869cb651f66d23632499b0e8a10548aab85b603f51da50ecbba100ccbf1595c60e2c8f6afb982eb36d99e2850ef4ab6a8c8a340aaf467a429386206d492f10a610c8334f25ef14afacb2b383269b47559e920ad3c7ddd81439b8d1c0f606fdc3348ec4d4170709160e74314b18fe5c5079c70dc00363bc54fd769d49565c9fff84fd5dc82d1d55de6b132221456d5e039d04ea155feb7f3afe17d43603ac3f058177a192aa88441f747684e56f0b77420edac9c4a4bf955bb91fd75e8eb13747ed78eabd920ee626794980b96726629901f5c091c94038ae3dd1a7f8ba9f380f3ae6ec8accd1c25ddcec13d68d15ba580967b436335d6ffabef8c4e1327a68308cb16c525a720a3c34c645426c1fd38aecc15397412b85582f489a4bde7f63d078f3c41b2e8ff444609b0e5f92eb2d355b0f5b69b262f89a5c2b03ddf88a41052c74b50b5cc613612e480fe0133e9d0806e3ff5da7a8f7bb1bedd7b5c1334388ddb0f60a8b864caac697f81bddc15f17390e15cd4cf9b00c7ad62af6eb42248b10cdfc22282195bb2005c5834c529e94cd2c2757c83e94a5ae008b52c6115bcddcedd2683e7c7534571b88ecdf8e2c7b03d1a57947eb5e5cd775ea1243fc9794812961daf0a2450e63ca66b6e9ce059f834e8e0f4ec956c4f4ea0ed3e39df3d6e34ed22046fa242a7ef2c0a744d07e64f960729ff648b6c5a1c691508b97afcbec671c3f260fe704afd98b8d6dc1e39dd862ffb633ad4ee17e89e67eb61d0fe84962cf285fc2fa977e4cbfd6f145d62404f1090ded0c976e6f8b7f2c6d81d07bec09b83d7b694811d50a6a4ccd12d35a3dab63618f0cce422c4960016e5bb8ca717351b51f5350b5425291aab467864a1c0bfa729793ea796f6fa14892487e013120ea6eb066c18e83dda2c162a0e0d59d03a878d6bb29d32adabc56880c4c2d2c08d965b22c0294d5ee385acd95dad7d51403448e0c87b7237c017d934551a0124f93c1fa42716860f7acdec96435013dc4494f1729e6b109a74f4fb0252c440908ab5b0343bdad0227ecbe5668cfe43d2eeb27715508798be3d4f9caf40b5b59f0d48796c48e7d60c241188b8240974a474197dce278980c3d0175ed0ca50b7544820fda872eede867b802cd3adcc0eb5f08c48b86f0b22af6d1ec4e6cb6dbc511529879c6c6a7e2b480a8905617262c5dbc4abbf96f2d02d7e39d8d86ca269982d3df2396d7588a4e13271d9cff0d4c30d439f50931abcf9751789b4beac0d45a42109fbd7be7e5f6a83e4b4131ca0564860c48dfb6bb542b5a15cee39e4ec3ae83f974fe14e3e0ef4a6b610ac7a0d6dc88d9d547538d3757ba425b3f8afec2d60a16e9dc9b67684a7ee75e83f49c404a342b84f8683e03cafa337c210d06f82280f880c556a33269d6f72d3e8411cd023b6238bded72a412431e6a8df6a9779226fc69d21fead1af53ee85c42fcd051ff60d4614a898611896a6881176c0dce4696ff685ec5406454877c4109190af02707f79010debf7ef69efcced67035a4eaaab4c3eb77e9950e6e18d472f956a2266a6e5b4a5c4dabd2e08b7e7bd357ba3afdeda16c7cd03702ecfe5014fde15d451554d292d669f3eb86226927fd91ae9614df74c33dcec64410437a7d3cf5089415133d929554433db065c43afcd28868b968f0c15be32b97ce9973a9a5ed54125acb80ed8033175ebd66a04b9671b428fe4b11b76d8793c3823b5cbf38055a0b606144258df36de02320a9c91eb59230afe202f85963e1267b34ef7d21f838bf0467706150f50a90ca06c8d5ca7ea2e698e36aee0f97deee742c345beca67315e39d4ea25a2202e3d414b3173d80c66dfe210db5b2e02f331fcf9e0cca380b3cb98c5fe8b03d2fd4a0816977e2aae99e998188e4d0e5d3ae0d3e506fcfaa59bcab30b6117fc7f7a5345ebbb0eeedebcb4517c3871676f6ec3df2144ff198b3d27180cf170a9868c4666695b87ea3d0dd5a5b4ac9b13c18ee34e84e821128653085439fbdc42cb1245380ba4e33cf83a7dcb5f1c115c07c82c8f9026b479f45feac170d92bc1e3283e5f30d4d27d88cea853ce432dd69feda7c06c456804f7d15fb61a302b757c82bc42e60a8c86cfbc0115034cdd376624f97ba1121da381d5be85d02a7a409a29b43409ab2cc778aa6c913ab6cd39bf122a4fb3e69c18aca09a87e1d54bb7d3000fa49f866524d67bcaa312daf605f1c23f5ec9f0ec8cc61f534ac8f3a4285f37190ae2a5330c2b2ca894e0104923aeb40fe7acc8bc43c989ae3790577660f0e87f5f96606996deb38e217ba18582c2e81cd43725d5c1a3b33d9dabda838fcad2a07c698c1244dc85c25f958082d5c81e65e411e8c6ab4824eb0ae10ab04cd878a5767c301fde96916ea66b2519b86718c465c766269fe2a75751a8d2b63a0a1a956158a3f1fb6c9e38fcd2bec0db43a6dea93a64f785d202c335bfff58d65147fffe12588d3224390eb9203151fb7c159ae30368a97bec9a6c59a04536eccb97fd79384e98d403292f35eca584c45a42c760e66ae3bb2015c40ae6b4c5d8e73b526105a9cd1688be4e9753b8665a98de68e762b0e3dc5c662819b7235ef43e8dc4ab8286b1c9aa819ff8ff50a73c1432bf198a714f6d88123fb4d2c840673e8de6a3db96d025b5d0c93814bdae742bdafc9711c983cd330991662648cb689e0d7b06d8b4a451d1e0301cfe296d9db599893e71f609896b14688de574c0854a5792c57b49546ba024ac57a1c507729e01d15cec9e44e616db846fbade03bb56f73e17325d0edacfe571c75b2264bc96321be38cb1edbbbf64f8244bb5d8211930f5b72709f375abf11cfb1dc3d68d2d6d3b2476f9cc496e8e28d71ea7e26083abceab94a6e401c877bbd89be9e101aa5210ee826b162db0b99b99b615f0bb4ca0739a668aee86c3af60c67d03ae18c8cd86e2657a5b35a660fa88dd643f0f7315352f9715637d72fe9de2703ffb700136bc116cf8f8303565e4b162b42542ea419beaf649080c35e7f5b5e9d4725270faab1d5f389a0ec891915139ea6a43e6d7167cee71459be525cf75516f77c730d47247cfffd999ba4cda175f89504a4d37c6f679e20cf9bfc299a13f5fae62dbff8ca879afbf793a67d379a00e6680a12cd7be9632bf389fa00ccb5b0d161dd38e0078f072843787956f6ce99fca838bf0f7b80b913113b7cef1eb6b77d91ca477e1715015134c9cdace5a92a6f0eeb81319d7ae6d899b3ff757f7e4f364d06666cd8624218c8cf1dfcd6c74bf411b952787c7ac7cdfb9474a9a55c3b6ccee45420c76e2f3ec5ce6660f04d08387142ee62ec338d771411b7bd5dbf34a261a05e0b67412587c00be9ff172862b9162f3892a8a7e6a749adfc66dfe0a878f661cd3a2110cbca42f159976947167d039b0ce2f6912bb856d39a2106204c696f47489fe9f596128f26481bedacacfd8e8f27f6c9ad3d156ff552db8cd867c08e0ad0373301c024f1e6bc8b48df077aa27508aa2a6bb99964ed1a18d89b5effa0053cc2d8e2518ccea21cca61d5fb3a50f4c24394aa5fa2c7bac2f706440bddb5806d4b31561e041a5da5bdd2944e65e95469a7c3ddcbd9241861ada222f2f25975e3d8e25226ae15305d6f63daa6af8d287f71d76adb7822ac8599f6e51388b990c9bc2922d45838a020790bcdf7fc5b8df0a5c37e70ca5c9febefa950c80ca0c1d5c4c1bcd8402a4db13bada939ba58402488fcafd5a6567031c2a1bacb3e742ed6cbfb17e73bb36a7d84af92a5ea0ce92bc6a87ce8932ecd22b3b5361ad780f5dd1a0431ced9ce12f185a364200b20e3df3261951ff16fc935d7ebd5e1efb4255161a3d7f40b23b3dce45854284119f817b714ff26f40d7034c5e172a74fc61e57a2e3c8e996d30e804c516f20df334f0d785c01a4ec555eb0724968f5c8bb8121aa37cbcc0971136c0278f754e031e0fdd47f903308a9c0c61ad665bb9c73ec9d7ee96772ac88b36a0c3f7409bf96c9c76b5e1e9f13a19c8edb5b1c9ed7de8c9863d352244c491120935fd82a85cba0d372273d4d404a463a1be126a70808dcb7c44bc28afaaa172ce914052a24f141357546bf05c2a2fd1b3b8a63e058e6e5cb03706dadb5c37f5daeb19f7be89d5c3326585d5e74ae7440dcc67fa995d3a3ce701cce78b59163777c552e447bd33ac0ada13fc70036b5728b4699491168c89be96dd0777229dd0e75592930604341737447a35a284c686f8947bb7ff0447e9918eb10a90300e2de0a90075a71a28b1b9bb268b407dd74d003ecbdb5153646da3033426646eabf3b3a2c0b4c99565d9f91a963a9d2e30796a9a551689fd9810957e712979187aa630b6397c26b0ee8d519c19d1d4fa7ffe9f7d34364908658f17e7f2ac93bc36b4ff9591247590b68474a52a8aaba59d6893a5e1f321b5ef808439265f49628fea9e664ffc6b46c54191e05049c4d5f339627b4b9407b830d0e9f27750210ba5f5d66dcf6caea7f9bd9512ad6aacbfb1ad987c08a4e60d3c5f9dad8fd244571e10d64052fe4e28817f060ef5db496f3f4ca14e8be1ec5cc55502d83e65fc75db13c10dbed780351e18d3f4b5cd004f6ac1d308098932fb337d9c1e4403e23d6811e23847cc622d5eb78f627d14222edb80502609da5fd0f2587ee9a1a57d1ebcd9ec88938db52beb9f9e70250c351143cd5e3a7608fc706994d9b07c4a481c607ccc2982a58b2d7f4e3bd59094cbe5002bd4775597280c9d6bc771b2c9b1b2876badd247cc2261b10146c2bacf2878b1a32d5cc2093ca085acf7907a34cdf2f32183aca1af27b756b8585534f76529ab36cd16ff6d1fc0c7ed019b71ada5ca37f2ff58ca8d878ef3ce116559b53857ca7d205d535f4d8f6987c9ac3e22838f456b0286b45d9c8647498389b66471c05335fa552e4d35974e3bca025d8fced0480ac85d2feeecd1f89730a3278e4dd89c875c627ef5d3610aa97a9846ebd55246ae3d428086eb98c289d079ab712fd2c0e0231a7b7a5ebe744a4307c9ed6ac14d16f7383ee6b6a76ff3c70acdcdecb04a6b24f8ad5e1a69a78dcf407f9b27401ae1c2afb5611c0a6f560cd9ba7e062f06436bdbd22d5f7e41fbe3a2434a5e4b1fed76a40ce9bef222f399980d2b91056891c849bd1d67f8a7ffdba39877136ec0d3da514a691667ec329657229abd4408884d94fb3d74d9e4ffe404ad5e11fd487f417a770965cc585203a10b1a1ca0c62b6d294bf2f3ff1240aa9dd88eb49316c1f82723377c73bf134bc92549b4fa0f0a661966cb373e464046ca5960829f89ad3cef82ad7285c4772d329869667559ff1c112ca0e998c24a76687139db96a69f690a1ea9539ca7483b34e97918512de46d81c6c7e85c637f0005992ae06a6188670e1abf4e624a9518038efaffacd2da1a221e4f4ed45e6f1fe9e97dc2b25774060105b8f60abb3b1e33942852d458a2e323e8540778332249c3d51fc73fbae5c4e7c7075710233b11772b8693bd5ae57b8c0cccca66bb1f94c99c0988310910908987858ef67c5b3634f01062dde78b93f1c8e832f5f1a459676184d3059886ed4b161785474b1eb3d0497b09bb2359d1fe6e54485b7d57bff454303d7324b8218a8f82c605b29c1bf9895def7bf378406f6543f0b84dd9933ff046cf4f6522d2d424a9b7e4e166d6c7d3cf0b2e539d9276c04bbcedbaa4c31197d0376d28502be5201bceecb75ee20355ac8c0a11d051b30d6558a29bd36f4fa45ab396718713de9eff50580ec2d40cab1ded36b639378db80b508ab8607a3491723df21037cfb099de807abe99fe61b7dc4a36ec0693d2a7b4ffddd64428b1f8db79d3d349b41b5b5605288993d9bb4b03229799b79deabc803ff5d2fe93e2577fb950eed3e5f3c6c8fc80af044363c1790032aaf60f6311b5af98a8c0913fd156cc322d5fff42f04867eab6720473e3e27e59816d304c00e935d370bca534fa4da562289c95c3b3bd744f166807e992d6e763341372c202a1659ce51a27e482256baffd0485954dcc2f2be0fca7188e8c3804de72f3db5abe067a3a8cce63631437566e8b6343837a5459c4985de2eadb7bc19ebc0ae35badd3ca898de21828b353536fd81358563e0c435b5da2e6765638a80781aa9a1d79507c0f89197a78ef4a536a7286ef0c60138d337992ef37c951393f2a672a08e851f1434e3bac4e515a3e34cfefee69cff4d9c2e1f3fcc630dd65ebce8f8b699033e5dd26c5e769d595f7140f93aaf2d2ffdc6122923f73572ca13d442d5149e7f79a58e464ad5aa3832126cfa289e699b37181c4c2dea30a190f77dcc60c95db4ca9dc14a24e8f41c76dbdd6db72f74e9179b0b419542bca76f74b16c4b29bb00b932f2ebba1ce9a39f9ef4fe25ce51f81f2c92cb9c4b389738b5f5a09f106a24f1757b4d05e5499fa9ff2f7bd89dd25aa29243530b7ed1ad1cb59ff8ac8a2b74c4b119bf2b6facc2094c381a41e98c03c552221bd41b5bfd040bbdb35b7f817ff955b011f2e44efc0a89fe9dd2da855f4df4239800df729737bda177135458dc387a7580737496aa94d457bb8eb91106b9abffce250aa6caf86de794c5cd072f51c515040c9afb14d83bca6924f5258ebc983ede8b0d8841dacc6168922502821b94aac7c6fdcdee6b92421c4bd450cb9e8c9d6e743b0628b9f890da4944f2243487a2c090b923480a60cbea669ccec3ae9648a1ba766c8d575bfe1a77667da1968f9b086891e0e7664395140ef81717612e6c3ddafe182e417db1320720adc4fdd8d682cfe6f847f6b1352270df706fc9db480e8a1bb7c35f1c8f77bbcf933121c359e0847937f135d8864cb0d77b375afc0a79193cdbd8daddddaac4c56f7185450e0746cbbca4d82a46d696c99106d91992ccceac6bf45b4c8bc2c44f49d9785ee05170c660726a372c99a4abc21b6a31d5e66c6ebd48f770079ab322dc410ba353587ad6ab689c58fa16be60b2763ada3c5ea19daae4764389518ee895f7cbad964cf4a191286a2100b2e9029d3b555ae066021424531a2b83d0fc60d4b4865df9deaa98997ad8a3d29a17183642658aa32f1a29c439fa06ca04447b289ceac79598a5495c877853995ec46967472b9d00efdd2924884637879a4317c99798caec4a89b147a15cefe7ccbba9922eb2e3c6e63d2c8939593618e6bcea1a71bf4ae438129d2878172e93cfa9ad313ae88c67a2acf21458c497ba03787a27465870a0b2ebefcba84c0e30fb776e5575609835c46b0750375d117bd914367979fa4bd85c347175d6de1499f379785d88afe785160cdec5139d301022e96185467050cc4bf53a36d2f16bf47aaf8ec14c4163dc245109b3f13a66f39a67579c24e69b7f5619950237e57ae0ee0cc5eb5493df7e3eeadb5df98e822f9830f37bb52d56ecb068c400729a5a40643d7aaa061fc83ebbac980759863d736c0a63b66e6de0fb914e17c0100f12a9664b89cd9efd1f8f2dfcecb5e572e0ea65e665a74dc94290df610e6b96578011238c8470594a122ae138feed2d3706ec98012a0373311f5198fb4250d087ab2bf98cc7b783007ce1ffaf7c2f903fb42094c99d71f00696196029809ebac131d136e0f64ecf2341f56a577b9ee4cd3f6009c6422022f8855de0d4681f5745226a9eb3b7b07bc1e3d3d6220dae619761263ef3f82366c8f130560f259f6f5c0ed22836013ecce2d88b5b34b788b2bca0d70010f60a6d81f25d273b1b827139875e0476af94df445280b3de32be74d5aa43eebefe038db678c1f9acf94ec7ab680af489987fe6dbd53e815ffbfd9c0e5a67a5ffdbc5ca355c344e403872eb59dd699909b5cc632135fb30a0a90865963bd598818c07aba5a1ecab283322bbf0d54f486f1e614408904254029f743919af51549423a97432acc1a1ec15d3244fe928262ce128ae0fe778b11522a8e3ed2a035a039ad390cc421c895eb17fff72d9960f9985d8c3b4f2ab2959dd3d323f5a72e87384f6dfc53cd3b1fcdea1ceb42f4976187dda0d679f453984e3377c6eb8e96ef75ac8917effe3d5c83e51cdc5a416835b4d4a5e4aaa68cb2906fa86af12925752ec375efb355595c7373efc5db678f87b9a0c8b508014efdb901cb92a95a43fd4260cf949c0aacbe3055c4aa90dd77600a577be7cf45ec95d88d4dce98960571984ed0e578f2040b9370eb82d6e57b4e15ca7b8b1b30a53ed25bfefc91bf1be28fd7af972bfabaa15b05c647342f359f4bac54827649cca0c5d32cfbd3c0741d566cb8397ee083a5a5bcdd0f8fa82915e6e0f1a95db885b048f5bb3d00706d408a90235e3deeaa942881cc2f1831b39d30c1143506ab2c1a066cbff95291d863d6969fd3705b68eaafc94b349c23fae97422484afc22b47c9e8fc19296f84861e54041b32917d7bc847eeb0fcdd3deb42d89cd03f21c1af809bd1dd5b46ec71fd3abc650e5c0704589227383e38ed8874a34fe55bf126bc48ccf45976057b79dd07cd09e39accab69c09fb70bd2b1d4856feda1734fd9858d738f2a4205a3335e94a8765b4ae29878ab7cc2c7774654069e5d783ab0a0c83f9a181e4fba8903c395d6ce9043a495c26f8fc2983634cb3f70891ef0e027493eefa19cea9398c1f8f3a4008e904d8c0b8514de1e23933865a8e4b5dbe5edbd7d67a64e913cf1ea581d58d8a7290ede3a29cdce56a380022d46fdba6c99477931137e12c3d27777bc69dbec4d2a94bd3763e20fed231e059fb750172df87c24e08659c06447672848f69d513b53bdc7af5002eec65d03578ee68d1324902aea6a422f91e157ae3c824636b91aeeb9fdddf3fe11d67c599727a9f67ef01f171428295f0331aae5204912343e90b666114f248b7807d2bce1c7807e8454b0f806335cb0706b26a92d6f2f1890060dfd16d706da771e2bc6e6613dab45a28ab22ede52b5ce62eb0f1a033746a836a6b19521cecbaf15dc45a74494dd22568bc34086b8496e247bc41972f01f88adef8dc52975e4bb77446f63fccc50a41fd44f93f4861d3325bd728450ea0e3dff7112f34bd3326ba6f3d91001559ba9adbafbfd4b2dfe7c0172ac7ec5357850d1d82aa1d27fe49213da392a9289917451edabf761ffdc9a1b032378f4abe0ec6272d4cb1112ef65e80c8a6d25ae4369eecc7b900b222014b1d59554f130110a185a47ec94b415ebf73bcf55aa50758c24d3b79f42d00465a4b8c8185a126ce8ce51e8cb045a1b41a058e9bab6025ca5ad99bda59e90bd9057a9e7d3a44bb604f0e33e7e582385305b7d704401d6d36450c3572e3ac289a2881331f3cff6aa8dc2275c4eac1bcd229ff66e9d610038035e7afa4907c49f13be54e0b4f53b41841da431bb6624824a1f3289dc244320fdc988ac9c5cd3a8c9b0a99b71863e7fffe55e80230b44ea24ba6e46ed2b7fa4fb8cc4f6b339271eaa969e9e6841066c3729409f64dfe5bab1a0d056fd3c177576f91f17fa584c03796591a68408a0eb7f63c7e97d57aad3ee19f52b5ed8234a5b3ed50f7b35cb8165d455b65e34372675bd13e13541e52c461fed293cc593cd6f56060b7a29a0ac2aada2763ccd9825096408df78bc85c1d40b0ec94b2afb0a10f941b0d5e8165c7e7a80e3d1e5eecadd51087a90ef372730dbd20e23473f7168b8f743665b8f66ab561ba61d389bfacebcf58edbcd8263d13ddf2c27c2e43cc6d2b7a6a706df84bcc99ad631bf0728ee69092fabec29fea135ccf3b495f11bb7c476ac8f86cc42904519bb07cd2d4e2dc537f1b404d08a51027e17b494abadcd967a5aaeb0b5159f091dd29f8ba40cddbf7b4fec405a3d93044754976d2619ccde75392c5718b02b35909b1e18eaef3c69beefca693644d2b1cd4658e2ef09a07317bc8193b820fb8968d513d6992b35f4f7b299b56d0706172a4d416ec16e24c2a317561ae38226b7d1d8db876cd8df22417704563f47b51aa4f8cfa5fc979a14c134702cf6cee633e0ec57b2f5f44102fdf29104c2f37f360ba8bff14a45d4309e64d47e12f2a4cc151247bb6673d9d8b4a1ea98b8f447a1a89bc842c354b9c714990c8ef650137e40322622c9b13a282e334fb57917215cf71c1cc60df69349cdc150aef983e87f6b22386d93409987c7fbd80e1d0b13695392f8ee7f72011f1f36ecf96ee2a1f5ea39ee75e68804f29b7fe023143defddb19541748f2fe00939874ce58495e77a0a9bd3c5ca8d0868ee2e2f6dd6769ed365f4d587b8289cc16b5ad14cc7cbac49afc069332a80b0648e0eb208d4b9260ca4f690d4afc9c2c6f1475bb3adb914c5418eaa019b3de03d831e456542f0b8f65a20d50a93c056bed55266fa0ba6475434bf82c3f59b42f2c4ce8867134c4928174d34505f4fb54bdbc7d6f1ef0b77d77bb6e3e09b4cf888c3ed974a98afbb3506dbd398ea7e511a813debd8895d26dddb939e8b7049f6be8a1fd08fd57449fb7e5cc0c2be2a9789d6173715d90388370ab850e4cf16598f6a795e09c295a4eb1aa90bb1a343f0416923b5e2f3022b03537a2e07c13b9d4d4b680f5100f62f3dc7098ba9ae381d72993287fbf3e531a346cedbcbe2ccbb7239ce156d1d9407e9d76f5ff546821684789f6bfbbea8ac445db450aeedb3df7460f2d44a547e88a7a74d83f616718980f099d068c25fe61507401e0651eb4f35bffbe6d2754ceb7f1c19575c06189702201784464d620034df1663325de10a5c511701bdbd1c7b92eb28e51937426d70fa67a9b01681a2c888c150700b151130f0631b7fa8ef5dd91344885d5ede506176eaea7c7375c33bf8d8bfb6654aa4c491392cd4f2be998df627bf58212b39fcd20c93bf987e579cb991e6a9028742918565cf87d4ca16f2a2e51133d67ffa9d51ab1586cd03d0a6be7ba9a8bcb112f53c5e80102efe548722cce4a7c7dfa2fa64db36d6454d9cc0c4c4e6e9711efe8f8cfb2853bd4ab118ebd0f4ca50c767d805aece940a0f66cdec93e79dab48253850d7a060cf1585cb4c2b66ed2dd5cc289e447774dac2c5b3dab0d33564933f9a9391e018b9ced5982e6881dfff5071520b598c5cda90ec726a25476a1f608356d7647db5e1541df3bcdf79b17e0a46cecd5f55c774e040474107be15914ee73bc3da35d2cf213404e8bba6670bdb6233733356242363fa7e1cc76325c24fbb7e6f586f9537a330290c94e035bd858d2177df52bfc8bb55aa2af36481e0aa6b1e0b851ca49006a1323950ed13921bc808ea7adefba11ba853efe621ed1a2d3ca54520a49ee1ef99d39210ca61e9de15d98ae6ddeac3dac987125edcc7798bb5cd7b49d83854d17504c9776f1fb39aec1602f5ec44922ff4d5521bec99d9bdb8a98ca8cb68be38f3786307d120bd7e3f25da008dbfe7f12e25d0f6023760b692bce4189ba13bbd3c4c03638098b6164e014f4472dfb50158fb3b9fbbb421e9de4cd74b121fad8a4823dcb0ea57db32d60411060103107917399c3c906fb8873bd08dd53889359ee89064732c33327bd5292176487c5d33b88aca2acd86377d7172ba2e8bb413bfeeeba46d447786ca3d9aaf4fe23f8314ec34bf73929c08b1c428181e5e7a77c3b2b4b25e1bdba6c786ef0089fc20acd20664eed09cc2a9c2b4758fb4286ef02e7c046dc3cefe19d939b240e68cbe1047953cb53c724a9c2d748678ec837b32a86216fd3556d6cf511e2630ecac9e371c3ded2488913ea6c2c2e20d742d57856c4f5a086f95fcbe2c26d1e3a5a62769a70004cc1c1886d3712b549e49401a6a27ce8470a95f76f4ec5262b2e28d01fedc36f13b34e9b2ae7dc04b642d72e65a35262dde20e4b3b48c7397bcbeda713bc52125ecb6f123a59fe5b4d2d307b2c4def5d14b34dae7c1a0f0abc635e47a4a875e0a57f299dc088df9da7a14e8695a9d128bf65d971b80a501dea2dffab07299d305a9eb9349b096058b909d46c46e8b859bf7725ab94586da87933f2cd3b17a348095d0b9106d928b13f1090289255842f11ddb6cde35b5c7e5fe7fd703008912c512355d65ad73e6f6a02d7e474ebc1e9ebf563df3887d494b20dd0a4135ab608e7548d0bf6ed2eebed805d2adb5de14d33e0bbacd100bc96f0234b82bb7f470b7fa3a2f23b3b74662b9019e8072555307fd9f8fa65f5b4a73c46cf6b722163241c373136cd8b8dd83aeed330e4720df2bb1aa77bc9796bf8cfa5f06512198576b697e4d4e9a24bec48f674b0116270439180f885e619ed2f1fc082456528e3345ec9372c5f534c9602249636fe19e2b01e7eab3fb9f6b9eb9d6dab7a3f6a5d331a6a47b855d62434bf8ea07216739b02db286efae52027ecb1377a9e0a719422cd990acc31103b830f361951e698a8b90429d22f80e321329aa0b58ae1d66799b12594cc4830b82acd20cd11cffb1c2761f687a96b38e46f1285b669f0b6b07e718ae403721334066dd0a898ee35d94f40cffb3b180baccf0e46dd98258fa102bb585ad517af23178812ce66fe2247a12fdc05b5ecd3bd22b00d6e24e8fb12e017833b9e8370fc6da845dea58dd0efaa4cd3e127706b6549fa1bac0919d08652a84835db1d12c3ae211a3b4a7eb4d1a8d1139c2abe83cd0ed65e43464a791da7fa555e2f7c1ab0b6a550bacb7761c06cb3af120f4189d29fd4945d59d8de38678e4953517af1989087fd6ba47648df67e6e4c025533676e07783a59e9e7fedcc29b5ecdf9e9e98a53506d395accf30345a2ce3fc2a9358bbdec398b1349f461b5020060faa958cefb6c6a34146f5a3c3f3e43e19fbfd433a6e56f1355f962308bf2ab3f3fb6ca81118c8bae9be9bd4622c80bcf0888c5acae97c8b5858f29fb1522d01a053bef1122aacd6b265b114e94ee15dfbd24745dfe8667df3b9b15a328229411d89a08926f8893eb5c8c2b5fb2cdadbefbd9d80a231f9836c182eb1036eaae0e3fd3a574c19ddc1a518c0bc9c655fad4eb11df56daa3d3ea0fd2586522ec139b87a32e54557627932c8c658a42e86852f7f9700bd667f6c47084665d0107391551e45512ddbf8c72266aeb1533739babd74d4182dec33b299fde1aebeef24cfbbd4747b61ef8df250eebf7f6f7784f4b890cfbd9c10342502963df2cb560d435b1796597599902eab4abeff2510a9137ed81782718f8cfb9e01e7d748e8b065763e42cd99da35f04c53ee5089a8d6bee56a22ea02951c0061bf7b1a4607de0a52beee569b2da3461ad60fd516267f9131b192b564be4ab34cdffedccbc44db1ad436c07a021fa182de1696a2a0b69aebb620c7d8fd1d5c660c3646b0bf113099c3af96d113e5d86b6c68e305bcbcac5d9f0ba5aa0cfc92300875fc8366a726f0cbf455dbca44c2504f800a008598e0565e3b07a7112145a9b6f120bf2c08a87ba3c0f1671024a81a7d432d7e768522b60be4e1dc35dbd3565a1f2e05599c48525fdc1fefff40b49eb71c597253d3bdc02543c6f1471c6d66433967c0ab4ad385adbd6db539f3d58dcc1d6181caeb1f89fa1a2b1235065e2375ed7f1d78779e2d1ed63cc599a1ae5797469a915ba1d4696321b931031f56d70893e5a87ad89ab8f87b6c834a8676b5c474a955edcf2d87e64b712d9b11c2f92b10120902b0972f6fee98cfae5cf624b5d6ad2d34f6fffa3e40067807d669d96912cbcb980d9c994eb21cfb072a379ae22b8354acad7612b1b5a934e3a3176de39a66a536e5ee26fde94dbbf0fb867b1c6e81c7218ee3d306e9d731aecb332961b66cc0756f601b932348bf9ce2832570e35c19da93a79078415627cef8a018c21ff5661100b54e91f5bdae6f4f2b022664d92515bdad0dad714f42d6aba76bc0a9726ba92064aee26b0621b54f2f929d95b953ce91860e254051513d64c36d1ae526ec9878f1397bce29787a80a383f2f48c186bdca9b3c27699d1f1486f86e0fecb462b48882a2c132c4ffbd0ae97f21f989999e8179b9f07db044f7063cf252e8aaae41ce70344169da7d3a2cdbb73cd1a24dad4a8ff546da848bf1b66eca1dccaf1af64291a06b6e82b08fb2d6a5b68847713af3ae09498a1a5c441067cff404b4e8a248cb4f3fb3794dcb6ee63a06441378b23e6d1f2046064b1b3428dd624c8cbee6123ace93fecf5def04a7cd9598977780ade1c58b68b7155c8b5a9bf1eed8b9f0569ff3432a549676e0281af57398f8b2dfbd9b314cc2ae8e98d4f2ae6d64be33cbf32c9970531d405d0e4e51c1d88171c5959a45abb35b2c4e60ed2ffbb1a6aa9997fa41d5fd342f9de7394223d2c45a97bfe7f5ee930bb63c29b7a8c3e0d367edc1786743300d82eefe8f7a9027b8cc81e346e92abe6889471229bb81e9071abee8fbfb9ab1e88c0e5843b92aea0c98d6e606f9cc86c09043450a532fa6a26e7ca05162d7f6a070b2fd66401d99d1d22b93077f2e011943a56f9c9b0e38cfb3dd406d927d66140e03f4f492711fba77970ced384a4a7bcd6c14ac42afed196d597fa4622463c086d00d18a50fc4e2ab85c2ae0ab913ad18e5e9a26857cd8a3d89972919ea45e3306b2a0879d51f5f8bf45653b64fa250f7a68f136aeb24cafa703abd3d7d068e1a2fe0e9d48159e790036eccb4b85489ddb3cd68373839ae300508d525ff7be1121635c625d4cd72e3607531991cc8f5542307e683c073dde7d7d353ee07cd977de3cffad0ece2b7e9e476664f27ffadfd1379d7dcc09ec15d63fee119bdac5fa6480d17361a9415ed8a9f374effcd8ac525e2b6ef0c94dcd7bb0dd38fa3125d30c6c137cc5e21e0844a0ca2c362774d0d0519600da54792dd0735350e24a8b0b5d0e55bd8d53756d22e2dbf253c18d7a948fe6c4bc15cacf06af8ca142957fab45ba8c50f4fa6beefcc6cae2912fe969292e3a2085afe1207672783da1d95a6718dea0c201b006440246bfb7907992e0e9f73c8e141f56aac0a3fa2310bd7cf05222c32e89dcce1c43329abd644c3457943cb85742afc5fa341d597db852860950dd84dbce82406d3631a2778a040a945a61454eeb6d0ec991c989dc1ef162b3dbc15a68c99b041b2c73d3c1757ca732bca2a2e74b737291279a1debd77816bb2e6a38d1381721bd834d76e72e519102bcdd3828b2dd9277093009366b747a4682083dc5121a9706f7bdff21766170dc400ec47826796f4d9e935c9499c4e8436f002b98a7ddad30773ebbfc42b409a1922ee8935b364c4dca7ff82141c58d88b35b03c311b74821835c6339b2837eea7255a7c0ad684cc148646be1884c12a4224992d9e6e22079b1cca5f3d94fba62c5f1b028cc6ff8f8814d9773e2af9863269b7e9cb9789c6cc436f3f96179cfbf4f06155ec1ca8bc6b512dc51d30dd35c3bd1ff0fe2607a8a838a39f834999df3d7acde817da2fbc88c7c3d5c6eaec665bb59469ce03e8060a959fe50cd069e9beee843eca9de9fe5e8979d3ec034490b716781bc37c43c52c5c156ad30bdf38d9bfc1dc2f0db18b05d4e981ed44d4eaaf369ffee4bf7ec6f01c9d5c14ece505662716b256abe377684d3505239fd3c3ba2ebc5d88c5c738eeea38c0913a8a0360fc6ba3ce0965790ffcdc339e44e5b30bc7926ce739e9378c8c99004a848a9d61a16095ab6aa20a1821217779d8b55a4680f519ca440a7b64cfd267dde6fa3d969097e33c05def9a53c53230d7314b737d84310dd022492806e90d005036ee42b00711ad07c3bd052915cf28bf76de9ebc9c3057fb64b53b8720a0655ffec6b5aa5b814fa7a6ea582a288a56f198cb20eb6f588131c0ec996a02b669f6e2831efb4359785088fa3beb938252acb222e9754f9cc3662d19d29019f1de8ccd70eb5b58ca58b3570ed33082ffceadac94038aaf7f3e5cce9ff2e04b0fd054dc20f9c696124b818582cd60e4511f3e0fc1bb6acd8c6493ebc25ad055e4eb5ccda08dc6a30e9c687d05f3f7ec84e573110755424bf3c9c1437dd22a98af4e3d8ffc33d7b0ea8919965ce0fb33c7e11833a9642035508e7d17962fa40f667f17ed3c82652e0a1feb9847de565e78cb81127968b80ac3ad0d7ab829d1ad7368d9ee9222049eaea1bf2d9e0ee0abc063df882809952da03513f63452414b94f0bf0b4452dbc0e9984372c8702c809f07a1a2ae7815c4a2cd38b304bb7af773d9826f3679f77ab0022bf9e80b3e498bc67ecdc20ff19844648e7f56e54d7ba34dfb6d28d2d6bca4fa6fdf73df48b48554a4953be68b13c8c1a42aea08547fa7d0de001684a459cecde068ef56f1f78adb36d475d865f1269ed4742a54b1f6a91af06a322a48ccd63bea8e45c8ef50ccd5ab286a2402cf056b8892adea9b092d23a153d44caa9efb97af9cf2b5c2f4c7525680026addd3d226bf4501ae10b4833d2bc48b6c3ecb72cbd808ea147cae22d699fd52447558154a9e114297b7ecffc50d26bd726f942c62813abf5284cd1d97642e2ff653081e5052c28fc4a28df6fe9f999f58c7d791eb7ef3b801b19cebab77a6f26e5a24e37aaabd9298002febf27cfdf2e18298fc7ee5ca633db0e1975e6df0970616cdc46500c1f180636211d334ca32cf940d149d6817f9efac5e3dbcb67b2fb61b33a1a5d8c0ab56941335acea28e037db411a1ed7e69a290bed6da1ed428193d27de3e4817b4850a16a7f1b1f29892bbe7be3dace619e469a291600082cd276ef8185bf262d6c330e26a6d875a8b3aa1691bf8479ab2293264326cb14ca2e0180c903f4dcd351cc8ca92a45292038dc3eabdc94aad89ffa7d519dee0323ea617875c136c5150d2c9cebdbe766e1cbc1f66198cc5077017a12d9898d65630f647bea7de1bc60cf5a9312e268dada790c7c5a50376872c43050d92371b38f809ef03aa1e4c90e2f88d0fae35de148c539dfba8637d27e784bfee1104fa0b0919aca0d231909b475c2a3ce0a8c39805453b60722d678dd6e84f4b7f71bdcb6d26903983a0354fee7fb13fab2ab5714fba4a8f3d9585fbc326eed016dfafa053e4d980d1ab718a1003f41dd99a7f03d6b1251cec60a3a46d7942d9d49ea84f7c68e85190a9c0f9051e3e0cf7fb4941f8919043c507e63c5663653afcfab74df0f89dff71b09b7c0444c6bf34d43292c8a66d05a03aed5da490caa3f2f096c9096d03ea7f7b56778a82b071ecc9cfc68c0ce02f70e004eb42a467469a64a61a590e9afe22a097145be1c68093eea9f3b26242e666baa796cfbd5962d2fb48201e0e941311b9ec61fd1f90c14cb2cd2fdf3ae7f5dd14b8cde5605418ab1056fcb633790f938861990df9eb01d600a19ce61c45975d033b1cf2efe84196ff5b021ab49cddf9ae33a7e9688b8577b8587dbcf015507e1a2412752c098443d873ec11649ae0f160a7383f842675410e1809ad8c32aa2a3fafedc150640b70e2ba63bde137daacf9a278e9265a0c304432fc445ebc9846b74c2e3dcc45daced6e534e47608adffe3b443e270e333ff7e0f98ec881b9cb1fc5670b50ec905a5ea18bb747406e1ba67dcfafea3149ec28555093fd28d3039b098b93fdc6171b92f5d2f4d05c424fdfac78854357167176c9e7a3ec63e8b899d29c814bcb89a3cc80a96a75a9558afd594fe84eea91039948d5712d83d21575264b94a955fbd0d57c3232948d16dc574eed23e49496ba2aca4704933ce79bc82a2cb807fc3dd5072cfeb242f4c25a26204be75d6e8614d08f76a82d8186b963d285659be52d663584e25c8ae220b5c9069ad16a2259f7fe1aa2e3cb258cf783ade079a50e441ef177bca4fd568c31d1b51c7eda5b6292ccef8376ce990354e823dfa1decf9358e6a51839ccf5471f044a709a686c11519e541ae8c35e1ac8c90eb77defe21cd582c91a13cd640c2c437e4bbca2076c9b1425dfaa2ff217c4ea23c0b391f02922f92625938078d4ddd99eb488a1f6ddf8c7085a4679990a69aff67d6a698f78b64a738f3065585ae93c260de54cf2a5c71c27e72e9bec847a6363a1aaaf3a84ee3b746bfa137d73b27efc11b703f015779d3402d258d1105adf3cb012fc6374d045689ee7a163df54cd16b6d05e5e97ef469db9d144fe50f5959de21206aafb266179ddec401dfe82cbec11b5b38d9562bbfddd3beb2e627e1eec7f10db7d796a09ff879684f295432c521780040a3b0c42989f2e6b500a5f241fceaaec3cc55610f87e38aa4bb0dc8f2391963272a096ecbf71b356c8c9ad2851c916fb915db01d1c83e71abe3aca5394e731ee16f0b5e864fec9d7a8b1ebb472d987d30014749339e09242002eec986926ff2218808446d9895bb421f158d7e1a42a90bbf63501b7617f832ab2b7cc0c15e47e4281b50db07bea8177aa286e99a0e6c1f10c673822f37b06f17e1d47adbc0ad58a9308999b3d98a3244a4a885f582fb9c6f4fb7de9b92244e7b4156058a010493927ca7c2115d6e9d0db296cb6ac1233a61dce372dc00144204452ab34a36dee87bc5e0231ef070d966f949aae003de5c142d05c076295e89b5a5930acb4485b1dae359ac7daf1f5bc4765c2c33abd8ae9b8cbf401904f0c2465312e5cc89001ea5ab82c59d2eceaf2d4d75e9093747ad4133da0bb80c472a7610fcb148dfe4b6eb6bcdad71932c7ab9945834cc63fe254301ed1169e33b9a42ed80bcea88780dfe4ec46cbffb9b10ea2f9332cb1daa49a950e8d8aefb80c15940c16d0e85da576eef6c42cf813d240750ba4c984a654494ef89ae3147b6425806ad93e47847ac0db22fa90003793d49915b0e80bcf5026509a2a07b358f9bb428179da5bdd9424666e9f324e785bb39f5c4902682ce80ddf72de0415fd578e8687f8b55546de22ae67c5fdd50bb7c636ee8744a422d9c8fe8df22b6c8065b7dedb8ec7f77f19766121fab74aba7f43a7f3a691941273fb18f95dc9752ac9e74eabbf78302f3256015d3660d3b863d9b94d8fc8b801861934885995a201fdc9872982c0ffe24019f6d796eab1fd47352ec075b83290565ff11a66c997c422def8adc1ce99c825c5ed647d10257e357cb7cdc6a3502d8bf1c51019ba81467f16ae5098fed82b3fc41c54771cfc22d3048fe339bb76cb61e3bf06a674bc9d51efbad93e02e46eeb4fed161acffb3cf3b6704936b9a1b792139051e4d51d501a14dc20c1c7d65ede2ff5ad2bca955de41da480d7ba57b50766c7ae3daa08e38f07d29b653e53d6bc80a838beff23b0ff9a4f95bbc88382aa6d7d39309a36419ce9840af40ab819e6c15a75cc228e2e5951241ce2f6d25a9e1851dc5e15f53d3843b7c4a57d85def656f17504133fe92bf7e8fbd79034e5df0a84b80c4c21906cfbfd487acc6eda1cb4a999622a61d60db44eab60b7a1d488ff998c37f99bcd297f38219451685cd679bee9b319d6efa76bdd80603af2bec54ef83224a183acc6197083a9d6f3ac8c9dcc20bee1e12616c69ea85781867157753d6f044be79497da7a65627d637a5b101962347287e7543546be182c89de1536e60b39d67ca02d61fb9fa5a4f4be0feeffa9a4ef1ea5c3860c547394e49afc39ab7a6a29203094c975f54da63ce49dd0b19d238b3225ffccd01218a4fb811412c18ef2fc75898a29950f5de5b8b22fcb4ef7b7f1f2e05ff26ea5c7e033a1145ec16b45b0f3190462cf3e46a6bc145788ddc20e5711077f15281ce46ad9a5cd3aa41c9bdc7a1191bc25c9230d1d22dcc86e249613a95b5f2f5dd32cf83b2db36f65fff988d58b284c899c6fabd351188a4af3d208885b1d2ef9868c6c6577b5c8f1ad91a6ddec35be2885e1bf3aa7d2596fc9a603a2f4ba77aa0055561a369b6a4fe99a9a68534d452b21b49131f6047c6bb885c18867e8546ae03180cc1e911e35ee46c1f6caa0442c0f8fabf26bfa5f9f06ef436d49e7f325b0ebdc9e172b635ca17527511d7cf5762f8dc3023820bd8f00529c0e4df34e56ca4f3172447358f52c4e3e4c313d2aa08d3726561d1fefb57abeb1027832770353a1d09f673fabba21545b61021de8f745119da7474a101d6db2461992b2fdfc06d04e7e6232e5117e9de88d0a9c40d8b3e4a3b84def52392222b822ab3def3bc3152c922029e44142330b90da9c52b9d0a4d5ca1f560e8f0a18631bec6e5d7d3fe5ec19d9c9fb8855f1758dbeba226102e5b7ae6c3f305314d9942a258e4d99e8e1c349227cb2b0678def3721b78d3dcda895ba1811aed802a5cf1e17cf085feddf310991218cf577d5ae3a58f9b7094a9faecd1c971bc3765463a8bfeaa5da7d35dc94b0870b42afb973dc4b6a9ed558de204cff672e57f63e3ba1a42097ebc8ff52dc952deea1008c586b848fdcb0e5a2713300307b9ff2db0cb63b7dfe1e0e800ea73972c51eeae909047007c4945946f7fd3e69bdeef8c725ef96b12b880f799455feef8caecd1c6cae0bfda21a0432c6ff66d103b2050a7a6b737d3a44fbf43f27e5e0ea33eb6a353b27658cf86b38a8d7d3745a8f59a16df0cd8ccde2c1ac52e60fcc678c98768ed9e43708b8322e5d5d50d4de6eb4b9eb4e0b0d3be9d6c775948b6b5becc6b558774d3fda744798721a1a90c5cebde08d83d7d6ff490ea3eabab9332b073a5036f7e3adcf0a6ec6aa47e8c0485d0babf4c1dd985e21fd77f739a6efe9ba654251918130aa942c1d9be3aeb1f94c6c80eb62f8bf661fbe158ee641b26426cda39aac5b9b34826140eb80cf5d2913fc0f46b7249fcc45f53db11afc58a12a01b9b2b293bd43d25799b03fee846382aa07d5fadb2ec9381f37b6275c0ab687b23ceac0bbabe3d0177adf96d1a3bcc2035c658c8792a8271a328df44aa033b7f3da287a6c8be8dd3cf1b5fffdf69bc39ef6354410c1940703778375a1e42fad2c0b77bb7a38e74103a39a60694dd3983c7e0ac1d4c468b82a61b9e3318ba7c0f80368c52687477a71d9c7511ee5d80fff97a6f97b5c6607fb425fcf1f00cbf8a14fd51bee37cbd1a639f94066772afb4c0b5259880a202ddcfed79ad43a8d0b11340421dcc66c13ef3f0c4deb6a1d124f691af732ef54c261a3a2ea44294ecda0a5f11e7308d205a2aa7bcbf01507bbaf4170eaeddd8bd658ff92d1dfded2697fbb144c0204af38cf6fbdc2cf4cf6b9b9afe16526afad5ebc9db08ac14ec7ab037accfaac72c07455b0cdcefa7fbe074c94d46cbb81c14584d51773be6f6af90662598260c9aaae869155b689283b5b551f5ea4d60f027c83280ee080cb539043961a4179f3b7101e3deffaece0cb21dd7ec255f53c234ec8d6067b8b180019694a445c3178057db395bd6cddbb6733b6830ec0da3b830638edd6c96a0fd1ee715e2f60ee1f9909dfa60ae9dafb47eb26388781f4ad65bec333cdd68f3bdb70e048a1bb91c5436d808102fb1753ecc315905dd6b70f5cc8ea3d11e51d993ec24a9cdf1ce4caa5afeff9af2ac6c451091770aaa59ec72991cb91b62d3e14b6056ff84ab4f36ae7afa566a62c8b1c3c8e7e272b39f6183600c14d2f942049c505e8814e7a60d55ca3f008d7b19d6e2c602112d101a1546509a5256ebc0b6d90a1e89ad55c71e6b45e38582b78d8ce135ce02111c2f4fc928f287e8327a4f241c4fa948fba77c0a597c9ba8109bc2091af27aaea13898a031693476838c2771ac2403170c359f851160e1a9f01e7bd7d7c64401e9faa440fba72f494dcd4531f1b41c04e6f8b3fdde3905083e0840b421ed7cd6fc255712f0cc4fad098b9d8d36701dd9985c4df252c2e86727905e9f395d29eb2e8b753f59858088213b5eb30451e356d918127bf0789a24a193b0a36e5b576cb6e3603090c1cc1ed3d93eab5a1a688ee7b90e9d796e93fffa6fa9f85879f185433941398a58527f956e0f2893eda431fe220fbee74d05c1bb217406d0c06a2e30b3cb0460276b57f8c3bcf48f72549dd67397afede749acf1736dd5c4579eabcecc5caada557c278e50f12f6d1c6f6c024a2edc98e315b74b2575e57450c4751c8f2e6187795cfa65631d4c899340f2130402782c83323c504d79835ff221c33e4aa5cbb711a13fc05a9f3006735d56b7a0c684f1eecea7d2ba6d964e56d87d4d8b0a8a190fc52f41c347fb9eaef56497e096ab4cf074b1ee0960bb8427a5da04b4e58f7981aee1a49d6283dcc1fcb0b9726d5aed8b5ad5e622abe0a9af77c71f3135907cdf24aa6e568cc763edb6d43892aefa8ba88439174fdbbdc39b836d9c1d924ec9fb01981ef2f71600c066f8ead6df13c3b34f06741d4d53105abfbad59175f838adb519b8b4f92ec84e6e54eb84b1385a8ca941904b96d63afbe286cf8dca55553cf3bb9413b27bff05a5c68f3911e6e631be53e13c9cf2afd509bfac80acc14ba1ceec4dd6b7d0dbf470210bfb2597271bd8230ad300173132e38fce62405170befb639ce38c97109420ba84bd8b90ba04024becf76e49c8cf4eeeffd41d37617b0d209c3e54f8152fed8e284c74bf2f94eccc1500392854cfc38e5205af38b26b84994a7c052db890934260c5e0b4ad005b491a7e874c457386424cc6969e82ecfbd14259b4efb6a43aedf1aec0309619051391ebd4e35ab51e9ecfc88212704962265c4e2868e7b3d1b252261d8136d92ff813a5f7c8b269b2622d6e9e305cbce41e068485255c74df907960180bf39548dd5a63942aa86d46e94f77fdd7754291784f8badb84475a8a123c1ff21554825ce63bebc871a53cd1e119b0ebe58f9a03966905e1a14cbabe2b190fb8ab7019189fe40be539d81a5e05838d9b7ebd9c4ef1f7fbc3873b8b9a7077e509ba57b2766368c418b4ffca4ba96975fbbe2c818d608a0deff58d8a9fbfe05ca52193ebed048849e4890a93e05576d4068005355eb76ec48cfa17090d2fb8a9f5b9c71b413e0d0d1a01c365c30ba9c8f8f2e5556351e6cc00b99ec8b2f3d9ec07ede9e256b475f4932455c591cd8696c2bc3ff577028d61b56b01729b60f57cdf5d64714dccea228e5e287d00dfbe3210c3385edbf72fb7adad2d14ce050a18ec2d23effc291c8a5fcc45ecaafcf9b710586f95bad47338faa221e46efb28a8c17922bd98e730ee5a5d729a54dafd7e96bba670a5643756e44f2a8fb33fcb2fd7e9bd52c7d68bceac98b1d0563149d0a32ded20a69ccb7051bc228a0c531cf3530d3dfcd572b60fa38e4af60716792fce0c61569796ff45bbf0226db3b55ff6d67ccd00fff1c981e5e3b4d2410ec33cc4e458e9b0a05b035c222e62b0379b1782fe8f7f6746af238a402e66de25a9407ae4d1a1cce595610bdefbc3b2fc7241ec128c60c4242bd710c9f5722541d83abb8e3d82a25a558e4517fdeaef5be1598aabc2c0de35524c133bc4351e352267b0c505aa88f8e013e319d9c93002222383f9d44e1f1e13786fc30b3d90682230ecc924fc881556c0d120ac68cb42d5ccd04faac1202388c8227d9173bfa218982d5219e10410489155d8654fe2c70aeb80b1184882a7c97c49a5f7f5cbfc49df2ca1114f77c2276fca6ec9bd171e15f00367bfd79b262dac7ba2105fa3db3a40ab30e828c8125341b5b880af1e6c085c2a53dbe205a9ad443f5bac615887d4a23a135be20ec6695c8307346887add2dd4251a8dcb0365fe2c0d92048e4895ccc026d02fcef8a3e6b99500fde08a736687258df4b494355be8add02c621ae51fba1f61e2e5bc681364def28e28ec440801c3531e36ee6a6cc6f1a84d4c0725bbbb769a7571a2454d59e4f296980044a379df6803e587d662ba62047dd9c4b9c5e06a3ce25d91ea07834f6d3da754b1e85a7bdb43be358fa93b3ccd7b49fda424f20b40232256adcbd808397ee641ad88c9dd1b564504be30203a3f07df3c4aae5787f9a264cbed725ab39cb5744044927ace85fe2128f0798eb68e6ba786d1ff1d2544aba758c460079be68362d853cceed4d1673c28765db3e09a789a7978785b28503c80594eb556affb782344ea0d46967877fdb74a614d596357c319ac2b37670c51df47e1e2609c014657fe45f42aa9f0c8eb194c636c03f009df695fbc0260b339e6a4b26248e2ac9860455e563a397d0795a41ea34c9a7dcac27da821c8286b8aed5baf0cb43e5dc8839c996905f533b0f13c73d8694cf0501411da2fb7778f4763f6e429edc2c0d06102b7bfbfda89148d34893aa0b27a112a1bfaf778f2050f8bc259e32cc4ebed940e8b3440fded12d0890ea24156cfd00dcf80f46ef4561db4896f486ed087e1245b10c607c123ec30b68fa93844805ef7a5042494c4725096959da2d6c415ca26120c872b2fcc4d440216ad2745a8a9dcb1158e08c8f0fc57148112c7eaee617a91d12dcd2d138d6636d067e32a9b575b8bf4f2c9041d63fb911d2ac9bed7290c0d1f9b59e97f86476cfce8113ca1845772a8f24940d79d7ddce044e3595db8bb14cc12a166cd1c3ed30358313467761b6341b6a7a1bf58d7da817dbead06edd13d8cf86a7c8a26e2ef930da003048650fa4f00cf1ea50439564b7f5a079552399bf80e83e86b0a482957fe31c5b3d555d3c53c26e9f43e97e0356d8ec8116d47e36e73685195324e386c795d58d83f2c75a891fcb483cb2ef9d02912076ec97222e935122bcb609c3ad4f90245f2b1d9d7f8f564a7e6279d6a68bd2452d3314352d08e1895e1766b050600d91801e2a8f20cf3b0970dbdaf092d349875dd17babbc3fb9a0a93222af79cba8e8adb3373611f97884c9b6a2c7dddf2e5007de256b7fcdeb94adc947dfd178302c735d6474f8d1c74c91f0774ca76be79af5f56a6bd0f16fcf98f89963a1194e9b744ef9b974eb0409d55e0258ae4fbb0e4d7478efe9b85063f4076563205d37df4f173569d34dcac77e893840ec7375f58c1ad3ae8db1ebf00b2dc2bed476f9bfafc56c34f911b05e8f4a50b08271d6114c382c39c2791f20cf943d7d97d06cc49ce9ae64c14506f4806b94a17d3207c59f3296fdc0f1e076f13866aa82adbd5060d0a3ddf2b14e2f36b0ccd5786689c91e460aa739cb41a65955cbdb2560d0bc6b1a6a705776d7d29f71236e41eb85f028ea276fb4ca2eb28d6e5ba1286c4d044cf1d7558b53f15a6870694ce66651ef0c12687c15334786142fdeed85f251d94eb5d7086ffd5a7d1805a520f6cbf9360dff17e8d36d54ab21027a8966e146d6e56b0c39b343cbf2fb00b79e36bf86ff2dd3f550930065453591553450da2411909e288238afff79ab539b38e966b660fc4b6af6e9b85dd2b7a1ee4829e8b057ddb4239cf4c8ebb3b04e57a0fd3bbcd4074bb73dda76db655468d6c0572c396557b2453701d3898ba42ec7ed75ebb34c23e676bbbd0ecbb2ec4ec1fa43ab4299b0b81a8abdefb78d716fb0f2c3722d8993e127805d72fccd134ee9de663599184b3109ec209187703118365a9544525d571d6c780eb08efaa659cd6e505d726d1fd02541496b4c51871b050c07abc36b079d65aff37ed1404bb8da0e4c711791409c1abfe0c8d32d3c75414c8d0d360b4df116ea785e2399c113c534d9889233fc0bf5decc6c8be23de1649c14df1005cff2899228986ec6d2c314ae51cccd0505e4f8ccdfabb3f191977ede0008adbd829e601156920fa1d31621001afa6f60a3c8135cf10522a775715db0ebc4292b1179b83156c5df727d90f9bf23fe455d2332e193b219158f113923a09fdd4f20dd01e3c7d1822bc250fc9250151e52aec606aafd9c48bac29656fc98d1d0ef7b5d7f0026e68b5e2c6063adc4d017b53a46fd1e694bfb8edc27f5ff55018542faf38c928e825147e70b525b37ee9c6aa04b7496007b0d66e3520c6dc5663889abd7ac5dce9b3d82ab90798e0622e031720c607029276cdb38adab9dfad8e6459af1e6f5a2f77ab929654ddad2bc8474a7b63db5a3e820898bda4fbfd0f9a211e4ee3f21fa52bb940121ed53f836e6a8ceb0cb82b31100ecd0f7d76580c6872c571c5d9a15c02f13993f10f0bafa5fbe912154552bfaee0c0e6fcb06527e52e8bd8040d840de305936139c82b8ce5693a3a4658d5898b20bbd20172abfe37901bfc37b4a92be6add354b5b5bcbf33b4273e3d16d5e0b672e160c5e723d5d02035d240881032344041e5ba6cbe4469b7bc21529a50d9f649866db95df53a1f80bbee41920692dcc0982c60cc7879341069759c9e0427bb38de63f853160cd9c2aecc9fdbc74e65162fbd6c8f794baa9b90f6d132389f723ce93c78fae018ff61cfb34b47958c5305200a9b21b73a4e175147b4ecc1861feb79ac8f5543e340b64d9c3fb0fcab7b8a9fbf9110b12d8c5fae508877a1872aea4ca4d935e44ccf171e4b50cffc6ff290ab3787d6ed5bce3520bf6a5be9e58c71b45ab434d2fc6e31e070bec7c63cc403d8705b5740fbd8f4652ccd089b3eb2351b9365a612a05fc0e5a2b975f7ad3194aecb176e353f263d0330f375c1209bf250518735c4de807f477b301014c1851b32c1bb6319a0bba90a19112856b6e9bb2f09e9c4405ea81cd5445e6472e671a6b4229ba2ec205ab00b621fd0c36bf56cb6c5bb81604e99dba13b22ff8443b57f9088e26dcf3b7384914f376b6e06767db22492fb09c866627dcfc80f0bb0d26febe2221654906c9d4b7750f4eaf36823e7549f35270de23321402849da7106f00517be2b2407b8cc0ed8be4324f4c15f9ed566cabe917f5b04b528c3034b80724c0b19b550ea0843d5ce70023768b8b323dc937497ec79af50195e9dbfa040426ed6dd24f817f3dc43fc67a35a703d3d1c17e48611b1bcd5d265f60d3f5009190b3972a3e032e92ecafefbb3072adecd60a5c9e9b166d68e841ecc159081ef42f900f2473548aa4fe92e588a3680ce47d73d6df37ac4e14a5c12b1d4d2a2d33add4f1d6fc0bab2d6775000447cb51afdaaac920e894faf268aabb11aeb21677562d7f08c8372a95e25ddebf8d53a2e40c17f35e15f6b3086242688d3c8674d09d46f479c4b7285e43518d7a6fb5c026cdcee74ffccebcdcaaa447e0e760830efaf53034d4526c4c195858e0d73b586047928c7be616e24d210b3d3a4886e1683b1d2a208ccf19db873c459404a02888c95607ed5c38b5d6c8770e5d9038b937358ec543e4f627628a05fbeab56361aab5ab1f96b0f523f563334d607df1165877c51ef5ae3e3ceeac2ba0c6e45c188f07b9b148bd607f0e06b5f0240ec3a8d958d0f33a2d8a5040f3bb34eb4c67139f2e89f467495c636cc60937daf2b20609436cd96f8941a6e9756bdcb50dc4a7e9b62f40e7932e4bbe7f9be7763c9998bf08941c173a408e7d27b182ac3afd2fae968ffc2f6b01bc55b3b99e613f2e82833cd435e6e9b9c614307a2b5d0a89a7e3e5bfee02a8f0c793bf1e8a286e4b13b403f0c43f2cefdf26cbdf001c4cc9248b5db93eb3b5df402bff40acb9933f060ee16678b21c90ccbe8c97b32156da79790f4745ea29fd32895da8682d183fe101dc809d17007eb0ca2a225a7620987e9c62f9210dd68be1bdcca5b3e3dff7a6b9d284b24ddd3e74035b06fe772f67e2a83d9bc3462517a10e9f555cddc642e588e093bae20af8cbc5b16c225e0b48a2575690f5864bea3f56b2ea90b0c2a32fd9cda6d433f1162b871e7659fa5cabbdd390cf9184684f05f3486a0539a4852a6dbe1fa4dde0c9abb2d0a1861b539e04c1d425d18a2c23486c55fd7daa960df0a9e7ef71f7d0c30e440bdc19ce2995c2199ab4a28a31440e1e5b7a35e7c0f708b6af5fdfe87e5a72dc0242c43c709fbe8f23702d1ed7838bda311b181edfebf7b13584b337c702e16483dd344d7b95fbd07f755647faebb15a64ffb90774048114bd4e60ed64d79fe21df085838e8c53554f95b5f11bdfb5becd76457be7e298b01957cdf883fe4e9c443312d8a151b0f3115e05adac332f1051e9b2cb897768b2a1370660f62320c4856d43dc08a3f9875654dddb085c2f69fce4b05a3722e652777efcc6647f776b2813e9e75d695d782c7b3d6d6d61a3c00834f5cef5122ae8b0de978713e9219337949e9169b29951ef60c8d8f8286db70ce86f2e3f87ad8a261b7696f8010faebbe661c0abcebe60d302713db1cefa8ddc313bab0342b2c63080ee3475343d65854f7834016420b26e0be90e9d8f6c6069a3a6ba2552694e486a787ec94ff226603bbb757ff0785ca37c75f4e11a45cc34ac965baf5c73fe4ee7caada6cd9e335270d9d75894005fe0ff0baf7a2bdb5cf217f4c4a6676a36bb8656785864dfe8390f5bffe8276ab6e0eb46efabe8900c93eb1728a1edce1cda6976cf00eb9c9b91897be728e4463baf174c0cf27c3cfe36f9d81ea25f6b945c34ac299d524c16c9233026ecd1c55cd25b3677cdef7d1e0db9996ac31181647c895772450d1eefb8bc120dbce6867a0389e3faf52560f62e9933716fcc09f7f0137898c7f3b6eeffe1c462281b694805f8c9836e3f7d08912716e1989386e90ab1a335ef7d80f4d3e1bd692156745b663aed6cbd6853fa8b945c455417a0da610c188f09e964f5194937dbea374b7dc3ef32b475a2363ce21fc55dddaf1e214d6d7185a9cabcf351f51f8bd05e9ee7329f339f14a0c5689eb82c29e6b2efbba54ddb61541cde1d81adbe19337ce3469b40a9b95d6592f9aec0ca3865cf157e306d3abda25b8f3c893bca3a2703376f9e260175470b9aaae4f5d5f95afc4e43a80f83c123b92d12aaeb1ab0cce3bd772bc197f1564abb15479952f14deb5f4ce92366ac308a8442aeae0d43ad7d06dbad31ee9e77376f6ad70aa7f83e5522c0122e0263e0efe4d32963a5c72f650cf97bbc689cbb6782b5e24fa3f1d168cd59b8a2571ff2680e8182c320776c8f6cd0fdbb045dcc7d071f80887ceb570aacca3c4f833a0864178922409a471650408f868c89e1f14f18afd450bb5798d93d2d1c4a334e46b0c2b92d3f92efc7171d8c15cf1861eea83106fffe633ed2925dc8da86441e2db62a684d958a301bcad1a51f49ee51a83c20aa86d9802565a50d7756cbe7c7ade5dd690da4805a1a0e191476413933658f6f52213fe61b3efa6907e4d12c83d2d35fdf5be1464cb67243458cd387b8a90cc3b44f39776c597192fc060b6b517fe1edf1777c4467fe2e483246d1bf9a97f11c9d5521fad80a417ea498d5e4da47eccb2184119dfe12d7fd515acfc59f2c216abeb8c5904936aa8fab28975ee99f76a9e147d5ec315afdd7febe24eddf0825ce16dc70439717424e8e321ce69f1d7c7eaa7c4848c51651ec47d35d3b607caaf90ca3762326ea9eca21b9b67a6bfe10489f4518d38ed8fe92d167b8d8ae232d4de2db9bdf199fddee3ddea47c86ba2328b8a65e8beacc44c8ee9f3a28d01a5d9eb477adca08dc244f443eeb8c194609dde433492d876549241a6fb122aabafc95573f28ae37b15ec37a16fe6b1dd7d8596d2cf463afd30231c3f179358d7e7b22c274f6b0d5b342edb9d1a1c5423c7227f2546015657f79894d8c613d0f867fc3d55312928eb5c100aeb15cfeb390cc8073e41d60e799e8beca72b060f9b30d621c2451129befc6ba037ce89dd8c28f9414ddc09135393bdbb2203c157ddab77df24fcb0f8472f4cdf50bb36ec23667b4530e00c29f46a36293f498a97720959c8c14b59ab23559e04714069bf67d33f983558fa9b20f2856ff0710869240ef78a05974cae842475433f66c9089dd934b13cabe8744343518a3863890e704982c13640eef80a32ee761672a2835cf6b0a7a7fca55e6b816af199c070aece16599059a2d62acb414cf00492c08508862814019c36c39916e7e8efbbb8f7938ae08557e7f54b198cb522bb1700ce87f522c1982f30f9fca6a17e3b62b527883273df81b96a586c36bad9a29ba5211a3bbbec0be6e8d7d1f0d6a901f7c49e12954ad76351c96b2a91f22e043454d825a2ccb6d3f446f387c759da0e721055a99aaab7aaef5add4052b3c7a58a7234af9c3dfb3616cdcdd9b421cd7695d363f828e92740ae32bb96e7c7d3f350d08907d680aca4f91b9e5198c4834a69580354f48daae02f941ed38f15fe0f9ade3a05d47ac8632651e06afe718a7d6cab5f40ce1b1b86c684002ac85b18a6a2ead5057da00a1b6e2b5e15e3aa7349cb6609c2a21976ef353c92603d322aa87c0c2fa4d8d7283c5d07b3efa0c0c4aa4239db2796282f10e20b2d624505801a9ef19bda9efdabe59ddfc38a4825db9691a0baae88451a8edb4d9c6dd071bbbf7fd3b891d0be2d4af15219d13a8acd3fb4f4e592811550853c90b1193db549226c72bb01e289e67e9cf0f14becbf544d4b2f4f958b2e9a80759cdf421343aec38949c3ed2494c9abdac2a913fbd94cc27942dfe7c42602e3b439beacf83f5d63a92b51fcb64c9e03e2c5beab3c0cf8bea439b9b2933541a325e67c65936294bc217316f7994de84bb4c8cd827c9aba55fa8d3f67cb0cb914287ef61fba1cd0469955fe5e5b008704c333dd27bc0f857aa8634e902a4b7280dcd17d4dff47093372a51e083c70b94fedae2fb92c7ed0e482b825cf1daff783d537d0bcc09f1b0f2cb6dfec21788cc03513ee185e25304b400e55c4bdd2d654c4b4e0805544c9223d551351952af02edd7c381f89e1c3f9b3dec0ef4d709d686f563caad9241940dbb0ebd8cc33e920d67c855d4e81f711571e762a3469eafce156b258458498d8e2d64bd2aa8d35a6dea17780a2d0ecd84ffeb444624c55069aa0cdf9fea235a86f624a3498742f0082183877e62c137ce0ef881497e32358f89f561fc347365c6addd08c618e7f43204623b4d1672ddac7abd17d0442e7c8565fb0231a7ddd67a49259bfc138f1655e8f9f834ab80b2272c142d95e19dd94ea553e584480834c1148646ffe554819d2c90b2761ae146b3350e596d61c2a20317a652c5dfa94e9fe61131560f2ca2666184830e7854c3f3f9c2d6c3b507a05bb77b8c23d11ffeb75cfdb8857d35a26dbd46897d94d19d71d702f17103955107a72bca15d85be3f08adc94197c077f9357b686729cc7a7396e9ce1b1f2b2a542af65aec143f6715753b33199eb78ad0f72159ed089cc72233e2518242880bb57ec3cf6546361e00a6042e7584a31f9845590a937e3be7558ed95cf6d6a300e8da5ae39687f284adb166212866c06c68bdefe13bcd528e15471ada427c6b4fea58b9d192033a8acdac9b619a692d4995cb3cfa8e54ae230511bbe7de1eadf39ebf6dd1f3ae5084667387bf4c32215e86731c22c2a4cfad03785c53165cbef98d3471b21bc476f47a558828f253286ea475b1ebe4c5f884bf51fde8f4bc7753785f99c7d9602fd4d831e98c39466ceb769678adc5e2680761eac0ddbb94e3b6585ff3ab1361aa24fab519b428caab036f0be107df31c2f2da7a8d668b615d818615f114a3c2fd4f15712f1001248e9bf3fc542cdee8a8e89c3c8e05ee92dbb9cedd1009de3214678a9fdf2921f23056903c0af6831a5ad44c062cc06eb0fe70936b57eadc443ef1060471aa9a3de9703d3d108430127d2f73af30ed24250f0e5db508bf57bbcae38039c90cbd3dc05d3a781df8a2ca23b22cb935c73e6e5b1be3bdffeed98b5cce396dab599309dab8f2e06d5416a86a4515b21cc365e689f04b82946354b465a67982eebebdf26353ba0bc3773e16faada3645cc7131d05fd6eb0a810ab4970b12562fd11ca00dbb58ecc1420b62f5375c5be022f2051f2eb7d53c6b6813eca432e31ed6383648ae37c8ebf280a1da27b1ea60fc5aa2187132612c8331d1a82f613b612f8a504b0c28638fa19b6f8ccbe0ee6b0d4493282153eaa22ea27f7fefb077b5ece71896e157f4e4f9bbeb15eb0e282b44003582bcf9fcfb683a3c9a35ce27cd2e6b5dbe7e8aac30e6af8a4d00ef3f7b36a0ac493a91df874fea05c04e0412ecf2189db217a7c49ea06c3940fef38183e94bbb331e8420db196f2f26f9ce1f2ee8f4d89ea70b33fd4cfc1f51d7c0daed2a5d74075442f51d3be03f461b9d3d5995af5514c25a4071fd954df1c9323009d214959fb5c554a8e2d833b65b5353f0edc92347b699ca8442c0ac7f71731a94f282235011dff7553787094dd72ed4f3b9d2e67f62e9c5e9819d1f41358886519ef542600e15caadb0280e56c135fd6e186d7b88ff8f6be78c3f31c785f64fa5b3498c70f7e99fe738273ff7f412d1cf7bc2ee77bcb3b000b30a09cebcd94eb90444e644dbdb12f484f027f101779569e4f965bb68318137ec422812fd279b9e99b6290367f31c1ec606330f7c9e22b5e7b7e617211baa62b7ccc9a0a6c36f59ed6258c527cf3d23cd2dbb626d1e32f7b6a6bd07a792fdd14d9ebfd491839bde14b4d97ec6f31011def798f6d46f37fc3ef551cf6a8b88e2b337746028b1f85d066f9923f4c5ddd1155000765c4252460e7428595b0f6b1404592af6614af070d228300b5ecf83e7dc1f5e02b94b433391f6bf3a8991eb17841144be0e243890967a2773e979b922f5eb2242ee34d4d65a28dcb5634ba2ce06d20f03238564bb8f146ff3af3e4409b8a0c5fdd8990502c16fb5ec6ed7259cb1e0d2d6364052093ca1d6db23b7762980c21684cd868506a5a4873830849b509c578d9cc6f7359f5c644d366801bd58897ca298859cb0900d5f21d6e68457d4ba8332a663b0f334f8868b5db4c3563c6764339bf147ec5eea1dffc5180f359b10827abf4f069fca557c1f7409e07de8f8aa6898a8f78b5d31ac0b69789249bbd80beea941df78379f4dd4e8cefefb86a8faec07c1e3e1f00da25deebd2ecfb01ae497dca3c70644b2afe9e391e1e55f0cd94571fe32fa70eafd2aae930d9cb9087a1a5b400ba8bd4dd7ad85ec107cdf3bfb40c94c1380c46d6c756039255aa4cadf37ab6d1b74eb6798902562321f9fb2f5f14d4d0043bbabaf3946872372b70478884e1583f10c9b00c61d1a81557e6a3d1da7a5ec552a934e9b05302e31b136b3a636a8c3a2694871a53db98718fb3de69010032ec9c7b6329e5e8ab990932e559a7b5089646965a6b83d83736a283065600713c6c2941cc30ad151506d8ce1f61ddad4c373a277ab96005facc27f03df5464e76378e839cc49fbe8ef364bdfe79fa3211b187276eb34f98bcaebabc9c69ec832eb5df023389707d1e402a5a090dc8e18df403daa9f74f7c9d6f79e73568c668b33a8d4bbc75ac9e53a701a6a84b292f91c3e2203fcd9d233d942963ac67ded8c0df462786ff2502956567858ff49a1642bf58fceca2c17260ee8d1439b2cd3ca9ae207cef3eae9261b94d0cfa85d7e14631ab53346125232eaab2e90f8f76e44ea77193b242dc754dd9605171d2b6536b771f3c80e5cd36d8af28197c6bc2e70b9157214e0682298da95dae89d9b752061b69dc582faa57c9a88aa6077604af4aca34ba035cba2928aadf57b41281f09b9eb614782d2e9b36110f94b4fd5c404b8d3c6925987f3791bcb218d4b20cb628db4772927fdbd18851784830151cbb0d90da65ec59eb53936e3f1eaff123a766c4bc482bd2a27652c63937bd360b76405118a2de20010554185bb3768be86040b34adb0aa89d9b6063767787f27facbdc36b10c839af2acbb583e473bf5d25f5b9c0bed96bc39052f89039fea2c272c80129d541d35c206169cdc5201f7b5eca98dda1f692ce80e7b7b0b69e92c4ae1a6f637bb6a5f2c7dfa7d523985c0649849658edea9e0a53b2c487d522b0644ce2924ba9aa2f8068390b68e544d31446b0302b44b991d5cc8048680ea3a2dcbae8903645325709391a9836b2ab336171056d2e656ef2ffa448ac8c2e3c4f069c94d002db3ae453437ab273cc9b2bba9b736e58b08d554c5845ea6e4d024ced7acd4c022cf2c5dbdd912bb47d1145fab3520085adac94ebc08d3f64b2e38741a11da256b8c5d039f5f761102cff113bac29ce7f1bc2740e3c51375af257ca2b876b890ec4aa7416a54179681dfcc5512e3d74bd99776a934719aeace20278ef00455d317cf30b19655249171fa94bb5cd1d09a9de3bd9a74fe8027c18496c03516b0f5bf42ea4999220a822eb01a34d197f314d34792f8e7eb47f29af57bfec7106eebc7c572242bf0e2516784bdfb7b8472d257608a3c4a4fde4a2480067804cfdb20cf16158a094a1e3290c700a3a7da6a54116c92d99d93b63e8c6e4d1c3849b2b323b10724262356dbf59a0b21c481bc7bea6d0b6d400bd5147bc5c00d95826633522fe42bbaa5ed337afcb012bd742fd40a7e90018268f1c57a828d1c828c7580caae9ff61a64a90216972a5ebc2c2c6454defdda705ace8df4528a609b65748dc2f6db873186f599026b85b7f9ef074934f6f87db1eb2022e8417bc50ae6a238b5036bce916c2875696c3d599fe1eb14b9080966f122071e9aad2443f3b8cf7ae2fe93a323a42c6e24ddb506319f3ffe50fcb26341b94c6636323fcf016f93fc4f9df1274737441a6097a3bc2b533d991ecdb9b1c2138f5746588d4e01cf8f17a55686a93f4e7d2c37ae19b4b0785faac54f7bd7d8505d2d6b81a18c2f399450df7bec03a7d0bef5cb58ee9e62f2f6162811b4d0c92d74a788b6d120ca6a5bd8ea1f186e3dbe920b96a4f61ccf8b72d858ba38777a3777ea14100df64c8cc3c8aab4cdb869616c6f01b5d378d1e96b5471dd5e0bcea512a6bcb3a3d38427b37bb7f19f6592a6b626f13386cc2ed8e125400e243c089e4a7ad532cf24b83b502d1fa8694222c03bf1e7bedc104a9e51901d11e1c228c7e2cadc47426f73b867ab6bed9f86b7b73f6be422d2f49793aa0d519c6ba1ea0ac3090f9ce72a617dde8939a75d185741dad2c426e26bedf0373b1623b3b4708407b03d304f904eb934d23f04af4d131673493fcbf30bf78d1fc86e795ef121ecaaf54238e06b4e5e1e6c8857dadf9b15d22bfa5251c396c077dfb3151aa440c1842fdeb2b2633036c4c65e872666f172fcc369db3a2f9c45d3067f43522eb6300963361c2c71333487a43d93721b3d48a774af1e1c8846591976652799fbbf53bcd594952aca4eb388a64db6a1c4245583652dc4e6b83a40199cde0adb09c93f2055228ec972eb762c4050197ddb2b31a2722d2f1f8fe8bb355c206ae6e732c16c20fd8dd8f2ac14465aaec848089c0d81045ff49ce797cd58e2ece68c7ae3e2775a7cd336cf94d37d9b8b99bd5b95a04c108a8c8f22b17f59bcfb5047126b38a1fa907704e4eb277e821a0eb54e588b292783d112e2f70f1f298963f171bf758f51ce9213612ed89f8eb4546808b91ab074e7f636e18a6686dec1428e82378a00b4bd684f326cb709b556425daada7f0fe07b32883290c22bcac4dc392232efba33e2dd4e31db9b28db8c679c4e48d9c3b703b0e95f33dcd06481dfd1005e490b61c05da6a629c23b3332304f33453f2510512a3516e40ae01960f1e8ce7a9681d498f8023d3f6b605e478940be061460b6b607bcb299ffc8f840be64d0582615257624ae7033c3efec3d5bab43e0dfdc3798faa5e6594b708e5649ebfe9a495a6a34e7fb71d7593dc3263cb1bf0ea855c96d57e66af6d54375dfb848e535eba565d38cd5b36bd35429acaeb98a9b9a69098a828ad918ec5fa78e698fcaace5e7637d058d55829454fd5bb7b468bf66d997f7ec875abe67266344cd453facc005977bbb76e9a847d57bd1f9fa8ffd79792503d80ea6df20bf3444d4a96ebad7e39ec27aff6adb5317b9252bbe482b7cf58f4c1aaa32e9f1034cb87785df080c3bef2ee3f9f6b50048d0bdb8a64f1b1b3f88a3362eb76bc39b67bc23767c2e0b3328ae9fce3569907797cc90eab3f6fa261edab9e337fd3bef366a4cef376d25c56359aa88b102819896678a3c64d9ae134f8ce82c7f599631237b4361571e51fa56746a801468074ab359c6d89a20377be2f89602b18753e5d3c08e0a21d542aba4fe2d88a67fa649d6484f7095d53fa57b9f59f2672ae4c5b9c943c7cdc83fb79a54b8907b5423e3d28933dc2c27638ca8c9eeabd1e35ce5dd80046867e311f75f4d12a815668532276e69e03d1e11be4d6ba53ad386fa128415ee421b37c6516a07f38218fe4f1fcae718e2511b6e88fb495882129c2b9a958f13aca0be480d87b9c2a7ebee9d1425ad78fcd7789b3d0252d4e96a428b0e54deb109d34643a721ab4487b1fb943ebce5086f6d3764700aa46568e82d5c9f257e95b70708b6807c678271c39d9a539d70da6d3492f0fdfb775fae1ca19df28ff33d37f97155a3d390f636cafab2a2a1a7a1272fa6c18d952f3d1c83fb35c9999ce237e992e75b4f7dd0ca18f6d196a4db02ba03f8655d495fe32f81e5152f6a8339ecaae44faa6de435588e54a74bf52d262907319d1e31d0d16eeca5abe4b9c9fa67fc9b5a4193f2d0f3e4bc20bf55f1baca1654cac41dcd8a7b3c7af3ca4bb3dd3ce51586a2e2822b159af2e37a863d5e325c1c3233f60beea470d15a8002137bf400472e04d437983dd32e368235719bb04dc94deec501a8f082465b314b2bb79cc4abdc27508ec6d2542ba71b15746ede349b1b4a0923aab0fd86e9856c87096c222b390942ca8719248a2d3835186aa2c166ed8e4f94b19ef08799f3131e9ec49cfac5c0f955a1da14e3f29748aafe1f88889ee726453f79e9a55badb9a59e47a20a2aa7e480ed3eaf156fdcfe5ba89e8007f5b3b6048f72166f9ebc117ea9f4410e23de86855e273821ead817a6beb61e549a64f081d46623cf84b41f318a74fc9b64d6a562922b2c6df0b3bba23e787c070cd10c0effa6955df00ea015ad6b3989d1e9c9116374122e6b73d3ecaf51168c1a513108608fdd6a54dd094e6d07735c8a032680992bb0e4a54a4fb9baa3e7e8c1c33662ccd66e0a09d11c0ec6e489402b81c163a3bbe073fa15d13afab164f796f91fd5bea0b1437f23b07c6fb25233c5a5d0bc5e4db6006ba8b0d6b8bffcac8a812647e70d9f2f93a3977d8194419f2ee68145992fa41d007d6b0f30bc6843b891b753e51d469cfef01186cc456a0c20eeae4e3ac4fba6b50c242fa4ff3be179044810551576741533cab16bf6ce7527f69fed8e11d5658e8ae52d0af146d8359810acf84da9ea2dd73046ee12b0e28c7114608d2f0f897eb91bd4a16070b6c06621474d781f2d8943ba4f4ed1b7bcf76dafe7171446e79f1f9ac9c61ba7f39cf50e438fe05377df7e9c9d381c361aca8c367e6e15973b86d74c4c827e54606463cc0e3ddf7ac85be78b32fefee4bea57fd927fa03fc25f2742c89ad06109f1eefd4c0f066f9d95884c25ba424ef82e7f58fd58ca2e8f6c82823ada08b2ad590bda5f1e747243e6e2d4bd7e90ec3f66c657622c66015538e6528439d3909d9b8eb10dc7039596d5235efdba359c7625f0335e451fc188563deecee3b8a5a479036727f221f4e6deb86e70695603f7d89cd927f5843112aea59493b5561e5f52dfa84ab832c2001a37574325d77e28e95aeb71266bd3898459621bb0fa4b61196f5e460b8a9b7c55480f3b4a095e76209509e5e35bcc975752dc00bafca16272b2874633213f5f87b80aa9e6b215b01a3f3b7cd21f47db34b59eaa15fff632c59dd491aaee2965fda061691a7aa0dacb86f8aa92c66c355dffc2375bf7b962c9be7705442cf8e42741ae223df4370ef279b80f9dc79658e96ed381f49ef68e96467c1d0a748b99c6b7790784f83609b37207dd5a7627c85793e728f0317c3efa86f2fec4a324ffc6ef581dded6dce5419f40a8ac90dc8d5925a33b0cede1a9066e4876c67edd4cd24fc1421438e88ff1ce53e4f32ea5937a742f3fdbd8ba2322364f351c89650a5aae6723d59173c86ff04d76c42ecec4de5d84c494afb50728cbbcd05da1d34f6ff359cbfaa97fa942362526a9b409c0c1b8445908637b5cb87cf28c64b91072fdc5e6fa0d765119e0a9cfc130a875a17907ac87e8efb1c2a3bee8672e5fd6401e3dd6ed5d12bd85f82dfc53099614081a7eb63ec6614291e3d8461687ac935f7f79442664027af1a47eed078ae13e44916ee5ca5738a05385e1afd54b3a94c708ab8ae7d4d6610873120ce4868f8b02da461442da1a0ff013f07c60e9ac225baa4409ce66923c664d05bcda783c740a4ccdfd65dbc456bd52a7c82442b541da8efede9acc7cb70786021050e3454cddda9c75d42d3b172aed790b0820a1c1ea47653891981b4774105caa1c6ed3013501239d412e6ba2f635792b2a3ec7a4acf202a05342483f9b3e74712345f2e4ebc169c5cb1e6cdd17d6badaeb27a01ffc2f28259bd4fe5db2087f8fbb18669fa50756a3c544895ea19642b99c160fedb4f493ea705a2eafc0a1af567973c6e3a7f2f6ff0323f14ec7fee0a6bfed566f85985edc12f3d94dded3c9a560afd64d609c539865029c8c6c589180c800e9651f0db681744a248941e1eb85f037c908075b527d016f506ccfaad4539fcd0ab29fea4d877e35a5186b5caac80969a76e05cee9df16241c868de382bead9d4bc2cae319a30dfe2299d23c07bf94e6cc2d22efc531de15b523d37c49aa13b1d78cac19164dab59a1ac69ddfa3c0a702705dcbabc8cf70570b2c4a9d5cac930755be1e91dbe4b35a821f2980205039d07c921d22a054f97a68dc00ccb6e1322761d2753bf1dfc5098f4a229a3772d824de2557bf5e368ca3a451af6a5138924f5223a775e2e9e1f1f2ab84635e6dd91bffd9f8e8e53dbb85dd78d0bf6d3f8be0701500d5d5a9e92a0239f9a4fbc930fab280edbb26c144c329f12d9b5ae938b1988ef17f8115f2c5acfb10156e44e21c2b2d053bdbc28c9cfb778efec683a1188ed285aa2aacc2390d2dd4b7ad15a9e7ea45a1626f6c2e3215469027cd15c57fbb066b3025a59b3b53114af3ceae6fe611d07e353d5174c1b998ecde8f01f6bfdaf27600da86a2dbceb9a1c5b6f3e74d30a71d63ce7bc9d8a95a2576b2b065aa993bb64c8e5fad0efe19497d27a18fe1e5a6e544303c6fb4936b0c09f58304f8e90a86c2d865ff48896f7b57ef0af73947e18561d68e84d215c6791890236bb658ae6b541b0a03738c376a1649364649a6e019b614d63ebe84fe58c4d1a35628139050560fcd6143f60ad449c4eb96e2784b867eda1003f5d3617e264bf620889a98a51732bcc128a1e1ed60d18511b60f70b503171c1422c1c8d5ad1348e429ac8ae56491d2d715a606adf06be18c7461a63b635e0c2b925e47e7f093043feea79cc4a1c42a24aabb6e886c801d52d99caa453e103128faabfbc828a7e1b2177dbfc94666bc71c5ac81b2d529cd1f8cebf0a4881566786e1aae753e64dbbb98970dea0037ecef821a2db35ebc2d1083356ce6dd5c6c4b5d9299991566fcc82cb1281d4184ef04db22b67b6ffd9e28ffc1521c2584f1c7ae758825fb48aafcd602921f33c24c3acb3d04fee3434b81639da01bb49784d0b5333dc83ae7bafba1e269499cfc75439aedc726b82d5cbfc49d9a0bded765312ba5bc5ae733c753c26640d9ad10b5e1f19ce81f1d7d24675406bd3b0c4cad3899aacbf6ddf5584299485018b1a2a925bec005084b61c0e69873bd7fe3a7e187fccca65bb8d5f7b51e6002384ffc0ceff43b46218fcc95745fd5011ad461dcdc40dd6cc2b26e82b8ab26209a2761514cf0a09ae75b9ef9097035454e6c2b80596213fb77fc65c7be31aac83e65f64dfbf536097d9058a33ac54302b1d1bcdd11a7e0a2459014d808c5610829f1b56b3ee1758ca45b59d0a8654bee1f18f05262015ac4743a0f9aa7d7c895bd0e74601ee1dbc549089b62cf78b17ae43885ede42408b0f0d4d2dd0225073baccc10bf25013d72f5bc9a09c696afe2f6cb3c7af0728276ca7bfde40576e7993ea13e81cbe719570fb7112768a40ed64a93fff77996263d172392b2ed1fa4d3e1d564a1dc1fc04478dce8730a8abd44d4d4fb03d4f3088dd8cbd1105f638e089bd3bd9444dddc614063f56f1270f242b2f97af00653ed5ed28b048c962dfbccecc822be194669ed896d39d0784c7f477ed066c1956b241f44f6161613bdafeb136f12faa8054a27241bc2435c646179b7126c71331983b445cbb8883ed7b43b87d0f78177d8450fff2ff49001379ddcd3df1ad98d718a2e33834202164e119c9afbfc98796c9c855e5a5bfbba9854683200a5f58a600755fe5b1840a7a9d9e6850329b22baba633652edb18e211dd6e4381b0ffe02e5797611227c590a0972f3746e87ce3afb82476d81216de8091ab01a5a9975f65654663aa380065b29c3b901b03d9f4bfa6bebffad66f1bb86f5debc56ae7482cb533578745d5cdcdcea2fcb00837e81336f261c1ac05cd95dbbff733238871d5de4524059f03b2c06d3b112edd8c3e693b73d03e9201b75b8d5d14ea095e3ab353096387c34dbb2b7f54009a3fbd64fa5bf4a625f79edb4c7a2e2e11e486a33012d1e987ebe5edd8aa4edc62000a973e7ce146789e0b1b2da27deeab4fc6ed66bbaa8792f97221f83d1ef7516f6f686aafee657bb8b4b8643219bdfe19e9f3fffb39b616d1db885d3af81bca97142bc57b64e8ffd7852ae08df3abea062588148eebf6e2e774976dac9680e6abe6dd190e48364d4237b88a4d20a2c20049fcbda450a50829a47972d8d78814f125db71c216d85cad2e4ec5111b7eaec7f9faaa751592e318a23e7d62b8d93201573bb6472ed8f2106c4ba2bc860ff85520048bff33f201d02af0b2925d8b2a8fafb24e60843a122ca39964f5618363ef81018dd25a526e057a754a088f890f8cb27a98a14f67474c06db8f1bebfb7b40fb9d1fb552ea6a0747db5ed98953d1a20fac05b66bb9220d124fb981f530a96806e638819e74b81be35f01356542a9c14378669ad9f2413aca5ddd8b89dd6f1bfedf56755444ab46b531d890b1ff21050879c5a0f245473900210eec5a2037df600eac215e08e8f0322ce2688f5f393127724c6afc2463646a400c5720fc27b285f8f281fa8e9f03c965108e0c501461d820b90fd89929b6515f3d77f7e1b732c70ee4f7d2313d2fa1cd9dbda0939bf30e29430a21d469429cc8b65d58a1e939534a49a5a61f340590cf82812a1e0b452abdd460d052cd5c0fc8c6e65aae91825697cc344b98a2ec809df2bcf3f3d63c0dadbb62dc9b747dcc835ca390e3ba2297e1242fea4b696c71bf0fdd3dc999e1c2f905a753a8f66217765a340929015b41f6ffef001a8471e1f9e121d97db66290f902530c53b2c98e7bd689ed6ddeaead0887faafba21b1563febd5a2b6b6162ff9eaf8ab89a6fcf6ca39510ddf829894959b17e571b865f52912089950dd8ed30ffc5374b2ac2ce724cd039b5d18e676744df867311a186289b6dc0d7ce796821a195f99882c37d0f83567b3ff4963f6766d621d4cf57584000d118796db4c8a872549891c968284ae6f4a9a55c150b2fb0a7557e27a36757d6ada9bd4baef6620d2bcfc3e3aed4bce6a25c0d834ad9a6de1cf2f5599185e96b5b75c622adb718ec345665e12b1d4baa8ebca3d2c7b075ab6beb7d457a69a9d3e863dd555654234b4c2a0ea41d16403123a5867be1fb88a6a7e0225cb17d1b85f8e64a2d9d037b6fd3a76e90b35703b40e893d214a127787b3ba0250bb2ce4047f5825f59fc15705476eafff53f9b3566a849e75907494ddfafb0bf6e545f6232c3165e3457990a291beaa35817706e6d44ec9540ad0380d415114d6b7fd98e362150259eb24c3cd89bd1a3b043dec6f3c7d37888b938ad871c3e70623fc9972e5e2fd8b9f6b81f52a3b487e957fcb0ef0bda1f4ebabd9ea46fb5fa900001c7d14ff5251861d2ba0a3f1908e2c503c8f0ca6bb70a99b2b08fa4e3f8bef2c404823753bc51b3049edb6d430b689b6bdae9a055396e932e538d343279a64765ce56d3e7d902f3a015d3dafd0e7c11dd199cca8dc66b5a0b0bc141d0b4f874683cda45bed0e8d1cee4b7e69e680b9aa94db2ec930c77ebed3efe7db1dc352027158571a629cc5ebe4b724d50d1bdd7068398a6ab4782e4291f65e34c7c6e0268b283e69ba79058060bf776bd0869916926cbecfcf5004046bcaa065f82cb7b9d9ed71794689f356817d6413295433a3bb5f2eecca80a6685328813e987f326486a4a4253769fabb2a926317956ff597891f362b9ccdb657d0d605e40d7ced37682ed15c724ba160ca73eccb225c101b37c33ba72196f1e6b699645b2442bf1e6c7b2dbd8e8456a940e87b42df4db0b6b6b5c5b9c9697d3b2f8c27040829888fbfb21193204be682d8d7571175dcf522dc78b29ae0ddadbe811797787f2d095a72a4e922dc6b1da96e98fe6f4d08e3037d68cf47289cff4ebe283636e15dd9f362d358642490b836adb6cfdb714777fd37b87f438266ded2b801e6ecf828b955869ef622b8487b5975a9e19ca613125e9138fb60b61f51272072ac1264c447b9cd40312ba7f5cfec3230432c926bde8510334e4989344a8a8033d837491b4a40cc3f2c85732ba9f7d5c23a7c6ecd5559607ca36e7860831d0c0732d802506361d456c24d79bce42bc60d40f960e36e441b8cb6a8fe377e302c18ad6a87cc6ba3beaf1d1be2c084a1123f97fa25f37bfc8bdfeb476002759a98ec4c741e922eb3c1a6e99fb9f2453cab1ab4a03705c192d8346514a00e31d3e89b37c7e90d4f46b29617149cccb3e7d1a675cbdc1a220c9a20fddce4eafc9630da61bee82e42020dda63c9bbc18369b035b11eba8684313d5c1f8d649d9cc942d680c5499b2c12f31a0864b15e6fac56d5a2f2443634e9c93a949a983076bb3bb39b1ea35a0e642a0b494a2ff5bf0a72ffba5af92f6b6be57ba9e70aad95492ca08b358d33deaa2328dab9a26e0b3c7d0aaf9b2e95e7bcaec36d78a01553ae30f389d457442273d899265a753dc8bc726a61a0d042b1407ac63a9481accd8067e889a23c249547ef5a916e8837488706b4386ed4a4fd77f65e274cc2548b67a40e84a866f489fee3a1d2d08cc8f8d459e3a002fb6eae26014cb9f1d7f65d5d40fcba4075b952a30918749910438bebe482331298834243ce683b27c15c1718c9f7cca638c33c10b9193ef73583f90200a84650265ad087a830b23bb906dcb74953b79f18e73ea4f4ff9794b2d2f6df35685cb62bd34e0c32f4c355c50d36a8f01d3551c07b1c1d8fae339bc9f003c8b4ad8c0975216295fd14b8f861775c25d67899b31514ef96648b8140142e7ad698f0f5a273908d04b68b4d5afeaa29a877188e1c3b5700cfbf3c2ffc089c2f87cfcbbe91d4aa9f053942b564e2fb95d5c0d03c9c58890f5bcaa0afdce2183b194c0ee50fc3ab6254197479a568900c9af6a2466649a96c9df343de5ababb7d682823d5e566fc84e27904c7d89dea6bf47d0dbc9a7884557e293435da1e03dd0bf0be4167f7cf278e86eba97957ebaa48b1bf71b12e9ac3d3eb4af19a670b6be415abdc8dd816c155f39345cf50fc066d97ced2bc3d97b8d1b04157da5382260b720ccbff4fec504dca6fdb7f9b56096356690f04da24486d39b257dc6f0c4a0562972471dcc40b0875bc9b06d8e2031812bc5837d4da38517656839459c1aa440dcd8d22bf3310a0de5cdff42d8dafb7654b55d9c0d2129c82d2d555db4b80f0b57a108913b1f410111f01fdaa7d83552e3c390a1cf23624b952e2d174e52c933a1f81398dd608ddcb94183a0d2e4d1f6da730d777560edc3931e1dc47de8ec3cdb59a2036d5c3702a4ddb9259393ae9e59ff35b90fefbac47c0169bbd9ee9604478b1e39fc5d95affee3ef3f9150a48d5695aeeacb2976257bbb55846d834258293ea73901fa58b911e06720b7e2d95186a899124348970ee3a5ee31c1bb638fdcbd81c99d3195cc615a397973fe4220675a284db3722159d792b5a83761de919468516fa57e1705fb7e3b2387ad6b6cc4e6d3fa6cc3f5d61e222d1de2e949931f16b098ef9f448c50828d5eeeaffff7fc4613e8c7acc263f5f8ec8b5ae9b8043a905085990687bb6029b413dfab746a6808871380fb5a50db839587dd64812544bba24266dfee3f9663199e4361e2476540fb3b35de33b9d06a9eab77e9b92f5e3f03957700f51d905451b822f87ad8e831d578b90c76c29254f39a80c02b337ceeb4846a2d0a6b961a6d57397416cc0bae519e0b4ad36324d6ce2166402fe1f7df3e7d88e6a420c3b9ab35b18d5026f4234d43fe5bca8b620a5c68370d16568e92958544dd98f9ebd3c450cf5f6abe127d9254a82df04049b7bae31933b425f0698fe883397ed5b3f4b25506812eac0849646d0326f45058630dee36e78902b2bcf88a675f7f413283992b92abeb9514a818d3f3fd92d94805feb929646ec18aa05ecb3353e18c3b30c741120ae824ffbc5a7f64b16aedcd8c88bc7666f010823fae1f7839e83f28358ef1a9f47801ea389c6b4fd2861d8d712d4fee8576c47a285591dbdc8a6bace7fde67e4441a805459c946eabeefab35842c18393a901cf62c96f0d0ee83124c90a666c94ca3fbb557f2d1c503ec343cf8640aa87ef03db2c85bcf511b0f716b5dad3adfbc0878b7da500af329d90659e92d440d204e4cd764bc90a90f9a927879cd7503d81fa238fe1ee307494f580f4b48ca39bd2d37b091acad018304030e0a42291d70abd074d6409832a5d8ef314f984240a4798550c64460732097bf077accd924cf4823a419ff9a7cd78ef358654f5dc9b4f93b861541a23ea67142163207176f2b0089f117ccddaf73532419ad2d1a670f74f6faf87ecd55082e3356961599b0ff5d4769fc73709d13e154d03052ee1a7237d4823b75e2e6efb9ad8123fcbc1857ff8bfbe38ccc5895fc946602226e5b385a56ddaac836ad796ac3466ca068d1364ca13e522b0d6832b6b8c13fc3a0ceabce4aa043ec68b1afabe99b0f817a4d97d47d7a63c3600c9f35d0d280918defa6ded290bd5fae60a9642a8c715caf852460d887f52bf2773f49662a2d8c61d0fc6d692282201a520de4dbe3d89b33878a5d0a10f50c34b970308c46aea2015746654d08375117c15ba49b427e8edbcba5d8039b8b04d7c888d30b45a7b1f306b3bd6547529377ad7377a228542160e14780ece3b0b1e54b3903480972292ab6065950a41d10d9abd65687a52d602d69836d5f7f56645c0cc3679b8f74e3bbc0f25dac93d37eac5ebc1dc46c8ca45c251133cb4e980f64e8bb932979b5074017995fad0b40b2b593e7c3e050d3520f65d0414bc9a79fb88e5053fa3d1b51e37940b0a501b6472e0a2f1e5e60010929fb02e8d9e9ac5ad631c269df7fe0911c9e9a129476d6d96684fea4e9e845b5b96c89637518369abe6adeafcec32df5800ef188d4f84c35413944b48ac1b442eaeb02fc51a0052650668d0a4e1e163ea9add0768e124d7d273f5663215ceaeaa04d6351a6b563150aa115f1d0f49d125bde8bf6c46718268ccd5556273ebeefe863f35c428d4cab8345dafd5a43c1831da64167b983f29ada56b740b915535c7df7c446a1b782cc245fbbbea38b2e36ec9ceb4e6e1c888053591960c0dc9eb97307900ec1dcf524160c27d86aa1c0667f3c175485417f7acdf512ba4e4600b4d066f21b97fbb24fda96d5f17746177999f37ee265c94640328ab39cd1bff322158f20680e1dc14f89d1b272be82f00eea427380171e7f0a47eb44997d366add3892f491ec8a299494416ad160dbdd0d596ec6f6de247d808ead79136dc724f8c040032c134c724011236e188182c7c698b0ddf318298c2769786b970019c56ddbe47b87157bd8d07c044cc9e87d182963a0194324c6f4917a8f691d7fce3a82de3aa54c43aa494a64d763d8a562dcfc1b4ae71d54c8e322e9fa1a987edf76bcef0ef3349aece8406bd73eb63953859128344f594e13ae68f4e18378ea41a2710f66725f011db8b7d8e9fad71682d8793e34e7b8729d74c91d19be252a6b5770fe4ee4a23444deb108cc39a8d7798f272995ee6d71f520cdbcf9d78cc09c74ed384a4f8c856ba4301359132f64f7646f95a027cfb73ab2d49db603b9d4a3d60f589dfa96fa46001f6e9e9fb56a90759b10231a03ea63882678c511091a7bbd62f79947fc66d3921af570996cc6156c2a7ccea017bfa27532313b2c4cf606ea41d557635e3c5d9fb171d146e6afa3340d6a1397883a69a8250caba6b224f0c62044ccdc2bfd607d0fc243ca9a801363442e58b6650d3a8cccd09a815c182698a692d983a26f45bdc7fcfdadd38ff8c66293ed345ab31d9a8c71fe54f172da6519af9403ee4b8a3892354c7cd97ecd6bc46401e0725ec5af5ac5467659736b3ef1101cc204a9412572276d1c50c644420b04a08943ffebc9a6711348ea780ed38131822d276463510ddb1e6ddb77dc0c05c39f40b7d7adeec264e0e95de79e6856241ffddccbb8b4dc1d5c2133b7fe5ae6a48123a47f88ef0eb28e4b5fcd1a25983ea7f0aafbfad0110ac8e57b7829907aa31db22eb9ed8169b2d40ffa56cb4575de66b44a6428674194e9817a148ab75523a0a4f0f9a2652cf0ca7ca95f489b7d17cef680795f8d6ecd885178fe71292ccc615314ae411a5578e0ac50d3f32c81a77f3b971f4f0590885dbd03952b9c28a8f6f85e3d4e87d785aced74d504d011a16dfbd3fd23fa4ee36e324bc902330503ac4c72f1654caed51287a05cd68cdafebffe0ac2c08ebd6e2971c11bec30e6da59202ff1232b6a16677ac518c93e8dab884ef917114596f9cf15d369ab28f7a06f29d35e363af7d3ef2307c1204b5b084a4e3b43f8757bcf640bd37763edf9d1148eddbb814bc9440aea3f4a4575358dea8d22817f07d1d888800ba0e15a1b53bfa6aca663c8b32e1d1e0f13a02a980e3ebd9523f5df2d3fc97d48af08b3607dabb77a4941f06bcd4c73451dc2bcbbd7c24566a451738dd6b16ad18555dcafa6dc70bf254fac8d5bd95b6bea2553960260a6221ff9270afc8bff9a2728acfb990686904c57d8bd0c2788a035f555b15e7a0cb14166c36675f9e973e95ce5463a39a628372328fd3dfc71da56c7d6ecc392db1c83602c65f7d61a9640a26cf91b75b3c2be06a8f31654ca99a9b967ff80dcf8e0e8d9c4baec9e769d185d2dd3b7399ab8da78dac854415025179c951b3755d502f19f522bc7d1099e8ede00e033bd9c376ee2e18fc2ea8d90541ea6126495b14939a51f679022408c82c8575aa14c9a2aade3586b617e22b22d4b6b244144a935d0054e97135feaa31adb653583050f755478d54a1dbd1435cd16f2fe7e858aefd07f0ae0db140840f6b37a3eeea31e9eec55b552ba1e3d38d724e17c5657ac71b34ffea2757c6a8b7754e3483a80f767c6487b263b32d43c98d598ce97f3f03535e813fd01c6726575b16476e7dd235fbf318fe07ea690deb5d7eba2d663f3445b9679d54e119485090c490b3c25bb2a1f51b2bd7dc9dec84dea8410bc38f60eb053fc4126229610f00f94a223a52844715706d3584edfe6e348c604413ce93c1b8c5f75adf06a0669ab85918bb6b3e4c50d8aa8cf5e3699d716005f88f89e1ae608966efc70cf2e66809931e713386569fd36736632784132bfdf0498cedccab0cc9e62f4d0994c199b299cd1039d373359f0d15dfb243797c51d2379bd2af33bac6300a4c761b41912ced2eb96dbec06c80387abe29045a2a691082a1ce6241f73ceca135a465b41ebae24daa929da7b5f75fa35aa6df970c5835af31a9c31eff8967da3b4cfa4a6ed8234a3c4ffc52b2516c1e49cb8018de7a99d3dd38212507b689d3ed0898ff1fcd84be9422200a2f2d1cdb061c96d1e32f2a6ae3812e0e1b3e1429fb3ceafdda21cd5fb23ee61d3f4623af6d925f2ff469b9b37381e57f207011326eadab2529bb3b45c3e06d2e70bac918d27265af7746cf06e358de609ef5fb1ccf1e64d1f19faf9dcdcdea0589569499a8bb9877c52b5e8bf56822ed7918de0ca32d75eb65eb9434bbf4a5c0cc7052b7bd9381b16506af30879e3537f31c5e9d3d2901f24ff147c57cf322ce1319e29acd97136c91e0532f8e87b80bdefeb4a93f488e01ef4430dd1a4978cb10575e2747eca16834bff77143ce3a1073f85163721872e2137cf823565be1ed455a837ccd1427484144a3078adf5360f9657595a3c23c70af180deb27d719a2de4ff4c573f559b4c95b901b8c59282c3697df3118baaf33a33120768e16645b137a970ede6a038e0bf343616381f922ae71386ac2bad8b9e5f5ed9d2bf25051eff2e654e7c2f13cc6e0af3c36a78d99e8e4feee1e4c0f1c81e4ab9c8c1a279d08e38bdb2848017cd0fe6a5773f29914ac78740a6ca7d4bb8bcbc6e7373b5b6ae9fd372fdab5cd52b727aa4440dd9005da33db527d1676e224afebd9b2be053b63bad9072cad655a415a0c4dd2e50f33a2d9f504cbbdb4d7bd8229e6022897af39cc024fbce6e748dd1e3e5729442dd4df68746919ecbd4da0d6626698c839e90479250dee5a3cbbec1b14937326c35391ba46cb17f711dbe60c4a294440927c8205112c2e541ee2d705c2c41c4871709c4cf8df0fd511b7d862a46e9feb463acbbe208baa7fb534212b7c078c248595022220186b2d8d2dae0823b5f4a4a867d80c648fc639ea1e29ed48e154f7d0fac0146c1020db09bbaa9fbfb9b96691e20191ba6833b07ba0cd7a758cc698770a10419f06d831538cffc83670fbe42f948d0fd29c2f8c7f086dd87e5e73bfee724d8b5df047c2dbf65fc1da02d66b1815372acee3e4cbe80fe4a4d38a25b02431a4d8d510d7b66b797bff587a892009582480c3a823c0a77818008f61beacca13e13a0b47239c0783e37d82ff66d90d28ef4010f7147f072c1efd842044e614d47b28730b3298ac4eb62b68f387d344b02f0bc559bea89a945b3ba6795a9233d03837c4016e3e954c5717b0578bb127a8a0a2bbe02ed83e94a24e3540e1e7fa9a9f006cfd0b3e2c28a4337963828550a2c2e8c76dc5d75bca9f27cdc6b8e7fed4a5a3d8e9c96b6deba6f4e90dc814fe1311a464d1df0fc78da1ea23c9bead78d16a6bf0f958a50dafb8b84acce16f8e8d0556f011bbc91d4a84e17d0f1cb960061f539af2a22277fc454bd281a077f15dd8db9f15ead0faed91efc30e121c1edc82fbaa9f41c51997ad29e7a323d869cc69e1ecf86971656400ab75d9431daa04a347ea7d9889919ffd75e3c24127e95e489cb9d631e2cb3968c0861b0b1720d272a0dd2860c667d68a114b4dd4b215602c39ca56b8df75e8462df855e0562cfaf4052ad6a7756b874922c89bef30c5accf3740295080a3c553296a2f40390ad249691e8fe6d74f20c3d9be824f0f2119b8b16a7c436f01a0072c3ff4dbb3c088e8f30c5739a76f502395856cc8f50d9c2c50da2fc9cf4a7627a661e5b250959de19023e6675bb108c0e2e6ba9882e0987ae430ca95896d634daff71fab367a6f4b9b8e724cb23b91ad164a4822e0d8173944479f972e541643e086835d4961ea7a9c254131a13e1b87762f6139647074f7e8c23c786cd28e8b997c3613450ca98cbe8e87e63a8ccdc1a60e74ec8c0b0b1543cdbc3382350f449e341b16f9f7c221977a03bb7cf9aa614a60ef9d93b6bc6cf38cc94bd38607333dafe54d02cfaa582f2ed4aa67a2c23890aab3a2b1a86a79ae8992db696f2bd66233747714e97f8fd3d85715cf573346fbef73e3b2be8be53bd1683b6137d21a6b4f68c9760adc1849ec3bc4b7577612e01cd0999dd0b8fc6d79aff3918b768a04d72c00c565e990d0b6a9ecd5765b21a027883a839abc46c76efe4ab1c48811ee6a2d7d028870b53fde69992d42f586fbdca65a04a72a1c0f8e2bd725536db53928c8b60bcb14aa3e5c06481357c59a02ad9c5ddd156e5a95131327389abbb7b56c2d0b92f0f7906227fbc5bf8912abf51ed25bb011d6ebde1f7550108c44550f32fdbb2e724c6cde52f84c2c27fad0f17be2d0a0df816650f9e781800f93e8493021847f7b970d034639c855d3ffd75839b6ec17ea60a3cc0987f67a8e85580b6625b0fc2ae4836f95c3f8003baf67ba22d6d74f7500418620344b797c53491c88e29208fd808d39f1370b1f3fa11d008ea5b68f9440bd08053d5da71eb16be050801e0de2092c1c9050b7f2df1e75a8520918a3c164ba6c654d8f1eea8a02139666bf8c97d57d525dcbd775dbab79290787efe719a978f90bedbd0abe4460cc39df73846a9894edc3e4f03ed5f22494527bdc2e0df79d695e429006450eb2bec9ec8ad2e41d0c21656720ee1cc4d54d0e29476cd3ca95bcff997b4624d7aba8f72c4f047c3eebe4f0681de7ad9b235807b8584f3822769aa69773891db3983aeaedf11abf283b98681d8b20ab4d485426ceef768a6de6c4383618705d94e4270ec7339463e4f8ac6d66266758b68f2513f0cae75354bc4c49d2a8950665c068d2d6ed80f5384b9135c446063eb9774348bc3095e88c529404c9375be7eeb366b8c478161e6d2fd2e02c61a1e082f81a55f42d68821652db730e02f2dd872e73a047c7337c45cd82e7e28e695b2cd0a348ab994c65040e4b71e72fe1003ee3fd48535a047b7303c521a54f44013b88bf6e7da598db0ae6fbc59e486254b7bd66478820efbe1c2aa97f7d10514fc6520b4dcfe756350a5bddfec519b802a0f249150265b2a31d9e87dfde197124f904f32082d9b9609028d2d67e7ad23a6b9a81c2bc45014d9fc99e1b9a800171f9e62facd3188603e6a4039080b81cf81885d4bca445ad84609ec30afb8c1f744454d5c586d1a471dc5c92810bd40110c7e5c3b4d46b5e9d16146774c3c409ca5769c93ef064cf774ffc25a57bf4ff027cc9850b74894996bcb413e884b61d3397f50cdf93f3db7076d13fc98b0ed56ea16c5eca3b4b07661b3675bc2b5d7abac28ef9250152e14126264c855bc7cdee5aa4f760f8f95172f4354029767e5a4bf38e6ae6285e7395507b9d65e5e82a8b3359557ac9be7f02790007072402a3d22ece85d81e503e2e7112c580f2cc144d30f6e35915b3c61e8c6390e92c291607ade57a203067a86f615181e788970e1264746de3153a551b34804a0bc959034873f688b89775b987e7df9538d5079f0cb0aba83b326a00fe4be4decd15649592230f4b12b541110e9b491745d91d81147ee89d5c2be5fb9daf13b2190f998f3d3dd3d910e2ae8d99822a7bf88040291a364590904b673ca20be6b338c048acf2cf51d0c1e64e4fcb0f007fef4edb6b76c0e984d445933a4e8028160ca1714e51d2354735753d5e06e6755663b5ce2f78d344281a6817523df828189c75187f0bac248f0caed9ab9466dcc5db79f8e236abe31d9f74c5f299764dfb28f123592df47b9ea65924009896b86c42065313aaf31c80e8abfc59e003da0e95376d2985c71801df971318d90dcbc98320c804c0da772102a9cf51364996899ccedfc6291519a00baf9f89c2ffa9eaaa40460a7db4869bd048a503767e8cb09c883bc6eec2110fa5b371bfe1441612d18635b61fde85ac7a89c66e4077294f22c2b401b6f2463bf377fb9f3f3785d60c5ec12ef081cb8e11e6e81f1ed32d9a8fb731e8ba2babc3b6928672f06552180a6b9d72ea8c2c69e16593323342e7df1fa0142effac6b4c9e6f191d28fca01ebf83186b2a2f34ff44db3fee2111a1db8ae618e242b377ec64d93563a856d9b35f502daf5e56900e1944fe8601a479e22c0255e3db1fc3d39af462591f681ef1fc5a25e3e82f05d70bc9e74e34d4666c8e7ea0a76562063ed0b808bbc9e5373e3ca27e88c4a554d3c9befd9ad8a5e8b28259ff3dbf297e947d7d46108373ca1be228948de76142b544992a31dc5f3148e094d9bbe4bf3de67b2d24717688d02460af0a8c05424857af4cbf87480cd7c4b5028462294a4f0fa3be57ddf76b428e81222a623111de53827cf395791ade3060c9567de79cd7c140c47da0c53f084e86f07a7bfe27c1ae6d752663b4a2df54b4ff86cc3bf154a0dc5afebf031a89d9ca6896045bfedf10fa0acf919f02f122d4022b6e168f59555277f8d023d9a02828def7f615f2dab8c2fdb0823814f69d32b0253ba4532248a6c0a10ce96a43d53a54bf83b93d84ea896f60577cd393b1aab58aea2be5880acd938d3b9177c32dbcfd22d7cc35f6d5ede0a2ae20cc4088a0876904644ff34d2f68f79ce8a56ed1bb956d88487d34b2d0b5353a029e07362ff75f1abecb41db8e2d9df240f7ad386efeb24df47522e131d67671cd471febf92a4128f64b094591281dd6946935200dae05336d49ec461dce2fee795b8fa8d828deb4cee9bdd921b29b1cc78037a5d9e7dd0ea864d36393696ccf5e5581041c6397909262a96c065462ffd4ee08dde6018a9304312d66bf8c16518df26d9756b50f3eb2211b98f3a479f8675c151cdfc69b8aedd800cb8d1695cb86e50e48c568240515d4c11767723419816b2ea1c95c4e4f60332cdd62c5270eeee7cbf439ef08d1dee256cc7ab943cf4a9e48eeab3108160799c38f33e185c7d3344c736c0699d814e981dc59601441cb02c5fedb31c238d59828fd8c9e4cb16b41bd86848122b4480a31fcc71e8d7025152a4aea3dd1a0cd7df7ca0a6b6b936f13cad8443658a6d364f12cf7b52f9e6476622e49bf9da67dbb911696112034b6254a28e950c34112fb67f6225c120cfd42972f55858659101f2008f808009b876e08b8061900fc302b9ddffd9a6326282104db85c40159a30a797a89034a98faf6c21d4d56db488877b4bf7b03c68afb6025f7bcfac8921000dae003bc9ad05b6367b69469f0a8d8f42b479f897ca781207e2223632312d9e4e6de3be491c608adcb538bacdfd7dda6c6a49a2cc2a4809ae28b89309b9e4193e5d51133e8b9c0b00a1c72798011662885e8e00a89d4b0dd5f2e4f43f763d0d10752038b7a2f5e5da54947a7e271e55e30cd8127041e4acc003e395da5ac295b0fc6e7ff539df262f2b273daa76b1a87009a1fea674968aebbfff8426416b8e2bb73db6fe3de4ccfa1654280e2c567f406933c74dfc470ebaa8e1d003f702df4944e30eaecd665e7ae721d4e6141074fd1926bf64d73ba1be78c0d405d8081d58a60fd5c2bd8e1f0678f34b4d3a44fce49e3d512fac2987bc380d94a349ede841be71dcbed190a426f7cf0e04a67ca85e328d24474c9de358a0afa241b97e6cb907524be6406bf99600766d37a94943de1952d2bdf4ad37e6b7a29aa7ab7ff1b5df864389121d92efd2bd709d767d4b29bcfefc73feed74bb74edcf7b8a742bee34a113f32bb408f450fd90f5e84165bac06b07eaad1052eec871913e8709addfc7bb36ae4acc90a4d483c29d28d23112f4c02288b2b320b103a8a1bc6b0acc3ae84b199b9e14db569d793e6758990733ad7169871273ea0a3a8d51c9493256ea37c79569fc6a8296aba78d066c3e960746dc295d04ccb3d90f7b7831cc96be293bd876cb8ab04e23772ceb06f65ce1a7d81221d431fde334b79106da60aa4ef7ac309fb59f75dd2093581556979c6a24a22d63156ee71e85bd63be0ff4b9fb9d899f42ede591021d74f7d683beb37348c94bfb8fa347284d4c492b662b01b67c2f5467ea35c2c1570ddce1bfbed4abbaeca0d794d1e277c83cb98d4dec1844c718bde3273f39ae1369f7858a9170d310e1b5b0cfae972ae2e9b3df0cbe2ea9b45ae6d1d430cb7d3ddd5230eb8d57dd050628efd6bd0ea6cc061992564164d02558a1869d47aefbace9d7573c60df55d2d0cc6045c12009d2a7aa6ab350ac9e24e0bf01483035d8f61b10eb745eb316f6db3e0d7c0b63c1cbfbb2c008ab76cb26d69e9673f54d43cda43e13646d6c583a06a4cb594d617694218f3c15c8ea732314d2b0db3187b1fe483414a62597212bcb1d9ea84d447ac722f94a70c536e994ab4404cffcb94553017c7cd5e095e92c67143ff6780f77d29cc3164ba2391ee11a0a4c3388fc12db67ac532ed2524ce7d986bfe6e3b012ee630d9574034bb78253ac15c02bfa9073be555b2ee2dcba400e9834ab94454e3e5804a6c5729a1381253a832e0f92c3a7a70f34e0c7700de7b7f481adb06a3c948b8a4458eeaf755b0d85c0b85a83c97fa9d7f88ba318a907c158759450ce03649fd8b1b679daa139692aa04229fe859dce6ccf564a3c3a91eca7057c618d67289e8c08d8a4d3775dbaab172c6dea30176b872af70c7462c4e99ea578cf40f0d87150a0ecc5be94c4741e535dda697f0df9a1c9405ea85c3dbe452570df61c153e640611fba8a6c11944cfdf05c74d15ed60596fe00c80986666e8cb80565642399e3582b608d44cfeced078210809025b6832165d8ba810bf8cd5e613bf67aaeca0a24a9867c3fa5254465b0fb7ae59fc763f896ba7ac3d07bdae3d9de0123f7f3d11be61cfe0f091e6d888db0804301608c565a19b40d9924ddd01ee9a2d672feba2635b48df28c69abc4569fc343cac091ed1eb937cdbf5b4ac44398e4c9d3f233aeb352374e6b35d252b39d79924bcc3eb945ed43a346b888785eb8ff0b19330e18ff507294127ae3f85b17673b01165aa6524451bb3d088a3100c078420624807439576f76bf41337b3f527ec1dcf2f106fa1f74769de303d3454f70ec24598f0b396f293ddc95da2701d417f645178cb1f2d8278f8c7c20e0ef472f2b4c4a013df240ecd6e2eb7d6d2f7221e443d41fa78d8dcfdeedc5bc3e25ed58643df9c890473ee9205da02e02decdc6041e9e51e122acd834fbf1716aefd99b1f49a2e2796ca1128c94c945282d3fee99e78133edd7fec3f9aec5803e088bc61af30fba2793fa6b097ad2905f5e9b19c1e34c1d2594b4582467e8dd1a1358d40df978ae0a143295581a871a1052eab5bc0ef4810f26d137a3c75d8c5ad78da7e8769e8b1ba393ec089520fbc04a13cbdfc0044adf003c18f5c0f5f7236cdd0199a13c2c57f3c69cb4df37ee78d6336f3996d9db9021ec2357d5495968202f774542850b73f66b4455f7dd9174bc75a01513a72803b1c177bd1964a94dcc088321646ee1c26df6d87b3ee91b6cc55eb2c9cd220bf1a65079b9a54745edd278f029dc4a3af39956b289f87affe32469bf99293307c529d7cc0ab84fe11e21c24eb3721c8d6f0664602947d5d5afe95913b6f69783af2f9a945682cf3fde450b8576eaa164796bcf8588f02af7497da28e7a964187f95fe07c718889c4dd611eea3aba3c6b3071cebb535affa52082cfee605b0e8d7f2f36fd82edb3895720fb7f89e9b52af4a6d1a78a1cf2e8bd5696d6cbe77a7cba8b4d5446fab5accec5328132047e1c00441dd0e587c80ba535f28bbb4f8e85756c56693192fe67d0f3970d87b57e1d088a48833ad8fbaa16c5a844dabb7f51ed66b9c756c84a73a9fbb0abe35c3e9c6704f3a80e597f59153b105c4c447f8ef16df94143490749b48105f7f5a7c36ddbc3e931a394b763486331a7aaaf326f1ced802e4ed3219005ee1a8e7826c734959c3a16f0ad41857fb2f32452b3c216e4ee0128fa87b83f2895fe5d4c8ee255273f9521dbed6e7140f2c19e72e82745bcf3cb5437aeccf6699a20f58f1104f32792e2665cd9bcd9e88eb2c18094a88a344103ca293183f49c365b4b540cc0bd9171010bd22e04cef43b759e24e0c9a3dfafcaf994dccd60cd27a00f9a881d2ca6a95e6fbea3925f2148b5c8495eb23c398b9ddf5d8eb9c2a64eb1160c7f14a36abda701a47131a3ec71cc2732f3d7cf719ed0609802bdb8a433d8e3dfc6b317c3f05611772c38084a65ad765ff765994762ef4ce6dab50c3896c30c5e89ed6bf9e3482b15a200234049fa0da79c41a61a8256c5fe7d4eac8c3b86bbc18431d233d9585ceac7eda5df6b1ac769f6f2f33ef9dc2aa30dddd74ff50c8a56b268b23c1de20f03e836b14bc5c0757a451972d2979ece0ec47d2841b07a11d53b54eb3007305b00aa8b7aeffe51c2c04552318448343d786fc9b69c4c630278e4deef6c5d95a2fcdabb442184c3416893cc2cd749bbd5479ee891eaed40c17c6d788247102e9591a9871ec5bef513e9540121056a2591e38d0c7125b2bef7c7821f6708e70a5f7109403ee21a3c024a45c0885f40b5abe70c814865b9527f0a9ddf09fc7a25d2beba60c8cc93d538cf40d20707b9867be63af0fed3e7ba4ade1d9d40df075796fcf2a708bbbd0a3384a84467b2eddc818969440fa111f012bf9c30b81ee745d75465d360d0cc682f89026446e0548d55182f2e2f6094090bf296eec2c7c8bd8951aace40e99fcc958d19f6729510b0e493bdd022cd5011c89c0382ba5c53faddf4085e3c090388058576e5b37a57c09daa5cfdfa19d9d68b3b219cdceaa9ac13b71644324f025496465b3a9cc60934ff1dabc46ad9af602206df4a5b546ebc338c15e48e9a2ef7b31391aa2765df5246779b3137aca75d5f754f0a059002e036f67a7f228abe60dae577d16ca8723579f83d3f697d1ec84c9ae27d4936adc6bc951e91da42c8baff50b1147f3bc5a1b565c2a4073e626a7851817ef37198f456c8f02da7cf6985eee5e9638f1ca5fd96adf9db72f286fc0a4514ea8ce95651086489744c726edaeb7e98d0b9e3105844ac1fae5cc377c312404457c41bab241c406e4559c6436e04d8cb7cddb597a82025986121e2f3c485dcc19bb2caef037432a97c8cdf049c974baac914797a7775e980760a8ee8f02718860351b22b9fdaac011c3b5035f494a00c1551dc3002ab7e3758ba9b76a5d71a715800bccc4769d644926ba617fa6381ec0496f89fceb3c5f693c3ff4c916594e58f5ee1e6200a520e1ba177eabe8654b6cc036c6e1dc70bd7f319f7f51d99b35be31f72291d55e12c0213cd65710a847aa80f358b941637d80cd364d67c1f343b4644a3614d0471ef352abf41f8a092753317b9b07d3457736ff8cea40dd53a3768584ed0cdabff936a0478e65ccca056b3a5cdaf13185316c9fabb44edf11c36dc1445c5940f6b089e10ee3729b23887e6266b8fe1d8df1be8017a9b6385163649adef472aa1b9160626574513b8678b4411df29aa50173b76f759b7dd1a07998f71f124e155fdfaf700f33cc8384041cc1b21b9434883693148dd6c7a6ce9bc158fb9a187a47bef58904f723770e2d83a14e0ee95222856c400ef6254080812cd7b7ce8da5002143f36a2da4da31ec0c94494b28b49221514c9a3b0781c421bc908b54c10641cc82e3e10168d8c5d93c0dc5887fbeae2f87f41c16a3d5c7357473f4ae85ec243eef85d70e263419e6fad5eebe71450a0d906eab4fd56f24d5d118f8c87ab7110cd6e38e8dc7f341aa0a8d1ae03978c829b585585915d4b9709b2c27c9f1cf294ef11db4b44a8382ad572f5d5abb756c265f6f3e2f04be1492e3a768d18dd5f425d2f21ea174de489ec5223758eb31e6dae99b3fe6966d96957b11531ca3e1a51660f16420b3741388f91a1e526308946ae86ed4415fa26f6118faee57b0acec5c5c2ccb932ced9d2762659828a133e3ee717b5af92c3dc7728c33c38d071013cce06009a393048e5dcc8a00c596424e64a8cc96d2e1640f2d9cb02d11690f3e83f30b25f141961468deba55988e14c7f8dceb7a9abb71e398b0442634ff265a8a896cad3a11999a578dd230df93df1f1b77dc440713a457f9e7aa384e3286d5457bdc0ded63f61b73d61c93fc8f571cd7073a04661326fd380515872b581ef9d3705fb277377530cc35d05e58b9934db2a783a0aafa2e39682ee87852391eb30f73b4e5c88096a6c83047c9cd8404629807ab43d66fadc68df8ff1d8e67a4c93ecb0e34d5f867c0bb12d91e5128a69f6d8e57f78bafb57e3cd5436a60113b719416bb662bfe01d2f3a4ea888c67f39e59c5a383c1f1dd441a8bc51af1c71de4cd9a3c02aa0232a920ad517f47f22ccd3967ddc4bc62f4adb64ccf6ae53a6f807be8de40137f27a97ca883facea44423fc229853b87a19f77c8cabb9b25d87802172c7ac3f081f9530901d55114a26eada0e04cf7291f050e193673aae1be57d33e9d830c8e1d9e3fd7294b5c1d3a3bb4620a7bc44812d62b9ca7af9214ae2a90d1708ee8661e8775ee6b33d4788bc05ff2c66ed1b4fcbad7c22c5e82679fb216ca08109c11877cb4e02f17fc948a8e1ca8990e9f32812e03878683e9de589b674ea62578b2108ff8967f8ec185a7cdd7df5f227e7fb841b78ebe981239d6abaa280dd97eb9f8e9788809aa1fbb67ad1b9a417c5cef15ad6f260f155efd3e7636ef1f00d628bbcdeccb8ab057a4b2a1bd73fd1e0c8164e08a4544cae13934384107d9bd8185803a1784989ff389d65ff17ec2365fc49679eaa49f9273570992c052be73fa05eebe13e0a51c87b24570647cb76a73d764da75b5159236c559b7a039ee6cef7328dd2d40baf5c444dac4aa3770bf357e22f5101710d4cab21c1a4ccf04fffe37374da4a6ee802801554378675762b9f9abb4a860d3ff1ac7068fd874e6cf98c548fbdd9af1e149f17e85a610fd065466208c011e80565f56f1935ed457273a78399b76b038dee5b144a670e5951c3037a8a62b1161d18eb3f33b55da55fdb220c77fdb156f399dbce1afab3e1acf6b6bd1287407fd489f486ebde62828c5dbceb97060fb162a96175f1f3579c8d2f1242629d2b972fd2b0691b70f6fa1babe43966d1e7a9ad61a263a69e9ae49a97f51cfe9eec0312b5c00fce4218f8923be0e53de68d6f2a51b6eed880a1b7b5a704a61bf367ddfc818a85e406046f1448f5e261faf73af2d45348dad4e4ac2923cf8578ba03210a09494366912464cf8179d46cf4d599b50416b8e58850e8f6abed9b49b1fe379ca66f9dbaea60c2fe692371a6cd7f172c294c2d00efcedefeb58bfd9dc7cbff635fe192b69a494428a06963b0416d34608173bc6a35fff7f4fea5fd3221c5c874acdab105570f7b484fadca0a9654112c3a15eb8db836c160cdef6da0c38f7f73089268949ffbdf6ca0cb87f836948a2045868b7ec453e0203a0125e31d4c2645a220ee2c2e0a9db4e12972c0e98b67178065a0e4ed6ec8798a1813ba73d46ca3ca8a2398772a785300f03d89ba501aec1a98449a99834ebf9055b7e2bf75c65c6f29ff12e4fdb4110e1778e5c7f1607d2c9327e24863a4b9e14478239afe67a6ac869c3960507e09c869fea64b6595e340b57cb1dad1ba67e79d4b502d28b8530f217623887e731116adcb63653b43b6ef560e4d87b2f798eaabcc779b418ccc5759f4613966084764330805be03d9a72d1a5e088c07003d6264d593ced5351266d2223f528ed3c744de99a58916e122de8c55f4c6b15a6018d57bb27314a4a9f688bebe8be4b388d57456e2b18c0288d2f8f712519e5a46b1a0085fe850bd27a0fc6a6b76209e42e0e607d4ebd4545f9bba0758f1a147d3b8c0bef62177a6cd1a2e81786a5664f35514e1e0d2cd66efde88c9872c056bea3b2e71abf3ba53f426c216c42851caee8adf64ea764e9e9692c8e6154dc641cda0ef1ff19aeece84047915e304630c3db7d8aff26989f1f477716bb8e88642748884ae836e178a5e0c4eb65476621011716138ec3ebf29c91fe3c3d37352c43fc3790a65d053ff47719b749bbc733a2f9f6436ba7e71649cb751bafd0acd4e68a5f5bc2649bb2ad3aed9f7cc8179d76cab4afda2518d6f7eefa08fa6cc1baf4a677da6f5447b35e59585fcf0902cd1c719df34fb35fdcd9eac64f52911f66686be5b1c5a864bc6f9fb3f3d239efff02b4cea0f5472b43801832326b96bef2976c826ebaf697de6e9e83c77fd8226de3d5fb2bdf20d63e924d8c8884d4f8785e402398cdea1ad7fe669961b0579e414a99a07c03ee8a787b44dbdcd0bb33564f258295a4504c00f128c36fe101625b39d916fd5b63f54071f23f03d17eda8894696263886e885415a8baeddde6d9a1134dc3e818dd5aa36d2999b49e00273849e831854091b5230c414419d2f8ff9c040f0e13a299cc08f36900d7f81f381d26a47b7e67bc0bf2ae41db66398891d9c10fd6a9c0dbea7ee1c95b383f7bc0e9fa7c2d762306d2b2ac96f8a5b71669b132857d68816e9ea40e650dffe7d0586361c1539526757879a9c98ada6cda620e9dc0ebe79e9db0feae38b80e4fb2c148ade47cbbf3777f94e887b5fbcfe6b8ddd94cd4b527c29c4ee176aee91f96eb4f84ed75813194f1e114198e0a5e062028289303c13ddbda878f25b8aea3160fbd0fdcacc79cb054839edb3c3075e0c5a8a2f075021d17e7ef557ef45581b2eea779d9c98bce6ffa3b6f952cb38398f24563f95083040e0aa96b8dbd24de5daa2005a935c92f85d8b90cd7140a84a16fdb3f52ea84b92492c2e112814fba23a0868b281ce6f1b2f890d03490e24839cea7e5e49baf514d4a488d835e6cab9bd40276dbbf215f26de47c86fb1762521e236e7f367c027ece3b48ad61f19a9c98e61ea2368b943dca5f5c57098916ece4a901ac7c5403e0d0cf97a371d0af75925faf0d9ad8febdd1267da67c1baf97b4da99bca9887831ef04b9203941dd5667b4ba04a6c5f4dbe7c48425076728f6a643561e7db9f6521d0d3f7897d031fc34c3a56da37099217f94156b4ea21cc8183417756fee22b590db8e3eea7b32012f8c63a5bbeab5e272f8e2c131b104998a7065fc2f2e0766baa3b44fb784ba6bd2e773e6a270399498c4a32d994a5d7edf95ccfa6fd21af1488ac87ab00018d6a988e093a879ff3445da70b21b7743583791f02e31931b687a239b5541855558a51d1b439759f1fadc23f612338467c29743e0ca56d9e35416a6f25e674327046b2bc2c13d09909a66307a7ff03b1f2d99506e26dbf2e5c57a068227139cb208e8f35d6aeac34b9553387224bbddf923c6c894a78415b7001921c70908a4ede1c163729d037ac2f113c893c1fbd99cf09da07da68624edefd885ff00d9cb1c263072c29c439f09989a3e0676d457886fa0c0a176db5c6938eae38a4b97d87dcaebdb7aae9948878273a00339fb3ba4a77d73f333fda94fae8bb996baf1d3a2aca35a9f9b10282c33d391f200e3248224a51efc4f21b53d28021b0631537294d6da1a295ddea7baa9990dbb0a43ad8c681e70202b0a6255ceb33d298a1d22486ad186aa43c0a1aca6e84e68b619a0c98550b5ae5ea3c1837a82ec3720199f29547f3dbe1fa1c6fc62b7369d4a9619561e42aa87afd8040335aa0e9074dfff68f3ed73413557a3548a456b16df3160af141f25b4ed516435715481ae3b7a5b96aa655f39267db05a74cc721cd43aeb8fb821afcbe1bdeda07347aca18a095a01d486ba65fc4182d2a225c3bbaff5d4d0a9379f90282ef1bb66bb0a19abef81211a1a5ad602cba78347d5768add9f8466c69b118702446938740ceda0445d1066745fb60d8373417aa00a00e2cc67d80a68234874814e51e21fd2ffd713b052f95493db74928a6ae3906c4825ccd1f1609674784727246334ce138311eba8e77f4b6a516ff251bb71b2860726567c63f4dd4b21981a22aa72aa7e725b00f496197b89ba2d0904283fb3a574ca20b3ea1234986bf67a504bde0988182d8a15950dd48a5767536d68464f0ea167f6513d04b4a84860d463cf7eda716e6ad70f899ff89d2b5ed3446efcfc8dadc0804f4816b5bede0d2f8ee08d782ab5e47e81377d2798c5474b95a07bd2cbbd461765bc396844b28b86e34c05a3ebd9bba83129dfb89146c2930c7060a659dd91feb8beed2312cc9988eff914f8a9bd4c7279847c83a25835be4b06dccfa3ac2256d373139377359f1c7d473664126c9f1878802aeed7d2e82719b75d855b84e7df4ea47da20462768486f7c72b21501bae240e7aa73d4c157d80d525c0fe661cf6c4cfe5ea359ad7651e0cc5655117516022b5f8dcd85df85d49383a2e0812d0ce277c43501e4d145a4f8399b13a20affd1004f96d7c20ae887f25b98f30ad86e648358aa02a8e2156cae572ca437ebd47c50590765de0185765ded09e1b951f311d4becffc81c019995d771517414fbdf1777554bf6f61766009f50a853bce0342e543ea1d89e4bc7e1ec7f1a0b963d750b64e7d8f21376a05a4e38fd6feb842cab1cec6a9df52fb69e023f58de558b771a3aba491a8a0f8efa40411383d0561a25990f092ad2b250e03416b0e05c2b7c7ad45fe90e9c92d5d26cfb49b468c6835161c5a77c5dedaba1d6b1d02eb5bfe9256e6e988615be6763a644ff3b95bc31b1b18f29c084260624d99f1c4b8e94dacb7ba015726c6148f9fa7190daeca424a18a5abc18d92eccf0992d94f382127eca869b83bcea8173483ae913a1f80ddb3e1c4eb4a52ab0fa212f35f96259fa70677f4be0dca84614580c059827aaca92b47a2a39587cd7bf5a72b4be4fbbf65393b461fb5cdaedd1e52a389bef2b4e1e595b5db4ee7ecaeba2a60c6884d905537600fc845d5e9b1a121a4fc20474c8e6e37571e2080eed2c7fcd5942169cca907aed74e413ff36491e3096cda76a27089cc2e2ae66dcc4ef91dbf9af07c2327363a5acd8db1247d1a820139e192a79bf760dc0a00cc99703738b242923c63fde6d687a98f51ac954c01a699ce62067e5a9f99b99e5fbfdc637deee14e7ca82634c9e683062ae5094e73147bbc6d9722e3b108e7a97e78d85f4ecf822957d29d8a7021d57013440a6b614822a8fb55e72825bfce1c1634005724a24896608b04c83633ddbfcf57f6f383e7a41473c1531b278bf88df52a1804a911b7a66ce06585f16503479f935eeed6cdf31dd1f0e1a9f87250576a98aea54634c91b81324427403444b3db872fc6dc39abfa95e14c56bf58295a9b6e733d5c490e25dabb99333bf1c024f84028dfb5e2731e6993043474bb16837ab246b0bc180195965d7f6fd8733bcd4dc8581fbb932dcfc11961a361dc37bcc9fdee530e3d8a9402051c4c775749a608adf8548c2c83b0ad3c782aca5acb66ea0325d5c6b403a4871164cdc081be8e07c90fa6d4b07753dfb7e94851dcdeeb48fad8564f80384979845d93ae9b520f2dc44d75d74f414fa9787bbc8ed1056849ec2a2531018deed1710485f701321584a144a5432f97a2c920550b761b506a23c99df5aab2f7607d3f6c62ec74783613a56ffb1009abfc6d1dc9c8b3be3aeafeaf8d7b14a1d76f13bf2210d15e53f6118db50c82439549152c392dea75b73bb7fd3c46e5710451255e7f070dbfcd8e84ecc160715db5f0fbb47719f67e924f52ad371fc78bd4dc7ff78b09e0505d0283c86a2abac9205527c43a024e724fa0576f3af3ef3d6fbe2cba2a9dcd64a9212bedc0d903e4fe63cfaba2090878801e10d3759c74a353a2bbcdbf0de09a58d1d8091d481c9378cedd286ef98e6d5a41bc8c379de87e9114beaa0080c6042a3350f271f3350c96a221445624275c7ce15c19f2b899488d4f23ffb855aa0f2bdaa2fa227d35a6e3f2fbee4f9739b8dc535b338c83168190c498c850a2924e09619cf8bde2c5e6d991f91a980ac7164d3f85be180ba842ee8625f5a3d8179115415310f77e7e793b61c4f78a0c25f74b288ac1f0f4413f9264e2633939d639680873473cc37b7cfe4e36527861aee976a82d43ec4edb0feb4133500c4f60d93a4a6969185d5b2d8181312dc500af9dbf6004143bba6c884193c511988babd5ed90a49752f982e71512745e4e84441f4be4e450cc0ab56ffd37effce274be2d8c1686a87094ac6969defd77388efa110f52b815a71a8d54267bf1eed7d2a9a19306bacba73c669af1b31c512b3888deb7954944302050baf9a3cdcbabc22c9255a139f7db2d61fdea9b9672bf796b10672f525c7aaa4ac5a1fca891e2d7c873f2f909fd83f3e63de1fe50e8ea121be607de63f1eb9c4e79b9497774d3c558846a348bb3d13e5f4f58b5d363f15644f93e3bee01693d61e3103fd34119005b26141c0f7dce87b072f606f98a6cc2cdd778eb8bc9aa946ab025a09815643c96544b49c8ffc650a7c48bcf2f2efcc9bef7b8ac8b3074d333f9ecb9ee343694b3551617b4e5dfb3a9f3c9d357af52b9f8141d282eac2623d65a9a41ad007a588e26f52737dbed3502dc7a2ff8be4cae6ff62e1d5d7fd79b960575e98746459b41c1502dbbf66c4bf88c7f44c44afae8c95b80edb482568b1db44dac622e0f2c2ad4189a8716f04b366fc9db3de219b55093f28289034c8262bdd81082acf9b9e0c2b1b987460d9bde1a2393bb6c384f247b38b7bf7133569684cd8be9714d02f65f4ecfe3a1c32b33bca33b14bc8174fe7e5cae3189d8f62782fec3e12a817dee260a5aa2bc72bef9505efc83e47a394afdb827ea032927a3ad6fa4ea4e9c6fc3fee08a8f487a1121758aad79f5a607e715b7cccae3b35e724c0f8ad55f29abc9fbb934f54c16fa4c870b6307f409bc8eb156490d5e11123bbca96b019e181f0cebd22f6d0c73cef2990ac6694f0bfa1cc99432c78937b270a17534bb0b0da585da84f566f67104b0ef63a339f5a8a9de1d2e59e15022feabde0962c9c8d42fecb1c050df51eb6ad737d8671146a52831212193e5249c50861fa69a7723ac3d3c5a58b32fbbd76e238b9a78a4b570354d7be418fbe2acfe6c491b3be34bd111bae2e974fc3ea6b40f6dec0c501614e5d62aa4395a292ef462fcee325448743116ac3a3473f3471c12aea9b394e2216a7ae9428ac5d16d7f4e353701d92625b963277f702684f2d8a9730524f3ae60dc96d9c452f36511ad785aab2d9d3250c607908b9888da70fc12cd158553de754448a4d257c1f22fe1705dd4c852f8b15ce9994cf97dc8d5612f4c33c67ce0e58eab774e95b8f9ae2bb618c285193ccebc94f8754c9d88a0dbb6ee47daaae8d805569935e34619f5ef85e93aa09be4063d533693baa26e8fdf56d72c1afd2eac37b3c69a5f23e13d8c915ae699aa67d2677251c34780e1fe05f1a30421582c0c05d3bff1824fe3ac350eaf3007d3c163bbf4587763ce7f38ce7b6b54238d7eda449315fca4987935dd68f7fbef6cfb12404e6930bd71637caf3e475c01a1b758618e61b977ec46f6d6317476c3c11a10e03cec41de777655422480001a03c4d722872e39f0b57cdab48795eacbaaea66960a887de9df2883f4af77313a936d2c05c15c846ab1e37efad19f0e1f1c3333c5ab296a908eb2d182641bae51b6eef2a2df84c18a2d9ec1eaf6e8425c5152405ccb4d336b630b2a38f5969576158abac3ab0e65d83f51bf9eccda0ea890b6a764cc432e7cc0e87fbc7037198c26dd29e4642da8445410965810cf54cd43861d4ff3bd6b3b475f66bb809ed294d542d74ebb223e154502e4b7eb8e40e9a89863c7afbd1cc5f0dfd04df5d86ce9a7521b4327ae3f6d22a2104ba2ffb009aa44f0b76a0adc727d84545aa714cba8e378313b12df3825e66dbcec16536b45fd566d107b6a4db09ffd65ae2c966b5ac8f6a5d3183ec2bccc5c77c3fa6e6cf22e770cb4fc14674732d1bf95a0a6d17cd0cf456c89a18cddde3294843e36d7e94da2797fc05d7138b88bc9f2669d7ac49b5e674739613cb51a2e7fdf11cf136b16822bbbbab400618b021bdf18fa1efafc7caf8198f2cd890bcf858381afe48f10f67440c0bb971de32e0f14761dae1ae52f9f1e5798187f3fd27f706219f38e1f5d2f6cc175412ace0731b75508f9ca7da2f6f4be9b6304fb80025cb5225507fb0498bd4f1c59fc79a846b57988edee753457f09a1431d3ca7d026982cda64ab72eee9b58913c0697b9a710f92219324044025257d391a1e688fed54eb138099f443c9f08a5febb0bc9f5c46756a7f1faa28ef96c77d7304865758d6b546f5758d7545ac89983d611ecffb45554e5e6fb54b28fe11fbddf1497a7c622790bda147676e16d7db8ddb2536694b522b95b17a591b72e4b10c23361a7da33f5aeb18fd0046f1380f48767bff85b4940a78590d3fb0f5f72b32e82bcd6dbea91057b3322d18120d72fd6e22bfc23be2aed2b9b95ad9e6f8634d78ada58394530054225824690c0e02212de3c4c3cf862303ba8b1ef2b4f6ad71e2eb8fd6ac958764f91c85ad6df30dd74e1a5ceffbfade0766652e9b477dc7183e0287c4e582823a396a01d0bc185beee56b365f39c82bec800fb53c7fb23c46a26b357ada2dc1ea8f6f9ed702639f026a5cc23e47c9350fb3de96bde26ab0b40e784a092d1f2c3a449240d5bfec1ecb900309895616c9e0bb6e522020a8779eb1ee815af7defaba0d1acfd32cd41e5b91b1b75a9387bb18df5d0b763d706b58289b1a195d71ba268e2add574dc7794077d8495be09a436ba37200ede299e139480ab423302d485b8650b96f96de4a212433c762fb5911bdb67ad8c0110e0d76f29a7cb14ca7eacd747f9c2e7bb6acc15ca3612c3cec7d4a0f706565d581d99a5651b3c625bc498c72d912728e2a213ab773090a1ce47a30332ee53c8d96defc660b37abe316b1880a3954b6e2b4e284312cbf173f5816434cf7f9309e14f6b31d0532a5f3a02b4024d6e4d939c560185ab00c8cda700c9f32699265aad44b095841b537b8dbeb74914a981cfd573258c533ef091678dd5d3b90a3ce7e185f6c9dfd13f9836eb18fd6a9e330ffd8912dd72365246341979b05a53f1e1d555843e4c6806a9ea1448bb6320032fcd83d145bf3048c5fc417611c8bf9fbe01cae26cf2c6f85dcefee90b1d493dc6a1d5182656936166f77b0a7e4d9de823edfdb358734526ceafbc3775631d01d169af9813112bc2e47bc6ad6686494003763f0ea98b173263317bf554bf9c3fe51ac5a4ade98fa88531189bd6d00bff4b391aebd2bc0518afbd93a9b6415d28ba12c660350d0aa62312efab9aeb801ecac1c76430facdd4cbdcf277f5ca232e759ab474fca8016d2c6807781ede9785fe2ffe5cb075f4fb8750f86e3918329da5f57c6bb130feef7070d7df336e5354ddf05b9681eb978d4180b11a0f91facd45f6f3390ccf5577c2bd453091b4f427ba593519769e484d50ed955c57e083d9312e38ce9eb61007a362a7a35902166d9f55630711ea15e155afa7a3918f1dcb79176fe0d8c17d283e476eff898d3cd5992e114dc4228856bc61f3abdd6f35228e654cb764851f5475b63635a146860fe207e31a18644528a770aa592a5da25d66704b4cc0f621285289feba07258e1d510f1154c2406463644825f0805a540ff9451f739cc1dce2a9165399a791f43d922f1778067b7222cab14c933a56aeaaba1a37765147ea693213fd202e13f8bd7e9c72e42ef1073cda59f7de07992e5c81fc7388d868f2c9bc017148bbcf5a952665c5681d100e3b2d29b22a45407da863fccca89fabb4968eff50b5a9490a27c2ce53bc96232e82668b6f40d7f826b4bf66008cac8291643d197d5d3f88a2b3cc325a0bd94213427c7b2a5247805cee0ac3f9ed2e4de70580aae206993d760ae3e0b41b3384da0d962c647c5bcea426bfd48e59a900a2718388a96002831b0e294b906b0c23a131e4a9dea790baf4638114b7b3acaef20f69267e0dc6c7a9d452aa89bae540583b724447b8f0010ae300d51088218bb5f277d9ca00eb604c7cd404b52b618f08e73a426dd1877063f0686fad7e68ab6a2a25a0fff5280d8fdcd0eae2076d3b636f713073977759d16480508848a6b8373d957b698378088c2936f486bf320cae021adb1aed39083f8d4907a3f602154c93c04c6a723ef634d0e37b782d1019faf91568f23e6043d741568f7f122248badb1cd79ce1f16725dd9e108683555909dea43c4615b41f78a6c98a0b8adc8d1dd10998e2f66033beb9bf424b3b0c67480309bd1b12a19708e8d9f3d8743e08b9c6223b0dd6bd29986121ef55df046f1aa06ea735c3446dcb8972ff2fcc6dd1b58350856c7281f8380bf471f008c561b192973cbc94feadf83a989624a96b261588cee99b6f19fa601c6e95caea44a0240f95403574e44c76ff6fa9e0e88ff982817b3a14cd0c0d86e4fae7c166c7367d5572e089da87d6d599081be8acf9f0f75ac1f734d8a8193453bbac0ff68f39f8573c7cafb5972f8086742d028755c5ac4a4558b95ee6ae7585e3aa653e8fa18690c009b1adc4b25e3143c45bc9d397f5b8c3b108cceb1b580217907c980e98164ab0e2d9714b15d4e1f0c139fc279b663cc24b53f4322e9a2f0e4bc080cea2a5bcb5158a8f3924b6bb55caddf14d91bb5c8f8e4135ba17c625a02f1e7e6d6a63403f2b7145ac2863fce11589da539d670b177b45c1f1aa6e91b76ee6675ead79fc571493b12ed5a3d1a0cdc60eb0c17fa105b9ada8a5c43d17e8d60b3c5ae4a4d4eac60d9614d921727b8f5971745726a0c35370f6a3960ccf7d073b882ba4b7e9295f2069135f7569bc28b4c11842cbbcc162862cbd436d72fa9e7badf2e0cb5f668f0f931482dbd61f9dd0e5a0a4ffd7dd533c41b998c47cfb8b9c62a5682774707297cca8e46a3feba6d628ce15f7d222ea4e926c937a81cfaef8127b10dbb763623003a74e11d68bc5ffe182a7ff2ce6d82340b8fe6c04e7e80cd71a53bfc1f77a3d9bdbf1dce25243b5e566b80a0528af1a6d03bb819533c6bc4346b01221af7eaa530ef1dfd4bfa1c78fe7e84013bcf72bac2e950bc21b856e034b24551bcf65065fa48a5b7a6bad8b427da9188073bca4291e0ba251751a166fa95ed635b426f7350769748863e16b216691da9be7e10a34ba1687bd6d869ad163f46f38283d91b8e025fd3fa6198725ff392d6b5b6ddf07917d3c5961221623cb5027f4fe280ec8d85fd2b0633a0c56461458ebe9c87a8f909b2d6297687beaaf0e9ae64144a1ac8e271654102542f0fd184949d2594a3a2f48520adccd0e80b646f88ae7b7f5fa37091718795458c0980de72821b70d55959b3c1776c44ad92c4db9b1ebc4e6acee3993258bf20cbad29a09b67e65abc81b6cdb45941c720bc0ce6e78c172edcd34ff427f8617d121f243622ee53b3b754c4f317d58a24736b23db8319b7e3c0467cec5e29dcea756e61d893d1a483244fe1878634a63758017eb530e19a80150aaf5c12d4eb637344329e74745303f57e046b6fdac0742c4354bcfec3d15a50592ec5f0e92dadfcecb84369cb01ac8f429d54efa94b3ced03669d6b8459b6b50179602cca058977b5f9ccac192d9862331877931ab5217814b0b152637190f60751c9d72934e1fd9018d8fa41dd2e393b31032e91db34d4330cb546efba61153897bb103ac5cd5d0b259faa4f9ac6b5620287832b6c1bea18abcd0a469f7a25158aff10f14e050d7647a894748700d8ade7bb16fb7479ddf811172de1808d79b6df364e6b857d3c00d568c54a6f8687b24bf4b2612896092af80b820bacaa0cb781db7d3e4cdde74dade2318ac3332f10340e89e21967e1d64186d6198e2f29fe4ea5a61ef439439fdf57d8afffd575de0e2656500e3e5d8dd6c0435f612488209c8bcc10fbfb747b76be84000cc6aec3467343ccc36b199f0dce96b52ebd154c6be8496abd7acace1d1c0de1240ad1661260a33d04643bae7eb1af54976ae27fd022f6604b66a04537582c9ac16ca7e2dc95013df0f52e23e3968d0cb73bfaf6530e9b6b110273a069ea8b9769b8c879a2315e0beeaade00f5350567c1114f4177fcaec2d360da59745d3abc4035a4ac3bdfdc20cf2d1d64b812e3d6a1a7b756d7f60b36252d2e20a980a3fcc04d67e973803329f4a441f8618d73f247280ca8c249a302a150b5ca4da83c2c7ea614ff5c96a90823af2dc6fb2937acfe6aa69674f906f318cb1d2ed3633c8db3a30a08c27f2295b90fb73704fb00222873c5f345bb8ca74b2cb0ef20b39b7453d3246a8f839058cb094aa7ebe367a06a9a31dd2868bc3d19d7d8c8c79a25dbf74a07cdbfddfee0629fd355ad6c2d4dd2d668f09d873b42735f0bc15db3ab1f85537490e42c843e68e57e5bb9a1c016b0563e716fcd16490df4ff7b98f1948b512c1a27d3a221e5d7a237fc4b579bcca318a9354c34302e4d489f08de56b1486bb4ebad6325341db3c959b46b49d215d1fdbc1225abf2c47bf9ccf0a92be81973c998404c6a745c8946c809d2520e681c8b701c6b0d2f88acbd9fe8db8478d1454991c49fac680ebb91b653273ef5a9f55de6e86f7a4bbc197e48ceb0154fdc7edbf556d2e174767a03846e3bdb6cd90a2c09ec3a62ed36c9430cc9ce72e8ce0ab6b303f08ef52efde9608f199df04231d145ceda5d2ee1ae3476909cc94624021682554775fdaf835ee9e36615fc1fb42de7d27454aecd39a942fbd667ea858d1434a7bb721d6f3c8ec84cd41a914e67e5f666841f092215870e5508b54e51740737d252891166e7a4a4e6e7c75aa3ff09b0d495565928cfb38eefe6208f536cc7c99991687c7bfc2b7980fc6e6cf32601d1e85d61d488736f8dc4c3630935456f473f7f13a9a78387cd464a4741ba929f1d86c1de684975564f798787d9782bbb4f85b4c1bfedd1f883b3a30f14a7d9101873a734b6dd20715c5332e8efc87a84b05b9c7abaf378067927050da9a171c933187880214415efa6dd2da589335bb29d9a8fadfe4291fe40e582fbcad9c5211224b4cd6af510dd2c5d899865ade159af2290e8b56c0623f9a411888ab4251416b0142ca4a948c0fe5764f19c67d3dcb33992d086182f165699696f432231c651f55b7f5fc2cec3bc31177feb4c7a9c15bdb4ec89a5fdd041599c519a4bc2c6ae0867002ec4626233d5bacb825733611f2c3b8289d7e1f2b1b254fa661635b64930c58fb49a4765a728e1f4e09a8992a5297446a425e042d884fe9889c91f4b5c383808b600997fb792cc2e7d242b3ddca085d1901cefb07a8e749c36b0af436690f22d11bb63369d1194e6191e90a31bc23144b287cd0f624af64a9f9d1e3bc87fab0bb13deac60b1aa36c4ec0098872553ca4da633fbaeffdd0723d84d8a97ad440ab94ea65b4d00fc3967071091b00b90949edaff882c066b58fca6ae1cf00c3b96115d8ca126d383c764d96825815d2080ac83118862c274a454afd0c2ccdb07267835a25ed531f6dfa5176c5ae33c026aa8861d1cf582a381dab09b4a0390f09634e2750c2b4d527d5865d93fb9b082f5a2f7fb8072165da992b07e9ed2e0049b42336fef81da301e78b3d34541d0bc2a0605fa3562174d66be2105c48b94c8db891caaf7d4bcd26f125be9247c430df7bde83697bef686ff720d11fea98c0c2e68f0daaf23304fc956d3ee5de928a5d7f23dd9a3dcfed303e28852edefa04417af3bd9c4139086444e0d36835a076a18ba6c9c535aedfe291c6075794fbb5c465b16b0a25f24af41a2c130463d30173b20b4d6f5eeef83ae0feebdeafb97b16cf6c4bc5941a655e92e35b407311c7d32c49dc5cb97ece46a74b0ad99b63d945ee9cb828e9d5f7361b7af8dd79283de19b5cc962d3ca6505f6c34c1620391f699936756986d05093c47cdce6c32d7bdbdb1bd8a9d68a7972a9fb880c152e016b9a2529d76148db85f80d495fce0598060d97c7df90196b4e31e1b267755d92f0429584968d5b68bac47aba28045fe112b1709909e6c21675dbfcb19ea2db22c8ba439d26f25d264220a5c254dcec3e9227ccb28026d3e475bb8e2e22cf583e6e9e971a3dfd2677e224bc2fe5a506fee931f22edb1f5ef192f427e5fbe722b43349126084f07daa464ca99fa26ddb7cbc181671652a70c7ae1aaec520082e8bf4b397bca970457796ef7179ea2d087918479dcd83737e248b4dfe5787d172f687b29fd9e8f380e591f76fa00752255399fc5036debd8afb0050d72b18db61bf585d48f771ddcb9cdc081468c8d4634d23adc83df015e22e8f44043e4a79e6afa8414146efdf724a62efb2b62a22857ccedf9e28749c419a94186c3042e799ee328ac184cb825974baec284fa03a5af520f1ffea3952b29d75fe54be036001ee0a12559495584332f00dedf3ea1cd4b9a0e400f899a53994476450f54b2f5c2caede5dd59c5862445059d0a2c40cdc39d53e23429492f7ad166291d4f6bccdfb9ed5a919946e5d76aa8e413526b1284813d12fd7138dc7494379b72df0134cdc2a488aacb5faf9bbd3c05e70bc2f75204be1e49ab1af7a88650e4335fb2ee26d6a934142a1d6d06603a9a41de7d3489ed7bdbf8ae4f294943d9ebaad77c873a0cbc2d182317abd73ff01625e0f4164d3831b3337aedf4a7314996d7817c3a77d0eecc47df68457ca1e3eff4f2d592200a65c1b512f8bc8915503d6caa13161d65b9c37dc97920262bbf0cbfa078f13645261b8bcd5e6c2bec76f35e56a0b60666350c600029c953a5b6631d62f0c4dfa98682912a4322a367f7d2cd3e61d1de0c1e7a2b9421b8a2d12bacd0fdf65bca2bf9bdddba35e4b8f480a01a525cea463a9f63e092eec8d63fb19414d0a7b21d6106404590b47f41ca0a1b6254dbf027642a8da4d2c7fb7ca76aff4335152e2134d232a50f9b450f0a960666be6f01507acf6e308da21762425d1b915506fc6d5280d0f05fc9f7d13fe5cbd50f8ce612783df4551377cd1ae53c433998d076f2aedc58e8a389662b3b3f449e15c81195756288c850b43aa294cf8a16753bc8a9b08bcbf6548296804ac371563e02377e1aa21c309f646c48ecee5eb3c6410d2fa0e0dcb4624ae91761a161fad33fb9e09656499cd59948025c69aabd14d239f77f276922ef22549b764dd41f9f4752cf7a5a25f7c899560933f746e84446b8553564b61e1ab9c341fec23c42142d9f7e2e0b41516009afa1cfbaa3797daadb6c7f5102cdb2b307a9a9200c13abb8be4fce49d65a6cc2c33f6dd4fb330ce8401107d8d440cc0489d4208b89711c6d45b9d918b56e49ef7c432efaf82119e8b62758cb2f1d71082976b9d5e4daaf9965696111613cab39c0d7fa7c80520761c1cd257b14a4a867c6c89e2511458dc8504c4bc03030e23c36bd2606faf645a11b0c291214f8f5d7419648fc5a182de82acb28f569453e15988939595f5ffc6e1a0951a052e1e1cb8691d25aadcb499b10d33b49a372df3baf9471f889fd55e47e794bb56cdc7890f6f3c28f962f59cf3a1ad9728f5e0e67f046e0e57c855506c9234db4c01aa3e632e51c5e94edcdbd86f7ff018f1a7f825e8fdbd2169b43b231451d55d4824fa89e6489b616ed1a34dfe8036f4cb09dbe81bf5032ed362a29a24aef5914fd12f3c5554d321ef6277f6a490e5a0ecaa9b53118d86a4c83a972a6eac26b925beeb7eb1b7bc2606bd29d8efa7e5337ba38165ee1beca794d2d27e671c56e10bca1b3da943d0d99f7603c18a1e29b37790c0434b8cffe110337f0c76313fcb26c6307d801ba038f00534c4abf07b6b64bc05db77341bc321efb4a4755e31226293b53f3b545520139d52375998a48bea30fcc6527fab1e52d4f475d350da4254d4cfbe7e56465d209688239d85526ffaefae29e9c81e1fea9d25fa17f9bdb37527d19730c3e5c807d9661c1983f1c434be37b4139b5125e029c98a2f7740d137ec57fd6b57cb014c556867f002063ab17b757f0b3e7a35b6701f2585c6069d297fc7802005cdf21f71952bcbb99bb79f06997882828c5762c0f77283d3658ac8a85718b224cdb7440a4a869e612645a3e9b83914de2900bbbb0704de990b4f082d1752259f43bd919b9c7811a983bb7153719ef58cda4539f4c1f7cbb0429530240add77df1d013d35692e5d951b926222470b0133bfddeab760b548e9f3282086171350b4420659b41a7157ee6d97e50fbd220c218747f6309787de14df07a26ca6df1236d6248ecd5b62f149fe24b642409fa6acffcd15ae6b01c27ee56659b2dde0bc8e9e9bb53a8e8598395f67cabeb0557acf0acd4c4c7a42cec0cfb9a7e1a31c7bf899bdaeb67394c64abc8bc5067b9a962b4656505de7661c267540d460789454f7b4e04d235091facd018969bc0dfcea117046cc3d453b0bafae09215f81b53ad828e0be178771f3d40600d71ca3d2c9000f46557adb4e8e489476b69822feccc813aabf4fcc71bf5cc785890b69e66c49011fdc223643877c6f70e5604b3d3c915ab068955399ff1800b7c66425d25b4f8dfd5ee622c9af1f28c9efa99401a9830d72baa9799fec718608bbe20f05c0cf8d921286996d1c2c47e98d150b04707c656565d9e3b820be9463b83ddbfced05067bdedd4497cde5d820416b59e40bfa500d562d65af0a88a56ad9ccaba03bdcc5008b5fabb4c982f5f76993478e459ec32c2c6c0a5f59fd98d4ee8a1c4619254aa625583d79a7e6fcd3c725e4839baab8eb54fde2f644fed3ce8090080c2ee2973fdaceb3e397cdf49c7af82c176c57af4506f67576a5cb131db28575765d7440425c74963204cac64d6e7b7959ebeb5bd811fc135774946846ad3ffe5e9b4fdbd68676e3db6103d7f330acc8e7b98f5d7c643ec10bce3a49e76032aa5d4f5d8b91ce4682f761f9c1e4e0bf910c03f7625a8b52d0c8e1eda568207d456041692d955a298cfab732b11c0aef96ec4bc1d83a381a79671f2710f1031a2ec15c5442bb0f272b23628bf668c4d06bba1ccf3d91709f0c5fb50e568d26c1afb44f9efea3fc5265c0457ebfd28b708f88487a798812c80ecbb6657fa32fcb2c70bfcd861654663825c7b97ab9b61870efb361b933fc7a17c9ac07de7468a37fd2cb419e119235cb9b27423edd663565752578b346eefe0ef9e6214b287eb458645f4337eb90c08593288837b02cb3e87da26c118afcf4fa32fc6f7fe68b934428c42d67926d8a5f216085df9b1da65c67cdd45bf97817d6f35317f496f5a0b85fea425c5386dcd8ebf322e39c2aae84fc34e792bf8e309dfb720e2df74cc22b2e942c31b40e50ccc7c39558b31cac7b6d5f30cbd5bb7876406c3dfd1c6ea1b4168bd3d5b921352230d6616cacc7beb565ead2df7bc468dbe558237bbf09dc3f546b497909dc224ec653b92cee2d90e16ca6f98e80657f7674f0ce080233a361696bec4632b800946cb0e3eff3bb1b874e461b1fd9049f3a70fd2adcc6f15fbf710dd3d19eb412af562ecbef2c09fb1ab01851296805740320751738c12858ee12f45c5666cc540544629448ad59232a2d8ff76da263004b8012ef8317a397267507e2ce36da7ca9e04d2f9373cbd37f10230a8d8560b655c0686869a730a6e9e996f40964ce2b2afeb8fe8c60180e2434066975d809dbe86dc14abf1e6165df528cd2de86261ebdb653d4f97c2198572144a448cf8926750f0ac21abb629502a70cff08131c47ad90ed8718c0afb6f316e919eff2f7ec688065b8c055e3cf7eea01fc38d54180c02da7988086368878644cbec9d146a52510af7413a5bb5f3ecc69ccbedbb596a87d5fde011f0e9e634fb72ee7f3285e7cd74521172b5a3e612c2465d9bd40b049fa4bb88241d0b99dd69f2d114eaf9dbf7a03cd3c87e28321dfc4b2d7748a52a8c9445ec2a809af0e489a31b317a43b7514bdde00a16df15d46d6ecac88b065bb3a183b58bf444390276207f85cd8eecc12bcdd07795beaae510f51c58f4414570ad0b256fb45afe33276bfa2734e86a39795e023a6586d9b01883e15990399c4539d6b7bb9444e21d271f2a007eae6bfa754ac564fa7e67bd7535b277e401a17f6d058d01833fe28db80c80fac2d6ba05018dfa2e4b73533b38821998985069007fdc1786a75071611baa3795aa723d8cebf01b154ad3cee802c218061b1bb9b7aef448060c2b9cd308924032d8db95bd7dd63db3353474f17808b06deeca1676029befebfa3decc9eb79a60981727a490ff671b832ddda5f233d3ef8a573b86692c48bda0cdabf53e82e57b30e3207bfdf9748558d70a7bea966e3a6ac02cc53ea7626b8b049a51df88511995f4bc64b65d4ca6fa06627a29695e98ca407eda4e5361f0b5f0734ca41e5a0f77b1f420fea8a2144175e1df0465812233dc200d0d09584b1340de05d9479d58bc92cf137a4227e4f9f20fc75e64b3e6e8f327115a84986a140ef4ad72984e93b8233738062ea0fc9b7d9d6dc4514ed080182989e45c5ea965777a281ab79a741adc1adbf40f18534f4b9cf0b79bcb16f49e6df44d194d794d7f74d5570735f05fe8654418caed708fb0396667522a6eca07f7bf1309ad12f74b7b10cd18d4c315975f74ee3c431de6da0e885dc4eb81c68484ac92112329b731d0d33547ffe7c42a77a85f9ddea2e3d3806bd072e99f76a730748304eeed1d040afc15d3897b4c44531f4c33f2a8f98924f37c091c339fbfb77a9bd1b15287469a06a10d42c6ede7042d31062cc1d462bebcad1fbabf92c833cb9fb5be7c44bb4eec8711b37a64d5de9a28210f297ee1b8c906980d0cf3078b1c2777cc332007e92c776cf3e21eee582fef2e80a68b6e2e6bd744835b21e7e423405871961d5009b87b48efd8d1a1ba55e0c29f07977d96c3824666186eca311ec720668106e3983293020b7cb2e9cac6e01c48d6d51b3f2014d64e029dfd3b59b3cfb181eb2dcd2a85c7d4ad95e7f3adb490ff01ff9ebe4ee772bf43c557ce5b097ebf7ebde8764e0909ceca114efcc1342e7b42f69ea0044e72a34671a877c28c4d075f62b3d170f57e3555c101221e16d8a7900e30222b13a54b4472f5c0cd4e80f9af6a02659007f7cd6f0c09b8643e2a286947d3a941c14c22729aca1eff577010825291cd0109f3c00214f5e0a91aae2c921412b9a03f7cd44748feb7e7412a57d434eab202639a350d6f8e9c2aac355d757554f3078d775b09c3f0f5cca07e0496ae7867797b076cd2eb6a8ef8af2c8a56fd735d0cf0e13e9cd919064b5a3ddd1553c2a0a0aee0b2f505e2d6ad8846722c89b97284dc395361725a40a063ce18691a84701d5d4a2691c5e376707dda3848473da4099246352b4295b7d3a71c0bfa6b8e829828f58cf39b1b4c73bad73fbd558b2e691a348b617f4b54350f4833ec652a5760786ba174cb7d4365ea57b59378f32ef43ccc23ed32a712b533766fa054bdd651505cb5af9c9cbeda4c4fbbed27c971ee98c84451d640a89354a3d6b86cda744b44404f5137566de835edafac4eff5815a2a43224071d3eb31c003e6d2040b8c2d7a04ecf7a2579776d06276dc9e70789c07eceaa8a8f7ae7be87515501d00e534603937350813bb20ae44272ce858e825bcb2fcaf396c1a95d9d229319dfb7082455235fc1b1839690b75a78acd2a195bee3456af91f7cafb8f87d7845706009578a26308b2918d02322739b86241aba7c0975be709899af996dd2175c16377e8945d69e16826df96a7782f3c636c9d51d9b6f10d8de03413ec3880a93a0235ed669f6ab36abe7843eab741247916c1a3782ba7f8907420fcb7c4dc7fd00731bb57dcdb174ad43d9afa124696370cb651cfe29e7632545489b2cc1d44bb32948cde42d30520d77b8130c5732d51e3fd20c906a49949588d8d93d8e9f306dfb851d9109c49942fa044bf3d1189e7d1aa8897894021d5ee950964b1a00c5fc651ada8ab1cd74d84ec9de8763dadae82ff1b33e2b4f5794581965ca37ec7dd38f8aaefda65b153e037f37aecddce8498dc951719386ee31e09af5fdbf9799e19375a3fa6f7ad0e8456d0a52f7f840d7db50d92bd6bf099d2b6e81754f9cddfe196cd58e556c8760dd2bfb711d710c24c1f9f350bda104ab1bd7a7b667b198ad5265bfdddcf5186f71179f7967a42df2b1a50a832679a300a89d83aa1b8ac172a21df34221655b3c8b2a9a1aafbdca81e34798aae03ada01c0441e322dfe11ce70059a03eaee53be31d1be9fa756f71f0a2d932b267cdb652514c89da066d887e363cad842e9e17862ec32a0adbc3d9dfd6f2637e0e017d97ec6000ca22d138258b53582e90f342b29e628b3c3cd7f538c27110bb3fa9f7cded9f264794933e9b01af9d933fe5b9e29d0c16baf8bd0afdb95f51a4fd6fd57150083e5d4f36265946507fbe365edd5cd44d93407fc3860a4753872fd2b80c1334458ca3b0e23302cd4d911ad565005b00d344d1a155085496e553ce1697f950bca380abfd5e2860831510bed21cc973f5c7e4b660296d3968b2f8777135803971d6711f7fc73117e50e3dd357b0a38e7653974250a48d6124e5821920e8b34cf466974fdfb97579c2d702c54cbf94a5099d7042d7dcf9301b7d0cda68b2526432f1d6ff4f7c8a6b50693d0d46fed2a4cea6defe7451f012bd2aac40555c045a208e74a57f62ee778a328f37cc295dcec5b324558d019b68b0c2c4350fcf565dd785c8411c733002bf76c249db21f9be9c8f905f5b901ed1260ca422da9f080b0c7da840f2e31aa598621b8ba33b01c7cb29307f089bb005db1a39dfc1a9d6563bae89c9e5384880afa1b98f7bf26a57d2af457d9ad4b5504f38a0a554fa59917423b5d23aafa4dde24cddf11267ac9153559433d7fa8ee16f881598ef697d6f213170137441b93591bf9b70f9c768c98b0f7ba9482e314a700dcf399798f3c09e42ca3ed46dfb2483cbab7e85cce963a12348ac087561c29b8751d93a044b56f8e2aa605fc57b52448d42e8c2c4414609153c0195496ae9e38ea6011728d191a855e9b8165572cdf550700306bd4c4343f5989c0581c08aea21c711bbf1e75ddfa1a79870bfae6618f8b7997aa4a5e222ac0ca24fa5bdd128cfb922580d04e6c8df9cb561b89c31f747058d7b8a14a74ed361945ed2a341d9da54c6a36b871bca77e6d471efef41d17d7ff658c51b9b728a99b8c4ae4ffb682be8997f68137a41cd2b394d6baa3b8abc0964c873a81177c669a3049d79106cb2b0f41c9a0efb577c28886f8638a44305c0811c18fbba17b3929ceb77c906aabd6ca4402d018a4068527dcb04e374189344d511ba3a0cd998e842961056739c555db0e1954e5ad5260946b33d15ae7e971b9bc5a328656cd56b1cda8f03466d79e59442625a04e839128255fe96d3e1542ead8ddacfdfa139fe5a47eeaa32bc6dc5cd3b0f1de7b4f41d903338af0a31694156074855d88c384e1b98d8c3fed5c172a6456aa79edffb7afa93021d4410eb2e1399d44530015046d087aa1a495eb9e1044027aa69b99f3bd7d012f21ef8f4f19a9117d5045741fa26b114438d774f57b0c42b1da1eb3be20262d8b2942c1cef589e5836395ad1f5c5ccc869bcfd56c504944795ca34058e79107dfdbaae68c748778283b9fff1473fbc78e2d4767c377b3ce8c0408c39a91f5b2fdc030629ed3e6925fefe7ff4e18be001c102f1439aa8fa7c08bcd412da8473595d7b2553145adf054469cd3729fb9661d3e296b46cfeb0f91f5dabf7ce65a2c0daa7f962bfe69aed95cb144d45d406e5e22ff3433b03e9019b6a156b2456f5fd479c32a7da4b48c8dc85b0b019f57b54aa9f83559fedd31906c0cc88fe3e3597ae8ef072e659f60f593eda17a61f027848d574c0489674c0ed2aceb54a083a83f68702bc601df1c1d8a6ad78b00a380842b033318e94334b75f25ebef97dd0cbcccb460d2519be2622c3cc6040ff14ee0ec68ca3050810d36d9584ecaceb21b7101c53c005b44109a61ea62e5e1ab0870806f993e50dfd5ca051f5a4db1dd4f24f1c4d26a1f7a0af7d12e0b23618858bb8a5a30cf3b8025d90eca425307b8e371a8933fe1651d1a28ac1f10cc475320e9fcc5c45c544cb4325c009e18a336c0cc936c46bafa32d05538d47e4420bd5041fb4fab795c25e3b5ebed027b93fa18d4745e3406ac88af9ed8dff22c9dcfd2c72eb9133315c7f1030b8991ed2d9fc06b6ed6153c661daeb26ea2e6a996bbd78b2dab97f462e5cc3623885634f7d20272b3e7055b3592069b12f5b7a7c7de8321d6006b7e05b1f548ad8458a3c0625b32278d360014264d5aae337c6f30b0bae91e8697cc1fa5363a0887ab7c8f579b0a036a6295d17517f50305ef423723e5b74ea184aff54fe54a1fe2c1def7336783db9374e7c756b1cc73264064b74a69aa67ee262267fc8345249ee0cdd0f2382e04afbf4815def26780f7752f52050f1f423e06dc4e3efa75719fdf4f329567eb6813e24b89ecc146c1024f6840fc9479bbdb22d549a7d99af5df4ce687f9c358d0ddbaaae11d43f7ee72e8fdf4bebe48a0c289fe201e68cc54637bf7fa25abe08270d02f1bc941af2bee1a11a8ea572ee4a9204968800760b3147e5368fc5659df51043f080a3e330e3f2040b6adc0d294cc8f4b272fc779da8334eec113380e88b618935dc59aa0065d279b8db9d47830bf0bd7eb48b0c38530bb2ee372efccedab801abbfaf59cfe9f7c732736715b2ed4ed1bd2d80f39085f9dc14f57a3078588e71120f19aed763a13f7ad89ba97433403012fed10ab4e0f65d6f1a20f2d11a599390092808a2afa3a967bbdc90f8bb216fc829fdb4a6dc06a21cad8665f70cbae640bb9fa29f117b7eebaf20589fa6c54b5ed2104987528a92ca2cd0dfc6ad9cf5bebc1c5a6187ae30dd5c097c3a3cae01577b32e43db88687d596e30f05eee4247f552cc83d2b03f2644301d1f3fb05da4dce384bcd655b0df158a82af7f50fcd3159921c103d54de7a18dd1ca04be14b61653de394545c118f9e90d0a5303919097ff0921a5e150774836c58e681d3a0bf77566bb2b2ee24787107c9a5d4efc57ce6dda6197a0fe8cae65bd7246b6e5c486734b7dd97b8a946b7a97df9a4a49166ae78372b2f68ebe6f9060eb09360958b97d6921737969466095c724823eb5b94bad53d1507de1e90e19effc74910ad3f00581b5535918aea4757898b8ebde17db8a372a56f0f91a016c49e6f1462057b3a09c8334dc15b7b14f93d3c7e2b0aca8f4d01bf188c41b1e84ea8778e83f7cf5396193eadaac39a5bfc84f604a8970bc6b6bb6b96039e02bd0573698e0f69bb2d308ab1e8272cf78c9b0db45e88a4dd9c43a9f63c39c239fcf16bb597897c9a7fd989b5ffd158c644c7285361513be2f1b24355aff6d3ddffd2170d43b492edf842f36a2fc696f0dca2174c199e047e6a7cf175b2c3fe25237500ecd95967c3c8c53a6919d4710dac2096ca5049d32f4dd8e5325630eeb0e4a40dc849cbd902fc2735a517c8f22571a1e0963d88e8618b83cf1d5513efcdcc810c90fb03cd0038cecd1259585d9280b43b0b258e88cac1a886883d52bdde9bc124d61935492f86a8774a5329fe5566bed8b45b76293ec24c8d8c24dc169b0b0e59fc24d8cf2c1e6cb18091c5111e82ac13a43b94a07167150788fc6f8a5192f6aab191215767d3333ce5a679657d0eb7ce1cbfa9557c85093a45476633ea400ff85634f2af6e1fd15878dfcff3fc58cd98c381b1211eee563d2f5d68b613b30193506f12a49e6a39b28ecb923a1aec17d15d003c3ab052aae3487609749a0c7009041540aeaf2278f3730d8aca174d4a07540b51bf7aea383f9f4d0070979d3f0a75622ed62ad8fa1f04f21104e1e0a6aa6fe48f8eeaa25c6a65c085a546dad375c5c4edc6c42f0383c45b92caa5ab71246de28a0d6ffb0e6655125d0928c0aaca62b9a0913c399c8cae5aef4a3ca87de80f943b3c503d141545a5babd1bbc0c1fa87b1d28e65441e76f7774cd3b693e7407475ba8b7cac425cda2db4cf8854a58ba487e0942d415eb8f11c35848104865194bd79c1ef799be39fd3a66857f849c2720ceb187bfb2ea69da227d6a6450dcb1e318db2f9e4663a4da1a8d2154e2eba977bee956b80673f3064047ead83cfb5557aa6b0e49c4221d2a641ba99262141f70c16824e0ce8ee3bad12c8e29885f6d21bab4ae59699c054e5d4f45271bf1ab6261ee6214c266b8e520e8ef8d4b6daa0955ff67e4bd5aca7645b4f1ea4661e5238012f7bdff253eebabf9070d396e5655a1a3af7c5f1f513a1b5c7865b8c8611b75ce93ef515b845f09dd5eeb3ef9d26125cca40ee2b2d84d4455c32b2c21c455181c4b902b1f433e046caa58e672ed6a3bbdc0a1761cb72ee4d819ab66387c553912330059c54dcd386897ecca318ada458ec7b87f2e772e3fb4c032b1f66175500cf0bfc10cc8519e3055ed9a3ac3ec76509b2ef8b119b5a9ebafb06e55b8e1ebf5723f700d4948e17cdb1e9611208031d42b6ca2fd27687ca8cded374d5c5b761281aef9d194a4aef55363fd52e0119ab366e43d36077d88ee250edfcee240630133877dbafded271d0218d7afbcd5d3e55e049bfc2d1fa99af224b0eeb88e91921f575b476502b6c83b35d9b9e538086400ca85807e0466d7a973c177d6f6a98df34fec61f98701409e6e35cb348a69dc177def21fab09edf2b21c08c8a35a3939ba60266e5b40c14bb992da7505d74815ed478fd4cc1dbde9f56f9ca3ada0b4a514e6a958b070ef4cd2e51e869d4b21188adcc8fd860a17d5a696276208f45a42344f141831af934f3769c3d8310fd93a5f870d8449a69924944337047d72dec6cde6b1b188c309d7934ac532d90ed8414c26c7e0547d43e3545b6fc5a82dc573682c58239bdfdf101bd9b3484e8269812e41e5018340530208137511e523e358adc3ca6fb444d5547e4e2c40a4bee552def11e2dd48efee1f901c00e7ff67b525f07e83b0b15f1f86590ec735716ac22ef120864c0d775d0cc4774d2f5c81705c3e71328e590d7e250fd119cc5dd33df6ff61f1deb94255433982e34c102d15507dda709d96b342a850e6893e09fd7376a3d0aaad9dbbdd9ddf9dd17cb5a5f9a13b10d90fd74964342539608bc2ca2edaa582ba664055e684a379430038db49c919531f6b6a3d18e5ff04a9d52a9bc9a9d739508c7849cdbe169534459440823bbb2f09a637e7990b41ff4a67766afc43de302408904d319a17490e2e6d43e24dcee065000ef1825b9eb512d43fed669a0e1e669e17fe9ec789c36d896754ab296b2ef53927c14012f3fdbf913c2cf856d8d01e429492ec8019209d72964e6150461d9bd63bfa1ed43f8508cc51b45c53fb72aba73f0e4d768230771e7b1e1940f2170ed7401a3fad9204ea0f6631698bc08016f0bb9b3b1f883b94b9e4d84f5b1426ea042b23f0cc2b342bead08907ad872305a2bd1e0ff184c5fc75ed120d476e654acfdeae9c495244abe4c62b3f9f872b28c334724455190409e24b863c1ff0adc384067b9a74966f5efaaf28eee7a736d39f88d4b03db4526cc6561f5d5c2a10265f6e718fd90d1ae92d7945a82a1eba7060b27265a6f391387a4e104f07bea35c7393335255c3f54e75eb678e665209156f1720e3d734622265f544e2fdf2bb21196354e5a950163162b1a5f4d34b29a2de494d279d47fc3ab5f87fd4638766aea4b356038486289a86ad6f58d54bfa66c278643f03ec3798e0248d127f3e2647cad670c830851f9f5a695a746d5ea7c8cac634bac376487a7aab45ebae0f85e247af9e6b71952569215621c71aa36e7b9dc8f2f919434743ebf0f499c2c6f217e055c3836f71b87c440fd70be95906ecc4d351b89bc66f8df1651cc5a7d3cbfcc0407140c18e7bf3bc3134307eb6791df5de9b52af52a78688ef111e38b368fd7cadaa8a38748cf73a5eef32ecf79de4fe966673283e0394d4011e48d1005cfbfff4c3cbb8f9f2d09efc579012fe08c784e5089a07009c188c5e1e3487d509e4c0a91d55df351f0a0e926b115ea002bc438f9de1776333e0daa2f667915aa06a09f75d123e4bd5750eb50ae8a0f80d59b900eae43ce1f99ca4b0de295c41efd7312ec564e5b71f2d5a742a3fd10214f93c5ff1f33055cabb20cd68a5dcbb5f058f3907ccedf722a0434e91fb9fa3d266b72d5169f16042945f1c12bd99f968176957b4d64ffe6ffac29e3d7928a630de9e7bbd0f34b4d3354b9f9a4eb4c536e7aade955fefab41b3691efb1c0d4a78116ae54f7a5f47f297ec0150d68694df9b23d4f0ff7b79321dfcd7aa10bced8ad833f08a868fe8c30a06ba1a30695ea57c805f74f9726ddc75f7afd1b1ab01161158339959e3dee510b21ec339b530ba233989b120ad7a2e18e5dbc0ea5980dd39dfb8968671b82b3bec29f51be054f6b7092b3a93e2573fab5383ae093edde1f7a102345647f1f8e1648571827cf6abb6cc09aa9a76cbd22f00e7e318e24d9dba7bcccd4565581aed46a4e9ece0755a92ba5cdc2546963c7c2a120d3c257cea641a5a9019606343e47b48ebb87379c5bf121d283c505ff0ead8dd2e625912b7d210cbace6f8a55576dff19b515ef23bd357ae3f1fe0df35c17a12341cdcfa23b2c9f65efb3dc2d52cf9b73394761e1ea7c0f871a003be2d8498c80926e3bdb20aa1673640e752c42c7985e72b5f772ba5c365e34258f596cdb0c8ae995b0f1a089e4f6f5245cdcdcef68c943c20726870281d8a4549a020b78e924c16a6ae2219787e011a629deb9741697054260b4a5f49ec801baa7e3876348c13012f7bb285c2a459a72378f1f2f65085ecbea42986067c7286ccf7a357a2ec7d22ef0e01d11473bb618f191a3d5d71106de91744fa2bd42bf263811b9565213cfda779c203484e23b30f21809ae9d556a58e9cb6025b5c8d9cd228edb646e552cfdf8edd1f28e6f7fcc64d87fcaa9ee4f38429fb9d013eee2e1883873b5e72b432e4acca36330455dfa11121113941bce47a1013a54e8dde9388a0e550a0f018159ca3ef4b4fbc974874688bc3ce3beca07b6c7dcf3a9a1aeeb4bb3b2e7d53b57b1dd54eafe0da5267b0ab28d3b646388b4cd57a78108079ab20bea22db89517232163cb24b4523107d41359100fb9f593847312b1099e997e1b7d48811c42c6b910261df9d5ae84d382eee2379c84468701dea200e71d6b03fcb4f5976e6390863aba80cd8ef1090d8ac7701e8b1b3c2343db35c8b52710a3424059430ac8a3b4bf46f72a722c701d3d80f1fdec2e90713112100f4189f651b6052c88fb37936e5c425c472b628d13bf98970403834da0e177fce9204b7115070d3adabb7f3fbc81010d9daaaeae64141d6188780872281566532fd3dd4fe3667780521493b5756896c691f32a50bb43420ed1db6199911f1583983112221b4858f89750aa64fd462971ea77bed642c3cd85ef6fe201325fe3bbe2ee60486b056993cedf96ca263aab6b1f5118a048cb3982a459bda90ca9b5c4a3c9b934199ace3ee33ebf3e691d7643c03a2b9364c07a4235f07e3797c72e033c828acd15bf6e1537121f13f47f1ff00ae891a360d18c392d98cc5eb5424d7d8fafc91992bf57b0df347d467199ee7a276eca69e848d1bb1035fe493c8d2b883af0f5ae39f2a2ee79e872d9b29c6b52eec15ce66c266db64e980eadec9bce9c8edb5a25fa1ef3974897e0deab9c8752f26f4031a92908fad8294aea8d8cd7d414c9ecd0702c0b670359dfb4628fff1805a6fec770cd9a0daec9aad51dff3490fab71d72a12da13e2d0d0eb037a02f78e226da060b71b891bb04d82e36a7bc890122fdea9b10caa7762a4ab002715b51f97b20426c21cef65104e42de60d086cf67898ef7d0427aeb371f3bb2666d2c33184b82882268d0589e119e687fc497994947d33f8dec0817b5bdc232749002e32171daffdb699032a01a4983132bd38544d999d45e2c887eb2dca43f0dcb5ba406fbb641b9790469cc90c47475aab545f79797ef68df51fba8df7819e9f07faff79411402de629931a9b3f5c2585aa4b3e5a8e0e1670da4c4449f41e2fd44ea91eb5789de293c5ebca5be0dbec944735efc7ace350d5b6097c5dbf7efaacf8ae55f7c7aa46efd8297ffa30ea6719ddd406761a41c44473b66f66b81ea48afad8c10dea2303dd6e19e6c2dd46fe6582e29bb953bc637a7ce1c4382db4d7bd330bde50ef6779385c93571ee04c35ea0494b3f4f0cf6bbfeaedb1ecb916c61cbf6ae4a365d97179280a20ff639922a99b8411486aa986d9fb6ec8cf8b3c4f8d2c3ae12d9222a0c1f67a536ae4bbca809db068b1114f62098a02ad309f41c58c70aea454888333439155abacdf102097d7ecdb855fd8ba7aa5ec40ae59ee54dc144ce75d8a9e2890f805e8182e37174000769bfbb571b7ec983fb8b8d11b104ad25545a8485772e368011e26dc2e751dd7b67c829df23cf9694e05277cc6332cf8b5377e102d5344e77b29e0a14a896b78324c77e6676ed0c6cd557ddc569767ea09c22b0391c64162c90aa462b006183a0ff246947362ab2e62fadce5f1adef475f5802d1710acc0cbe769673799e9b1b5df539e6794496af9d3da64abaa5f2f352a25377a4069c3749626d20e9c786cd25d85e4e6a641b11d32d3c773d82f4d40fb0349202b02ea6470f9b9661eb58cee968be4cc22899979e49658db7a691ee998c8405217138003fd9acafce00e034eef3b0f64433f5cb7ef7a4f9dcb2e7215557343eca88aebb0b84fd96746c6fee31015f3321ac4fcbeb35ef103c572187906f69f78959940cbfc61efb65a1ccf35794b5aa226d1634a3975a210c9a60f1a6509d3dd2ccc4d93b0262b1e0df128595e6c3503fe44eee39de0cb573eaccd8492c8a2e98a3cb89f2aa811249d6204475da0f470ecc2b45f133d6c1dac513b7eca5b3737e4de97aa1e02e1d05d15ec7b9498afdfaaa8964a135301343af4094e23970436a966a8bff3b9efee1e36276d8d0b78449267df14bdc075d2496221ed0b58d5069d31401f3e9ea0bb053cf193e6ef8ab30c8c5a70690435467a36ff2d775bd6cd0d8f3bf154fee719b7ccd1f97bf193a026d7245fce3a002f2535b3237d89807d4519755dbee8573579d8805ba221f359ce137b2855d7af8e6e65b8dd12bd7be93adb3aba1c784d25c41bd242e4053fedcec29f93888ac06816e75db3cdf318c7594bf64b5e0ecd71e797a2d3a1fd62ced92899f5548d4bbe177dfaa3156d3dc3af9f99eba7f311b25d79149e2309fc1f037bce6ebb5aefc23ab669870a3d7cd98c5ba734539c883a85dfb0baa24efc09748e8aaa1d19581ea0727c2b1380bc6bd4562443d8174b6551e2adc82f3ad2da78322fd6622042987e0989b59728b05a05c6f042bdfb08a81e1dba6325ec1cfd248bce5f632cb6854b74c54f0cf89818d97e86f06493590a186c2fb66ee2f2f0abae0a15763787c8cc46cf5a4f61e9bc24d56ff9b4d73fdde19803b67e1ece76b3474c5cb419fc0d30d632414d70303a2bc00f278e12b9bb285350f432707ce49275e0ffd288d3b318d52a5ef476f668e725c9d399b3d9cbb119e463a65357c5e647e7890bf87408db0e1d83afe4195fd71ccbd8c83c1a2ba777cb8dab6a5d56bf96e702e48f1d02a8af9acc3dfd90e40300b23206cdb5b17b89327a33c93b7791d1c46f85adcd536412c0bfa40b2749cb1c6fbcdc4a86e834089453c1db90c6a6e0d21bec27836106899917d525887052d17f9ea456e46dabdb37a578ccac7bf59a06ebb78b00cef686d690daa6f1156abd91a4dbea3732941d97fd86a97e74c1dca10a55f7295fbfc6b7c3fe23617c4e57f005368e1769af251829027b86c453601d982f81c46dd2925eb3d70107d667f6693f17a5d31fd28cfa0519c05978ed2e82ecc800b32f23ebf7899d68c7445f8f6ed7ffe24d1045a8c73b4c01977cf298d454a0370de749e29dd889b7f7b789f4a4b4c0a49a40f506b1211b10236fdb47e02531138475afc70601399556ee6ca65be5dd500aa1b7c5cd0930cd7753e1da4c1fac2fad4d2b4a368b8d34add645f60bd793f90243a746a53c9018dd722ba27bd0c6d808385f2d1232b9a2d12361a4fc274e7d25f50b00430e56ab0146a978f277bb8b5b61b3cf979a52733979b73d87301601946bb74473c603eed137235dcf603ddf93f8dee5ee041a633208e6b6d5cc4d3ae7b9de4fc9dd01569b62445d2fb5439fc2ba56f49ee304b9f48abd92fc75d8abb0da15009339ea15beb15664d98cdeb3615b968c26801b1cbfb117610eec144c2457ee30be08543e864ba42dccedf4f157bd43b895c012bcdf511a2bbd61f3cbc54d1a98ca7c1d4adbea6c8b4023b7a2466a0121fd3ddd2454c3b84309faabd59f78c0741159f02ed37e5fa023146804e1783fcbc8b1095967a29b5d4848b1e0c5daa0eed55b58a37f7cdb35c6ebe32e5451119170e0ea4c1406097bf65985bf62a2b7aa40ebdb4484d276c24a0cdcc1af1779148c4621274f64cf63533377d726b12a9b93983d181b2a9eaf4b2ae9e4b1ffcdcbbbcc0544b008a4c28798910d986710b0c6fcf063fd4a6ef3d15058957022be687ec3790fe96b5be77be351935888eecc3feaa15b0ca71fd2fca0c8a070c0f0f828fe464fe9a8df28b0be366276b14bf92066c1e401f7a9ce62443a56e60e687d75fa268517947eb0325b7035fd1adc727d0910e8665f319692a402e2abd51e576b0794dd83663a98d54fa627d8bcc3aaa8c766ebeef1c68e7d277c6c2cf866441e6155fc2a136b997aca405a535101e27211cee802f7cc7e3fe6117b070f9251427628bc38b0e098d2bb469c6f10b2e4bd67e507090aea37af0e3799506b8dadf721e470008e2dd9cd9e5cf393b1b76ab7cc4c511337289b92050ced3f749239decb488c5b7df4de2439b5bafd49189b36fbb8ba421b81238c18fceb6a1e8c98e46900466df1436564dda694b88ec6c78cfe8c69113993b23355553aeda911ebbd87a6cbfcae950b82c8d1d2ee26b85a2784b10e0973768b6e2e92718d00681bb9cd57fdade87b4183b14bb39ae4d059b7a350d0c549082e85dcd9e797c78fb1e5a081af3bec916f910546bdcddadd506668f84f7ca335a215a345775c63b6682ee2412b2cc4f9a7a857cbc896fb85e48627b940d6841d83441b65e6907e9757bd5809a03e96d4794407497a699725553f6591234bf91a412a8d7ba831a59b22fe059d7aa8d05b5f3b3927fd6e0ee6ca905a814ffbe57fad8c650df5922bfbc77c2b88ba0b2edea13a94afaf7dadea8269f84c20126bc1ec38c97af01d4cfb88806ce44476030d490639660924ce08018b4564cdf4eab50edd44d21d111823c02055c52b1bc5308cba4d9b5e55a67dbae70213a1376645c7a24515b619de2212b01bc0dfe47119084ca8a014142665ddf0d0db84c99f2b4b39f6a0af33a5ee825b48571f93be0ab9ee5f0007d1d9003bad3aaddfb48c3adcff1915a5e1f05e71e1d42f428a5c1d16a8e417dba4e73ca1638592c1c5487064060647828087fcb7dfba3710e0161185942ff3dc2039127ff40e51136a154991a4fe0aca13903ec241d38a7fd5f4417b7581f69423d3365f2271776a7aeaafa807389c63e02725b00917330a050d0fc830b2db00e8d893f11c5acffe621326adc95aea74276c5f60dd1294509c4b95847fc284aadd4d53b4cde6a069006e517f42c9ef594ee737c805305b25dfbcd74889ff1a6a2f24aa29e2b7221e591a9451567e2b6f9586a2c00b8430ea2ae5e068f60e6215c32b13800f1a159fc01b31c3bf2cf3b7d2c1af69586c3f3467350c5be3cb7b325058115d7872b1565a6cefda8d0f0b5d5325ba368a48785119ef5c7a5effdf8044a4f1401ecb8eb4c46139e51a52a879e3adfc5bcda385219b508fbf0855cf9f7e0fb1452aa876b1ad9e9eeabb0081f826f890b9dd3d3e2e544bec89d0a9ed388919ec1742e027c9ba31681cd4371c237fd448bf064d82fd4af200d52ac438b3da2409a93d887a02182d6f8af9f833662b88b10fc8cb5f6c86c5b3eccc77c31951003852eb131609b8601872ff0ea7239f968878bc343830fb97f5ebd7f6e6c082118ccf054de28db2bb2a93c8656af50891aa3c49d89a41d1f33c9409896f61595c7a197ab4014d1a9edddb0d8bbaf3314ce3901a1c3174ff3553fa0489b9c5bb60b27a147bc37abf7a969f37c3884d3497cdc911309fbae1cacdc155d1943f1155e3517e0009a90035897196285d783b873d7d15fdb5ef19355525fda3bc2830c750c9b4f66051c5af66b01322d406155ee3e15a04c4ecf7f0e4a0ad527bbb05726a5ea9c3d1ded793881dfa8cfbc0f7dfea802b96ff8d0f5b2088b5eb789c68c468cd889f6e6fda0c98473b2a885b728cd78b23191f7733f25c6570a89b980ab95ef2ca79013032bfaa2f6ace98a76c3b202ed46258668bf995829e5b4b4bb89fcfe5fb38de2b8ffc5ac3df1cf15f31ce144245d43c81987e3283d237c69875e2d874cfd030ae493b32fff556854cc7309ef0bbed5b3c6185ac7a4530dc0e1c584216d8800825b390ec1a8dacddd4a5e73e95cff32568054a0f6e7659970b3b29cea05b8643a71f50d6755ef5c5737508d06d1d6b651a6a6b1123b928496240bbf0d1797c8dfadeb2f31cb8f1a29de1429a9b4173e3ac53491977c0ec43014d26f37e69090ff4c1fe4eae048f80465b642d3d6a8ecc1f128c1ce391284157e4ddda39c0d458e125d76bf2c061f0a00011d142c2d1193d175ce0b689ad4fef5b7f8c10de872bae2f6177765125a073898fabd18327b635264e98eabfd5acf3b4e2cc58ba8253aac0aaac20c88187a7b0c695930490f691e65dbf5645106afe8e17ea00b73912bf207fac06087b9307feaf33bb9ccbce1b3df18010a705523c2af999586a07d1b514a4c5756b0702ef087f554335f2e6965913a8b6f37524ccd8f6f1bb4ac8d754c3915dc7e8905e475e905b527fd167b5aa7aa1f2f977fca529573a381a7a0f075924561add0a2967f819533c9928685679c5c25c1a5c1ff48e79520a7eb7d64572c7eebaf51482551dea1e539827e0843485fc34df57ff2d5a97b7bfc59073593b1f7a311b54abb99ef4c99048e65f32521f78776e61b91cbdbd8683617e62b06e06a4155c9bbd26cfa233fd0029ed264d452d0a29178908410ec2d8af01c2d02c4eff151c11729f83b0087e305b9fb5d40e5ac2798d26e6a01ca9fc781bbbb7248647116bcb9d016aa0b9fd3d774f69ea59aceedf052da98ddeeb634de2d3d965b804f0a9bbeccd50f54971095c1a671f2aab4e998ab0e2aacb224c2ee7587ec8338c79fc0b6f3bab5fc9614bb383008e66e3b7eddcf70ba7e02cf58da261aeb202a10a56b9a9e9d51697af872de431a365619c3f3c9d0805066a86436edf4b1de5dd266120d4f04bdf388158de4d4d6da35739b1ba72db6a24076d7e634f68be59b4792ac9692d59928b271b4c74f408fff85a16c95e0a1cadab28f4980ac194296d0c12b6ea583767a08e924087cec65602a81f2a931ac8d3026821642d2770e3a00d37f052cf50c5551ab6268a2a5f969d8b99a6a0b93c5da35c863c7db80aab7f55a88f2e1e5dc87b9fa269fd5993dd731fe06d1628a325eff682e46a5cdf5b0d5591567b35ec54f44514a16be3b41f402a64ae96f97195c96e502994b797d238a849ffcd485f20d8f88e34a69c604c63978932c9ef46e7fd2e39eca56d920c221dcf9590607691c85456e65376fa3830139e37073c70bf220bf1b5774e6dd889c6d133959894d09aec9e7ba45855022a54b24f772a52dca3bbbc072c4f6effd80564f36aaa0f56523cde6e3855ed931156bdf982edc3d524b6e39ff706a25ddca663345a4e44688909edc92a1168f3ffff7f9f93f83e64cf6ed092ae994acde02bb314794012df1167fa4521570df24c9c956af5b5c93e5572232789fabc8d88763a02ebac79a5c204bd2645cf5540ef635cd8378cfde81041c7e49211aa2d055fb375d99c43002a4e2812d4643bd61c697a3fb1999b4cc0e9e101262b07900c5899ae9189e552a7e849db32b425305ef566ba025d724a44072d274b537fd58861bf1d6f8ad9938653fa16380a1065709a79834ff5ee511f33355f7ee614fbf0a43f4516297b4c97ad2b9b9b42ba6fd6740319d2adbe548eabcaca2a61687918715fe388130874083cafcbcfe7e9d49b1ba3bbcd2b5e742a0e3baa6292ab34e2ec7a58d7aa2ee2bc31570a0d866d5cfc8456b67bc87ad769299b535da62057a9a2d584ffea453ba7dfaef771868bbed45e61f1f3c943de93ab60f2ba20896f5e7a37483c72863739d3867ff899bc2ea225fa0bfda38f51a76b513a5c815370e0e36da8e9fb50b43e3dc99236ed38c160ab221226dac706648a2462a9b993b9880055f12e4a1c8a37bf558454c66c8502e77f88b603af44444bf07a6e0160d160c1abf3b11d621a5ab41d6a5a018c0d91a4be932cc6144b136ee9e5bd3e3989b2fde7183aa17c7c4578f43f9bc019ec1a75974cf1c14b18ac51c07089be9e8a6a1c943b6e0dee10dad28869154bb9c05cf1bac2a0faf3184b67acff6282eef5e72e059110bd99081205c080fb27eff907a0fc095b2db8cd4b62544dcf3a5e95e9d278222b3d1c2dc1009bfecfe388f055af2b761d339dd3185fa92e0b16ee3ef3deff833605ee952f8859c93d40eda23d38b8a5329e2b758d16e082afbbbf0cb1131676e51e82a23b4e70df13d146e2bfbbb627730327b666fb39267cc6d2d577fd728e54625b5f944f189a65044c167c19175a21bc3ccdff34d30f11f341f41e236248b9e2ed105e9165021a12825fbbea682f5b257517092b38a457e3e5b707d91344b927d37aa633f6d170db7c4cca5605877ba103af089f2a269b128f05895e2c28a31a3e97860db92cb99be2f91b05f741524f9a41a13056cd8e248263e8ab67395e3cb618188282b85416917fb28de2dc26071b5b5429d33abc8d3fbd64be0aa11d624963e00bee1a8e8be8bffe8150af2fe305aecb8cf6420107229281dc2869bcd01116e9335f93bf6abe89543dc07c27e5b0c05710be6c4d1a9086bf4423a369d7622af2023e16a97d13ea149ec31117e25f3e1b8f59d0d886055e5b958fdc8d27964fa5b6d8191a7fd2f609af5eafbf5cc058cdcf39e1dc00248336d06263d6482939bb40794275daa01768da90fe609419db63c9f16778c8a23db1fd579fd65a8188ef47c62604e5adf61e1c8def7bed43f07ba2c8519fcd0d1d969c23f8cef6edbb0b8cf95e61a7029a1d65fecbc4aaa0bd601f47ee7659e6d962c1e2ad6915a93e8033d24f4ba0984b71e12f77fdb59b3f4c863283eef777d33bdde156b70aa1297edc20cc7853af4d6b68bb20afeb434506a3a8db1c8ee82d446e6fb7950e6a18c1010a9c8156a51cd4d31d20e58bf07294cfd7e62d41588379ef3052caead177b3b4cc169715f92bfb104f68db4da5572d1149b1a5eeabbc14f8ec3c53fb7a6d2caf2f5d53d2401c58db5e4192702d118589552be7feb423f44373760bfa6fd0e455e9727eea8cce5bac3b09fd306295e83e6fe5c0464a53dbdff1f48aa27061ede6d022ed7229e5a40d73b9212ccb43347a0bd52460eb5e2f4a84c34456ecc994ecefa7d3eff456c45b480f85e01b75848c720ff0e1cd5e9abb56684143bec7ee44e751c1cd30c9d4050e68ea351cd5d14777bb24a7ae9c9c329880c50077a2755dbceb81bc62887ec109af5d85a608d3455a10a83b1bebb9080773dd3f768f4ad8c57894dd99bb51c72125249234e047172ac6b3eb7778352ff5e51c63b00e672959010be1605ceb4cd02e8f6d082ef02a98917cd66cfc3fa8e3a35bc676a88382164f305d9006b559a9fbe1e655e3ac47fdc4639f5b312a1582691cf76045a6ea8ddfbe59b8417981a14fa05c39843beeafc0cc0096c48432ac4bd504b8f8fe3a591d34f82bdbf3b9115e542aa49fe1713e87de3b1471a1f11fe68e6913ca06de9c9674254d554fce9720e1c0e1ee650eaea5c5416b0fd274cbf6311a8638bd5a14884176f46909f3331f09917bd39ec3cd3951ea41c15f4d8a6631a09ea7df4a2bd14037b9a7d6f78bc4509b0e70042d0645bab4ee7a9683d22a02b0bedc7913e286ffbc1b26299090135f5b4a7c31f06cb0acab7f691469e88fd1b4282962757d62c9622497037ff3dd93d89a8daa535881094ba208d0aca05a575712a1e6244f8d1e581e1506fb20869f7ad732178f4d7d6e196e784c0af1e90261fa229a5ae1b23cd5b2442597562f5d055e64660f5d89886a86d39a680def38a07564540eed252a0be193dd84b376dc0c86827236fd23cd515c27d3e393b5c05e51d3aac810f9ea89ddf7683250ea0ae9da244fadbd6084dda7ff3f5a89541d2037cc8daf5e1bed2ce7ddb58dc51c530c40233abb4a9eb8cc982c8a14582d918d2d299014011cd7bc3e3cf7025aae9f67cc7c6bed7f703b7d751aef6c7a8a9045f2176ffb2bea04f6329ffa36cb1f4495dd8713b78316fbb7b6a59107fd0165ef765f586b1c5786d78309a6bf60d332d3698601060817983b1302d911247fed841a009f3b776718b3081c62067d6ebc641a696b7975f220b41c3b3c07203c18bda3789e3d07f8d7c26d414f923c03fb0c543d80954f69f56a4cf2c317ba3d76a28c4094ebde7517822e6bb70e7c0295a230659b2c110f1ceaef4c18b62edd6c32492e11c130eca8ca3d6242e16609136fdb74062bd005e4835acbdd1b84f7646ca7999a196d75a54996468c7cd5e6335ab35188ada7d9953e6bbd4fb9b7e2d05c376137f8461123be825a061bf8b5571fccbc032452979cae855dc3538d7f055e3161ffde0251bc3ea0e7e729bc72f766b6ba486d3db2c6840fb76ba2e3b8e215f8224a84f8aa3bc714b9f2b3f7ff5d1023c504d1d06c0507cf9242036423197f8e1446470b77716705ee71b9f39c59e56ece33b041253fe113888d1cb290789feae4a562da299fa2f403ac3f7130df7a84e29c5f474567d392fba45736d05539965240c94d9b40812dcac6a8ddd75742cc02d2c27f7916b94572487eddbd077cdd093b88970a6ec7fe1e38ebfeecf0068c9ad7d0fdf6434dc532e8eddbf5a5ce4f1a2830207058a9641ef4ddf1d2f162179d03e64bc9dd07ec753b68bff2354d08156938139e15c8aa11ae69078f2021a5987bfd9bec9c3a3bd0d49b5afe5e293a517c9621b507d6555c79ac8117a78e0abb6d098ee86e59669ecafcad3b4af4d4de253f0c867169472718a5e2172126def3095dc599a0bfec77b3716293f03bbb9c20865fcd5d0b20839fb21f594c514a266261483daef40b040174adac02d816f5417d4c1b8db9cf152bd7bfb6693a23a6b785b5969808aab2b7e2f4a89edd2465446c2e649451c05f75a1e83ff820e44c1a1c35e3727c8ebebb46008606814ca05cbe08e0432eba36f0779ec04aaa4982fdd8cd1258fa15fdf60b21eb98d54a09c92b5ac114102647ba5d43367f448bcdd0337462c73370e1fab4ef4f9775e39b60b253ca40980df616dd0d67c2e91a3ea1a7e49304f2bf1e6e1e5412f29bf4687d86813d7408d009882d4843b38e2cdaea10eaff2e778c76b67bb632a24a58f3cbe4fe00f801ec84f310d46fedb89e5af0a9d2492e6ffd5d7a4acb48be2f3e7ac5d7edc2794f27c8383f2645c2284c5c1038605a7e9a9aea0655c1aec876c84e3d29674615da7f2d8522f6c91e5aa14b232ae8bd58f3d6a0f707a4159161324f99a6971ac96e717e9eea4d294876f4f10d9a1be12497c6ce5c8ea65d057dea1d4855bab2d0304f2c72f94dec5ec2947d1e1c3bee2005d5742c9a8003e0202a5544033da480c687e423b01c584b76514e216be7fbf1b71112f8787f83647c3febf6c0752c49794227186728f3b44db1bf9cab1c6db1e4c1a544bd9c0b0285712d9b0c398443046c221026cd697393a747777615cd4b0ed7264a8c50f294bd457bdbb82b4a7bdeee230ae0e660680a7c120ab1b30ad3c97768769156e3f173827d61f739008e5712b873235f977571b67998671ee52da0fd48b3dc77cdcedc403e8209551741b662583bee3ff3f14c1acda5d5759e0742f5d5667fc90d64cc670c82f90c5722cb113febc43f1e22556c8f281080d1d47393245d7383e23f6114004397d380965e7cc428bd3cd74a946d31354122a2bcbf9393fdad4ce1eb1197d1b602e500f14b94469ffa200e7a9f50bcfda08954a1e12326ad41a00fd012051a6cde3cea169d698a951819e15b960ea7237fc1c6d83cc992aada7081297dc49739f8226868b192b66459a2ffb3df748139215aa9ccc115a792e6f9d6fe7077ea03729fc23be7ba16eb18d89414314d69fcc0e43f188ef0c8eb895a8f520ff3dbc77605719de848dfd0b49704013d482798423f00f53c1105ebad92b56857495e82336961d9f2c5829b9ea8c646f4ab014939b81d031ab470f1779c573e989b29722514ebecd13ebd46c9f9a3de1fc1ee1adb04c44b4873e289a8b8adb3b197665033450bdcdd4e97dbb9d7b6831c43a1e25a586db63ac1f64a6d28fbc2769d9719abfa88b8c9773f513a89382b2b34a4b0d1c51e77e355dafe74a03c4083647b07477a6302f4e3bfd4e78e85900ebec082693d542d3bb06a29012869501e3a913e91ae848b715ea386798d0eccfdf6b6226b4844ce5401d07077aae783b4c28c65c214670554ebabc8f17741b1c2f05a7fb6032942f9e921deb0ecf731abc2db73b0a2cd29b82d974045449a365c6ea0aabb1a8ef2edf509e83c08f45adc2cc59f2f28b3301adb2484b06c9eda19b3606088254b77d84d8e30b57208020b3ba2e22df99d99bee9fb00b7ff9bccc2d4be6bc573cbb237c2843db492475fe1f8a87b81064eca4c84d1aa9dbb149aa659ab97a62a7c55b4ee6d87137a35e76bfe1f99e74b93f88f7f4034a90abad41e777ea95db8824882c98ed29ebe71cc1610758ff3b1d57cf107ecac25079cb76865c424c84b447df5e45f4f7a40f20ba0859e15899261bdcfd362516b046f726601f7fffb6929d01500a933fd6c519f6a5dafc902558d75cf864eda0063e36a7edcca47c93c25ffd4bfe161e4ed4949d2322dfc866b5f6fb9b538a1f255f62bc08c2c32e865d8c04b8c57f33096f7701201293a3a3a54b88aa3cd29c17945ad943976231acec3a31fe27493104b2122af53af2da3380849df8a576ea6696bf26f7eb31a1dd1da98d00511873c0ede3059d76495d720fd3f491e97f3c241a038ac93f74de316a52f85c8cf1ffb05988a9b2fe8072266515cbf51faf45366bd7a3216c8234d944950e097358d57feb3540e165f6dddbfa679f32c09c93a238bad1f8453b0fa4ff6477e93e1133f98960c715a46b687d827faef5ab1dd9e67557bcb64e23db3ffa5e4194cc75764c3169eb239c8afb064819a822105e32830f218542e545b829be366239b1780cf2aaae221a6973f1745e42b1164ed56a6594484ca6e618f87080ea6baa920597ed3eeb10b7518074bfaf0857258f384d737dfd9cbaed2475cc804843692c88e88b5050253df3e62d8d6a556669b78e3f71b4c5c763f767a582edf96d299791f0d239377b7e29e8a486e93aa8b8b05441538ea65414f3be38273976c22184f1e2a0dd1dd47b7d86cbffb66a59a7485f9c67bbaa546cf55baa2c661e2500c22e54620b79ddddaa83ec7b619ea58ab3111c8bfea1e798da784e46398b5d4a73833839d72f3c1ec107aed064893a929c1f4cd83be684a4be8c7b7dd957250385e9189f81722d7ba2433e154589cf013cf9b0ab4b3b867d0e5faf157746c0b377221d0243ac530bdd65b8630ddc122035fd2320239a8fb5f1b8abff56ca9193140b4f493dd7a1e949537ad899d6ad6db2d34c04650004a4347633bc92b2578022b7dba22f3403774fabe47e922023038c742b72aae0be2d343cb4a9ab1b3a80b07428c3a3725d0a21a638cc226e997b4ccac4e404df7c9c086bb9644aadf055492a6d0bb6ad3313f00419bd9a42f7e2ee43784d7cc168d1868a3e292238fef56e4023732192d4156734ab7dec6b1ffa16f2ff409b263ba7c8cfe8a3c112386942110b0a82eee890a3fdca7bf7c52caa533005a524b7f195baa103e56e46de730a15d95699525935af3e3718ccc7a355c58c3b97ee689a04a4b67766ac22801d2fca5eaf734079cba76c33b26fbbe969f65279237aae708269fe22de44017e7dac7f77f6cb4324d8fc762491cf16d77e73788849e17c9f0944584e68a833651db9a33f7fedfa493ab0b5be1ba1944635080ae2f2d8ef00d75ee470543287fbd4906dfbc926b9e897b91acbdf4e8aaa5d52c00bf2024d8cfddf2010ba90531069dc30d1c8ea101c53b689e895973dcaae0b916d9601f4e5969c16a057de3dcb0e9ce6f3dff422c04a542ff67bb4ed061ef9c00e99b318d5ed1c84d61c083b2a8d4ccaa09c1a7e2683291953ee85a960ad57a19658018df17ccda629be3603f67c311782e7eb0812c2d308a6955b590e86dfc7b1117f3c0f0510b2150c46792e98e36149464c83a6a02eee03f865c5b474ad0cb133ed1ea56818e87b03bc3e8b5557cd2f47a141e5143250fc69abd3658a811c8ef87f4dfcd8763ea8babd9e38043da8e44e3f95d3aa106846e6be430ac7e49672a5695d59f84733b484cda68d4f91f2698a38427aa9e5e17dd77a6fedd3117a48bafb4173e4dae0d15f33cbba3ec4d293ab2686e7ed43fdb90f6cfa58bc707da97d697c377be223cb7e57668af092335c699450685f1fbd702113c5cc8d7508ffd7e26c99710666aa5aa2802b6e30c9ed694c3a3eb49a4f38044230fd572e99e0f89b53f31f2cefdf60d4eac0069f787e71214f983b865beace889eb2712db7e587c95f6f5e1d300b9b3765fed4468656aec4e87bc8b6566645eb087db6e175c327a2c116749e935442e758705c50d1ea901205ded60afafd3b2dbb2aa28938e8580a93a6665a36e5e474e84bb78c1eddb53870f0bfcdd7f0dfb309ccf982f593078da9fbff5c161615a6117a21c5a464f6a88334ee87abdd572141b40bf7c0be3745c6854942fd787a411d8e830851ee01e5da72f55563454a8d632744c22462ad791a1d6f08327d01cbfef35fa0d9959bf72a4e5789c4f9006afc9a7cde33ec4da4b61214c0cfa5ca93aa6a1ccc58e217473bd68154cc2b6ff36f6569c2041de467013b91ce99c566a54fa9862c0142bdd12438425334e9f000d5966890214757132356fb288fabe50f79d06e8f61f6a821764bb0720ada3b8acbe13ffc2900a883ef54d7dd7a6d7213eea230f7b9f458d4584a0cd27eb56c03d93f52d96cf3cfaedd2efe2f1afc28e369e00e41068330023edd85ee1ecaa9eab42779461ed87aa8f898461103b92037781797074451330c60117afda86ce0c990fcee93ae19c104073a70a6e41977cff549e9724e3a199ae9eebdf829ddf288a1bd72e2bcb20964b73d379be965b9e0d3d816f4a6650e0817cf7611b47136a34e0a811784e8724ba4ea05c3f9f2e482580829c4e5bb1ccd2330e89508b3f23fdf5be059b7d47116cd6b3f63091708e6541188b3049111f18b0a17be0f9e39d6d0fa5663c1252fd7580e78ec973e93e5e08246cd542b95dd751f5f92b4da7282d48e3f585e399fc34f4b19180c903a74cc01646e874fabad7514e05f8072c418db9608776a21885e993240708597a8f644712a53d2ed9dba7406c796a4e38b5514b0edbdbc1051260a1d347eb862465fc1cb464f26afb6a013bff68a5bc39dccfb193a5e70996918a191d2bd4922af9dc6f1ea427cbb2b3934c913bd2ffcfd1272fd905589c4fcddfbdf6ea4b2fe7e854889f3c9b945c6bf0e070960ecbf431e76c0ad69b5bfef94ec7a68893fe8fa6dfdc117d89559af5a99b549bf62515f29d77faa4122c00d7e4cdc4b0b7b5ef6752c9984552bd4d8d19883f38601f2072ea80748a1c2d33b8ac625511d638200fb1db37300b1b41c1a57d85754a02e42426f99b7aa366f396f156abfcc3f84db35ff97ec8f7f6d533c6ef170fff79ab06739eab4d1586ded3184429e5334c952f89145bb715f493a98b53e36dfeb96f0b5caaf30cfd2b549d23c0596933d132194224f2d925e7f2116908167932f2a840e5288bf09dc2d4ca39cecec230edd20f5ee2a4eeb06dcca55d816e2b6aa1c0dde00e92b4a7bcb7c5b465d74e29892cc4826d01a2c305ee892255caf9a3996022902c2a7f2a77a4e66494e442899b6c0fc97ea94e20c0dfe2203ab1fa3d3de8861c2e39a8cfb80819222143c977df384c460e7bbbf5b762035d7e7158e75104b0c1a359acd924fdc51cb8f45c312cb08f138537be96227060e8ad0fb40eb9aaff923ce492bbbe949bf94464a22ab250920c5ee8b33804e79d02bc9df375fdd0d9df10b87231e1b0cb3106f3d81d09f31a8a244c3625c8809664683af2e384314c1bae914bec374ab15c5fb740946706cd30f053aae18ae0f7d1d3a2e511d1eaa19008b5177fbac6244489a2c6ece572dc4063852b40764f45d3ee46233cd1d5a2b2f2276d38eddec4a6a68765c788369b405daf73a5898928bf141e78895dc0188dc7bba3dca78f05621b876c7272c33a9a9ed7d37eb6ce5ef96eeaeb559d4a12415837cf46e4e4ace177e96a2acdb40590feaca34cb4449ed11ac47f0eb6f84f3683be2224f999c4762dc2b16c54e13a620ec22623d7d93067d718b67019d30742536e7fdafbb7f0d893a4e9af268519e5c4c9e2f8a1879766cf2205773b0276034e95b177778aeeb95bb0df74d950bebf8733df97a3c071d4435a1ccdd21b020b255e324059ac97b8056d09676a00e1ff35c8ecb5af7b120d4cd67f3e8a70a6d88896e30b3fa93383bf919279174c818ae1595a7d682f7345e798ee8520c029b3b7b92b8b4701b15c2aa2559d183e520c91f59d3b4398b5f7ff298943ed83689e517551da2e12ab5daf07655a01ed388265ba0359c124f69ab6421011d61a828c53762a037a388f74e07601f0a40ff966e2a9415d5c70c67f2a49ea0cd334a9bdcd88e1c3c70e553614da0180f672bb8c94782983156d3c69392baded8974f4039da2ca9c1cae7c5f1c05beeae4abb18de3f86de4bc736d6fd71bdba17e2c881073216ac04d382c544681749a9f34eb5173ce8336c53f15a590bf5b87b4a009f02f1ef5cd05b3be77a5a38d25b3701993e3c1d8f74c6daf67e7ec03a7f41cef9472f73e8295640127dab6d3d14c9a1f22fa147b5be785a2068ad5e886502f0ce523fa801d776e63c066a983ed7879f3ce268328b5d55815a0e9d593bb7265c0455b21b001888b3159fdb31246c26897ff471d0cef3e1fe0e06dcf4672ec5c05a5a38f41b710e5bf4a8eb2efde01d83e23d6118f148d4508abf626133a0a73010b7bc98edfc45c9056cb839c92d5a77b63780866ca9a900210e5866504c3cba5bfa1975ccc7a05c469bf1a2150837025a9d2d7c73f11226c46f74b1b9cd319b801178cbc38fa34f8a0f715f0eb48826eed153494eded9885d43f69fa3b201b6283fcd6c6932b20e36e6cffbb9009913ebc20fe7c52f8db5735ba1cd7e4156514e4809da342e58055b0a92f9e58defe4d780ec4e0e44d769b35e732c6dcbc9a2ed4cee18bf218069d68cd59a9ce1e9cc7aae5748a4a63fd68abbdff472fec2b9a9f29d49eea977f6a1b0fa3d6f35d4702eb061c422a56c099a9b5afe8bdd02a632025f7fb148e1dda91ed48344cbb62b143f33ed1bb599403ce3849141c9c5bec9bae4bf8cb75e72df757ce97537d851056230e65263028a92458d2461c6140a2783fa7f084a4944756f7735b696a18ea938e603007245052ea5e68d9e2ab2cf9654e518312a37605e0ded1cdc1663b45024ef973117ca79fd102976b3ba50226298fe7233cc7e968ebc2d60477a6177a859c73a2ebd63523a683a038b409d2f4bea1913cfd5978fb930566c41922142ac797400f7a647401b6ac09a512a643998cbb006959fa01253d4347f56916d3ef9f49dc94bc0bae1e29aa77aabeb8421ed0146bb84f5f87cb8f2b55342d587a89dd937454bf509789a0c8877eff8bc720f39569a9a9418c6ba63e32b847f2d61e5e151f79fa249a936ea513feab8957d5f34d4ebdc338e8c20cad5f300da8a657e5e5b1184c20c13b6c6e8217238528c34a1d295d5ab089d5d1343cfe5e7d7ae2280710721e381e0766f288a5ff483e0de76b5c84e71aa61b45fca56fee5f3432b138dc1780f4b62ef53ad14b6e04da945ed8fa9fd2659592e8482e04b69a86509467ed929f115de73c8fcfaa867ec148275122d5f426a80ace8124f74e1b11d060b454b07ed81e13037fb40f50dc76bdcc493e47e6771bd274a07577f0c5aa439a363d47be14bbdd958c2bc19bdb45eed465738c4e82fb68193728f9ea01834f2dc3fac02cddf8e9addd8d1008197bbda3de0620b88d693bcca27296766b4abb7af73477d0e8fe1dfa36ea405dee106e7d2138ca043ed5d2961528ff92fdb93b54440b5d51d73ffee7eb708638d61720af5ffcf7fcdf10b069ab1a1b415860ed0d0c7e0acc19b23dad6a704394129264f4abd7f7d34f1bf5b437e2bafff2e0fbf81d5295a35f167c08500734696676d27addb996430945bfa708fbc88cb425161649f8982a9ad4b99c1b8eeb8c1e32e71e60399c7f9378f617afce59876932ffd338f111a7d84ed3ac98d5c20f68ae747d81436a7bb64273e3ee6c876cd3d3c2cc62f10a9a0cba08173e936e59e2e1159459cd7205dd877200c2abef26268016a8062f37ffe1ef4bbf06e548c8336e73b6dcc21b906e4ba52efaa9d14ac7b744a30efee10ac3c467c93649dffbdacddeaa660d79f9fd06dd505cc3b1d1e24665add6efdb318ae2219137bb51711b33df3abacea4f45c91065acdac96e637f30135ecb97a39976919846427b7a5128cf3606ee0d5ea18efd1fc4e0b0546edde7a754ced3b4b7944198252e8da462dc3a303a8b2b9812d1a571552bf6e0debcd73ecfa22b28b567a4a09adcde4a725894410e1255855b59941b891502733dfca59b0ed9ab5edc4b0e1c76878fe4a8db0963f298911971a9350a96856c359961c1322deb710e9c4fdc6718c8a047c45435efad81bebfe99f9b2073b0b3cab79f729098c5a2a23d0232582c05a60163ed737a6df379e40553b3d0d7436555321cf2c2c888519f8bf9253aa79b575c3f3e05c88d1e54ba48806b1947464dda05bda31a45122110577b2482b64f4e53b96bbd744c6bd8d77510fcdde8206b46e163628f05f2c27133acb0d7df146f40873f846e0a2e2e13856222c59177e66b7db47697011aecc79579ea2260c4d0f2e82dcc7011d037f0583bf0c846dce6ed92367b8913c3120fadbd368050667f53eac3df52fba8426716917aa5cae8e4d9968dabd6bb4001382eb36462d83708adea4dbfbbf377ce420a8ed5541779c29c2e32e8d1c0b80648c849525a4683b7db585d31bbe1b3635ef54e8e50641ec33acf59e6f9d5df3f4fd0f442c42b805b5af9066fba318be56a1e6134fcc0bd4b9bb8e097b2c438e1761976f45e7a4c7c2df922d4baef2f37b027a751071b9707a8d1fa4dcf39217fccc204ff3b8271e8cadb0658f3cba8ef7aaed97986a00932db6ca89db7eb383106827d9cc463377b631b6f1a43effdeac5a85fb1d4f2241fc3367bcfa2815af3fded3eeb513e1e60fe9a52f4f58413568c8128a430801f401212cbabe09b1030089e269d7bd881e4d66045dbee23d1c101a29b854fd228f878342a98d2a57e5ca4d08eebdd02ac0ed83fb03bba03352c91466bb54e93b46d873550301f25f43cb87ed2d51fb1e8f88c227980bbfbf84eacd959a5e528202d1520826e102d9e1c0cc1c1f1a3f4d5f5bae62e80081751fe025d9c6e5e7a58901f108bb11e0de4ba6eac336bd42c655e5266a4960620d816e24524f13b4cd32943e39c30dc3358114dd23b284e07cc1e60fba5303ea04a64d4944811f93d7d0394f93e421a466bcc44dc2cbdd0045a83a0d80f703db6246709d993bdd6a55cb517b5bd42f112a998ddad7cd6859de651c880962bad0e6c9fe3744d42cf0fe041b2d185658d5cdcd4d8200ee0dd13b7a27b6f8db68eae62f6014d1da7b8f0c17fc4e7d287e57592e3a36b63413f322f36a6830cf35af6034cb9729295618d39fafb48779893c97b5ad2b3fd5156213c8e847fe3cbfc8b00817eea480245e1b27531b35cfd68845b1b50686961d9b9bcce3650b80f1062d195eea094a7a8235727037bc1e879fb17ad32367192b2b97d2f3c61bc4fd061e7483afdbc1e1ec0efdbfdea1fbe39450516d8a70c89db6d8f8908d5fb63edf9d02b5ee7cc5071f621a0ba2dad93d064c1c256bd46e1722926c98f79860a17936a8cfdcc63577f023427cba7c02c2ea1e9c2cf434442c1322e05aa530c478826412b392c43c1d82f5ab26cf8a9193ad9c118a6422b77be07edf6b307ee08e45255acb07ed4e50ace660b4d14c729c052d9092dc45079605bdbbb05f189ea8b52f56e0a4efcc0ec442dfbf6ce8b0af3fbca5b61fed3ce4545cfb99c94ff2d6f644edb452071410842ddd3e2343316c5c9c8a63963947ed1ef5e59baf897702cfe8b5005e940397ca9a24dfeaffac8020ec4b1552f8d0d0d62f74a5d88ec6fef2a7359c479e0c9bd8f8e39edc6cf610b718a6afb306b941a83e10968f348b9d08592348b28d53de7116265fa44d2dc4071fa48e16385df9bf058b21dec0d7916a5df83e8b31704c5798365251dacf81e15aa77338e96a5e0dba4cb129c906b9ffd72ace788bdeff39b399537fa51ba5aaad478703eee1d1bf92ace2b152326e487ddf485c2918056df5f58f851344e2fa7fbae788b141644e6a2acc22bad62e40f8d93ecb7f2e4ad0689299c4b09b140fc1a1ce893576052a7495834dbd1cda835da800beafc8bc45e44ae644e7b25a1c9b4f947aa0ba92c6a0dbcfd48cfb0a82a5baadaafdda9b7d535bea26d36a10da4c9464bf45782935dd36ba3f7f6dd5d2c1344b63567f957c80b1fb828ed15cafde3b50a0bb83e2b937a8c6d53a41ef12e8d0731f5d9d2629913fdeb010eb607190ed0e5c35e2738471e8da727353a10c4987235767e31761267f8ac385d8f5284c9acb02067029b2e0bd393462671b87fe5e31c9a708c714e1e75344684f1c94599bb43fad6223a9f194933e2a0c3cb2eddf208dd6e8d1807b7b65ac4288610c2494e567f023f744415788287456db2ee6954742e88145922045a34c17c19285f14933519c817e30a236d5bb98add6b4403f557e289f33c996400b318736c8e6bbe86b1e0a9c67c85900988d5afc0f5f81af08d92aedcc2f69fac23370a2ba570ca11039ba17ad7e35309d76b5a546fc297afd4f2ee08b7295467a18d3aee1c9cafdde9c9cd2abd888c85a259d6a9875a24a0c804a6b0232d997154e663b424dd78e563e943ca0fe1b5d54b81b218ec08d0478bd1d4959f7183fa4ea63e2b52a5461ece4d8432c7ea7b9b22ab2ac95760c69bc48ca4773328762f2d774f2f2af2c099abb57f16799b0d44848cf56a5b0128d805d37dc0097e546197305be063b0a42069c4cacd4aee281afc3ca715c0ae98b0fc4e4b6ce9c7a463976d46392d739fa8c7d4d23022a2908095b68d7a70fd627dc23aaa0b7dfbf8c7be77d7cc90059ecb83b811f41160edae70ecde3cdc6b3c422345682d9a1d66ffddc1dacd980d8027afb9059b49dbdad9ea3d2c7cc20f071ad6859db0025218844780918ed0d44278af215f2ac6366c3b47928209f9c058427c22ae03dce5634e1d13fa069fea6354988be617f514d831065541529130a7359f46b9b873644b31c1230544f8ba815c27ae8f00d24cfab2319dbaefd5e45d5956bee96123d408b4002da4e5c722ad902c8dbb04d9b822fc91e8383dfb862336486d02bd5f0e1795d3a6091f98c538e5b5b07eb0e5117588cf23ec2f7dcd6a910e067af87b014bb5310ff0810f70aa7630b1d51d5f27639284999df3cc324cea40ebcc75392c57f27a9cf669c91e3c2d9fdbaaf87fbe4c09dadd20f156e1b9af00bb1e6f754a5cf35f393690bc30d4af300e5536f6ece03ac7225b8aa0c9d198972e76587eb9be63685675e8b0adca0a10b771857f449ad9d664d00085a5f64f80f85ddda8e3606f7e384de79a01ecd7a9906bc933a5486ed4e958705985cfa4007f19dc78b7d7d9034ec85243f6cc2e2a09cdcafd5a1b3f7ca083e104cccfdff544408155603f583cd9a151a9bcdc1969a3a8e6e28dd1c61e1d571263ee7c49dc66c95150ea8179bc8fe34518259db76f8e4986b1dc2fe18c6cbb0439a6e5843d9b00526a316c086e13fdb59f021d6c1933eaa695ea3d9e9feaabfe5d8ff830602796e8b4ab29ff327aeab3dafe3e1e114380010ecb1412b30f0e798c947538e3f3204eb58389daf8a359d070f0b5dcbd842f33ad6b1cc1a286df0e38513443f66acef2c43e709d6e1ca79b247eab0252dd76b34efbcebaf07ad4a8e704385dd7248273725e360630a2d051688a6b2da8fb9860475ae5fe6034538d4fa4aa7e85cc240ff1cea0a16905b4704ecfe99fc837d4f4df21064263c9ff5e0e4fffaa00a6945f6f4c59c22fda16bfa9922d2ae874552104adef783e5269a238ecb3f9c42afa91c8605591f6a3071efdb108024e93d899722a45d22e56a0120bea37cc99e38021bef9ac0dd5a976156bc8546890c3a31187d1c5026ad4f18a24d3ee06e32a765e053bb4808d71e870295df0736fc8a328647816a9db4a866cebd4d91bcf7ff99d73de9368789bf833c3fad2521230572c5025e58019508f2e32e9576dc5d78cd6378aaa1ed646aff76908166812778c1039b859c15f7b57a34c4a2c8f0bf69efaee40635c2094abae93191b929bf5dfbe8c5203b29583300b2cc924370eaf6cdb9888343902db799cb6d1036366995a9c9ff2e3517e1abd18b0a3b6900d12eee14e8abe5f369bb67260654349548a60520f299bfaeb983955ed804446fadcf3c5129cc81db927bccfcfb86b8adc45690f121a07d1eaeb65b82cca61b7694c02b8db67cfa6bded26e7344f2abf1cb70925ab57ba9ac14ec8406e98c5481861a1f8e7d88479d95b906d48af739114588f18c5a117b643fcd8722b3c5b5c7a2e8a77f2089a6a431964c4df585c875dea14e3de8f80b7ec2f358f4fd8e4c7a5688abf50dc64434c7656d58456cdcb6707011915e264f4414b3d856c734f10bfd77411bedd9a8c455ee6d3e9af7eb01919663d35e7d162faf7200665c2050c8087df5b58a9e5779dcd2662f3c9a94389230d44fa513641141b82bfdd57845b67eec1198edce7ee53fc6c0c9276bc1a01a28eb92046597901509d8d55a54af140878e22aa1dcb629a7e5e00f9724b58d52b75166f53691f0d2615d8d802d69c0701cfdd3482a375b438dc7d983cb5f983edcf520ddd207023bfda44862c87c4a8b330f4e5300cae396e7283c4cc156d847cb582f50fd44d9673d51954d4269bbdbf703c0fb2c030f700b86bae96e214fbf3d7dbc69b53a9146dfd13c5c798669f3c43e1c13e00639a1c71d61ee1441579d10e4043b8b0079451fff0a44496bdd326f62fe851eba5a56771665bf9dbed0411aade36c7011e043cce5875a456c3b63e409e1396426962facb1dab5b848b4ddb0d6e3cfbf5c3b2a777055a219f139052bfd1a50bcd8e85b2081b73a922477f1df9f2b11cb500a293022a9fe89008a865af9c5976af3c69c15820e281c50252f7823e3838efe552db225d9cf740f4814521536f7007c9c94864d3a93744e94bdfb7c258978ad169c95843f94a2c9a5afa4309281b1c74f9ee1d9e1cefcd99f26b91b6de7ccd2ecbe9405240f68ad0743c45521f25cbf4afcead96ea6f14f89ef8e4b0e904263ef12c8524549047bc5c144613d7897f0dedcbcfb95bef52cf4779a60f89d7ec82b6a71d0ebfb3ed847288adc74b81d69b8e564012909551ad766cd9caa96e2f4d46ce2ddb8ba3833bfb1042ec1d0eeea4ed4a5932548cc73ed780feede7bca948a1202514ab9fac913a2f20a0e3ccb49dc979a258cfb45a95bbe12a3cbeb779d35633192460430e5d7485d61a99635ce23ada65757d4cdca181646f3178eceaec771c60d6d86b69803a64c5e1514c7b80e031d4505ce82bd73c917198bf17247c775230b6fb3ff8a42110a0c6b400338ab77a16ba6e08424357178d35f91e369ce0bf91cf37a4a78908c0c7d8b703007b15ce061162e18c095efc8513847e506ebe8ea11dfa9cb1c8a9e7ebbd5d158cc9f455aacd0938b736a52ea095c6d7f8b4c4a912a316b2b5b20a571801d6ac23cf14f07f03a6f6a11cc15cb331d2c155d61e48c6bbe686c9bb4e75651c6fdc236e97e0b74ed69590f5345028521f0ae5782e9c1c81089e56e2ae96b1be3b7c55ff6ef849178da3110e3d7e1357637ce6eab98b87c34bf9643da4cf4920603f3deb361b9c61fe41983269354e87fac73d20e2a02acab79728260eb6d832d12b19944937725027b0fe6e3e516c94a02011569283a56941ad895b2d68a5449428fdb711e98efee80f5a0ecd1674665e26811c9eb10c8834894df38c4ffd812046abe0ec301bf84a20ae5190b2b1dafa216bdb1ee02cfd26fa5c94a6ce8a1a13ef41f8c09b020746e67371c75c74cdff8e4a987c217f8620fc18589df5a0eb0c22c6a7f6a8713e3ccb8ab3207c7468fe55f15d142a086f210303631ca419d7f12f9018d37a1a50138e93503c7f2963502f6240183e159dd4e85752457cb1a113333ef2aebecb96dd073c2e6fd8d52bcbe519e0b65749cd4b3840b2589b24f6df078f55b6031b81822d664509d8d59bd164ca530d599f09368b64db52077409aa229111aa51dc1d55e81b4c1ce9f8785f808fbb57d9e0c9b33237a22182511e5b529b442567a2945823eafeb1eb52500f2a78799366e371bb59d14c67a2103d6e6e13a0c0f44e80b7d4644c62ef859427fba17fcbfb3b5b8e4f6ca4e0057f3ebd1805ec3c777f65c6426ff67259f4d2f9cd2bfa7d0deaff7f52bdfd989850386302fa6d24c7a3a529bdab343f61b322b85b4647725af92352607f8b8988be4a203adf2d554ad535f60e9e3a22aac36a5e027710776afd06ca66b00635920b2a11e8f7004a410556f7d492a15475a6ef5fc36c1852e7c61ff7276e8a6f2dd48cc3940a8fb85d0f49aafcba59f026dbece784ed36e01af0b9a1ff642a5e93aac432fe0dc33d36ed12a399bd2f0aa2b0e6768f4e9d2ece9a8b1813b979d734a89062bcff8e37374dbcad61d8e37fe84cbd4d9012dde3b3e008f0e65449ad2e4b72761ba9f2df996b1f9b7d5bf36f94ed9383be747031e1babffc14f1a0e6962f542ba9155ae0b7f5a2834f03a9ad1911b76cd9814bc79abfb59a258edd073cebcf05989eecccfdeaddc86464b43bc062e192b520b1967712bbd11a607f7b010fdfeddd2d9320482c4b904e460ed0f1f6b3fe480e18b67b00b89f9f06796286e1cdb5611304569ad3fac6581a039bbaeacf5e46db87e5102636456b7a2659594c82eb397a1730b08a8f1f7f721b82a89c481bcc6959c35410eb07d3841fb1556b2c84b9588e9297e160f71ebbe954872ca638ca0b827cf61ddb910042d0f3309133477cecdc17ae06cd69837e2b71b8e3dcfb76208508f20b5436b1730b2394ca67d10a68a0d96511b15efd422b3d3b2184aeeb95af4e08c8e75df68867f33aa9a9f5d10325926c42aa52d6c9f57929def87fb5bca21a0d40158749875096c6fa945f8a0be8a5269d3ffee9ae02c9bb283c7f04778a2e0ac9651f51aac3f155309aec13e0d21217f61afbe3baac7b5f2384d3fff00578c4ba7a67db13009c8f13325dfdbcd9aaead08231a216725ee1be70fab651af09241c4a9d9c1e4ea2542d3f6345fd4fa0e0493ad7c9f049aa304073651c8439e2479264266aef323c98af65f75483849dd7308758557d0dd8d6c103a512634331927530f67bd17153c60fbf2d86e1d8abb828da0315e59b9a1fec45ba610b0246f53ad085429a48ed4988c8cd95ea216da5f68b7c7d58eeede6037c35bf3e0af29dc5a093a7ba0b856d250f87b7cdd346c606a66c027d35ded1942de998e858c1abf81f1dc77ea835870910c597633e7597d24fe7768d468bcd2b27a0444c5b64ecff639f4c63605a6888a27a74ed978ef23f590ee306e1fef5733998ffb9e9c1d646af13ef86dc08958688b714955273f7f470aade32a265380fa197e3517fc725b56aacba1120262038945bc37098ffb7a808f6577c6ffe635a4afa7082306c216c93f11047c7e97d6272e516b06a0ed8f6a365f33fc95fc5b5e62aea2211a09d0134c3fb6c2b2852790445bd742024ef87d7596debaf5d60878c0f2492cfbd847d3801c0c2b0207b435fb240ad31003c3809e2665d569f07aecf564f94da3e673800f67c1f0cedd3483dfd97705b31fc620e9f2c8ecb9b825e20a6bc434bf7a355c7ad094f970f65af9e1b77eae96aa128436c329f3540a42493fd53c6e63a9b5566eea10300c1654cb1bc171ada97e7ba6b00608a4fbc06309594a63b4fb488e605cd12b65452ba6b5badb70398b459fe23d34a0396a26fdbbd16a48691aa28c7ffdeb16c397ec3efd35a43399878714743dbabaf0166628235deff4c03e4a15f2e54b16215dd519f77b7b711abc57547840845c5a133356a1bbc2ddd11cf1495356d63297b2d8e57bda09c50c52a956f3c0cc586f3a015a3e9cd0ccbdb52203f61d200f2a1dcf1984fa787739c01c13e5b694358bfa9781bedbd826974336abd625849b2c00baf4988efd2d040ef2f2528c7953ef95207da34fdd9cc52056282e672aa40cff95fac03bac1f00faf6e5a4ee2d19ae615b30a6fe5da2cfde4d0a82106efa1e46d582d9bf9819d5f712ca4dc5c131b075f26e620788be10965bfb25b6121422b4a22866d2c7e5630742b15926f63492405ee2e835bb3f44744c7e7d7e8d3dc5c14868adf25235a726f0e68e58f01df774288af82605bbb16246c5852e7c528f16dcba63c4cf71ae7f5e9e73f561587f494b7d4cf831e425a113c673445e3a9d126e0a8ce21549f678b080d70b5a8ef0b83a759028ac63ee26d2908317057dff7af6bacc8550dd6d647d69f69cb8dfb09fac6a8a55c42411e52ca171614e63e3d2cac8a9e80bf46da95d343a2881f21e70085e50c8c787a1f27f1e2af85ab70ff4b76d00c707d6318f658bfa03390515fe147dd0952007de04e52995c248c8c5aed90af210020594d23ba52712f74b4872a478d4bd739abe41a8be17aa09d1e14ee3c01b8d9bf7012143e92e06b4b03fed90a96fd7be0f39677c8e1e9aed9e1ca8b0c1b7e9528cd92bad7f8f6bb55b8ad56ef16c0c28058369ddf4e4a1ef5f7ca06989cacea202d4d2ec0fb726f631291ffe29614af72d9f2d1ddcf815882868f58f8757d761dbf570ecd82d48149466865c68ceadda6c32100858a86d01a531b502cf1d48768f0f9020064d04f42edeba6b8a3535dc0fa3a502f965febe4102a66d5a2ba033bba2946a5b092d859c809e116c278371307334800ac7497afe690a2959e0346142e95d3cc09e05d6420bb228ebbf7aa1d87a25491ec41c15683c56a7e07660bc9d32d20301940af0efbdc467d3871093060b64f15abe03c4f67cd7f779ed6c0e734ec1018eab85f7cc9ed20aa120c9927f5b6f315413739a6c8f38b00a6d7e2b4a59be0cc40da61bd4f2ac2b89175c3208d206326b1186420074b088029c33c1555efb643afddbfa463399e743351b65febc6bd4a16cd32d5c15aab61348f4df625b226686f1b42c712e2cdf4f7975b6c6401097e429856d23ece797c4a5e7708ca1cd338fc34d30102ba1d7f2834120d6c9a6916355549af56c3c5f94f0d56970f2705dac5d6694027b9737870b11da6044ef91f37e5ba4b1f2398e0fe81da87f43695115ab3c36f8885e9a164c6722c6b42921d86cd9066430816591edc559c43d7d90f9429fc7bc5d6b6e7a95e522b71c910ff1cf9a1248a653442710104750ef19b4c0c35be13e9bc4f448ef26c44d73d954e19cc1cef36176da10544b371abef8af17b923561c1f8b049f0ee7e3e9bcdd04dd8e384ad211d6fe7123655ccc9829fca12caa7090e83201b1516eb656c8d2ee50fe8f452471e122d31e8860d812774fcf95ed67e3224ee7af366c10f710fea4eb6c5cc797ebcdc9f80d9cbc52c9bec6d3e940553f9077f1413a04cc0ff94261f6014618c313bd3680c3726b9b1552e0e366d169743584aa5640ac76e273cc4e14d93e4e0163a93f10d2bb795f257dfdf44bf5a171383a6108086c1188cad4e019d80c8aac699b6fffc833bd4398fc0152a24ba616704c538c08842baff60dc1fefddc0da4026f0e631d5f01ad6563d21a1ae7dde08536160201be0420aa07ab2389eec4c538f6472ec27d5a2e7c99344dc566676e6595314da48c64654dbeaa8e6b46fdfb0f295e5c3b4c3d3a47c7c03af255e14ae1b53333e61b36f0c110046341ad08b0df101bba088a14c3e959a34a89b72e761219a622bcb642daad686c3ff6dcdbf3c8cbdcace5d118db6499668291ac90cdc155b3db7116c12fef1525fe03a5b47ba25f91810cc77099bbe7bed69c4946129149ee7429ae4eb19c91a664486c3ed4fef3c34ffee0404b99b5afd5bbf0b6518e79f72d9fd11889c704218ab3e934573eda41cdf5201431e2db0e59cb4566b7d9c069f3c0189c14c26fcecb02adee00dacf68e0796d3558f0a528aaa1c352ecea116f64058433e285a2c0778c62f36411e9de723d3af55e09caa16862a3a3337de47df25d563f758f19d720c5bf36d3edc17a24d08970b27e62b7fdc9325bce160946e05791907e0a2110ee4dc70cb2718a64ea6238143e692f3dbe8ca8ae74eb1772e6683c0d8940f8e2199f013b365d843c00a70f90aebcd622ab6b43882768ce4ee127166902b297e854c288e12a44b8bff82954c2e143a94715b2db4ac7ac51eb5d843e70073dcaffcc2aed0001f67e8ee8643921e5e5a5c3549e60590ddcc635718b92ca3e83b6894da99f681b993b1f7b003685d71a5ac208b8c22e826b073e60e2c65f653841a674963fa98246bf48fc4b411e923543a259ec310c22dbb7ced3294b5cfb3119c5d46434537175363124ea6f342b22fcdc56cb48fd59db0b3c0d3c818b3c0febd5166e5761d52353cb15e87a30ebd374fa9e9a5080709d682dfeb5a21186ce39af7b5f5aea9b407514eebfd37b499ed59fef838b7d3cf45c02f9c34eb6d8d6ff6fb8ecea3121d9884f9fdf5d202c71efb8f1e45b225469eecb7fba0e6c2f75dfe7e31c28b1ec12645d0bad3ae65cee63e629d501edff20d519319c31aeb82a18719a176ddb4545cc9511978664d6e462f703752a55046b6933f7a44af0e3545acd8b4ddb81e1bf802ede882bd16cc24cbd80008d70324b29f5b857a7277be694057bffd21c450ab3ff85076a14776466a0e0761b0329da9650f98bb481190ff85f062c54260b068b5443c9524566d4d5bd8c02fc3c2fb4fddb6424c0b5de485e386f67accd1fc69a9f969783e8f4e464c4b6741ef7249f35d318f4663d220dba74fa35af7cf075c33d6bf304bdb3be17e572424eb15677db0df4c6ca145a4ee3173fcde708927033bf1c09c2851c885f3dad0371d0a2761cfe7cd2f96083588d1937bbcba20b66a6775636fd2fa4c8b6330aeff553341478c54a57fad71d88fa0b6ead1e60092b91131cf3555fc7567a647784fc22c85cc2316ba954ed0361b9b999a766339a0f223a1b32ee2dd1acc96f2933f0a2a5e354e8721e7e73c206d802939996b63d506d5b3ae0ddd7411cddb29a70810cc2817c8adea7bcd5b34c4409e68b18042ff186c3617dd09573e7a41c461d7147b0c57495859b9814140fcab4e9149ebed9d80424efe97f33b67833b469122706c33329482760afa3b1902ea6f0b0547c36f42c8b1f8dc65ddbeb3a6f94affba62e6b9ede414a3f5727a7a7a3635ec3d5efb05034e02489ac282d90ded34e4e565959db2d514a7528ed33bd51854533ba70095ead8c39bf4c3f72063334311cd743a419bad28306ed703f9820679d079e75f19f04e9276a43de48b891386940c9c77aba362a5c6c8f01cd07e36d6cdf850ad57c18e9e914f1ece452055b1a0f1747aa9700373664d0746d99304efd1716fe55fe0c2bf1e736d452ef67ed1c27bb95a3ecfe43d7b5e74a8cb8aa7f2a65a9c78e58a2da9bced17599457f159d7a335b1ef06640cfc5b1c78a24fef71bfa6f3fd7a9911584b976bdd172f21b5e8616d35d4b4b60f60cb801ea2a354d48fc63d22ad600afffd39716367058673d1e2d1a3e8eee6c10180c830d49a93dff43f5cef7fbf1a5549b405677c247424460e8b42e4c0369f0b42b8c4bf7973c413114b992e8b9fa9b5736e05b47b3959ffe1e95edd33c1ac835bb3171d1f3cd7697ca965daa6a66779a6d89ff6b819a28a4401c298a22d085348608bceb9835167be7b15d3b9479ecfaa5c645f710ebf6e871f3fbfd58f920f71814934f2da27030c77bbf5d1172134f066aefb192bfdc66e0a06b37b91192c3fa097263224d8c25f397bae3a348e5961298acff8395b06285bcbfba163b4793c06b32b4392cffb84e65aa7d7bf5c0689e69f63669cf9b22e3dd0d20292b3144b0e858edb23f64b55df976064e49d0808c974d5126bf9fd055afadb705c97e718c3feae751c10ed2bdcf0031d3963e6cd40ea570e664947c31561fc5fe35d0f47018b23291370ebb70dc70a1dac47e98f728e11971f72a0646d9f70bd532eb59e892208ff08bea1a21be7dd93d16a906e209969a57839c648ec22a31b9989569cae9d7a308441d2f150a38ee3dbde7a9678649589f7cfd59321050e0551bd052756609fa55635e81de4df685fec877e5f1488121c2557c48c189ea5d95d6c2aa7805d1223bac2aecd19eb0ae85526dea2fa12a7731c09dcf8767b77b4b99d3ed43381ff02173ec85f5e066c6d59a1eca45bf8e535fbaa489ae517788701bd8ba59649ef532aaf390324e4efc6dfb585d7c4725e71ac7505a5b04f910a0058066741c7009e0a806c8ee8a259db2f23858064ad68307abdf38aee7e7e55c75f24073ba8257227fc54e4ff23cfd4b4078a1ff14c1c52a7e5786f70669c99b92799d1ba0d4987c8a6539507008b412973726f42651bd0a442979d04162b5ae8d94265003ca56a8ee90416b9ad1351cb3cc77c8d7d8096aaa897c9713b02f70a15a6b4a4d175c0e8a646163bb2e28ec6aa78e952ca0b8b30ceb637e0d4e32ec6cd4643edd5e9fc10351456eded6e01c51b7e094bdf64529fa625594d404e52a9cd35e7880874394c2bb24fd1e894b0154154963bff329695d2e506674c1245c1ab7581b365b3dba1e5e1798104a5ead40ddbb2ea4a0634ee6c841ea96c6ef4293e3b8f0f758674fb160ae65139eff77b20dfb39b72c9daabf91abf852a5b58866da006d696d7d3251643e5bb0cc0962f8544d72dfe7a7034a73ce220e251da3c05cf5f717e7b424c335e043a4b624140476eb8550e14e49fd8a50aa472d2da5315bb1d6f6fbb475df88b416108b9b96d595df5ad5f17513d4ab9cf8546bc4085b170072322a45d5fc0ec5f5de2077138191499e09807e41bb6c4df967996f60079150b146bb391b3eea039d706595c31f20d672b0b4f6cc8635a09558125ee6823c00a49101de6fb28e75537dc01daf260b94d2a58e8ab4a73d3e690c33a6c50f04ad17b53de9664ca525e6cd7386f1e783a3b74807114e8518b2142a80d792e58d7f4e9ce0c2e2262a9ff8a96d9a5a6103c3929f9d245d232f38aaeffeba17fff41a5089ec7e7740e4e039e52d1eb9c74fe9dfc698d4fecb84aed5010c158f8c5e4f5137b663b718236387b8b806e47c6d34f658f5638eec4f44eae7ef37db401f2062a277e69a9565565948b8081231c5ca4e9ca989b6642a7bfe920e72c84dede7060ec2300509e111c86f9cae0858910a0ee05b2bdf28576ce2674741d51f18a3927378ff05a8ab78f8dbdcf346683db7ad87f1867c5c1c8c42b9898374d03e419b46c82a66e2d233d1c0c62892e255325722f8d7a5603167b260dc64ff3981399b96738867fe915b2c1ea01237191af43bca8972bf5f73b4c11b033dad455c1d98d68bf1309bbeb7bc920c7d888ce422536bf33b0d63ae6f7e23ca53f315023bdf14796b6cee07c93f9602321b81cb55245e985fcdbed53c5a801a363fb83ce2f32a772aaf518d9e4edf984b2c5b25191535e5eb7e99f75a2b4e982b40d30aeabb731b09531508be68fd808eb6f43f9ffc89c8e364ff13c4cc90acde2035c24dcd0e088cb09c07af73387f2e2d6fe17ef485bd34d81dc8b90162f3b52385c6a5c2572cdab567aff2c8c2dedda1890e70391dabef00c49d93b8f1082b5fbc413d4672e2bf42802b65dcc152e30f35359c06bef7da06b18d63b335522f2965c9d4af64956f62604c8b74deaff7512cf97c0f8a3e12ccb667e6b65c66c9cb5001558dd048d93ab94e003666f0fd021dfb327917eb7b4e12f1bcad0e4411c2c85e63d4f88ff20f0c499baabb232c70d2131d8116c92baf13f3056abac2d588d95ec74725f152dfe61ebfac2fdeff572b283e1c1322370eb1a914f61ff234bc01e6ce3961046e55d186f624ccb9c816c31a79d1c5c14a32f0245583e6406f6e52549926cf5d10f681e155fb553beb73b8ebe058f67d311dc55e76a455d29a927ef54336957f105b97144ff12c43531948f95f402369f6a7484883bd69292af85c40aa532b503018618b456fa28cc7f458ec8df70be5b3c858080bf582bb7549217bad618faa4a50b07cef1fefa76cf1971d472561b5b2aa95e48ef0f409f31fedacd3d4b8ecede40dd8094bbc4b27da689177a01a7f64639ba23e3338c7bdea46e8ccec59d0293fdbf8645701fe00473f9516f31503857e6357b0ec4460296e46e6e36536f6553cd0f1293d6c38bb9f456f491e5b2a4e48c718baeb26f1c6bec2ed76ffd895b178f3b16f13495d80a83c9426a0ad56e49ce1368ce00fc1f5f62a9c6d781b8347133fe6b1499f444dbeedc5e20ff8fd7d27f23c6f7ef58c39f86f383277301c2218ce0acf83409246b75247ca50296fcc5e51a2661f0df91b6d58bb926815b9fbdc42820125675bdf3fab52476e651238421ed0071b4259c34f32c6af05bba5468c27d4572883de5d7d2dfb00cf468a38c7c46714b53cf7296f5f267fcac512f6946d189b77bd95bf4f7b62c108d72d67ea5782c967e055a12c33e1641c8f0f20181c0d8a9fa6871f4d89e3f9142e2efbd4983a8aec8efabec187297edb67d4dbcbe69f7473e5cdc83a8392c1d40bb9120f35b520ea0a907120bb919f340485b00827bc615f8ff2478850bac4cd2e6fe62637de742793b708b3bf8f9abe2efc7084389ec5c07d00b531a41d87ebd757c3eafa6710b6bd22340a73aec5de5396b9d51e2b161393e646ef42476cb414adf2f0a3d4759e3bf6bc295897d3bf70ff00214c51af4bb9870ca24d0577b9f9fb7473110f9d67a17101f5bc09302f806b45a3f343223867c89d1086306d3fd8a3a24518a81ada4f204ea64160a3984f8dfea7e7dff6e06b5b82a1fee28b7289129d3c97816990c4bf85b3142f0827fc66499e74ba9904be986f06c6195e921b539747e8c2b76eb57f050dc000b4981b2e5764340f3568cc534e5969f62224bf7bf3e0d73249c752c421a32242cd28b54832957d12505561edf5d97ded501c39b038e4a3fe4113e1be9479aa2bcd8d0538e97f168b1a23c0560bbf173bfd7c5f7cdbe3fd78c9eb4e9991ffca2b844d889dd522ee2073e3783dce1fbe7f8e9e2861a8246487ef73c26c16ea4f61c142a10945fd8d6e7dc838bce426b5b1202d86224ade67a75eec5bae005f8af67e3bbc2585799015f7c57ac324d444eeab38119b5573901492f586b57a3e42523c774f3c494cae147d8d96717098d50cf8b1d5b7906dc0b49f22d16aebc2343bafcacbeba2a0cd2e5f5cbdef4ad23320f98cd63f9233707968576b69d78a942267761b1ca9d9be9cde2009032221f43646df753748af325e9c2123a149b2418e801121dbd83a9f68bfe8e30511b6598f70175de64359cde67caae6c1731ece828e18a9267e674dc52691a7e37a319d6299e9b4bf8bdea41c3f713c0eff88406db458566d9896f284490fa72f4590be95153476c656cf1bede4bdecb361520362c39a543b3cb7740ad6dc2790ba589e4227f704f896bcc7213919351c916dd8a4222b9f2e21daa74f7d25141c018137b3e5512b912fa61ae243cfca0838fb25f6c89033faf44a54a7848babc44c79da164af051099806b26b000b01955167b9bbb13d4cdd79b54035b76121197a2a18091763d6f053219f2e0c22256eb7ec925f35a8e96ad18866de8f9adc418505f8c15f2ea3ab9c00432f51908a230d1968f63f0754e1a7f4b1831f99394fc12e5dcc722d815535babac4006ccafc56954c9c5c1d512e2dc4964f143adf663d635936dd7dc097032ca55fb36966caa16baafdeb3fe8e58380b9c2180d9ec2ad62f3f6206e2a98b68af2d9b8e5e5bb8f87fe446a366c093a0cdc814bf8b92cab7fbde94aa2071d4e3301084927e6e77040770391f2bb84469d0240606c30d28807869459550ec356b46517cfe0b2a7848c948ccea620ebc38283bcdb14b5732039c2140de724a669fa936ad241315fb94d5d409209347966eacdfaac858e77a80ea573d868d5a18052e60ba4f67e9191900de77c2d0ca3b0fe73320fae7efcb94cde41c11fd3772a74f4b448260215359989266c4a0663b16a6adcaae0911e4371dffe5246b1aad800a0ffead26dc8860ae9686cc6318ed8d8f82001be2cfc556aa22f9fc291725e5cff4191db424c0f0c282a9b5949980ac654aba754d10c4eb08d58b63d0739bca80c1192ad4f505689209288cb97aaccc83941dbd4eedbc0121c22bf965d9b3317afc884f9c27fd913c0eb3744ead58932cd38c70192377197f09a7fbe80f51bd345670582edfd433954259ae789b014d0f53bb431ad618893492f203407f50064bcf7ca7d01b54b6918b674ebae5c25ae1432a1edab74170723ba48231f8857b7885ef3edb59183565d5dc3b10855579a320ee9c6e102bc1520cd82d4a73df24f698dfdb467f2e48fa18ba8314a674b646444d2eb9bd90e82478247457d269822889fbdd80807e8e6d8b122d17cec5e645d17bf4e0ac4e4a5233e27839751ae83b80a50e71a98e717eb249d606756739c471c595dbd9841345d0c8fcb25a2601a34427d5768f3be727a7211daee19d321cbc07b7cc2722a9f760fb9e67a695da822a0d300d003b4fce4f069fba19ad1b4bb7d1ca1fd20cbee4e08bf0e2b7663c833ffc8edc2aad3f4274945f83f81f786c529fe4859572725ec2c6ecddf3394af2c58b66ed2f6a87793be5d5ed5f9190f67ff72c58984c58d61a50f1f669ce42b622b1d67e0e785b11bbd89d74b9c56efc2ca90a6d96b01e9d649a6bf69b38cfb4b2f81242948e8bb0c60ea57768ec3e24fc1cc23a39b273a796e910ebc0f4a87a82aa322c69c0322756d2481a9c67ce86caeb147c23c83bd615a74385a08a800b9bdcb505937ac75f816d7d0d4a145ba896a5f1f5efacd4bcb0476133897939b237b28d714fe8ffccda33c34d9c1c87b5ef9107202585114b2c706047fa04070405bef5e82595923f03ecf065b00b86ba60322f9da2079155143c887cc71191b32bcda9ca4f731bcc18f3bb91ba1904e496ce3672b1e041609af7e4da63d6ea180e100d73586dc86cd2ef55a933ec4e103894b20a0c0bea1582ae5a7e6f68ae72c079477a89e9babbbdd79be1817d39f44d8ca56e163e906946515ccc70763b9f2c2552517de3f77686f214df1688703369fcf48cc0fcaf7d6287d5683a1d3d81dedbd0344f51d725f1645a3a22d24557e26dcf319e39e975aefccc16330f231943d998cd566b49e3cfcb476422e5bd860430d004c63788b6fd0a96bf18fd07e0b76cd7df78c2f2cc4d2d2e23f6b06a724ae92affda95ee64c9246b875cf68d9c540c8c90eacc1bfbed5acff68bc386f1ddd878cb772113712a002ca696928da399c97450156815a907df90d06d85610a9479ff0447c71aadd9e27e8fac4e64568f07ffa7d946096a865d0209583a03748d894a38d20c3a7380d712c9f5b448767e7fe8eeb111a3203770f0d50df809da1455e257c64df9910b12b4e375ce1262c732d4427f1269ea5278725b6e0577c839727caace6f83917d34eba085629970e3f9778e3b3739664d2d11030bd3efbbc2b6c9ea4662bdbbb3f1dc464b573481eaff85ac2d917e709ebd7cacadf2baf3ef45ae1c114e146e22840e91b34bf38071d5240530e93826d4ab14ca46a347cd50f359ae2df487850ea7aefaef21f3b5a480f2d690c00ea2ac297abe6ea84fa4a4b420671689e3ad099a62a5de0a2bf20112b3ff8695ab0cdc2ec68141bc0dbbc06f8ff45f80fe529bad1ba34cc82a01ae9f629cb7490e7399fc3bcde715fd8ba5da9ce2775aae3ba09d927d73a59e10f148379cf905910f17b3c39e778ac760379fd4f2ed9ce8af32ebaae87f73859e164e3b8905e84ec9ba6376c0c6821a37a06a297b141efec44856180631c593dfab92cec80df258a1420b292064848b9e137dd3a4653e00e8f8748ca650c1f9a7727c58c33d1b71557e5742e6c05d6dc28681d0fe17bc6c1378900e4f4e3fa15f66d3e17301c06c2b6d5828a59cf740cd0b0d3c047d9df9729f0e08398f4a2c42671a03d56fcd3aba47d4718d71ac96e38c28753a2af0b0132b53e39128940a95f8694e2088e692dbad3cdbb2f55c6a55b9365f56840582dfada5d16a8b5ceea455efb302f39c8e7b631b2e447526e094f4886c7bf1c631d286f35e9c38cc44cc00faf15c31017f1eec0b54e9e8551be1cd398e9a04ce7ce33051178ed64f13b4c3d8fb3ecf41748894d84dab5148cf1c9a2b0862ffc97ffb471389fb2351c5e64093139e5e57a823ccea6f7d2582ad53a982e3a9d86ea89ed937392e61d1fa131cf8c071861e9445a5635e7ea8ae66ee8e7a6d540b92006e152729c39586ddf8487f4226bcaa4c860c6a30f72a33339c37f0cc3bf60dbdab7d234bd58d459d85f7bcc388db03d18d258a9a6f04ffb28ccf913cc7570127616bf85cedc8cc6b1224eba5b556af60f2e178960e3731b6f88ef61da057ac2506501bc7ce32a64fb6834df3d5c5bc1113556853c15b8e1a35a89d818835f70f7a342430701eb1b4e73ea0d177ab72d09097ca91b8bf759d7511f445dbcd582f7678a51c2cc04fff9d118c55d58429a2bdeb990f1053999a301c74a63e4b175fa6e1bc1bb7059ce1ff3373e44f74217377e8eef4666b015688b3535611b3e3bcd3d860d7ef78217af1387a67e2e90d2ff3f03cac7c27e9ddab2a5601d96421f2904168859e28f90a7cb0e996c7fcf61d9f237d990825ca3938cdda73c7969ea952c0016d13edf874adf003a297098dcef14ae2ff7dc6f9cfe0b0972999d07f64a4957e102211f7a5fa5cff381ac0a9bb95c90a69c83554a417f8f4f92796c53567a1979bb9045b48b0ee750e778c5abf166623ac6816c5daff22ab353715b114807fb49adcdfae039ef8571b978e926d9d117428b581b26fdd9371a7dc5bb0b70591c447b81167e9b5234dfeb48b2707ba6c8fff08cc7a468d5ec5432e0feb036857e7e2578fe546fd45bb516f774723444655c504ebc1620c78ec7280e31d33bc4294294135b0fadf72216867d8d049560d8311e47a5f2533f95a2bf10f6a32fc2a11ef44e52b899e9304b9d37d367ba75b747b248fbfb1ca597f989d3f5052d3eedb33248849b801efe82c8b7e4032d5ee7090f28fc93adef2c711d467dcf4922dbdc843411e119cde35786293aa05ba692c436cadb8cb103177e1cab70e83c4c3bfc5032c0153f5c2bf4172321c22294baba472ad215a1939a730b365ef48360d6d5b3ccaa3e017ce5caef9c7eaa8ea09d580532adaacb917beefc3431c323e97f666face4fda1a521f3440857dbf924c536c56f71c2a341b97f9c223d7646fb3c254e9ed47c65132b16e10c7befc6c255ce2dd0cbbcbfa89365fdfa48b054aeef3144ab19c8f7493a436079659c2e91d63dc07bea457226c870004de6898e435c21e7b271ec0ae576393fed8da9cb5210e5e964449c1048a5b190b2018b52498b9df7901d53b6ae856614c0f509d68eb019e36005fd152d2f66517f9a7d3b89275fc1152a4d596b85d90e663b2b8141b1129ea9d26ae2f2b7e7e8f2877d3655fbfa48ada17ca9e72f9ee00622ee06c4f2f81f11d39ebb54f570bb1f4b40343b3e2fea83aaabdce365c51a036923d5e80dc889db8f98ea99ee1a3aad442e1bc7ac127020517036a5d4868b0de94c853350f8296ae3dd9dcc34db4a02b33d9ec5d82f6acfe730f52670488bcd22f861d27607a2020380d3347b5d2fe59d6bc7635a0be126791111bda6db653f018ebf826192c9337f505d73bdb94a82d1f5a96c372acf061d7f0301c4359072622f0af054dd9d20da70d72c9ab493a5fc694516577c7f31c59239ee93cfce10b6ae98d36d54b5ab173846b970ff215799269134e37786644956ec31331009d7da59f583bdf3e4561a8c349f249bfc1520332a61c0fc98f92f1df99c55a2d1a9cadb2284e585fb632224e279ca0d55911c4a10bcc816851bf608d7202de7f509d71968c6524729a464e8ac29b875fb8d0b55d5a82973f7fa876fa30d2cb38389acf32b8d9f519a9b103b8fa633946e22b95875120f2e56dedbb70b12582f8e41fe7043f86dbb85145e6b43d66d09ed8140d55a94c9fbc40938003716aeee2be4d89a8e64c08d585791df69369fa2825b7875b8e1043a312ee118a37db27509a039f3462fa8088842d23881c5591db8c725a8545215a78acd87e3bc33d48f0d80b269cd3691e3272ce15f4ea11fc487cf0136d024053c8154e9ff58cb5afdd11661ce62625598c91375d4627411b61c06a6406208f7daa8f6f8946dde45a3c8cd43642b85fd148d0fba4ad2b75bd677a1039f48048f6ea949f30a0113c779be041ffc0bf10491f44190a04cae0f96cf731b3ccd1afdaa625eae06e7562ccd774aef6d1834b27f0ecae86a7c3f093bcb4e03d48e90a3a014b35f12a9ad2894605469f5a397140dd807252e904de0492422388ebea9091b243e89be573ed17e2e33a7886e8ee9b66407073fc3418d0314291ad91ab0e7bf2aafe28f2f72bc3bdc06934e5d953a2cce0682195584801acde9aa633b6e13218c256b60100b37ddcfa50fc7b84f59cfe8387b00a24d0db491c21d37138976ab63367bad863d5bd05f1f9b63571b50fe87a52cf9dbcd717ab81ce8a66940bced549c45a2aa8b1fc1849b62ba8e2782fc50e97a9cc134d5c123527049e1259545ddf71e681b031e4c644a6b7f43adf6383071dd9dd090e550c663c3a462fbac43d763c489fdda8c7c6aa9f055eb6f4b00c84979018c8013d3b00b82a0272d0f7147a6805b9fe6f97e006f6a618e10056f7353046453dc4651fd665c31ecade0d60bb5f51bc7228ec50c49241ffc78488ba1236e6e50e6fbc3d70c933ce762c1bccca8fa359f0e0e4c3d999dd6354624eab59d5e5bbf5743a8e6a25d6da60c8ab2da09159b2e7d46062a6e8fc841c82f8f252a62059033a8f8eebcd45c4eaa78499740b7ae0559329baf22624e438c9a30e8975e296c2b40ad6a97da286966f5605cc3a35843a616714a2aa97efe1d44298e81fb35060188eeda62f68ce88fc8d9ebabd892bbcdcb2b6a1d446d883f764ab89991b59db23dbcda1499df194c1c10b69b30d3e1b3f352dcdb7012548262dff41507f2f315044ff8129cf7aefd0051fb94a1fd06833bc78baeeff74f4feb5808dd7cc3aac1453ae731a8d8d4771c2f540af4e3f3c88c1b5293bed4e0c9770b336a477ebff29bff7a9782a0d93c0a0dfc580788aa4fdfdf824b0120492fa27a091b9e05f97882fa19aad222b01673f70ac8ff4c3bce9f0e3fc789ab0aab65340a8f80337ddf654bfb9092d447ce71f88327d3e2d0dad56173af072da666e3253cae3af82cca444c00dc99bf1f444dfd3d688d28ab4596c0ac6911ef6439fcc6aa0fee1f2d3088adfc7e7e9c778d3f4ca5fb00c6eab71cec63cfc465aef38a1b74b6ee31310e08317bc08ae2e3d6c7514c076e762b223feb41e556bcf5b332bdb29fc837b4a716aec22ce5cf4cf0eb306e676bada6a8e8d7db374b2349f9f167ba9e252e33c0bc6bfc9d5f4eda18eec9474f665da780df48a64a8a1312e7557f492884b2820971234a0e2687fcebc7d16e865868f29afe02f970de481b5d0a6d2eb1e297d9b37b015cca510aaf22ce158d9051cf980238d939a4c99fbd7899bd4c119dc08f9501db937d115cfa77a8e3462fca5279de47d25c5179e36cc020ef4bcc4bdfe059e45d8a4a5282bbde33a6f6f9816459368d70c1e8cbd159c2839f885000aac227ac1cbad01698367d5488d30e8dfdb8c56aed1423b4021c388cebff8331db250938e3cdd4c8181fa31c07e3ea889996163d916fa0e8f264ab54cd0fa75e0540ee04107d17a7be525eada1da4ffa0169a21a8a1a95bec8274869c5b4b1a91d3a042a2a1635eea1082db16bab2936abc7e356dd48434c2a6f25666b8aa67102fc88e1ab54b6aca17882bcaca49870a81ae0e52a543347e656e18c6190067ec86fbb7025da5d9f195252c6cccfdaf63256c22950d0fc1164b3eb99f5ae5c5c7232512a64eb973093bea55c0a611173bf99253922f81a6449cca6de4b19172e74c4357caf1d4c343b215de7c2223be5e615653ac87193051302c14505f7bb4862001c2df963e34679a33ba1bfe04f9dc7fd79209fb1c9c947245e3318efc011f63f6df65fda5d773ee94734d4ff183afaba24519af51f34c791839622c395d8e5ae23979a4e16904931d25344f5d3e9ecf41c1726fb91c0aadea245176a0385ac3842151dd6f061f9e3d82947d4425a9ec35204e9c1736505e24375ff8a28e54d41bad77fd2d3f4c761f22199bda3d88757597711001ebba02d1f4fb8d2f311b30e441bbb8be9696be76e8aef7786da693c081b25da4a7b06253926e395b15c6ad2c5917ecc91e5aa2e43ad8a97abf43965ab3a1678aa6e4ca02ab6af01aa352bd65a899fb9bbb1a233c7f342d2a6b106b704149a26a8dd48babaa1e7a9b9f65227bd84295243878c6ac749635f83d6a84fefac5e221d7cf20b28cd6820e0ca1cae33326646a53fad577b644c1460e149621cd28167e4a2e2d7e6309b87dd96ab1e142a45466b245439732a71651dfec88c543b6dea5486e24d18b44ab92be91dde905b8eadabf6f71a200111d771504123642d2b07584bdfa7e879646a37086d29f180e474f69d7dab6c071f40e5d70d7e6daa991a7b2bc5e5d6543f8b3302e980e63597f6d4e41bf18bbbf86fefc9d59415140987c2c69120e3506870ae5e98b1323c939bdde7a953f8ffefccb9287825b7b7c61eed6b6a3d215ace1ad864937c6f9e19e257955c530be81d4dee3236bc2a9b29d551dfe44a3ad73e821e7840491c08761d64da479c48e4ce544bba1b3b3130192ce84d1fe6fc6bf0113393413d1ed9e56df6c4cc1fb7a5c804f1ffad06a1c7293820e720eff91bbb8a48d05717018ef88c012d2dfa4ffeeae9580440813b6d2a4f37b9f78485a6a08ea60e4571d094e3d80e7669fe53f74647ef9cfe46d8defff49c8041e61dc31873d87527e2c847d863ff0706740a9fd2e5ec32fd43e473832a957b9399fb4a22bd01f2e8974285bafa06a55f3120ad74ce25246fbf1f8c62bd4917b5fc96dc0cda237a372a423c10233c7ca2e0b0217d8ff67d83da7967c3ef9653794f69c2c98a1c3771b5c6ac2bcddef7bb4b96eb12263fc3c2c8fd8e753caaaeba55149b950e8067c49eb6b050848b3c34bc4d3fdf0bbc310d0fc1a6621ffef89d02bedc3df158ce0dbf3743918020bcb600c0a889c622dcb9cb4b4d4c6329768d2a0c82d3f9c522a354ff9ce5c1f1198af1b721021e2ba63f72ae89f560c8b57e10eeb5c87be6ea4ce858eaf84674dbd66ed4dffb981c5ca399cbfe13455047d7f77c2b537fe7b006911a419a8542de727645b7a3966e1b71282f44e1ffa8d4899aa6e6faaa75f8f38ff8eded4c3f84fe6e8af8ca56feb182ac1fb146a9a48a17073e2bbe60f3ee5b79355c73c182257dd89ad70c840d7df4a20d23571546accc297b6b9b6a350837c5720619f980a4e77965fb9a96977f6cb9de8f8e69dfcba6e7f0de09f41b958908b6ebf200ca5ee4c5f6573b81bc0e93dfb517acee6b2e874d4916b98db7d0d0027b80d754c0516901a4e35f8cf7d39f0abbb4dc4443061f1774bc69d764cd4877f60b5e056c4f13b18042b8f16c37620baa271ceb01d299fcc8c197d595f63370e3e723aa1fc61cca17ec252746ae6f19c0243901822e2d777606c77257109553f9c9b006633341918ccd5681e98c7f583ca1a6de006aa524c08fedf6aa45fe2129b21ba55e359f9f4dd5512f9c0dfb9f5a9f07f6780cc096ffb370c4307588c56a5bf623c213b058f6d5ebb2ac815e9bd360444ad998efb50b536371f975cab9b1c48abb2c2276e0118530b1b0ce51cbb134b1e392e7bbe593c59357d40a85d01ebbbe29db0d1f7cbddf74a0da0271e38437cd9aa2eedd9a4839dc7e4f8a533325796b22a44cda904f4e19864d69d03e09735da3e43d88d636f0b7d1059ac77600b63c7ef3cbbd843d67a6c5dada500b0d9678eddb775330a65dd23093afa1d7fbf80f7e6a09da89689a829d50b7431102ef568f6baaa3b00acd343c835d11b3cec961a3b5108731e44b166e18efdd67b5b3669833c0a6d8a84063fce6c678e8c81e3ac8a1f859e336606b7b85dcee47cbe8c339abf20db5f712ad60c8fcadf77834383a4c59d75762dd959297eb09412ea62ba37ff066e33f9cd24c8079dbbd36afd8785f72b9d442a311cbecbec42a0e891d5b8e2119fc98c0cd09b2a55ff5e08214f237fbb674a0544dda17be93b913a39f68a2dfc1a8b5cd9b7044266a97137b416760182c25e91d701db19863a2eea6d2eed99404321ea530d71deadfb7d4c7c8144d36fdcb36eaa6e1e8e56b49da556e5db71aa26139d1360df6547cfa0035bfd987bda70c26a910a8a7df8c2a49a32ea1ecee4d9322ab07783f3f2e6d3c0fd2c756b0ec3a5f8153626e36ea436361f8c4f7aee7ccd957f55696d488fcf34a3ec9ab8a73b0c0d6f850296d06db00f416971a8e7d85faecffbd3511a753b771c43857cf8d6b484604844dda80aae600796d823b621d692c2433b54b90673c3a15d730b7159410e67c0a378648706009a339de6068522a7e734befc085b43d534d5a55eb491e1dcce948960fee34ee8fd464bf689dcafde18ece32fc16f1a6574a0fcf10ebedc6a9e810ef3335f53f07c94b53769a0091114d940082e4b1ff2f4762b6776367492289cb4ee15c0a6c7993486745ab6fdd41561cf6859b4faba5685b80df2061660067027e6ab037b9631fbaf68fb94f11ad03cdab3aef17436693b5299035f59360e31594d45a008549ab79c3a3de633b0a1cbf4a6f10778a6826660875abebe58ca45e30cc9ba3945efafbe2daa9933ec97e894cede48466176218cf4ce083efe1aa00bebfd30e8287803c55eece2b03f9a1237ce8f53b97f99fe40fdaaa61e856102a27428e4b6e9a210a13255a902e02ed7df9eca6f3152df10bd225521cdb0f9bd11416557a80de5509d60456c2ae81f605642c6c130ae1c994e7df0253a660c91ec89e2e8fa05a6f4b9a2fcff23ad83ca4ad891232311fcd9c0c736ecbfcc69fd5ea75ff32aac0f580b633d7c47296af7fe8949093aa7e856188b021593ae6d1c4c9b0d201d0d8651865738db4b75ae195d62dce090509e2a56ca1b180b2b5bee85e49dd71cc3a4f1174602a76eea4bcfa818e8ecafa89f065fff31d6b1d4c5c74412fd26a4eb11ec37459e17fdf13fe7befdde3b9eac9d8652c3cca2e5fb2cf5dca4f0fedf73a5be3f89ed1e594441e8f8ccfee98eb0806af0d7b28e707be06899da071c069701e021fdab193daf8ca5246632a46a560308c1a3f7b6feeae4052b3b70eb50b9bb8caa7725574c72af6f0526952b931935496742f3c2ecf0fa1e91ad463596524a8a5b0528467c36b5a574823b0f2711cf60981a8a0e3bc7d58a6661e22c8e0a771398bfb3c7c84a071b07ebd666f67ae195afe52d21c9f343dea02175dd88ff6bf4ab5f586a262e639a6063558f8221a2fa6b150fb6c1a29375485e7d7db6997c9e94221bcedf7f17f14c27cfc66d978a6a2f9ea8e76258d6b58c29fad1f63ce48463a9f36c263539e18395fe02fdfd03397ed18377ba6706855f0df80bd63f8133aeb70c04703c45ef294a3f166fd395ca6c86b424db02f513ccf917738d21d8bcf2aa20c3861140867a54a1d5566b5c7cc89e6685a741ccd343bc46fd978c1a20b820abd672ccb003a9577dd3d5638827d708b9e023d55957cc11ac07ecbe4e9da7d31541ab07d30c466f76c125747b65fbae3137725225dae6b0f9dcc7108e2f81e4b52b5c0d601bb0998f1d755821bd2e1034ae3229d2fb8d35d0b9c07d8946fbf4b5e287437659a49734c94a00b269dbe0cd4d136f657b2c67bf4f74fbfd548be15260899532fb8c06f5bd825b21d4838f9163c4c8fe5855c8c553204cb364cace36bc91e81873f99d99b07601bbaddced6ddab59ae3e2558968191a19e5ae2da1c250a62278577583e9d02c3877ed3d1f0461499bebc1afe7bff30591f3ee0b14ea6683ba3ff22d8309ec95503a4fccf0c8697432c6e78ce18597c5113250b1149f1ac5b62eeee57dfbd0714ae89a6cba28b3b22028a4a9a95bfe4e7ad2ab5c9619e7218171d5bf19309ea1c1962773785da7911f9591835c2700ba5334a1a8a6fc4f4800731ff1376890e777a0cfd0c60bd5fab63af9992c5479d66250d4c727baff8c674059384cac396c52b4c1a95ea12bd41fc4509567c45dc04f0b59e58ebb209ce80de68a00ac3e583b62c516c1359b5141885301be4e24a957ab441cca0e68a34ded6ef304650c6115b512f5939ab3566b0f4b974d88dda21f616773896b68a9f7e615e1efadbc8c3c8a534aca56ee2524e759777c92f4dd03e8f82ea41ddd1c219d8559134f53b2b20813bf6ed379c89a21d157fe8301000a7e8c17270e3eca366f131ca3b798025bf60d3dfeaa88f0af28b2624fa72027858570e1eceec5cd5a6775f9959bd90b06dd57e9d5bf308097bc4e234e2d9ca730fe54638252d47c07d7b6e1f803a7d622fbf2bc7507334772382d7a680a623058484e997d614a22601a25be45a4c9bb50d0b4fba8bfbefb57f1928da00e34ef85e6dddf556673f3a9745ec3205c18074e259c263ce8fb4cde6fc143de5a32bbbcab50fb8aadf666c36c7a7fe0cba8aa9d97aaf015133ebd087d48e7cbcd61c039f1719959cdfde1fb2c31eba257e93e3b0ea60a40570cead70405744b0b889d8baeed932531867c7443ec8c04a5d65279d65f061540e0794c5c8aafbae4c994de9040ebd78cdcb8a0d3cca54a9c763b34939a99949fd4a14327a6c4e2fb251c18ce529a7cc96ff22037cca012ec4f613cf285a24fa8b1eafa7cfdd15ac2fe552ff1ef99d0f0ef56ec70da3f0f3dde81609673f02db3d23f67235a8bd54eeeb59bbca315b0e2db7573b45e4375503d5cdf7a0c27548249c14ac5d5cba06de1d0a707d59316b021f22baf282fa6004c5ec4e0f9b1cc3f35056d4cd1bc9bd3cdd0f44769aa267303f7e1035bef013233fbab79e3852b19b943d233cc88ce3a76e27e0b59acf2f23bd8abda7c3a6baddc126de1577db53faaf5e316d5c69eddc7a8b7a475239f28e68c60f7f6ed4d27eaf3c695c2af45c1724fa009e332d31b8fa7a855f3a842d8bb500a008d04f75598daea35c361da81e93d3ee127b1f81af4c86c3ae65ab7cbef4e28fc413071691cbfa3bed935ad7fa223d5b02f6de1fc14ed22425f698c9722869363ff4c0f2667e3d8105e46586c67f124b1a766d655b6c15fa847d60f2aa120c4cdf8bbbc4b130abf13bd0b14be8567d92b5e62a50d4eb42afacf80e93429219cb971f43812add7e245ef8b08da8c59e28b9bb1c9425c26028d40c568d2f483ae14bb03376c3a890162743393c9514855aca53429487a53e5720ad71536959e389afe2539d27589bfb0b382afcb9e8e05c72fcb6a3ab5c6ed0b4997acd21b9faedec3798d0dcedc28c5693cfd3e1654af52e6a9f268b96ae1078dc9d012cb91d539d20b38df701d6e030809d3e86ba05d46774be8c38cc34a43fce9a953daa093f631c7bc47703c97b33aa757679aa1b0345b550fa6db4738ab117b7a778ffd2cf91d4d8118c351599810fb381f5af4e3d472e9e8ac6674cc0487353e8e1912522e92689567eb40ba1e1607221a87612f849a8a66a0597896dcbb6de631745bfce2e7d969e2ca557abcce3b873ee6d3020172d37bc01845549dcb109ea24479e201ab079c0b618cc90957d520cba747d4cc04f484e080201339e80306d7e167cd4c168de036df59896e5f7ba100e71a8c0841ba43e820f158809de320aacca7365eaab9ce84dcdebbb117a6115d1298cbbf5281751ba5540a193de200052106b458b597cfaddbc38e5149f89255a16e5d8581983f8f94e00babb138a6dfdf1e182f54ffbb601b0df351f1dbb59349031a0d8579504755e594b68e2683aa8dd0fb1f155490c3eda2ff8d0f83d377182547fb23fb3fb2d42d3b09bb84861841015cf7e608b81794f5f077bfe82a5c0bd5b4b6e3fa039feb679362f3c967d94d07ca7e2fe07dcdf71cf8ce8dd570695520d50a5783a716381c8cebdf75f27537bfd521ff92d6d2b1517c893bb1a9cda0b12ce6ec46d2b5286ce8010ebfc49301f2620a701bb6769d7afb967e971a3bce8c2b1e81b5b0e05e11c217b56141eb271293042916515679b4efff318e898988f5cbf5b6584f7e04919e44d487111b8ecbd72b27a4f90481f25cf271c18dc551997097412765ab05c3766d6ce6b92138029c660fdec4692a2607b1271e8cf42ee1f883ea14af8ce83cca0f5d9d6f9af6e45b213c2799eadc1946589ec0dc6da45c41e49ff50df32109f5942cde627bb7b5aab8cb8075f223d12986f3c44011788ac1c75780812591505c7640302c89a593aab671f19a3d463a93a4712f4e9cede446611eaf0dd55eca45c68a1aff60faa019a41331bf664deaf0d9d00b3acc05e6c2c2f96d06d7518467cfe33da7ae2004e9b709ba82fe4196e18603c7db38020827accc886a3b4f2f197924b4bddf36d2f30e6a9471f7cfef3e1ed4406acc94cdf330a69786fff2aee6edc16860982d4577fa61063d4b83a5998714dcb12f8738efe93ca2d895de4003fb8e76a7dfa1e8f0b6e081aa94f7b2b724f19de8745abbd201d559232663e2938c95b54a7282e6b98e86887a86b594c153ffda44426bfa01a72fa225a3317262870db602413cc51d759a47eeea6d3a2d6d050462bfe63d0aac63e1df49f1b4b8183ffa41769ea958b2606e25669e149f03f56bd0c4cba6333c11207ebc8736ba634589940d1a95a40efed5d5d8ada66e483146e13c88e9dfc5a332915f5dd0129689a717d45e98cc31c3d326c79c398319f2098db98a95be306906d7506e82a09477e2963cb4c695d751d98e928e05fbdeace71128d5ff885e7885796a795f157a1ab9e123577d4bf954c90e9bb04877854c912e2fb402749be2334dd41da3a36404c2cccfa67c13535827c903d677a10bd8f248320b8b4b1d12f8cf5f8ca5439f7a43c32d39ffdc350aec0753163527afe4c5edb00a02b86f377aef5c58999b6d474c689f0cba8bfa57e218b37236d6d6389817df3361f5b931b21cfbc135bc09e997f059014a2e83c92ea497794a83efaa676d3ea6d7894a725d33380894cc8d9fae1e98ee6c80f064b40172eeea895ed53fbd71805011ec763b1d6b2099d2e8bdf126c4bbc9a751f5b41b93fed7ba1444cee87eb2e499e327f1e7ae692fb5e307852e19a9c1d9547d7c64187977b1bf7b0429867dde9f734e5330a2fe77b503e6be6ffdd696e66484baa0b1d686bcea9b5ec6e202f0097ba9cbbeeeee7540c76aff3db0e5871beb34ef4b0e76ba88a7b3595bd37491ac31647399c430ab0118bd8a42f0562b0a2000017b209dcaaf46b9440504073d15926110a91ee7764e67d4a763448a5660e5567330e79f5f37295fd3d63cd205c3c593260e654a0e8270b07fdd6760dbf98aa351ab37d9b85e928a036b0701dbefc63e6546ffb94fad38a95bcc510a655c5343835fa7e421c2de8091c44d45d7f2d9714819720d713f653827e97eacf47b9928cba29bb9fb69cfc054af947079aef3ea3b15138b721c7d243b32925091489ec59fd16ea57ca5a37bdddae9448e58db9bc9cd58c5de84f069c1197daaffe46345eae086a08b592078b7edc325ec8d84acc36cc78d70d6b53a262a073fe0c737ecc0c6af9a979e37cae8c204d9b8c0ae92361d666afa0709ef0394d9170ae7904ab7fa6c8557fed7ef328911547f657e40579f32bd6fc1a1424ba87c8bcce005f9bde1ccfe52b1709278f1567f05f9f7244470d41642e5fcfbb99c47f0208f387c2c0655a0102f0275315e858518aa027eef3c68181743d679718dc440d6bda2f3d82a3aed97271d8d57835b776e5add5c53c852626818d301f54078a7795496d7153ecf6f5a3548a1279ebe45750e3d7a67ea3b8ac72145022ce2ffa0b602d455fdca568444ec43b2b462d6a66b6c7474a92ad8b948bc7fc1cc8cb9aa7683004090e347076c5709252b12d2fea45b424fc9378afd27cc4a1d7200c8a8a7a52af488b8794306c6077289b352273c4a929547b51c31891790d16bcc16f3f82d79dc4c1fd5afdd31a3f909e0a94aae8bb5802e1ac578d642fbf982d5c18cef7fd5a6587eca5e01e5bf1299df6103beaf3d04af9f5836f648da42bf00de45feda1bfae116c6e7781f13c065ac022c3953a4066884824c4fcb7fffcfc91a9ff5c77d54e1e4c050571de2ca916c931c23ad6649eb249bfebb517a65fc0ab292230558e7cab4d5838bc29e77afd8d8e85da96c59a888cafcc1c64d9745ec3a8a0f757a5a46013c520c3e158b196e83d07bbdd75bfe963f9afb0940f7b341fd65ba021a6b12aa42dc57723ce06f6c9e2af7e4484c42dd6c1d56e9eef066551355e78528e9978cdf1a8ad1ff5db8702ee3f4a4589750a64591f026db918c3de42be5333bba11f2a043721cd1e6df0f91f0369f139787981f19898b2a0c70287a6bfe2ee574baee852251f979b853da5bf414cee5ab3ae1058754d8c1591dc58383de38b94e8b3f65548efefb5c74a1baccf2b74aabd43aaa831581139e7bef301f9b9e9d0d7f68f11d3798fe264ddb53bb9a4413eeb7a0a0bbaaeed97da7cff1bab9f082b4f26ac8c45bb9acb3e285b6dabb83ad8679a5ecbf24364e6cdef8f28e63cf40e6325fa43ecf7dc77a6c9b1a2918738fdf40ac232e729b6adc1a4a4df1a1da90ea86ce04f366e452a9e0c7c64656d82b820eeff70c035d329b8ad9d6c195d88917a380ee294fdab0a7326b7d61ad4caf441293641472d0ab4f55855a028a7870a8caa6e5fea696ca11bb49a38765ee3d92c82413900a1e16eb7fe616cd42602c8cbe2d2a3f19fe34cceb48cf3e3f05e600b7167508cca79f33af9d8ec8a60b936d52de9a59ff23b1f785c737ffadc6c258c33cf52c473982c61ea102f702baa26e923665a68e5890e6a29cb7b228c97d41975d4be6cfc0dafc7e05560211164cd454415c9f25ad44ba94dfc06b379bad2abeb987c9ba5971fb5c00cfa65b05ef351e911248e3d73b9463837f0b5a5c6f35d5af209e7e6b978f475391cfdb54da74149ce827e09d026fcaef02003526add6d6fe1ea2b1ca053284b07e5e59fc195d743325c52aac34aca3d019e0027662762e1850f5c1a29ad7bca0f8d2b609fa1c1d7e5876ea6d4122e1268fe34d567a0f5310404498c2996215280ab7d9763857e71f4bdc3b515364e5deb38977a7f39ff92056f47318b3a0a40e55d4af3a544427eb8796353583b10af8b119c4f387ed0d27c72bd3f6527a4595c63c6194218d602f94d9920693e3bf8ca06179432d67995a65e38f1538e45202581a0fc856406b44ec76d7b6da521f34e1abe67f2a2148720793e57769d481e2c86dfaa7e45c233e4c3c0369c34beafaf3600a6accf8548f61b17eaea0f2ac22ae65c2f0d6ed6b3e316394fe45f88e3a45e0296578d28db0bcf2cee7a198bbdf886922bd9c456a0b7e40f03393c8e0e04f2698359538189820ef8c9e6ec658d79754d768fef712a94e90d7555f8479ac8cf3a1698d763e2ed2e84fcf44df8adc9c997c012a3662f3a15cf60c620d05cd1c40e344893d6a2cb395351c0ffb06ada4a70becce565e044a3c16f3e76e0b23714b78b83dbf7ef1c036ef5a37d7a6e89e78b057c4572a5394c73292e6f7d8bef8e64bb62dffd3025a5c3383fb06c02337ab000f7cc30a61218a2c3453541632a40f1096d868e21ba9b5967211a04155fd9abf3a279bd71fdc79ee95eb3d03d1c5f311f770d3ada4e74b9a8173699a4812d0c58d6841245f21b84a93567c94356e75ccedb11761ad880eabf802f073761a161fa03d7575728abf80990221708f6f2c62d27d5c1a9bcc0fd7df1d48e2b8c709677efaa846eea3c0b2c38cb75ec720f9590086992efef94d5866f48d3e4563c1dca51ac24501d3cdb8c87a3bdfbd5dd325a01e933967cfdad9f04e168a72ea1976a6ca75afe60abcc3dcd768e5c44419109e18cb604b08adad6ce8d34933e840249d2f905e089e923552e3a16a3789890f7eb661fd482d0638f5596ba0a1c16f0bd4932551c77203c122373283aa42191f2c68f1485fbf6e2c30077273015e2cc827da4e7ef39ab7b1269f3c64691220d71eb35cf98448cb2d3894b7e80e0e5d979b3a25179a9eb88139baa8dd8511be6e1042c3ed12c0d068bebcb063bc309e0f94a623acfca8ee76e024b4af6d02a2d9ffc1c628553dd2a27ef9e1f659117bee7ac0cad424ca7f296250073019a597dfcfd905f09b55dba749e86a71e57b43ddcec18a72d8022cdc624adbe09ea9fa2f442d3ec444dc47faa0534e4ca2277d763f6d566a5c57aec0fc1526a3b7ccc58e0ca304c9b910568e64eec1b897492498a6b44245e8730ae82278000c03763241533156e87b9a95cfb0e5383b0deea9718159a231500bde113bcef8ac57e003ee67f347fd2ba122166c755d8fbe22fd35b8c0f9b739781d7ee6d1bec40981a4a92ec31222a72f9b9a9640376c714d522844408f0a7ebb537a735425e3219fde238cae2f6ff46fdee8039c4056c9287dc9e7c1204694739bfc76321511aa97225b7212dd83f90667a135f585c23b0eab91f949ac307e8ca892663ddbd1cf5b51d06c83a160f456b1a5c4076a8df87d406a698f77ac5ee8431630b3cb78feb5572b884211cee80305d5b4888d449027d660e0c1a24aecceb19647643b25b5c170c469473e5d9b821ca38c47e94ee98e4c96b4e30f772a8eff37c809d86da9f24ea24006a0fac36774f343760db03e0bd49de54baaaff73a6f8a76143b36eda4c7ec2bbd7b59fd8b39ecc448afa85839358f58e475094a637e4aaf0c697dafa2422ba8333e464b80d2b74718e7ea487375a5217c473e57e5d338f10c318d8e1987761a9b2d7c4121d77e55c6a5f73a4ecde8e80342ac4a4d375d4d5655a70a40d7c391dd19804963893f861213c6c26bb39346816bc8965d96b89b96b91031b45e873a4e0d7b3fa1a99719b9b1f849eff11b30ca72c929cca874cec9f8ea4b2d207da6650ef2557c2120618374db3af566af71b94731156f200d1f77cc5cd4f3ff5daca5039df1e34ae12eeda5c25567be3dc44c976e601059b37497e91715a35f64a70aed1b442d2ffece34637bd4a3baa93dd509cb1158fa7d740ab54698c490b454115d7fe9377a582b46b2f04ea24003905082fb9dd45822bad77c5bc013a1577141a3cd50fb60de1a75755b804d9816a4b58ffeba6746207b81f4dbaab1a4530afc47f032655cf8c180e265d502885ea7b08875a74bc3d0eda143ade52015145dd3b4ce1ff242e427683407e0fefd871142b1b7b80d35e1e7303c052c28673402c25c916b77c7e2a92000c94c3dafb295111a03a304a69497f6068327dd29a8c53320c0015884935b148d2caf285277d4b379497e2e10d50bbd29253d028d0e755c8e78d6df7832746b01178d8dca8358f4bf5bcad8555a29e4be7819289e654277c715c645d760a0fc4d8704c8f637098ff57dc5b3aefefa203d0fe4951992547d7bd096691ce073f1a581c07930a9ae2e74266895e2d34b77456b83a14958310b462a97b66ddd3c72b4bc67d440b7883cf5ccf6bcafd516a0ce675e6f6bc75d49ea9c0280b3a9d5b1afae6197e0356f45621bf6fc485750a9a495881e67cff66672703faae858d66968422125fd9daa82b1fa8cf8376666394cdf4b29e8a1ce403d585f68013a4ff0d85bb4fde43acc4998e4646b4810f6d2c1858313c5269811ee69ff99cfcac246ea697136f3c0f4a6d37913ecac8449cf0e16de84fc93f628d4d263103237e9e326d0912669365deae2b93b82aa69126c7d44a5f46c98f9b85bccf20f6fa3c54a25850f7811a664bc2be811de6086a946428a49f7214b7ed1ed0b31459f0f426654112c3db9be800d6e8261125c982fb89d72d0e034886b0ff9b747cb23670b869a9248e7c7e923ee5d75e4c0ca5ad2cdd894fc80381af21a7b7962bf870deb9ce0b80b5d8da59e3b00f97111d13a04d19f3aaedac1857f5cd3e9e8e1e1632a962fa19e89958ee5cb679b079fe4b5a084116898551e5d022eba8784b43e3bc98c7cdc846d8b0ebd563e217e5d830d1304fab2fdbe151049cd2e07c14b8a404ea932ff3a76a9573f659993aa3e613160d463a8ceb5d98802847682069c23638e766acdcd811f561d015f10cc3e6faaeddad5f98c2041eedc4c56408c34fc2fe5377c7bfdc83b6ee85addac8fa93bf3b885486e6f1b879e9c6265475fd1db6a296b3ecea81e816e2d1860b2464823fed2aff38a610d38569c15f8e0879948e3865ec70660e9939cf6d0a2c7a78cfdadaa65fc7fd742486c073ab386afd09c1b8425124f92c5d8d93725158fd4958f82862df0601d1a971617064c16688a0688bf1ce2b51ef689ce9eec9fa91983622546a792afcd0933a9f84aa6a5ae904d6fb583c80f625af82f3bf5b1c83da26569478a6ada48d0a30127962cea5b63c98c7a63874c440031969cdf85a42936124f52f08f381effcead068d203ccbe7f61e8828842f1ba7b2f6aadf6c4032e9e335f26f25bea239041703df89cdf51281808d90f1975b0d8369f871653cff90bf6abc3f52aff55a1c87de818065f7366527e3d0dcaf6df9837baf3cc64f51f8399e18d21d2deefb70937d48561435d002ff5380c2d96d5c6f736b50618af2d886295317dbec50892d84d9e9391ce0f76b6e996eb1b55ce2f515d617e3f7768f5d39dd27a762699461bb69de30dbc05c54a40eea92c7f82acf9d6c634431f893c277146e938d454a19a05a3a57a87f6b23dae5a9ba34f830a20aadfee1397d7be74eb87cd39b588071ab84385f932e83abfd3c1fa8c090c9aaf73d5c382dcb296e55119fbc07a23b07930797ca231183fcf0fbfd95969ffed7359e68bcb699a60c29674dde87cf7d66551e45e0f1e2b477a0763957847cfe4afb1cdd5f87a6ae53dc2f3bc58a70fcb15cd1c4fc802166a6929c4d703b1c52012a12cbb8fbaef5fd70a11b26cdfd595cf0f3333610ca5d93644058e396be1811e72c9e3a1ad4745bf839e851cd7b9c3efeb5125317a609d1f8870bc9e432c3205bbabee2313d72713cab7d51f76edac2f597cfc4107d563f90822d7bb9408984d89d41690b1d66476e536cb467dda2f059c67ca0d978220796675afce0e6d342cc93dc8ad4df7ed8bbf3c89d58634d173e1468de6d2311b69c9a5e5ac0fc5154feabea089c1bebe12f153501b25f7120c558aacaa600b12c7ea2d0bfac51b546d1b77f5baa516ff4b1d068c593fe41287118d0db7c876c95a29a9f04eb83e6b9c22e9d7dc3e013293f2ad9005304ef39ee0c7f3ce0f076e6f7f4926bb76f54ebbd38bf5c5f2d4ce34c000990427710f0f100e08075ed7e5cbb68113a2f8a57210680ad530c09e3696bdc5f47366e6cae0d75cc270ee0bbfa9674bfc318f5942006d7516e544370614028905e65c00133b42775535e30e78153c5da1121a183dadd25b1a38d3aed01818374d991ce433c354015d541a931f39188d8cc78fe1b9bd8fcafae0e27120a74d12cec28fe0bae945f5245f424796e7da3f3d96273cdeab981eeeaae155aa77f1af2c5b98346a4e4eebb0a5f9d38782f3a377b525dec1f46d64d83e616c6b47248e5cbfd54fad545866488844864b76bb729a1c5635e45c7c387859926329c9f864c17e2487566ea2a561910a5297f92bf721eb947e0df84582cfc597d0ba1d2575a221ef77aae7ac298ee2c76f9c629ae14b5e4f4e0f6b3451f4999d6ecbb0fbfa02eea7e4240a8d06dc26e278b4143a54db4bede07d2b94231519191d1202c335de93f59ccf392d2ecb237f6cf6e866c4f752a672f3335439537d4e2cafe7cbf039ce5587a17c69d25629a91fe10bb74f70f57d891eab9cd144a42536c1c227f9d79c267af476fa90feb48d3f5edcb958c5d74d3cb2e1dce64691e7fa055a679c6ec180e7cd0fc92a3b0e1e7cd84d77064d55cd4a5f525070026adf1b4e551eb3ba4d7d924d6eb3c70deded10c7a9ca6912d52c617d7d17a5aa3409805bf0366503afc31da8202aafc7b8fc1510a454d9888952519b6ad281c3daf574cafd24624c04aa6537fc54e626002faa9075e0921ae45e61cb200b13d5098c7ea33e192818ad1643df36e970e3928116538afeff796e7bd550d77e6742f87265bb90e52dd58073d5088c0da0c4c81f10b0d20666a926434fc13eeb56e15a280633dc3cd67a4eac40305fab56b9bf1e3fb1fd9f87409e78967c4dc742f2d240885b3aefea69715eaa6852898aa7db0afc4784740f72172ad8ed2cdcca4ef18181d8416a683bb952ffe5bc19c728a2a85e3270808fa6c6e7109942ca375f60c1b68c3731e0d59dccfda870c9925cb9ac2adf9f82d7002af9dcd5041c34bc48fb1541edb2ba4ef6ed179b91b8e529b9736896973bc49f5446e0c5e875bb0412a014f2bfc9be7692390cd5263bd67a5e8dba645d596e94a4ce9fb9b61eda0f8077f5c5091cb457c11e594c11e538c7a663967cca156a104bb305329204d695b3e8aae159e8b20fc5920ca20a0b4e3c2da82833692d40960916e958ef934b5b54ef51a8fbf857a9d6a44cde1d49544016fa89eee227eb77dcfcb91dcd37051cfcb2dcff846929186df187d94f5706b18cb9399590bfd29a850f5558516cf04e1ca9c7b65ca15cb3983d5933952a2cc5460493f6696efafb82b8896c5740b40d3b2b40056f7d8be2089df3bdd37dc6e73d38f91179d006190566e157ad433dec80a30ba224a687e32fc7fd1ab60354fa3f595ca926e3c9903aa7b5a649bcb6baaeff12ed5ffc6b4de418e9d235c01cdcb46335db7cefda02773c084fb7ee25bfc07a0d4a445bb0118be101e3dc60dfe60f8b89242b62159d8d4e98b399144adbfaee7f819bb2c34d39be88f398be5e297b57b1f4f77e296d36ea3102ccfbc4d299190c33be738eb33de3cfd21f9e3a0b21071f13b5d0384b186f5d030d48f69f509dcc249ae7c6da9ca6291a413b7085ed1058dad1ceb8f6a97aa8f1a1ed807dee4df167ebe950c603e96552a31c4ecc709e31ecad9b2ade3fcea54bdcd2ffc5405ef9862a0c0aa093e42c8574b2f968bcd61c45dd954782321da5d85c2f382ada1600edf85aee67847e5cb3eb99d9489a62d98934cafc5d7c2998069a528ea1e0053efa4ad25d7516dda4dfa5ea19f2a357f46d485f00298d26a12189c37301e672a458f0fa55f0331f8994fda5e19741149077562da8fd885981445143dbda3adbd193014c8c01a138eb0b22d2f97dc80227bfdb5445d6a1e1e2dfc90eba660a65c3f0e5857a154bac2d773f119403ace446427978e76bede584fcc2ee32f28f9682225670fd1f673f5c77369f0d13ab82386f675eba96fded2933308f52216f63aedd0d79bc70ec561a4cbb16917c26d982a3623dee25f30b7bb69260e1500adf29766db060969570e9a8c636d940b2868f2db6e94e1923663965c69e037491fac69b8c4e1060b9332e9bc8f15a9f18ce532c7948544a9ac1be670c3e2894abd3545a32f9160c153626ced4bfdf025f907b9de33aaf1c6e8fdf8bdf273d627fa28c19c612907cee2dd5fcd32ae66ec60e3553537001df0763ad6627ffb76a6143d964b732033a8804692a4efb158733306969879cafd628d088dce9d6584939e56fb1bf0bae1528a1d4b99a855652edf48d83f9894f37632c7e0f16c9fcf91b811ddaab69680bab1a37a273d7a70d9bd03289bb33e709143627dd1551b6e84eed6a09fde809889db9bcd9065352a89f7703f755048c305590626be789b61ccf3546868d0d4645a38f00ddcf3428a4ffb0aea0173d85d54f2baa64453089ea2fda00ccf951dd3a9644fefa7e36741f3052d1effd17e374f15f7c68b3bfb3d90b74279138ddea88b283b758c7e4fddd833308f277c3db76b77147e1b0e4109efaf321b91793704b546d8b1ebf99229f34b8ec1b5476a60edc626cc699cedf8e2b4f59f47c7db3a3192290fe1421081053faae9d27923937072941a19cd3ee670262eea6aec8af3108ea1285d73666071121dd389a7814d65cd3ee19a73171797ca7826ff3f174657967ad668d5e96d32bc89ea80f57a8cfaeed046c7f1a43e6b6b7ea1370db5bd68d925f67186479405c4d2b2e022832dc639407d47dc0242b0c0aa8508e8d4f60766eb2e577dfea1cd5e58103cd50351167e976a232ac6ab0a0250951215911525b90294a08071f0faa5376143cc2fe2b4f6f67123d3cc0eb96309011017d4d4546d8417d8aaa68770c9305ad0960b1c9015585573da07ccae8f10289680c251306f68609b0bcf9b85d4b98ada6cce45b9371cd836f014688600f4ce2eb98fcf7d32c8546095838b7af0c188d328b2d5ef135ad506e5afbc236edeedfef8a3012ee626b3a2c5820f0d44ef329694a915c124e10aa31d9103bd0f621fca21cb88008f0d7b7cc4f505d5eb9675c10471871d55c4e456b0a747f0252cb4a6d95b5df3766ba7f8c9bbdca4703cd3365c39e5e02b1378612c2e456dfd625e4e854f1d2851d9c1eb859c5a34f10b947869c37be7dc86478a86a308897d9d47288a38e6d86bbf47e7064dcc0b4b89bfddc5587da1f2d4ff4e5c6b71332702ef29a6c706b163d378164b921328fe30e00f0bfb0ad544754f21334649eb0892aa47e3a9a8680f54e76ba088c8df6f67198337f4216226ae2a3c3eaa1238aae62d15dc9def42ecb166115333782241083c1257b42bfb92acd065e79e1c6aa43635c18fdaf9ea19a2eecf035be1b0f895332937f53f1ea28edf83f335f3d79ee3663ff43b1ae471fa0f99f483244293148b5ddfafac02cf38480291cfd458df9bf7bb70425becdb287c295d9057ae5ae01ef6cc4591e2630efcd78a5b199199bc56cb64b159c0dfb8fa5e38215f728f29173f7c5cb947db83562f6bb2dd9f544d88abdba500df10d91e35eea0b505f4f228f09884ace49d6c58807d8af2d3b2f8c278e8d5c599ec78d5c19f54def103882e30973396ac50eaaf3d189454a8d0cc2cbb2676cfcd9654c18a7d7c6c43ef0aed67c96ba68af1579564e69a9fc02fe179420cfefe0e2c1a50b64aee2e56ee0c13207801a668e4ad9ac4e30e226c3bb254f81e0016b032c2d0837f97faa004a0367d92c99462aaf50329dfc024353fd60edfe43d70816d8ba58e1ce56969d364596637f75170eb626be50e2701186846ce0e16e8e9fc4778f164f693259d1868d8f8a71755a1020a86ef2847264e1e829da3e2edd93644d108e7909f7c1f9e6af6a2b30d0466f1e851766e24851a72f7267a558a7cc7ed5101a5b2b3ee7aafb1d6a31f9b875c7c515408b87bdc4aa7fb0850aaa6faf13eeb4d423cd00244c271b155762130dbbd3e362d37d7d73a72e97a190911ecf96946e1314299c021f071e4e9a7e6eb8fa5fe6ccef73e0aa6c9509677697051927130ba618c59579c6453494ad76b5bd95c081f22d1c5de72ff2bea6572ccc00cde09c21db1b487fa4c813737d5e3b72e774b01e4ef26aa90475c943410c98b8017d5605bc60a9b55b8e1445f50856dfae17dfde6e74a5b20eecc8b6314cb6a499b4c83b73da8afbe4e1b4f810308a22ce141f0d31e04358d75d7020106a3111bd954e4e2f4fb15bb047810f25c7b3c66ac85ede00e238f97e64b1c05057fcc67d7d25ef67d3fab2a34fcfd894185b82aeb639ae9dc9c5ef0d3d401f3faef98e1b8f1d9593d2d4b7755d5a49c927523fcea877743f1fd07bdb2d620aeaa6c9f816ed8d6007230dfc047b737bf1afdc437d762acd79e3315d6177378f857a693db21efdad7907b470ab3574080d8697ccdb7943e6a6b9d938d261d00ba6f5c1fd1ff0dd657ac8c6f631d5dcb431f2847ee64fbe217387ab2988faa0baead16898ab20d7373d3d7fc53460e61757cef3bc085553772351f3e4f97e88f47e3aef7d5329379494171b3603656462414934bcab34f735905bcc6a8b033b583084a28ed2a3c88e3bdb123ae5032749f6575fe8da5c0688ea39a63823f5c52e52b62fd6b50da4541c4a128976c3af773b3cddaf699b08f01be38571b9b5b94574772ff1d1d38a0e093b65a8871629ae5ac5b3843683a399222af55a21e9de325c74d4456ee9dc60189c3778049e352cfde629cda6aa42661492e92c3dac933c5e8fdb57629d67ffb28aed00b0bd08f458cadcdba7c41fc4112f76e8f1dc380701e5db2124226f4b94ad195d76273ee749b0b75f8ecdbdad4063e5013974c1a903dbb1f8bdb1972c60204ea68d39edb0ac029117da04c79f236347c3d89beb37980a4a3298b8d546f4fe69f428602ac9c5fdc0aa9097e2d26c758e95a87598ef6daeebacda1ae965372f990de29fae38802b7ce309a96aca1611de8f28c0ade69fe58474d7496ac010e3260d8a8a7ec172295afdfcb570aa5b2b47ebf8838d35c0949edf45157fb3907f0df23e452f06b91b83a2eb22cd279bba8d442fd2e4793a97ba9482a7e34fdd3d2125c044851209829cf0b745803acf81ba0ccd0314be84452820d998cc3961b4984b34885bd6b05624bc962c755ae3da5f61771485b57bd3aff94ee2dc0f0669e766dff0652d87210df75b9434326d2d5db1b1b0a7e0266f7dba710255c39f11364edefd316d15be745b0d264f7f13ec4c7c7aac04ef3280c28209f1dbdea4f47691ee65599430c7d34dcae408e1e3f311f347850b36d23df2771b03849dcfdd2043bfaaa3be03c9abf940775016e520a02ef04e1abc119b772a4b1ee02803f81056f68fe6baed71b34a9fc0c5500f5e1d13e22b921e3a233bc4bfc2783469f298776ed2e2ff455ee4569cc631e237a310d09e0b448ed2993dd385fd9132430ddaf92e4fc61f8c81bbed7882265981239a8c266b8eb1a0bb4853e35a8b41d933fbfb92149f7eb87ecbb3356be3eb83526e30f79eb382260651459fdaa2f17705ddec6436c280ee071593520fdc61b19c26d043cdd4a8046c69d7322298e1ed51f841ce0c022355caed99cdf4402ccb18965f829203c6dfc861be61a693360ff61e63cdeecb4f55815357d770a840e13565968f26741ea77ddd6adf3cdda109fe437ab547195126f3021f9d9dc4608c5c2bccea3b54a914511d6bb0ba4b337e0f818bc8f46645c97357bd82d0e36ef2e1e0d7a5725d241f1760c0706e8529d865941bbe440fddf3566ac29bee2e2cf3a5e5173a392982981eef70e650cb46c0d73a3ba5e580bbbb8ba159cc315542071d73665746f361b4f639ec765ed3fd0d347bd9caa2282723f9318a4f6a723e13cf7a374af20f1635d7c725a1a274b18ac6fd8df2cdf6141e11eb8c64b9b478f302531b67a8f0b5dcd895d5379c0d4993ce9f4df0d77424eb756103890deac81d808f3b52639d69eb2552d37cd1057ec0516ac7d5d1b413528cd3569e4c1bd4a57aa56130ade64b1042faaa80a58c3c2e13d2d738a60de849977317bd42d2c721365d27fff010eb72b1a71c601a5ba2e38dfd6ecaf27b7decaae9b54946a3d7f5a226c8e2e3f6d6c22412e2ed17837edd94bbca2ec8071727cf62766a9b71241735c703d05ce63d022127776e6edcf21562cf49588a73f64cf145e2f475d521b16a95728f66748ad1784ccb19bfad2f5ba59d4a23cd3bd7964b9604ff8bc5849f895f5263b385c23b454da7d0cfcdcae74ba6d47edb27397490fe543f251a2a5e42310f3e4ab20fd9129a89cb69ac27b7383b078953f7a75874d46739a0ae8bdf9de964eec779871a01b931ed1087c968c1bda017af295cbca1e888cb5faf2aa9ab569ec4f8fb5fabc4b342bad40eebd115a188d4d893985a3c2edfc18a473232d833964c146578c93e2f6545dc2c7283a7cc9bc024f225d910e58366f000c68164f0320b327dd1a0777ce857148c89dff9e4e6e82b5928d144f6fab4ac356f0f8195b90297e2a75718da764dd5b8e8e768b1bd0b6a3d157770a3edf55e3cd224e0e92e162699f5962c2ae1362aa4cdfc368bcb272f1d86dd59c72f3235b4cc2ea7f190d78410fb01a49fe6e8ff56b8a0a7fa1aafd20a6a0afd04256de69fb8721491ca432b41a9750ceb5053b29d247d46ab0cdfd4231228530360cba5a2f16d7a4db589b18b40bc47ad9458d337ecfd3b3e507c05dff2c6a3159f816d26153535512e561492375eb2b321f75d7f57b4b3de9d758180a5b548e6e66aa843ce220dc855c03d9c7f43bec56bbc65a6e7753586e83a88c2735eacb6a170d7b72f97469bfd7bb9638bb1ee7a4df47dc1346e5b979dfa46f38127aaa73db9c81f3036b0b8a9cbcf8bf5d84ddac4bf2d6258d73c148287fdbc347d8722b8a629a5717451e242d1a2813fb44220868e7dc7d41ddc72ba0e9810aab2675eee6fd9cc2e854de6dde070aeca0cc877be563b270c5bd7becae9ba1fe642b4b0e2689699a69b979c802d0c0eb685e6f28c5a0e24a067fb37b8df17c354068513b828b8cd43cd5d30f0e291924dd7874548ff50db1e77414fb740dad0d556792a15b1495ab4037ffc6d92ceadcf97be668fee61237dad97ef57cd5fce6ab100fe9fb4816b4d59f93bfed2833c76ef0935d3e4cfb4abec2965eb857d20067e78507db29dc1c9a1b1ba1438445909b6a974e94a611b4cde9a35498d4c32d67594485b221f9a251c10729f56a9a315091f50a4170f113d448d601743cb7d1aea2548ebdb701edf5f5552914f98d7a8428fd0ecd69389d77f25088785762d6fcbe263b79e0a6ebe516edaba7668aa1a13163cd01fec4a2ca4ca0d19f4cd741a99704b47942f53fac05d2e90e84f75a975567cffd55f3d6227b5472164b8bde06b4818e2fe045bc02685dbbd8019b2188f802ad6908cb2c3ec272541db5b051ed95ceb15c486dd73ed3e2ed526858353cdb1c85165472ef21bff597499095205c1b28c351df18d6d9b4ba557b8ddc093877d6dc96170b9c48c501be7a8b4fc6f894b20ddd0f31e4c2e891adf9bb853f1360c7628453c3b023d38b84a9741b7ed88478f560a52081efb2f59b68ef880cad7485fbd938f20af9e71e32902bacc9c02e763c719afcb3c8afca838f223f05750207ba56d3c9e23f56f784cfe689ede1128c0d5427115bffadb79edb7dd02aae8463a99750599602eecaa0b9d30a949e77ac79f8369d247c961747b90a97fdd1366ef7ccf31400df1bf9474abf57e7b8049b6a01aa7b9fa567e5283e60fa237637ec9f0d801027b41550bfcafbbe0c48e22007f1229023bd2fbda21ca8261de65c4ee52a2e91fba66c3c30ea18713094f1dc823db8f8ff01ace364339d24719e90c61f145be22b57bcb64dec2aff0a16cf3a8c85ac0f23463f3edda4950f9e66e85dba652fd767426fce5342aa4bef1e5662aad7e7c3b0e727aefcb71f87351ce3768d9985ae0c4d4346e0ac5304e2b5a2e008cdfe6d15e9b1aa8935a29bedb0449ab53a0132ce53a76311e929fa781bfa4926584335389aff1d0c089fb1af086593c604c99862cd57381f09b07239a206b788e512180cb3e88d9b38c4ab8388c4ee3dff6dbf8c62b38b08d5ad996979b531b67aceec552b70596ef090dc326f5f738816db6c6159b496a9721d9acc1fc8fee712cbd1584552f477cfe61434a051bf328dafa466752723605848ff9ba0a191f96ca929c641825c238b942a05da4727a414794a1c28588ed4c16f460aae1674506ade31fb71286383fb7ad081d9a9fefe1092372257e5a2f0d5311e1e00fc772d5eec947a82db4e661d3f3bbf93a3ca375c1bfed5b8be9f33353132954f00c324ae910cda7f5e13c51292e0393601630d4d655a4aafde7c682955613c88f825a6ffc4b09e280b743dcc6ceeeb8048e618597c6052e8cd23f9c6987c7bd6e2f163d7eb49f2739d708644189dbbe7d4fa8cc160fa173a8f87d41cb98f346b9b99f13257edb9d570cf19382a3a65eddcbfba15fd23ad898dc24f538c221652b8b9532cdf5dc245ad515653d93f333bdbc5a95974c8be8c2a9185166d9e33fdb69eea0f6099bce92fe165b136a4461dc24b0082cd90e651ce6f00ee13f047317dc350e6d066e379ab79e23679e7feb5e5e56391c135176d776b70d58b543da03a4c540cb9d4f6dcf9af08e07813982d1b7a69985e4004c4fe580619d3893f3f71bd9f42f492184221d23a867068162169c1f7afe62c698668fc41ce9cae4a66e2a379dd188b892ed56b5874ed23a5be44fee37289e48bc8f21a2bc19e9f2610f64f3f0c3328ff3a6e7e5509ed68a9eeea5946acccf39dc4bb480528304920ea57cdc103a847cde056db980d718f4c4b89a6c6834fb3eaedd3cb9c5bd83f1d4b2ada52a5dddcac0c99602c72eb9c815c63f4246e6dbf4392b5a61b599f4f85ddf650f87e13ac3e7bcb927ecb78ff18a2addf0d2f9ebac55705954f3bd9329fe3c4767b77dbebec083acbaae03c62450818d09daf0c38ce6f5531f504f960a29cbd3b0bac405cb1687f4f782af662c23774816b398a9df2a9e67a8b304842ca37ec5277b6edced070393eca45ceb0b8855f62fc53ffdc5e1a4aac53856788fc8b03a52d093d183c4b24890e1f1b960367f6d29478790bf747ae68f36c6191bfbde6dd77dcc57911c00f0b52285fb061217bd009ace21a12be5748379253ea773b1e6a67b26cc640527041ae78943ad00a175b1bf602dc8fa2e8962830852326c8fbc3f2856dd52e0d0b8d76df387ebb1e07154399a57d974229f15927209cfa06383ad15ed75e3905cacf5dc6db5095d6633261c3d76800535311d8e46fd864aad07ae3dace6d7d39ce9901358b55808c90b6ff37fe6f3f910cdb642776671465c32a7c968374cc7b9f2bd2b9356a96bccc5904f18471d10c6306a156c552a3799a0b775e75e3cc44ba4decb01e85b96c945b6f5eac4492557c1f71229adb7b65b13c6b8b2a4569193a3e238e1ac75dbaffe407865e8c3e7a4d93b29aacdf5ad08d1049cc5104240e476687422dd5984137cde6ff2d7571231cdf977a45b7ec0f94014a0fb737bc481eb0ddd318cdf65598940ca022d2184c29302ff3b6f42dd7e9fb09d6357633aefb2c4b61110447934c9a6ade8434ac961f512e21a28131fe876c2a5d13366952f0ef95fbd23016cd7332ad1cf6cf66991d2bb04bffa4fbe39b4225b330e6cad62e3001ac8325bde8c702875c4771b37077b6abb889b4c6b9acf4a184af6d42b4377281e881d75aeb42221f99adc93cc8719f20d5eba3a2d07b7d0ffee0d1e876aa6e4559960aa90492c3d47f6cb3acf91a0b834df9b395b70b2d625aa1ad223418f750a5bac51768fa48898bbf4fab88b0b37c8d8b1641a75e1acd910e1261c86bb5563ff5b88a2aff86a551e9302f2257cfde577df918ce67dd20e495c9f2c5cd161e3c39afa6ca12c97f436735e221bba36cb7a09d7d6f3a3226e49db076c39723aa734c144c7cde6cb2f9e78adc95c320750c60ddc06a5a95beece1ce1dbd7d25a094eff2a661ad9322deffb2101f8a713bd3c034e9a1cd7a09771b4c28eda784d0f1f27036b35a6a69dc4a80ffed5181ff71a19b27a8abb36454775f934c05b9f35fbb9fe57091eba7a30cf5944124a9c618821a5befdbad7f18d0edfa7974beb5a6ded8c3341e5127c9f27379d9073509a67ea0a150db4b8c73452b5dc9d2b55995155aeb54a67e07596e7b417e745abb9959efe14b075bb2d651b2fb64ff42abe9fb233328e94bcbb9e17b03af959887ae39cb48f0eb0aafc0f4d917e18f64e4b455c4561221ed1fa2ac25cf98b0b7f504b0a68a779248595fd4cabbfa364910b8b9a61bc18911fe1ab8788e7a5b1201d5075c12e04e6697871f8225ad25a55a012d36284e2890bfc58df3a595ca4732b8d29649aa8560ef5e537a4e30d4a363e727b2f6b13b19d04029903db1c5005fbb898dc738e843eb0922e2e7d0f88ddf00b67452ff129e721817ca09bcd538b691944e188838843c3f26ab6fd58c936cc5fbafa2a8859661aedb27c37ae0194d7bf5679826b5075f8c43c09a606a6b6c276a734535c2edbfe2608077842bd15c8ff1ef24cdcea1d47bfe67e4ec36de46ff06973d2677670f68e47a307704895e4e6d09e3c2a2549150a56a6f81ae751f278d3ca414802e998fa1a3abf4ac1c510b59bcac60408c580e3a9f42ac26ce2952dd219e199c43bc9bedb72941425f544dacbd19e35ca04a20b812d52e55efb56d026932bb2be073584a3027cdc2e0ace322a0f3b55c9b96f18d6c4096be66c995a3da9b075043e82ebaefaa576dc6844866471959d09ccb79362f15068b21271d324c4bf2f7ba2936f7029c7a69b544eab517ee81573f81c40e3fa73e4ac2b1ea71fa8d92f06c3ab10a89ad60d675a4884648454af5cd4315b39c4d8a8be95472d5d2a65ef9f2824356ba7f33fbc2d7f1ec5069c37929f2e0cec1bb56408b32aad2ee754cd7411454d1c372f5c1a47aed0e51236dbf8d0dd010da8f31dba79d8f4655aca31aa4f866c0b8a366381c0370dc4a78194d54ba18e28277ec591ae18286b6728c3465434658cb692da74b3da53a797719fc6d7c54b03c53b56afb8bc532fa46d2706f6ee6ebea83403dedcc83cef2833636d731a1a708f98b2a1c062469152cf21b17327293c26df520aae315845acf2c1dac344adf383d558908e3e84bd58398f41b314bb916c18ab5517b649f0519979c6afc0d752f430ce7841a676b10dbf07d038e8a34212378b5df2318e6b367087fdcfb1d1167aaed721313a89fae2e1a62f052f3f7f1b8bf801c7d7875dbc68c881a77671f76dc320850ff3c2aad089e2c744fdfd686c5c295319f752484e86f3aa9267dbecae038d37481383459fac114b2d248c988da60e7b182739d129a43b4b5cd4fab0277b6de86fdde5c19f1a655fa636858a2f84f48b845393175d50a13655d155a19975a20dd8844390532e8fd49e4f1beead38ac5540d04b21c01cc7e7905e63eaf148c8e694561fc8226fab6fe86a64ff0fb3637702f0e3927ddec3f70c2d352e7d9d1fefb936cbb122ea62eb8823afe8efa9e18618102bdbeba1dda2bfffba40a7dfd56c42a5d4692d0028cd9a8b577776d33d1f6e7ef146aa05a56f7ea17286ccbf8d3302a124901c598bc7b52461bdfc62cfe9fa7b5793b8ffe1633b4ca047ce5e8a85eb0b79a573a80434bb861908ee77b14eceb34cbcc27a1507ad0698343a43a8f717cfb211e9776a7699e81f2bf90c19163c96f665afa02ec0a1c134ea5148eb2e78121b422bba7e7e06972145a9989a0b18bbb9ae4e43d1108a92d3a5881eaca50388a11b46c3dc686f83b7641b8c11fd26ce73fdff0ca7100bf809d4ff9a3c56c181fecb4154ee14104e152a9bb3bd7834a94c43e90246f831c9f711432e1ce540c2869c6ae072c3783a6b3b9f132c3b4e1eb1b0e264109a600db6b60d2fcf3daafa0c2ab5db2947b27893e876a2fb7d1d897ab016a6bdde1e63a264603e998816f0f8e051649b7b25a50679b6188ee013c6b1943ee64f91f48595ce45cd7221a57f26284112a51a3c5247d123b0a8705573309665fc4b767d3eb1061c5d79f0c4a0418cc0d1b474ffb3da2e61494c2175c9dab28550a9e2151de88725cc681d9170fdc6c4ab3aa9adb5bc50f9dcc646ad6dd87eb7af5b8814b99cfeb0c736917ebfd7c488e07de7585915d572a1e038f2a2db7ccef60c446e9ad70ff7de45c70d69d38a97c84b7c37eefe527bd961aa00d6a48114b560c83c6d21e062b4dbdcc01c8cb01176e83d5a185b30f646daf884732d48e6c7b2ce0ea5bb73aec27ea6d375459a69878839670bb7e2d2a7facd314943021c9d5922727ef7902387d8a59828697aca90eb3c90c91cdcd828ac82219222a614c7d57327f73915f2d025e239f5ac47248af984ae1b342b0c8e6cb74de109b56f95882c0279b50ae513e51355c035dab114ea553256f632cd387bc29eac5d2bd5fcbda636383a4420c59385d2c10ae564d24a859d6954995579d5d24bafb6086e1d305007ad9b2dee5be4654015bdf46ac46b97d44ce1ebc487f7c2dce3c9b821ecb2131beb4b4f58fb68246b6c0894ea57e91c366c3c9e82e72bc3debcea331f89380c1d0340a62d64c25c772b9ef8c425e79cf6138dc0eaaebbe40b4015163c3c07c5cdcdfa1441bbf6378103a49f40398095663a02807962a33d15b4a84d6db1855e78c97fe5abeeb46fd635d6a6109b6e3059b36bfe254e9860e5a430155b12fc93037442cc64361add40744f773ead19e9422b54df0c2fc052ffd175eb1011e1efa6031c30e466c68cf4036e9d1aeb37113a18994e7f31387d6729a894612d821370e42f1b9a03506d9e6959b1376d690729891907334baf003b23aee67f57f03b627c8cfb8a95aa13404a1302b232a08e226814d51d5fa1683bf0e591d8d03849c09955fb39539e0cfd45d9e78ba0021a474b19ee4e4537ac36ecdb0ce8e37af5eb919018f12de29d5c57359ced7715269cbd094c536a777a2f526a9adf8eacfa70bf04b4d2172eb7d1faf9e6992c626f231b741d1e691e4a6be951a30ad7580b0203e721349720c6ecf21b4ff72c9ff3019b81550c7ab3b61d9b379bc7bb1b241e2be70ff396ec031ad618c459fe6898ac476f60a6499dc76023b51274149bd722cca87afdecfd986922e6964ab7e90dbde8f44f03b15c1cc84f8fd3561e18a90e6e0bb6a60d29fa3bdec0986313b0345acfba6613ecfe259fa6259b0c8129e7856221f031f9447721171b895f082d5c6a3361520385297021bc94b55886aa01c205205d15585f36bca895ffa40641540fbbf8675b581ce263e732980cfa594fd3c293c26c209a544a689de4542dbabed0d63d092f5d323f9fddad14ff2c33083e6df869776cce3a52f5f5d5a7ba81193e606c8ced285b18a0034fc439944ac3d7a3c77d382b35db69c86e1dfedd94bd0bc2bbf1f007bb97d54f99f9bf03c4dc357b344b4a88217cd370fd67ba437021c43316c327f6834ff8bef0b574bf209823da97fc77648b945049f3f10402d4ae82ee3b744847d830a6f9bf590c896db73b22c0afd00783f5a2195e55f0d58f1c755eeeed00a93840dec79a8f5d25390894c7a9fff8bdf4f9098371632e1643af5fb2ace456da90c12a41f7a00c537a7092717adae9132e5d63281f7e62c9a61327ff8584f07b5c8cb35715a3c7dd3edc9a7d8e6e7fcb08b2b30fc73fb26872f3c1b5ad59582e33a37c4b218b0e84746aae1d5f1557544e0f3d77971385fcd0248837e0d2a4bdd0a18c1ee54d72cfe222f6c51ca2fdff6c922e228ab3d75aeaca146845b0d6933af744255a510464e79184269a5a902f059237091c68dad38c907692d253fbef999ba1f857773c1ab444f44a129eab51570cb387dd6533edb60c02662f59994b9de35549aae27111769190bf5dbf08c467207455996e49fc5ae157f3c1f79fbc3bd7b328353fb6019b83d1f20e04537cfd696905934e306ef75235d6276da155c777f3a170e7a63039dacc8e7f288ee984096aadfc972115f2db69dcc8d598a9d5d7a65b5b8ac330d00b7eee1d57b55a85a78058cf56be4a215fa4431653cf3264d332a3145e8f9a7cfb972aec174e2d141ef8ba52b34715011f13e21c4fa75a91272baae00ece248b9c9cc26237c33b6a20325615a5874a776ab4477c4840cb672c47586fa917c2d4837893b99525d4c5b6632833e4f5e319895712cba8217ce4a84a6e5bae75dd3e414b572c5a39195367aadbb473a9bdb1535a06bd3431d9428ef5fb272e458e07a6e4b975679fd2cdb79d1c3499f4bf19b9019de0302f4c2b7feca042354dcf80b5c138f794255db96d4e45123ac322579accc003bdfe6071793ee5c71471be0425116aafdf74900ec97d6677562db31c8783d3d65492216677dcc8268751bcd3b6f18ba036b82e15957caa28272388b4652fd6fe52e6922c3a9ced2bc64ece6646de28d8b63cdd65b73897bab437ae1436886bf27c309ffd7dc4bf66746a0cf58a0a0c890cc58b259c7b81545325cdb0c5a0224735e05a1fb4a14f0af42d3785cf96dd8e5e98c8dc7b06d7d183916e923473e01bd6d1a90909f106a6e84caa4e553f6c6b4431e62fca7ffb4a7e35b10a74ed5ecf5def444eeb521e969937a36b719a172556e6a9352c9ea3b7dbaa2474506217239730a8a687fa96d07b7b0ed5b4d987d4de7daa10a6d6bec15ab3ff37c6871982a1d157b3eaded3e0dc84d6a8584e6fcfd92bf97844b88c26cebc512ac15cafdb4903c904a8b89491696379bdd36ada9e94809e00cc8e30f55fd58546060609b7c8cbecd8ad4fec67dacc7aa45e9ea0cf288de1870971e8d2e26472a8444723df0b9129d7fefc71f90c9002765efaf302d86573b07dd69ed25ce7816ba6fd3953f6a7482cefe85211ecdc23597ea33510727c22b66d7bfd31895af611aa3247c76971d2f7da9f2be253795325932646e65fde73f7a8a48e46ef6d1283f72515f0ef52094a801baf800b5615e95a9fda9af6f8f9f6ff90b9b1d8ea90d6a7cd917aad297a9f8d55a70730ce6bc65793ce0c11dcf09064197290c61a851576fda985ec4b353dbe8514e94e450817c47b4081b8eb9dde1ff73a8db2cd4e53d34d97828d339fb1fd610fa9c243ed041f7178977f24a294480f500130a4660c45728f5cad8f4226508e79e369577156f9bba924910e9938d76e073192ec70ec57beaaa5815598b45f1f322587b94c7a9ae4354605c020c24eacf7b1817038451151ec9596344e8ac9d9c6badfc3a599e0c0434a5160db98bdd2dbda81be3cd82ab2a57bd3370d3a6a2aca7ab58d3922045bba1e25f8fbf3189480510b3c57271eb90228a4e327f80841b0f404b5c8f2485b1b48f86666340dcd15ea3b809ea0a561574fc650015f6434eafdd03eff6ddf911fe649041b447433947d8e63bfb2c385abcf1b4c38807b415c6abeb88c309dd90747e634cb7b75b2b1648ad9ef14fd1652c1123b5cb6d999ed8b9be28df55d4723953dca57ceb34dc6bad6833435053a8d2b82fbf4c3636f7ca67b9fdf25f109d02ec442e874046338945bc7ac1e6743837888f891925ee148852f5111db0e8220ecd02cf01b629a68557cb0ad568f47bcbd177ca88bdc1f450259a393d8955cc545607f801b79fd672243d5a05b7c22b7e77c24eb9844fde2f6c4b82d2b34e075039732cb21003d4805af4878575d40c9017b6d9a7fc1dccec3eafa279b2bf4b323403141a94ae3a6f54ba2b1371bd39e7a9698c76211ab8d14f0907c6e618996cbf46d6f2d2012557d6bf17c9c35ef59fa5fa35fd300168908e4e909dc9f27fa24e72c72a569b1806fc74a372f7a46ac9af922f2db8d5b346c58c8c81ea3fa0415a868be8c8a4222f9e174d567ab5112b63206b40e19970fd74a2fb6988b972879feeaa4979aec08d8f69aa6067d88e5de7cc1d11bbc75bf417dd14b9713f3d78b7b1e0bb8f8a05f12a3ee591b726ef1cd5affe7d8d1e6176171120057f4b8ca233af3e2c278e1a7a26a2c0bd1d341928d5d7b5f2dc3578a2d425783011f10b03fdd0a99521e247cb7ec1b9e561d9baed1b551a0d77686acb47d878fe5635d3a98988c8659238151fa50612babad1c1e31830f6936a1557c7795bb2b61b078495b92de29439bbc8c40429afe4d0f8c52b82e0d86a1a2d04fdc28f873d415561ef2cfede8518cd88b72d2a4e19ea32dae3f7ab352816f309453eef936689850a8aa53b7cbfff4c6301b6e1b47ac811273820749c5b40bb15d19611f6ddc83f5009fc071ac155ddf62159d9e917d0b0c619400756d8e9e0ad6d49da5e9dce77b135c2cce80d3a810a1e10bc60831d46385cf6b244e3057339667d9feda57b1086349814fac9db6ef8c38a53b4c2479e4a371e5f4e1f8e366847e6d48b5973dcc1b30ca52699fbe7900177f33cb6e0c7c3c9d41bbe5157a781de6fb1b11348a7effed0c8a039853420b09ce4e249527ae2d2406e63debf49b8a29e12cec07424d8ae4462d305dcf99739a7c5061dfc9b2b49ee620b906465c0bfaf40ac1534501a6b37ce73566d1f5939d9b9e2854604a160ddc600957439c0334fc5e7d4212e6b70d26dc73214437aa711db89f14c7e2266ba68e0d13943107e49c46dbcaf4932117cabefa9f6065e268bc3c3f8f92f22f0a1f257712d55d4eb896f76acf8553e94dfac6316b7081100e0c8e4ee2e6b181aed1eb1c5b8692ea2572eee147da736541fd468390e3de89c4bb18bcc9e9a42180178f14b4a91be77bc98bbbb38f4e6281ac28dadab8f3290fccbe0e2c55af33af4ce1de14970f49608d4ae5e1e412dd2714e3cffd9d29ce3f00328fe8fdd0bb0b84275d75b7ed20d302c9d97820e2ce6574bed90b3f250a5c2f47c09e5062d9f3aaf75a412db891a1107dca84f76bd8f3d04674f7da45579d364adbf7c7aef8bbee3515bb2389637e63c34cabbb505114bcc2660749c7950352c9fc9fedf1b71b8154992bf0c908c046e1132a30fd550ba8d7e181540c1148de29d92721c12ab9e40f79d564dee9bad66058003a5496d6887386fc18181f23f2ca20225eb9945ff0454572fa5508319ffe9500b7e62c8f7df94ad7f642fe7232ecd6c6bb530a05f06bc155fd00415209b77b5a9869b146453ba49aef096891a374ae6b19d19580b3f569a940006f136efb225de168bea9946454dfefa3e53c6b3f68eef007e4e4764b4842090856755ea80b8a5453ec48c334f1c4ebc1f34fe76fa2cbe8d83ae823cb8fcdc1a29dece3a3def69a1a35c51cf6627760b141dded20e1c070c5475ca7a1b1c4f0217da08b32c49558e51f39c3f79787d72dcc6cd558cb24377b657f3a159ab08e297f751420c40d24ef63f274a89d2be4f336663845144a4dd9d97a2316d9e24ce7d2c6d121522cbee301129298cdfec97910fb36065d7b35a5aba5ead067de92cead697e811f60c17ecb09ec47b02bbea87968fbda9c77beb25298d34458c0cc20780f8dcda4a042f4643a92d8b91b57bc700ca14031fd020e5848ee5dd66cef95a96e298e65cbe132e726e93b05fb758047d83bd1fa8f03a019ef98c64841a26a8e6a8a8b37f4e02acd53a44b7773dabe6c132ae62d5567ff4391c8db1757c7490993697e9f6b78a5f431cc9ab53dda18bf5c3de0ad9e1942ca0c318f85ff8a05dfbc2ef518b60b76307d493b8ec941164a3a982ded9cbfc962e43481677f0838ad5772e5f143741a5b2915fa54653357b41bfd9f4de13cc8fa9fc0c13f0e6c42f94b19be877b3e8b0e5c06c7fd0478f01e3e241654ec2c1905875bd493aacc45715e8659a4bce4926b21a6bb5155455653ce378cc72f45a6b275c9afa90e9c5bff5b7e40e3ffd88ca04d10e6f77f77b5186582bab5d297b39279ab2624ce8e23a8d5bef2c5e9ec5516f32131ca54a20e5c813546575a9ed7377bccff260676d633c804ac8ffa542505ac8578f2b19f17b65fddc9cea4c16ee51d9d604b16183538c2c00c44e54616718c303302be7217e68b7a4959f09cf89c99158e5f3c3bfe37922ae56987809fedb0634d6b0865879fda05c32597277f12b4724fc380cebcd243a2fc6c1205353e845262bd556d1384a709bc6a8f8c3a8f23deffb3a0169d5dd5b1d64299b40fc7b5806459b59efab81004d41957f2aef3ece003c4c93c339fc8e55cd349d2f11ed81e2081315eb240e18051b8fce6e512ae701c44112416487c396196302f1e357cb8e3bd034fae17bea0a99940fbe72bc2ad12b60c71e1c3702267e10980003ae7c77d8d32e0e79dd7f12c7ef1c46e5fed5c31a719dc2c04a577d88915f912f0a95a54986a85f99009f1ddcb2ddd9900ff176e885fe6e67d222196e982325080355876da77bf92ffa173c6652cf6a47a8b7c6cff89b807c5b8fbe534b28e7c8a74dce107cedb6620d4763f2414b9a7d2c91e163b2bc2d346a1c84f52397930b31533a01e3aa0c96752844d0a3fd36e7b2100c57e89a8239cf83d51a92178b2ba012580c986628e581329325e91c970b70ebf536b7a2bbf0504dabf0ea5d7723f52b01f2db9baa9b78c6ddbe7bd71257a117ec06c6920591f96e846449bb824310d8c82670cb75c4ac22fb03d1e83384c8f1c658513de6884df39bc50919a1fa9fce66964a54a2cb4e43c4afba1888eeb8e95801579d7bd40cb3b990259efd7d6b4daef897174e6edc913223c17dd97dd678719bf8b2f6092320c95ae69b01c09e7f6c1bd38024250b23c4fb0ae162ee84bfd29da143b3c836466229b97d38672ee0308a8a22eb4591bb657f0f0f984f25edaa60c8ebde256d3f6b9075df7a71176be47a297c3bfe9f9a0c531aba90e4ebda14d90932187e4902f7a6be586a4ede467bc1595be42ef027238cecff581ae2490455e0cc6b505041fc7b86018407f992e1bd827be65b5b63a03a080343432a291b71b3ccb202e9008ee4b1892aa38acbd836c3169acb643ba2ddaaf89d977a160819aa01f1ba671f63fdc3dbb5d7ae25b2945cfcbe4bd8acdcf6cfcc60ffd55907f543f9bb373a49a6014ba1c9882c550823e2d17fb916e9fed44b4198d833f31d238f001e7cf23115c0ded30a659865efcf65382adb8c6ca887e3c71684e28910ef7c4ce03a6094d9df914186eb27b797f1283c81caaca1c0a7a99d78029cee326e4f6ad5036548630283725dd72dbb659cd22c9bda98bb5b626054e7ba3b50cc3ed1ef44c6ba03bbb3f9df374541d665a5e1990bcb1b10829e7612d1baccbe06a8959a776a1df97d6e8fb449e11365e78ef7a21f126d92abd805b82fec7cfdac6eae64b2cddc8e4f8ad7a2a0250abe26b8701f4ba5587b5116b2e7e749ad8e48aa1c88c661943aefbf7a6310d8fef10b5aa23fceb9f8fc4b4bd703520c5ff91407eab5414f0df8c44639d809ce9dca248a0a2d82dc79b324a7a0141071a7cf9346d906202c2ee51572ef5fce100ee004232b71053fdab2a6c0ee8ddd9f2308aaa9da82c75c468288aae3a0323514207073f65376766bfb9f3f4cca9626bd1852bb81117139fcaaff325861b2dcc7eba7a3f0da7bff56c0ed81bdd737edd7a9163bcef920007e992e0e1d999c59b47b5878b20f53f35548dc3ee049d0fc87f53cf788d8b2cb40d7809e4778622859495f6d3ee647e4c054a44ea9ca026407d865fca1cec5fd9d263adde6fc44a54bec645b162946257a7e1e06795c14d5478edcb7a85cd9140b1f4307368fa3880a0bcfd452bc359ce06c8156ec2747e20256f724bb0230f0a5511b19a21e4a2f01c4f0de59019c2c7687bd8121ce377386c0d0214392dfb8cea677a4664780991535a7b9b12d7af58932d6d1d3e350a4782a7ed1ee5e55b887ffa831a74327b37048816b92655c8a20e6f42950a1c30eea712c468b7fb0b56a1609de130ed481b3cd41353cd395ed2e5ae86275826ee8c8d355ff4ed88d2dc94deef18864fa6c3918debcb9a8833bf604f1938ec61c45bd544330c3a00adb9d07dcd01f51376624e7633913d28e97d448c97a9caba04ecb1dd1873e3d76d24440d0e3e56b42583702ed1505e1b847ff9f61eb7ba710205961c83ae0d5b8d1e7169ac8b1595f64ece5bd2f3131072b813a5db75c6a63534c1274ec79d71f9a51264b24ab398c82c60ba496003bcbc83b3f94402194bbbe99c72e9207995f831cbc39aead57a37aeb2f3cd7302ccc75fa92e16fecd3f5693b10ccb11301e2ded82aa3888afe4bd447f33686ea02b26e945b4ae7e52284f0a647a5192333929683e13145c45023807e1733394f1a297ec0d38c8e9b90dd90aeb7b3d36202b4f7b6119146706dc4bd1506632880fe095bd747648b91b1b52f31fe3d38caca6430f4b701598dddc9cfa6b95bcf3321156b2421f255323c652cdd92e82c7be7ef8a9030a081ca92c3bb6558e0cfd2b543f253f1ef88cda0f3761ceef862642c1cc003a3bb88d0e7b1523a50cec4220ca3a70a2fac49363e49ef72c276de34c161fb0128033dab4fb0d6901acde5c6b6a08e61c910ea9a09e478da4604c582407f1d3d58a14abdaa6cae5a20700b7d40b7ab0ebf56bba18d4d36025c75cd9635fd26faad0d01ed394bc2407df73b9bf756ff07b2a4497160f0b3b247babe74a5c4ff9ee7a8cb3dda624bd5161849a0d11df74cb8ddbe01072b941e7cd5ce677d53125ef217a73c8e3c95a8e2820b20e2bfbd0effb5fef93f78f3e4978c7109bbb63127b33bc30a889a928e9168a73e0e4c36a9d920e7dddf249510e1017a7e3948f0db657eec1558b2c0cfc8775c98b82bb1815073542bb59e99d1a6de0f5ba0f939c9d405a38166ec248bd0ced886beab445e5da24ed5bda3fbb5571defe37b63b23b1d22476546798820c7daa9e8cc65b13bb135348bffc4fcf5edfde24fadb4d52d59e45ef418ebf9c41e6fdc88a464caaefe65a7c66970bc468e658573bc10c0d2c438a58c1c9f6a5891b5fba1039c91f521b3770532e472978e4a23b4eb2348eb0fa15b18f5d21e209d6ee299b511edc07b3b15bde9d1bc1c09a27b030b0af8a994ec3d7ae2ad40f760e2455fdcd13b62fd86b3b378ee330fbbc6a9f6e7481259184ce3604290a3df3ec783e64b39b98acb8c19658affb40241a5fe1a3c0c8637581157050c9889990a7a62b50d2d9b92bb4942007c25471f07764db413c38c75ebcb73e0b315e8495045e1ae3d7edfd3668abfd22398d960fd17265994da9045195dc06bbf4ec47ac503c72653c42b3401f85cbe1f1b96b0f3645f1218d509bc0a406a71fd2691b396aeaaf747f39b965c5be255e729b73c74013b01eb54b2229d836592aa63a30c5bee03fbdfff9c334c2521918d1bbc3b44d37bc7c2d6bdcb88a0bab49e74a4b8e5af03a4754dd10d313edcba2b06be851e62bd161af3e396cd3988667de486d8e0b5740134c5c88185d6a6fa5d910f21cd73b3371fce4306878640cf5779a18a3674d872e92f4a90ae8148bd074e735d2b0b171583e9ef207f70fee4294380104df7a60e65faa045f25e8d3cb7bf3c5cba564ba07579427ac8d085a2ed66d5c5a1041f1dcd2f074897385c71b0a72cce270afe9e9adcebbf447bf1f6cfa839560a3db4cb80786652503546f6d281dd7f65a08f389753918576b27b7ee23225f4503ea64faa4bc4ce1795d1ae70a9be6523efbec240d23b94f4fd5ebf99dd890c3da6e31ac7e2813b333695c35e301ca925adaaf2a73b70dab2013e2c5b881f89cbf4dc6c428ce090f4d0b1a1c2d58a215fed0e7f807ae481697beff68cbd4e7f804e3d09015ad7917c147db6feeb38a3b8612806786ae1ba72c51627f0edb8ca3f5654f8e228441573302c3251d5c89fe4be7a05876259bfeaa8c2629fc1629baa4eb146b4c8cc65af9803faa39c90068836f497c9673f28802f3b2bc8816a740cc4e00bc269079672e1dd5033152395a5f6f911e5bdb83274fe0a6830a33e9b5b9b6e1db23929654c93fcc9c290562cea97b47c8984e58c078ce246eef324835a5204ae6326aa9be8940b14dacf766d2f2c89973fcb44ae398b0b39a66660d6955bb4728dc78dd82765dd6f144c01f04a95900544d586efff85a540649d40143534ef745dceb48b664de23c924d1cffb0c83a16301ed740fe7ea5f9652dc3e7830d3abe0b5d3321289e12a36b9568e714175b6af10f7c2b54791e291386b8b7f76cb809d7aaa9504eefeade37fed69791785ab73110c683405bc41e87fd1700491069e806b913908377a431bfd9f079fddd01b09a27b462c4986868f9e085b26fedb4df590acd5c0ec697cfeb723d2aa73a2fb7daf845aec511f115e19482128db312ab81d1ae8114c99ebb6e1a952068c598c0afbf31defcbffcf5df91f5e0f8a8648344cb0c0e45178b982764e9e5a56597cf15b69afeeb1a5b181ebb3b1ea3b698f862c36718d3773f31f55716c819408ace3827592409af981528a9f1e0a4cb3eda52df70529b416015da0f9ecf0606fec430882f8bb057b085c79f54a17a4c8296ca5f696422e77b6c99356f45a4d5416febebe8295d83b6fa90a8c75eb9aa4f46e0162252b6dd6099cdf83a2f3a39e40db5c3ca8ad2068ae6f45cc14f2198d3fcd527c6c895df286b1efbee5fd277abe88c9a895301d98a882f48f69ba4420e6c6ac45f475b3fd1862d645c733c63104a8f1a5a839a4a4d666c6315dcf55491817bf9c31a3545478efa0a948fdfc6887df7a814290d0fd2828ec5de0a2256178e4af60d56815c285adb61b7e79c549254dfe8d97d084e8eb7e7b97d38f0a7ea09069a29d2bb4fcd18754150c8ef131d05f0533d9476d0ac5a876465ed1cc8cc0710dc10e16bb83eafc35037bd099fc3f27c495379ed689fc34751b10e93f2455f2ac98eb417807673fbe7111383cdb666229398bc6551dfb653cc36efd639581075bb77efc6414de5c25a33a63558467ca44ede4159ec9ae797455c85c2a0eb7f372ee83eece173f6c522d3b7f3ac10a369e548a0d70f12d92cfb905b012f9e6313226578c8ca803951f676e360ef522aad4de69b8ddd17352803c2e9d4a1697262936b772508fc48b29a21e4a984415ea2752b89ac349d7547b8aac3c964ea28d88889726dfc7e6614d74ba497d21b559d0e9e0f99ed4c63b9b4c69ee9394a9b1d66aa35993911e1764f5172cc1d9773c6028d3f5d07897b9653f96ed3e8e5e793456e2d04e5a9372fd26c4579d01f7f932e71cdbc708d022a143e4b0f01d84e422b30ec5daccbe4e1ddab497d01a3441d5bf42d5e2f1b5522acbb4f71bf5b09cb18362c0fae87b948ca4d0e434f2da8cdbb482188b5b06ef06abbb8200d59e6581e1c77d3a3e9eefce4be9e0241be6b49c835bc0bdfd36b07b43153e1dabc66077585aace001fbe4c6ecf8b0251a1b3fe8e66b0758bc95cd6ae0be9bd34d7619dba3f94028bfea76bee270193fa5a8ec8efe7c433a9b3f227c594dfbda10150b8d62cf826cec0defc1b145823a7df23fcfa6966a9124d617603bf1ec83f7a9294dd2d9292a8abf6c16c5298fb13bc3104f4755040328b97d3571bc33314d127c5153e9e91d187763ea3ec1e14f61bdf196566496198adf91f65ba309169280421566f4d4b7b6974a1a0a4b1061ee80798018768271554966c2dad5a34497dbe7306b311e72f645b72597c7dd3092e20fbf775d86657d0d277328b46448eee76861df4b2616fa663f533dbf117820ef23f3385af4f30bb04fda9f692480daa2af73c8d39e0856b510a5de92336c792bfca13fdc07ec8225d1718716aac78aacbf6ad299d7bc07c4f207fff5a9b4b49d0d9d538ff7cedfa6064e9c738446c6f825c642795199eb6b8d01302e478e606c8227e283968bd7419ea76b0bff0adfbf7d82c140fdaa180dc16268d9752758ab3f8cb362f28526745a7c3902a4183dc0dcc2fef805dbb7687469ad4c7e066d2d367f28eba0e265b8d8d63aac9eb747c36739c1089841b2ae5d1ee4bb07a180e2e741779e27744722a8c0d85d50ec66beedaa027bddceab6b4d402251adf81ef3025ac74574fe64b66871e0c5a199f1a14e1831c25add9e4408b96571628c14917cb8c14ef67cb7a879ae18477606e6bfefd172c795d00d3f046e93d610abbf931e45164a3645867835cef0d6aa2dff964929cf93e65b4f4d05c5e5ab04cfa56a4bfefdd7eef0c4d7142c8d8a6239e30f213b94b60b925b632ac6fc757808b6c9936ae71e68dd395ca4da41aa7787a10776d80bf22ff5d06534741abfa79983ba8aa656c778cb79abb8c79e25cd39ed903e6cea5565e0f671b1286b511e6e238a3da1dd52da803570a9e5cf6c36f5e499c335a2fc6fe0a2262f0c0380bfe011a41105b1b76d089ca5060ebaa72f0948bfd4c2a25421b51a24b9d693ab67b0333dd1268af113e690b2462b49fb16ff5e46d05e085435f98146c3fd826b86f3557e93d3e5e73e0ef92818d6c7d8c389b4d4ad41195b56ad78a89e1694ae859bc972ca0c1c96631dd16a0f810b3aa00461b2684feb672b43c48838f27a38d217b9b2220d072d59fcd00a0570d05cea5bf920812c0cead6f3ccfcc9456d8d214e468012348354661bfecb49a0b81b8a61a59bc4a9f511b9bce0d1e8ffbfc2a9082d9bfd94d3fda0430b9776c20f7616fb23d1821557ceb5c3d5d5df76c3db23e365a8738cdc42442e1bd8ac8f9c0ff9e3d0bfbcdc015b9e515493d4d0726f4bc2587a9f9914696648b798472ad003c3b2c169febe1826ef1c65ce08999bf83b10caa5cc8d1a37846fd427d1b257313e0e72f865b0155b0ba522196d9dc1916e652a5cafc3bd8672a741fd9e3c7b04631a3c0164234d1214627734105da2ff2a5fb9ced1888f09b82bf149c8a00e42651cf6bd76da67ebb8e4c14d61644737ebd6ffbaba0924ba69ead3de7d3c278a46e479993fae0c491fbb6178425f76d21e90ee4b5cf5e7cfc2d1909ab89da1dce5ccb24fca07d56de075cb608b549b7bbd5701300d30e0d4a73202b2f570bc25a18177f56ce7868b6a733217a5048d1c08924018172550adb61a73b0b5845d637d128a6e014a8f0451a17373e6ee5adb1fbbc81b3605d345fe14176c50f227d9a2ee0bc2f044114bccfd741a660074ac19330c4b79ac01c035e7a654f27ab8fc8e925680d8a49765e1ef843fd1742e6602dc749f43311a63910d7b0511d27cb576d1fff91bb22b961f0078899944e10ae6b7a56f3b7be7fee167708c54c2cf4606de4785ac77e4c159021c540f2e0f85aed83dbd3d7a652381a12d1e6a83b593f2e6677504081e0208c351d817cd9b05e8acef9eccebf0a9ddc031622a6f5280e496518aa1e926507012897da00d7daac080aad5db5cd200a981887a650042f16e6d0af9d7c22e1ce8e6c605ccdab7f0f311c8b13bc049e0976f2deec90de8d1240443d7a13fc38b4ef2abc464d9a96e93f8eab322c828b79663522a12d164489c43324554df2444fb792980808b5ee26f38a73a67192f5779478fd14a79c8f88639e41502191bfa428e6007c8f957c8f593b5f29867ede376bdf1cd837d086294091f7cabb59baabca8dd51fbdd5268bc65c4cb52f397a10f0a7879baa3f486963b285668cbe36da6eadef0c49b2008d2acd0b865d43096d5b41a630eb3957db8e2796e72daef0d50abdbdead6d9ccff9799733fe64157c2bee9e9e1d3136baef349268a7d1c4318d6cb94002989cffc009235d4d1fbfccd792f7a5eba108d3603d47ce7b3e4163126d7f127360ccb5a6e40c37dd13c66bcec969a34bc8a562da7301c31d60a22e84403e4cf40ae74db95db673017cfde6cc841ec624dfaaa576fcbeafca80f38f59de0da6883f6e3ec8cd799c21c5115b1cf864595ef52b080167b03342d8f6173889924de143dc7101bc4316e95d3307d22a2cf0d662c927ff07f50e931ad7347af1368efcacad6599b650f6df00e6a3ed903c41ca5256353da7aed6174c1b42790d64f271eb935613b6c0e0de0d71413843a5aab620cb4d4cab3dd6a38276136a30bddffbc0aaf47deed7a4c09fad256e928b8b134733ab455634b9cbfd95db02b4342a883ec6599be5e4a66c6fe8a85475c8a58faafb64ff660b48da195159ed3fee404b141728f8281e73e6f088397cae5c7588e293836ff8bc42bc1acb85c13326ed9d1f39bc712950ee5c2e651686d1b22186d28c188f18bf35297212dbea257ef5ae0a850549e32c96ec48194edcf06b3c0a3aa4322d9599f201065e25e14afc13fce2ba07aa4fb2127cc47cfea12e06e165c82791b498099e1a6669348eb8933f74b5669715a36797f56c8824bf988ab3a6e0abe01a9f7d8f0899725a759426d10d83c3f4e2791859af773d378b3421b2210a37664973bc2fe5faf8dbbe4fc2b4e0bc0cb143e730e8536415ef3b972d04e39461b283c85faedec8908f370c1cf1f4d6f04e15eea817efde7bf0ead610fe394b980aeeb5e8be204143f8f38a4f6b1be9fdb5875f18308c6985338633a86aafa222704816043ab09653e709bce5271b402d189290d3fb62fa046fe4b6d4182396b455632a09abc4f09424ea92b2a567085194ca596e7465da869d40a500edc12da4633c72c62d1a3b24d19b9c3087df2b94969a517546e1e6fc47e5c0e44ec362ecf061fe1ea2650e158f4b87de107d6a3e80c60260c272632dc6a5f4dfc810aeed4d70389896df1a6ef72c3001901968a37083d5a2b70690519ea96bc4a9538aef33234bc995287bef926b00df8df09181bbbaaecaffde18650718c9ba1074719e0ab8c1f47e8326b223cef1d1c5c0aaec5ce7dd027313ff4ec84cb19603fdb3ff8834e45d38e37cd6eb7658b730bbc36e3a731cdcf888938b91c539b2bf3c9d68cae9e209f3b6f599c91589260db8613476949dff13194ebb493c3c74abe27d462d503d2e29fcb7d36ac49dc1ffdfcb5edd5bf4d6931a04863b52291d36f8387c8d1273dada8c59d0d2a3406cbcc315f510a0065dd34027b8f97e8edc81be50f0a2bcebcb4bea924202747be696a76e1011098e659b19cf51b2ba15168b40c9ea40ac34f67e3fde1d74d93196471585d53c2ce86028c6eed69433bf26eaac2b095069fa0d56ce21ddd66e09afecbf3e3fb1c044548435a030f6919832db36620f6d03783f0f716d21142d82a0870b67988655250dcfdb14babbf4eb3a93b0a5e2878c39ef8c336cfc936f785de886d0a63294bb2009fa82a35281252f3813db4f09fca8fdc19f0f7a5e9789653b575c274c037c213ec749ba9443b6d9733ae25bda371bafd814498ab7547a6bf1c615f21363743f06c9be732855f6bb7960762a3d957ef07126c8ce56bce97cc358d1bb06f2d8a9df1221cbd91303bbbbf7f1c8a3857cb76e658a6783793e91b866cea3ce29e42b61e80b7a8ff85543d2cdfe39542fd4d61ec7330beb62362c3c234654585a9fafc9a381add2d3cc7906dc4aa3ab474523289e11071bdb75100d8d6765f68ee00544fbf4aa8642cb6fecbcdb256a3ccb94f719a7c2a049446508797a765f6da0e473d2ec6012e051a982e703067edc335862de608e660630b4448f3d16144188afbb62c6d7b42e3d4b1459d03beb4ef8f6f680d17509f4a53535031d09c4c2912b063444796619186487c0a096c9c3737cdbd29b94e6d4dc60ef8629254ba95a125b9e64353ba1006316844fbba88a15c735e0d5dfa189b7555b8ab9559c9b71067da745e266ef385135cbe0f13765b3da017d8c7625af944a8f9b623f6a3f3e5e2772f7c5e56b94c8a5a8a3e79722e8c013fb6cfa86bba8ae906f8f746744872889d420e54c9ec9f0272fb98f3e48b2303d36ac39fd11b893510aa060b54f3d55bb98bc82e6cfd31c638b9e66cb2a817706dad4a22da09e42def90372256263f1991adc5c8a7ea98d58efc5850e84fd4f784c89e20170bbc060fd00b1dbe727017220947a33f34adfccf56e536a6d7db5711f4c58121611e80d7c0561cacd226e7fa10ef55385fb3d42c8f64955dc524f5dcb77c199147e30c60fc3cc261ae8291ab6432a9731c7256308b0c013baca3468b4eb12decee190070c70ad2fb7fe606149d02eea5d6ef090d3ddf7f7359652992206d0af9bc8fac69c893cdc81316ff1543d4dcf4adea4137371976355298564d6df9baee197ce27077afd8d66b9cc353f0f6b9fb5e60a555a248f4d4f75d4f67d14b3096a26ae3c3f8475be73150d7ee7d1f291a0a5c8e43d9a5e15d2a66bd058bc22f512fd8e5b4c9008e51cd3aa1c95b8e945198ade4159ee93fa1c4263dfb63484847c93ca4ceeb65fff8d23edaf0b976dc3eef62840e5166042e556ec02adf3b152e00843e30cc1b8f9b8fc9254b94336abaf4b84bff1b633cb6109dc5256b2f147311c7ad08a22840c01a975dc705fc33f871938eb1dc30befdcaacef3e35f05058db9cad273212eafaaaa6e21dbb1157be4af9291689dab59004f28995acb6456cf88512efe7958926af2a255bc7339a3e5ef1759890ac9e6c573b0e4b76103f2575f8935e155fc766175efec6b3bcf6aa3c47f67154b28db2577a4800e53b90d1444516d3dd2a42c0fba732846e2968ec44459440610b590756bf0e32100ad4dc6e559d56f2e87d00906a9277ad400a5f9b8e357d94d85e8c4564303ebb1b0d651000628b8f6a6cdc9bf939c6e90094d5383d18ccb0686ee833e3ccb6b0b10a58d3f1ae700f11823b3c2543049ac22cff15d37800abad50cf1f2015e47acb5df51af29c366050ae2c3015d1fca5973a2541661254b35f97af656bfbdf7982ecc0b4f5634e17b8233ad5c2734bd907f3369fa6d2f6e884b8a5e0ff54c962eb3e6e734ec2e39ab589f543258527ffa323f89b445464aacfe8fa0d6a08889e9fb2d7839383be3fb6b90b49962110e3bd7ab9e1e1a123dc2813483bc7ea413728ac0aa052bb5a637d7566f5b2f8a4e6601affb82f8f7803655a3e5ff298634f8f1b7e5152c3a3fe441981e79f044786c91d025879443c2c93e13d49292e61e3794b75c6c68ab08091c3f031e930db9a86686e5ac35af237e503d64d228a11a2c0491fdff1644973fbf1dd87f44ffc735bda929385e124ab1d66493e499509ca193e5882aec4b8c0d6cdc586271486eb396da34ba9700facedfd1c7be168f2a1801ba0279b459c8a4b192f913b379c3f1203ff57c1c5813810e6b20a8de4415b534714ba6682ec9d0aedfc5ad0a9d7e0c8bf873be0be319acae52949724f3c425a6aa2e563d61ce400d62f269bbdb93662363fcc418312b2ae497ca0fdee83950b39313cf818fda544358d83e470bcff066b8ce768a643676e454868dc4f31d9ace1f4df5c433ae1404d7dfa31e56f7640fc52ad37c5619fa88372b5133ab0aaa5631c25ef12e58ca490311594da1b2516990d7dd12b9fcb5a456a0bc892626907c83c895f93b26b254c5e895c6304f3420627c2a612e1dd58aca6d6423a31f872d3b802ff6836301d98fdb7e78f556eed802ef6768a12c477bb950ce49edf6f5fb52642b13c18ed7f8407dee52a89840c19a2f6a1b44373ffb12d78c5180e2588c523cbea6495d726438238b369916bbfa6342abfed8fc7f93c5fcf059e84a777b9ca85f322674d26474eb1cb595dffbdc8dd45a9af6ba1e3b222ed92321cbc3b372abcc684a4955cbcef35c760b0a6f031c133b59528871684d6c7b050336011ce3956e71c4e5945eca389bbce6ac186a7b1fd5956bb6e750e45d46f12208c6539b85c29fd6dc5ef1646c90044dd1c067eb3425d12cc35293c28622daaf6397dd5399a8af214c6d757171b0f2bd0fde81a450afc99004968ee4297c5fc6cb37bcca61591c20a7aeb7d664559dd165203699f191b57cf0dca0f8677372c1bf2c8f44d8a58368945730fd597a8daff71c98945d2f0f7e3c8eecd4757a3269025d0a3cde5687a57c17095a0b3f32a16f2effb13c895c9e8cee0564723e80b06797e0916b2f017c17f6a5689c0d5dba2aedb4e460e8d51c7ca51b5319aa821ea313877300210514140170036ff178aa4600deafda09183e764c43cada37ad3c4558dd84565e9bb1fc881983bd6e90d1c6c11f596f73275a6009475ab3cd8e15a2043b12d969f7cbdcaf8986d7e97d8d3e7e6f71fa99453aba1d054d96b1449ebfe160df02aa92ba57599ac6c77b9d709b344ba62f632d56d0b8e60c8446c49fe25251c47525486e6557cff50f68240bff7a52d1791c744aac19c1143f236da2d5794623f7838525b4f77f7c9f2f79cf9fbf1e6c43f13ce5a64ec54f7f2a84e43d46c2df959cc6b9b17a29b2230f1735b5281a7f15576f3f4e98fa90e8b5d06997fb9c9ff3cc2c9a21b7df98c58c0629cf7b7cc4cd3f7199a5f629c71bac374db243844c9aca9e76cbd2990c62b229fc7a6f9a584089a9dbc370a51748eb071b0a2c1278812df30afe57eaa9eb06f05b0d3a1d672930e1b2644ba28c501d2ed38739a71841f589b3d6f42b82d84982c22611a3baa99bbe5fe196b27f95e6e1ef6c8816cb335bec298578a404d9e929bdabaff667bc683181780deb7e645249f26decf1493bb9856cdef8ee2ef550a364ba740470850fdfbf20dfcaf76f7f14b035d8a5cb9a9bcd3b7a50ba4073feade66e00d5799aa9111920c6a5fffe6e6b434ce0b5e4f3f4b972abfc6b7074d4c5b8d00d3c587f1718ee9c7939a5590b861a69433335eb90321cbef10609c9f7c64fae4a43d885fc755c6237c9fdc49197a25dc403e71b72d88920444612c4534deeea02041e9757f5a6f942d77fc08b0fa17d2360a472436bc81361d9d8b89881917bf68f1f5c28864cd368d1251a370d7ea5d4acf1bb1bd7fa96f27ed327f04a33a6d166c28f5301e25a37aea2c6ccc33837d31cade73ffed001ceb85cdd0d0386909146f15644c1a33d246e23eb4d49b4c1ea68190765ef9e34011293861fa26b23b7fdbfda967ffb154930f39439d75bf48102d2153f7512656064461246b285bbe643543172593b82027bc08d30207e78a4a76ec32ddf06933a7a8eb9b6ae351dfb2a673832cd421200c4fd68b4d3e340e3eee99b37d75878be4ac55ef81eb8a5491398990a1d9645ef0d2c915204b27dae9f3ecdf6f84809e4ed138ad7d83b8f1545d265d20cab2b6297a6044c49ef46d066e0172aaa0460ff02fea03fe7a5f788b717614f485db344e86ca34a27851fe1f5581a121549f9c3edd0105b2dcc9a35046fee3cd3304fae7f83e351f279582239a832ec011030718f19eb955e96f18bab0069c84eb56bb71ba70f9c2ca06eeb9f2fbf4445f21111aa6c1a886fba07539f62665681d18c8fb592700f92e5613cea85432b907ce1e90d909aa283330fe55d2e9c176e5ebbe187d28bb57fdce8db23ac759cf8971eaca5b1255f6d94c5e8056815eb7532fa17cdf833068063a85dc9fb049b1c4eb784a7a96ff4e6af54f90126567e99cbb8820df3d847a773889e71211f46695500a226421a80b752e9a52e3c1256235f57d1dda6c8867ff760495661f52eb3331c7d7fc3e945a2a3745422ee3fdd255eb4fc6dd729971f141543faeb9928ee2e0f781d07956836a19af9c526d93ab80701c9165e3a26635c7c5895cc34c41cf4d26a35d1b04103b5dc6d2bbdb37e6bbe34b98261a0c4ba7745597a66573ac20ca5a52f54eb14f56a370c4d6c0cc975cbc0087cfcc3a93abcb5ca2eb92353034c7ee8b0de7cd19cf5b352592f330f75a7c5de412d64f7dab06e4e40d4cea849486b9ab4d0b1b9f45190ddd9a4fcdc2522cc04c71f175b2497cef14d6a6767f0a85280e252c8616429547e661f1fcc23c82f7765c8c6160edb3c22fdadceacc803a6c5299e6d80d6322ef08b230d3759df9a31a4f445cd8a2191d8c0dc564e1fe05d11a8f1546eb3cb1a6b76b98be1c35a7becf86c452399d0b1126e485d68f7f55fffb1c30c037c79b88d1b34857db45f07a3706e39ba75955e14b4d41b4524c503544124c6df402f61e51e933c8bd4b37d165aa2bda4e88790c6c94924fe26fdd01f38af03a1165cc44cafe9252d14a3e129eaa2a8907f55e3cf7fdf1399b87e5189ff94b8749283eed32d6a11036270a5fb4bacd7da61ab72abb6f3026093fcb496fc86a3578b2f025740481128c75acb53b5d499bfa9f52e78516e4658b2e133355cbc8fadb0a24941e83f2f9193da3cf2c5b3f35eb95d4c03a34fa4473db8e3903dac44ec7348c597e4bc9dd7fd3f3f8455b63168f9d17e7fd31a5a6e04063ed82df7b6eb5ff67c696f92ccaa8339e23d8b565c04d2ca5c7f284436c67a52e241d18a67191fcb1773dca3fe5fbe824e66facb8d5ba11c91c077c7d0fc42a82851bddd7d66350e5187e33cb4da7e393ecd6b994af602c01d082088862833ef5839c5e3a309a07539087e6e21546f30ca77b240025bf14da259d019e4088576482021c072a76651015a4ff619500874ffc2479faa0671a716d03e0138c6846292cb404c1bd6e0692270a5de9898e3e8fd64b20b032d503d528f98243873792ae4cb3c8b98020920a583856f6e1aa03cdb1245780317f7149fd8ee11c5b930ed194dc19e2c4d88d3dfefb0831149150ccdad505408ae70df0a6c402bfc867587c5bb9b4c5f3dec4169b883f944792d49e40d09157e714a36593b9e92d6ffa3a7d2e3507576a65569661f5960dedf626d3985f8a46b2400dabf99fc7e94880de07e842866d3d74ab2a49f5e85b60526d20eca2f12ced86154665fc4e9fe26cde2ac1714957f1f975cfd9c17d8656d5ac0781a0a55bddd9e5705f74246dec5bde8cfd3db9c80291ab6e287eacacada2cf34aa2d3277f3a260b6483a9fcb2c8aeed2bddd8076a90854a0e6f765e93ad9793e0bfb41b9a6e095681feda37fe0c20fbe4aeaa680f6b6db958b6d965844de2f820aebbe9f6ef4db83aa0ccf1d7ccb8a2178677af8472858edd52bb9058c80f4cbe5116bfd09b50fc6605abbfbd853e88d47253cbb84d0a9e3315159686525ca5743d3c55155311f16a6d7ca9ede20c414ed56af349074359352e606e551d6e727f1f68dcab4ad7aadaa7fa868333b7758f65c21db5f9aadda76849ad2d7d8de1a9228d0334e07b172a61bf92da03d81cfd2ba6d231e4d841d5ea97975b2c4bf2c107036c33dd1c062fb8771176283f08cd004790348455f734fd44d40316265b078974f3bf0364ca8fc5e62032ffe5c69b23346cb33282317afeb5ceafdf2c724dc8a36824b72e1c08eadc6e17964ee1954531f1548519a9d9155ec23a1607f4e120e2d17ea0694fae42db9f46e8409debd6e8be925f4fccc6792d9880383c857fae9802cf560597c69e288b3634899bb0b86706f314174c8e37c8caef221989bb2c740a3b4b301a4378989d6a9dc2a2c767f7c491baeb312f170db9e785254a59b84df3354f1ecc2fc948ede6329f578823e1a41095d5705aa90785106d6e39f29442d8132628930605028ddef3029acd8a0ffe9a37963c31ec1fd8bb799d903b755384c6249f1a847bb1a54f1d1da2279703eba01e3fe6fd47b45bf0bdd57a81e0ec39777cc75e7a02f0afde4b85033b1ce99b50c79d7818759e568544b474f9bb37bbc948addb2f2051e55162905fc8ac726232f4f9b6ee252768ff6e1b480b1986337ceaecf89ab09c594e8f21e1e284e98ac358f6cb9f7e6b3955b3061f59c79aa963764b595557fbda15ec11d70a19c17ebfbb8631ac5743763847f218b862aee2cd13b4dedde1c9fa653641349e268a6daad024786ac536974572045a0029a515fc688269baa5c1cf93526c51abde56e1aaab08c6705fc38352bad50fd8b851b067e21349f138c5d15c780801898921d1270967bded0ce2a349667cb2ca1b23249db952a5e80f42f2b70a0840a8a4c299a5f1488e461f7084ea813cf5155334bb6e4444826f0507a47600263ffc60359efc4a93b078f0cd71b85efb931e07d60d415e9012d2f7fff4a56f8bc6a7541289b22fa790d98b433906dd011d492af3b798fe416aa0947eb95b474b561b013a47e4cb66fa5045a3f39ab98713da9c1c3243f9f977f669412eb432317b98f55638ad54bcabbfa596fafa9c56b3c75195b521a1e4f807e5fe34571e1025385d82a76c7ef86f0e1c196fc9ac45022c9b6e3eab291ed6f39b757ad56ec18e70d2ef5d96e4507a7007284b08b3e004b3d62b1ca6ec19f489eca620fff45fa218fc0af41376d1566e70a2ce498ddc3fd0ff060dc8270cbd25abf0967d8a7bee5889778db2ed555e2e1fcb29dd054c0551da77aca908c8e6b8a6aecf475078e919998f304b4d164fb9bf561849ed8076b6f73ac829e1794a1b7f580ad399dcc4d27964a8d26924345a85a5b0c7a3b2789957c38723c9ea876dc47a74a325b34a8b51f2cfe8d48b3a26f7847e7564d148f94213845820a2feb7bf842ce7c77cc9ff16564941aa563fdcd7d3768ff2db2b4fc2edf823cb1ab3c5363524ccc6f1616e14da1b5579efd435d48642e2862f9bf99296e66d7ae6f0c0c2c052f0652e8634ae1da084aea4cc251ff2aadfbbaebccc5d4ce6251dcd0629ba68ffafee55c45abf9436a14ae3712b98df2940c71ccdbef38108af4755e3d1687f9a6d8b095ef1f99478b95fa9eaf3ef78fc9ece8d726cb7e43bfee2b2cbae5da7a4583f6222f6065251f265a0122a5513d6576e6ff6dbd25790b9a252e5dc9fdb5ca0197414615f1306a3a5ff4068e55994ec577857d3b0c9f378b24689cc53675fa075605852629c02a6723c120d258496ce84c2fdfc5249e994b21aff6aea523e394b642dca83b065841990fd90b7a3db2cc4da7cfd5c5a02ad35cc2635eae86df26096a482fd2718313f0da36601d1b63adea40ec36da7d4b03cf842b82aa3f07523d7bc4c60481cd7da60a0ad3fda10acb71eb2f40599f8c3008e7b33826f4f97e5ec4d2cbd0872cc22aa130d96e790cd493a2656e6450bf9246d273f3f1c59687780b0f6a6ec67d278c68d6da9bf56c47897b4be22b683399a306e8c15b3fadfa2931df1f2f031301e12a10f2db4bf75a7ed8a7f3337b56dd6ea293263dc7e864b99011cdac50ae3587a075c8a9c1aae4408bca3f9bf0d64133661115f98a9e712bbdb00f4fdbe1bcbd44f2a38f6299f9e5238226c5fa17f668a79083a491e1d7364ed8967d0bcfebf01f56d010175a1267c5c1de46a5adfd4deb90a6589eb263da26464fe2d18b7c20dd1e3c7ab5fdcf28b70f642fe87658671c0cd6d2600f76b89b955839c5a44c8235099a203fe1d06ed3452afe7c20f9d77abe4c9d8bb35c66089da2bfaa4a852ef1265c8ff59abe32ed1d3948ee603cf943b0d5adc01be3a783668a4f60d06e8cc49d16821f2024eceb10a8b9bcf8ce21529745702824fabf984e21a23da0e610a1073630c99467f46eef1796336285db871d706a7984db8d39f6a0ff156d2128c7dddbf5a2efa93e2b6cfb1fe380334d9ee4db2ff0552929d07bb4b595acf0e5b6312759b8313a3b71451cf15f4eb4a6c4ecfcce7d8c1f590b6bfd8987b1741b5188f73521933097f2f10a36722a359a5546a57d2a456329a35140b32fa13aabba467e55bbd9102f110736d10e82a39501410893fc64d22bf68029e4d176cf99d1c29a0f6b0656756308e65fb45cbf0b24558e509636adf757f678ab542678cee21c65eca0dbb67ad56fbc24cb6645171adb3f435f54807cf5ece84a58d8975670316ea4511a3ae73e772e857c495300b3939f528a786ad6e0c05da2db13de131d3205ff031295d5a3ad4c509fa9cb3cf289a8176056953dfc67c26d92e179708f3d6a3d6f368f169c93156aa4feb77c5b96d1f7139cae7b09ad175c94573f01e773c51ad079a60718f86f08b1cf038cbe86487ea5fde9d80ec5e281a4a6343c7977afa92b6083fbf41ef002c754d0fdea51fdf7306075ba45191e969fe92e35f5b0e94f2702cec98f42c467f784037d724fcd7c02000961b3f23af7a7e932240ab6c510b258cd9a9b78f900b701e7a3d565f5139a131e651b41cc5eac612f0719a52c270104266d1b1a349e4fa66943d66f000987750f97f191d0cf46e18f75cb8b21d2f4db055a4e77c7717936e948bc09c35d7a80ebc283b3e92bda530d57908292615d2eb92cac0287234b53b90b20e9f659cf64bc4ba8151b43bc956106721cac059d548d0c469c58410558bbf31a22a12da429cc496af0fe53886c5068e565e79375cf7a76b7c47f0afb8cf9f49300f6a094e759de6857e47c2f27999e98a5024ea72cf89ef8564c2c9fad57c6439b23328be1a452e5dbba2e6d9c13d8f32f061153e4231ee5373c5da997392342cd18454f8e72df26fafc410128f648e77811930254a848bbb4ddbc301e4ed7f970758155f98030b47f51d99e95d5b326f32d6c0308632f6eff61ec53fbe447a8f9b7c4d567c255c649f6d9589002b69e0f273af596e730bdf3eb0531b06768644c2f18bb37d83a41fb96f05fd9189c634e7fe2fa1f0e79901d10851e81a34f529e17665d2e8dc39699bedd1d19a8350b044c6840caa49d2fbe3480923a33752b9a1f61385f9e2742eae7312bc7a6160899d929f2fe2919fd90df95a37245e83c74e97c12645ca90459840862fd0f380d212ddb81e369cdfe0a606dffe487ac65de6203b133192f67f36e0e9736a5c067276db3fb02555440b424d7411b2288b7a934e00bf36211e9d982ebb0b29192634b8276b4091b99310b34565aa0fa5714bb92548e3a1014a947e9f4b774916dfc19a52c1497347d723b2b5c26631973da8f6673a1793b5598a982209e69310fc26db34cc72f8a7b89cfd3fd4029d64523d540d99a87c4e277117eb9c7b52550e02a19a6e64358d2fdfa99eeb5eea249112f4e34861ffe35d3f2c05f64df0af00f6dd6790b3bef4a29b33ea43e8e0e88dc0e31197b0c018cb55f6a8e064d909fc25251792271125c57eec053731ea7c075309e155e64813cbc461fe8b76a761b699ea6332a8450e3c25060a0e8b680523b36b6788330185aa098ab7c7a27941057513d88461491ef41c7675ccda84b29311d605330ea0299c63ddeeebf8f6e363ebdee6a4b8078a2e9fe4179e66a213d349bd8b2191f8f2886cfcdaaca0c6e093aa81eaf6c6dc60be047ca7ddfe9cb5dc6290559c366fb99d98d743598c90aa1002925c984ee9cf3256d9c5eb4996b8d830a81cdc775ac4693eb3fee471164841de49bc7881c73bfa568410ad7bcaa67f9aeab7821d6fdb85a306255f831ec0dd57e4e000e1790218c60dcec5ed343c289377d889f0de36cfd7c4e9afe11073705ca08a1d67fcc65068c4c113f2f05045f40321c0f0bd1d8bca4460674feef7c0af95509aa53234746d11db053e50a43aa914fd348ea1dfecc0c4c83eab03c81071183773a1766932be85cc4c0ab401d7dd7828f4dfcade46029b67aba2e3a69c81524f85efbadc07bb6d16e0e00a98647a0a59ee9e3af54a707b8febe5965f37e1419b85509f3e37c666c3310a761f63a3707c37d505da2d57e0e831278e723d94f1f81f4f5c43cffeb17e0208413dc0bdc3b09f30f1e8ab156a1750520945fa4bde1ae6f810e53c6e17c46ff3ffdd4acf34785dfea11b862a2d12fac516d6ba2c7ba39e73cc813a22c5b49443761d87e2304429fb83d8ac8dad648724dca66ec1ef1801a954b64d47088d661ed72da090ba57a854d31a06f9aa3f816003360ce5a61d9c86dce159d6fb995bca9fa5d1a3709be319b712f955385439cc40d588654c071ba8f293c3b7af4bd6179708d4d4c225e67956a08d8fe727cfc7ec3a5b23156cdce3e35b68a5c8125e99bc0c4f66835802303379fa69e7e9421eae7ac8e2697694c08b50fef99f423e21fb6a99cebb90bfd59f160e57fe308056e0608fa292ef3d1b7786d8487bb7408425652b89bbe7fabd924ee452de2c349075688ba484506711139ed76210fc0e87a44e5f86b8ad5052fe2f3268212252453526389c6df1f3fc0a7f51097655c16908f4bdb263e9e1b6a4d18244ad03fc0483e7afff073edcee9076050d38c272af21dc7a4220cfbfee123201011bbfb7ad4742e0e5eeb9fd8407578d559a94389c2ac3dc1be5520c938d0d500589b4da04c71ec5ce47cdf91924addbc952984ac57d3bb23ce565834dfde16931b6cddddf164ad4b6fd9bbbf19c4844b27e7dba32aa4232fbb1e5f765c4ab3838fced2d0d0d86da42fed0597bccd0901c9afda6d63e3eabf5a0a61e1175aab797de64706592f2062597803a76ef5a6fb8ff0f3758429924e6030b562fdc0959adb808ce51b0ebfb10efc99e54ed48323ccae251290a85216cc873761abf790d1c4ff75ccc6795e1fb37b582420a41a4236447af6b9e7ccffbbfc1d4ab1647b518b62a93a02d6ab4204d017270c31f9499aedaa8d3c398583536e6541393d7cb24cea6af5ffa73aad8721f2d8f5a2aa7dd81850eb405174f5b5fb77eb4bd6b0423f8aa1604929e4cdcdbcba6f510600478de8dac4b1a0c82d9431c9e138232b90983fff877c6be4f055090f0b08f74036a299a826a07a4f5ff7c946977db9de32a44497850c08a765099f8991c6deed94797017e3c8a633e3386e95fad5600f79806e0708aee7dd9d2cfab2abdbf7ff5f810b9a5fa47dea5b544f79cc8ca4e56708b5e58ee6ca811c9a8051c6af0b415107f8db8de68de6c94497bcab49fad7113bba824b8ddd34d34b40635701902ba71b7a29ca608eb65c2e2e9d083b376b73ee05e7ffd5a5db89ae47dfcd2486e672929792daf5f69fd78d4474467ef926aebc437173c3052bcc8d176ba133724340565422edbecb1f923f50d8ac56863417b2e63b7c4772b77e236d8c520e9793dec58b6ca7ac24aa80a4259df74af8cc8f159b68faa775c7ca4dd12976e88143e69d45dc6b142ec6385b7a5fb4c5a3a6a4e20b6ae3195ec7e69bb21fc90698843f971fdaa93672996e93c7c212e52df3c74da04a8f3bf8e30f3eddd1da9a610df479bf75270c7f7501e81e6d427b3c07555ad114bb7c81ebfc43c9eb8934fdab9dfa185f7f90e546013e9e62efbfd8e593ce09460cd7c6459110b6ab24c8106c7f8e2a18b85d0dbb8f65aa260e2d3db105cdd302fd40d955d1055b30e56ddcd686758ab308ea053bb9e0bca2b10dccf44819c9d83cd9edfec51a5d6ced1bea2a70f5277db4bdd8a99b42416c9dfe181cf3575fdb437fdb8dc8c2dfd80aaabd705461ff799f7ed295f3f68955a98073eab5842246516cacd03636072a427b9b59249b6aef5537ed15d6a60f2bcadb60266109a30fb7179166cd30ae23efb5dc8df57bb0b2b427a552c2f36e2828604430da897bb2f44b9ebd9cf9c1fbe37fb2c55a35ddc5b829031ff9835e0b7eaec658382676c4a916f5309f50f1fb233717bf752f1ffe600db31cb009077827ffe0e78921f02baada7351237a48c15de84243e622abd3f5732f01202b8b3e4513a66b42e380a39983db2e4d95760144a6071ade4dc51195df1859c3d0c74e9830cd214e2668785a0c5148ba84f4a9c0291b77e97c4777e4762ff4092041c32d1097698da605f679f61a96758b461013216f40c7dda0f3c3eaf10bbed102a5a190873ff51a1819b125f1ea947d4b67001c237794dcbc2948215a5db453bae81c49ffff67b3966cff96a8e21f14fb041b8bc941dd463f901ded53c930c3326a2c891541b11a9a2c7af6804c95f1df18efd84630589dd86a3ed78b96ac050dd265f6e3a68f2b485ffb3e191c5d20bd8d7c61b6415717f120e0c2f44be4ddda88a739d931fb38fef7843a3bbcb7239230dbc3adc2df463c5f3bb0eb4bc532870d442f624364fe37ea1e8e806c96fd06b3bc37847a26c849e2a6147675edd0d742aae56e3d03cefddf1b1fd00d0df5dd3a41820a4172cca989a6d2fa5fa609bb33c4a45cdd75c0d942a6e336c09fb93a283ab6bf024f7aa61876cbacc983037305147d34788f859ebae0b312891ccde6d44b03ad96ced44a05f779a929f9198abe6f928574def1ca8c62b5912b7fe4a36bdcc0f851dfdba0867ced59fac2a816b6e57a5c938d18db51898863f157f9bb6b30332a243804764f848cd83e7fd3a7298a727402d44286eb142b55bf555cdc8f9e65a9972a9692e9ff9415e4fb10417313ee0000d6db941a40d669c92794ec5fb031891c7b1de7ab66fbd1b0b498571ed7ae1e153d29f9ca42f05525584d25414685572f4c9707602720de8810f253de8db354a9b6a506a98c69d5ef1420094e2f7000a4d91d28ac56022404338397d63826a39698c8f6483f961171c6fdec592b6a84823dadcfdc2170ff84b7202fd956deded39a85bc0c3d242a331874355c110a9ad8abeb62c8cbcd0ecc53a3f8cb63f1d5a61154c5415361ec821a6d88201d8a6dff1a5f2414cadf99c094023063221d3190f9231dbeeb12581b97776f2fa3b5087aa325f619c26f1883f1bf0f794cced0deebf2a1e5a39bcf0867c1ca382a9b636e5191fbb3ab7c94c764b7f0292429537db806b81a5876a9a6f279e0594be0bf36cbf353c8ed28fc15594dc6420dba3ff19d16646f834327dee680b5c7f6b422d38ac1b0146da01c3ff73882d83af516d288da6c4a513ec6f6be906fcd4fdebb62364de98fe89b34e2f11be9e5dced7c76f0d38b93689f1dcd8b21c6f7e9df60055ffd7c386e3485273dfb350be2ee882c96f4310f8c1adf76b78a99e465a68536ff021c1fd2650e7bbae3a61ff75cbc0300214df3241e229eb6e19d16c56b7d8f08e19916898fed1d59b4ac7eab2bfd8618a0b1b4df73deedb933a4d66d814ab5d1d24a45059abea6678c81c71c3589f514e35c6d202d739e97cafa30ac46cd3253d262122f0834436cbf067c33863c73459fd64e2cf8b823de29757e7ac92781f9d7b0ae5c2f7ef078718365ff0e7f58a42e177ccdb01e0f25c62d838355a7ff466969bd1862e6621c80cd21a19a8666e6246560aa01a2c3b687e2be94c4f943533bb49480a1d03b3b4269df7c68ac5281dfdbfe0bf0582de5ae769317ebb28ddbf9b4a3d3a3b0a1c0d9aca324eac45b2f2ee8c38fff4429d8e8a3bd9ceaa204c1d0f16ba7d8283264046683787ca7eecfafa2d3924424330ebd61cf79afbfb88b0fbc93d0f3018563c45d9d371df7a1c4ad3b7e7af023fe81ccd0966e0602f154b47ffb25960215036009ecf6ff3a2685055c816277b8da164c26c58fe944e9dd57c83fb7dd12bbc9bc5e25f21b2e1d17f3961f435db9d872a4149f313160a57800eafc1a1a149396c4c1c207673df0a37c94435daf8ebf7fd9d6a16d05940ebd10c190e33f0c6fd89c7cb61b1d29613eec4ce69044c705c489a92b1ef20143d513dfd104f8afed5b623368abee3c96c2bb8bca51dd83207fb455d5c987731baadda18773fbe653d793a32e4d7d89c441a61dad3d70a16e0c1fdac8e9ff42c8094f6cd2e6100fa7e143893d5ea53c3d57df4f1e95d659bbca2f992d2651b572671423364fd97f3df7fc4de22c282ded58a5fc6f126f35621ba9775b317d0d595a4991b947d3e4c11c3eaa2c15ae039f3e45cbc6d647c32a8107042318dc0b5e4feb4dac7879b6c5e75dbe6a6f2c7cb93d9b4c460aaf13225ed1cdde7748b0d89e9dbbf582f0ff824e2f868af7a9c6f8871a95f0f315ed261f0b4c605b50ba85c9e3ff0b1706e28be782a1f0b8a97749c482985ca9141cfcad733c9c1ba9b023428c8ef668546e1396be086f8d7e066dc20defffe67ec45481d07c7ed673b09ca7b7e6753e6d32cf4b83832de27b3a0c3783e45dd8c2d897198c8f7c07b31f76bf341633f257f2c23283e9e4330b77784f10ef147a9ad38dc41e70f678a55a9428443066b1bd1b0143b5ef1ca5f9b3caa385019ba4dc2bc21dde2511b50080219d6f49b0a7746a0f0153bdd7e798afa7a80b0c33da9f23b16d6cbe7c92e143f78c866dee53548450621399b7b37e82e3cc063764710323ee3d2102a70cbb221681086d8b180b63715a071af28894740f8b9873a24bd0ce71349ffe2080cdb2495df28546d7b88748d16e5cca7665024385da1ca3236a373f5a6ef0a25678dd2a083a4eb528977ccf44bd1a129a37ea22fe4e5b088012e1a24cf604393a94dc22e2ed628d337af769cf38539f069817b1ca21e7494368de54f2f91bb9dc80985a80282b7520d87c9659dca194cb6a106e49684fbec85a8f7d432dec17fcc943170750b004b2f6b9a9672291d574e77810c4ad9f4ef0bbaea69bf53f9feb94edab1188aa1f35b833bffc9583020b66d262636b93bba8e9eb35bd188eb4fdd2b2359ed0e2727019d7c3c176168168ae268a7f815d0e49c67fe3384caa0cac6fe41b6c9a0cccd5088a3338354758f8abda795216766014b18ba7d473129eb14054f4d400e008c5d54d8a352f3833d9148a83ad1a6139ee9f61e55f1d493f95934f300f677bc3044c40ea475f1e80afe4e341f4f177d68dbd3840e85852431ff82e9540a87f54f27c3d31145889ae5c6d57b6f3e22ff87463141400a37151f99e9a1be0487ceb47812fc73d657dc0086474c81becb59f74fbc46015dc0b849e353861913b16e21269f94359e07fef8b46dc3ef26ced9b7ca5a5a2e6d9b6a08724b18f8e3c208f3285b99fad45bbff2593a54c848aca1b1ca7db01c55da0821e1ca7e752eafa542e59d0ffd9521f6eab2091ca4631add80aa2c5c056b6ea281af036e8eb593eb57e2fec45379b72f5ecdb58809e72c8ea9b5fb8934815702004ca900548a6868c43f8d5f7e3e127c9aa8b45b1860dba66efeb76e8493795f568be9d16d5a4e27ca3c723d87d0b0af306c5beeef43770c3b629e03177bd2320ec7f57c6470536db3bdfc23d7caa32c3492d5b0e4109408211d0bdaf7a77cdbac7c8f1fa4d2a2aeb67234d224271afa79c77bac8a692d5b7c8db93d5ad9c8ef81837ac1076698e56ca6bcd92f828635414eb6fed378fe1ab48f42dea80916af6e22d7acb8bd44e8e5c4da7e8dae496c9fa5ec48bc64778f9ab89b8a2df9259d1e8b53fc345c3e4bcc2f3662ac5850677c3a1fc75d880d7dd3f8bad7a057cd85ba9cfbb3f1dceaa4c54f412c41e08a5d6f0cdfd083083b83fb87fbeb2007dcf53cef03d9f9e276c2b404c4f1601c83f62ca28d12c03e50e8776015198876ea28597cab4a4d06d83b2abdfd4cda76e67382b7e42fe0e4f7fb79203bafa107ab48a965bc4ab8293ca02c94a4abbe373650ad0685e3f94b4005966e181eda7982809834bf3447895e547fdcb3e58cdd88610516f6770a12f42828ca94b0d383fcc5b46d68edaf6cc6577dc36da212d26395d0e14b6a2f7be3375d9a2a958ab43b17f3d98501fb0c5ff6e6174b647d84fd6a2864eb33a6a5606926b6306ed4ad72baca359f705a74c3cbeb0b40e9c92aa68305edc4fcbbc0530710c58101e3f4372f369b632196b3931169d1dfea59afc66874fffb7994b29ebac2cb344380f7a56a56604db2b7dd4dc48135ad0b99cd0a8d309eaa0a567cd9872fdef8f85cd71ac1291697f020bc0c7654ee07ec7b1d2f3eece43f14e60f03987245321df69fbd1ae48ec5fda20ceda07c4e75bce200a35d88c919e1f1289d522a76090db6f14eef09701a9997beeb16e1c99aa7455c32b7ff90fb95d9d209dad73b8c4b202cebeef8c2f63524b02fce71104828807578e11c0dccd61b51096d3e19b3bc1061ba3bc12f80ef5b054f9a62940fa50295fcc79277c75318c6831f5cdd5a80d29cc1aacc5bd01c442ea0b3624eccca94c27e446550182bf5e0a9379193441dd26a03452b3ea8dee6da40a4bcd67e70d43973007002a1db3e3bbc123743934e7938efd0eb85768f579ec614a8a2ec5b553867f8eeb781837a5fea91519252643116a137064dad0a88aab5d2bc5bfa92ea44d8c19fd672de5226ca13af369c75e241113e3b45d15eb5cab5d318617d68b3b535eb8b9f9a7c654603466f647db0b75fbdd91d80fff7a6a28acf3b1efab1e5da82f1906fedcfc6de2cbad8e6eaa39ef25938e57c1f29a7502e4e0a35b193307446ff5cf3a2b33bbd0835f0f424944be34b7d8eba164dbf6ab39c921fc9046a0701eef84cd06e95d388fd68db6d9e6075addf3ad667b1a4f5f7d9a93052242ca88e6d1b2c3274b152508e8441531c48d39b83eb49946dc27685189f6665c43ec487688c76ccabe4ffae81051312467f9b2296aea85952e537964c62f051918f2a8a4d32d655fb970acfe5b645a89ee0301046b1858255ef840a6180d85af6ccf96b35a8832bda9eed58f9bff6df616fb1b54677015497e82214bcbc6a07cec0150249393f6f2968558a6c1611be2a9cabd5c5f93ddfc9b0816131eba62467ae0d18ff4de31c6600413d0e5fdd09d512424981550aef72ee38f9ee78a43034ef072421e40916c9f4ee2709b58d4feb46c8a5c9836d6e6c80929fa5e602cb0c383ffc3477aef8c420247e92b90d82b751b901f34c1bec130dddf23afbf55fccee8ea53983b241706e989962d7941878db0fb9dcb3a8711dd1eb9de38dacf519790da2405d9621cefa82fbfdab5d82a159e4f206f36ec886d59b86260baa81291e72da4cb241948bef297d67fc9b4c22f2e968c361e0aab13c6f7d1a32ff86880a5b62b26c1037e9ae005f8de0b5fb82dfdfd3117ed2d452a3704aaec9806558dab738811933d356db9feefc340a310e5601d3898cf66c85b9850b0eace93892f82786655ed0b88038a8fe87c6d710c9e49f36fca612822fc070e72850153fcf852426614dcc06108e0a8ca3b0c6afacbc0e401b5ce663f956597c6e1d430cf17646b4e8b21f9bc217e8f39de48f0ba84eb6c7a95ef700079cc5aeb69b1c1566bf525604119565cf216d1d62901886b10f01593640b487a1e565de93c77d18eacb7a93c0e47b4ea8b5b030d5f161ff23b0f4b38d08e33c5d99e71553366e27aa6f16f91fc2213233efbf4b8a65acfb1341be0d2b94efb50f0f3b9d2c56d90e5adaa1c7b0da159cfe4d6fd5a94c32decaaef04a2ad6079797e3d2ae0b0a9c183fc0977d2d9e0fc901ff5f27e2fd69b7ce1866652799798583507e27abc60d508336b7212bcbdbd47ab1f4d4f996dfddb3cc0d07a3ab558dbafad056918d51bc0167875719fda7c068839bd42c53cfd7eacff34c1842e0dad096c108468e10bec53619e9beb8cdfccb6be3063613b8b687713d16589cef1a8f145168d55e81b889bc9ef6ea00668a1ec9eeac3365735fcf0169c28bc0dd8be7cf10515c8ca05d053ef33d86e694c4f4eb9a50292106f33a8589564c32ca634e2441c529c68e5996093c104964c3c5204ae1097930b432b5c42c15e2b5330425522fb1d0f7adf27f2c8656b1a36db7ac32c1a5f5210921d3557e767290cf6f11c101a2fc4e25f53f22bc511981f12c39faeb74d0881b8240d7ee58d9087bc302b170519acb3b453623ee010fa695792fe5d974365729943644c913fd4a2e4cf8f448d1fda9a2f6d9c29e827994a35309c3888bca603a9297c646488df2ea3da5ab2f55fb3b989d43d1a3de2776d7905590b6a64c6ea3940dfe839481fea78ed84f4ccba9dd803c412f940dc140955d3dc8f0fa709b60fd579a0f6fb885e1f8638f4eb5129cea36c00e7dca070ede9f33a9fb8346ca40891975b3f1195b511f97d7add7da3d4d2f6b911640ec0572d7329a101861a0fbd99c95c9c5be8e38e9fe16eedc6588ba6ca9cb74bb029201bf3920bc082e725f8516aaaf1e3875284f8760e7ac932019041134fd6bd68419e153c09d43cb9daf4eb90c0a07f58e2ded5b6c15d894618d3d10135fa9221be6ac0df74a5c336cca11f80f7d13b5cd045eb0bb0ba1762c82dd4e6b1b2c506363f998f435e45985b2a6fba3c633ec8f58dcb5504d3fd0d548ecaf7ff08cb57c693bad35b7fc06f45aef4cc85d8046799ce09728eabe823121fc13c0f9cfc5a735bda51bd0138f881bac0abba96deaa5f0c4a75b2981320c616adf7240fc4d3d263403c2545fe6adebadc2d91c8a18ce0cb2b98e60f552ad9406cedb0fcc1946cf9b860e6baf9726b4cb102c36e4766e3da7a8311ecbfd19b4afd24615c24905779e0b60f288930ffe3eeb57b195d07e52c0424ca4da685894d63b10b843afb73bcc8323d51d24d3090c1917c8530226f6fbd2fd664051ab24326a4e95ce48d3501688e6a9c4a496e3d76038e025487d3f9b9c549e2d711386ad83de271d22119ac02c35998a77cbaa21ed7c3e5951ef844eb43c0cc7cd4ecf8a1d733bd9da2c449c6f1740e47342e1a9edb57c4c8e0c44b70cc076c31fd9a139746b78b59514bb13c5d11075057c70c4b5df9d5e849a701abfc1a055013350e044708457f9b1af0652f197968d1ed024ed11c69d91b58e97307407d5a4774b7b951a208b82f6e3ff23baae673a3398952598424db73d8ed186231416713b7071276fd42ec0eafe9f6085bfb6d25d43a60b83f47ce8a39d3b3c73ecc64019de468ee8b475a087a0c9b91d6020591b7c7e0d9335bdc70afa0659d5cdb5ad8a289b7a2f835614dde0f404d0e5d6e236cb937592f134937261c73058809bb2bb5a54c61370ebbf2ad7c2408e57cc05d8fc7fdd7827265fe429b903277fbad48da35729d27321687c5ac53225a89914193f01bf88ca592e2cf02610c515223add5931a1029a5b6fd7ceb70f44ef53e07000e7c66c29453981ee0825ae7bf8b843e7b8d3874915a7cbe51464cc2a31822330373bc94677c8f043bcea1131e35eec997ecfeadba0dda5c880664b5b77e18c1a1c4beabe27e84cd6881965b37199efe7425a332aa5c88b2880ef3dc29637a653a3d4127012499a7e13e970407b9b73dbbbc746f63219e160892eae79a125861023f157755bb3a17ce0f81aba6831262f6f915b2105f5ce4b3bae0f4a88ed485d5d66ebc07f49f0e303b7794756b9a19b5705a994306c770379768a163eac1844432403f24eaeb7f12c09a2a1cfb2553ea31f851c6b870f2187128db8470dbe022a6d11d0871227ca86787203a740a75be81e5a7c786dfc5e0d4b756e41e61628d8044e10bcebe28d389c8735bb255ba3eb464220c0c0efa18031967369b1175a04890da1ac31d9f326f0212cccda930fdb5e0071174019491ddbafe4c3a12d5c35664866b1539636f0072644b04efbadf4b15e11be6c6f15c466c6394a76b1da6238ca810dfe8581c673b53fe3174bd78486563696d0b5c88f52af37afa605769c8a7541bbb4d5b35c0ccaca661c15a178d52976c6ae8c51ed49e053ca37ee644979ab3a3857b87d2c1a0db3f8db0232c35632daa28f76f545364fb7dd9b0db871c5bb6b0dc617dac1098d3e9959b9393a74131d84b69cf5b77200af51caecd388ab28409278295819b3dee78c20b615d2f96c988baeedb642143975416bdba323a32e68e14ea614188579c3b881904d13587899015c0b23adff5b7d7aac7991d127ef26d966317b971098aaa6307ce37ca1c4ed5254142d88118fe33069b1d6a7c59d2174648bfa025252bbdeb7ae9f97bbeeee97244175ff338b727bbf7665b721664584502f92f2bd37342d5c64311b7a62ffde7e5a601950278f0771b31e999efe88c734f60de8f58944b89a4372f8850dde7363cf977af32e2aa08c6f7ec4eaeca78145f49ce6d05493c3cad16a77940506f7e26d76c1bc12540754d591bc4875f64205700431a8307b7221b1c583e00237cbd52779631214562d4f89c0403a1956b5c4492bbf84072a19cb9efa7453e8d9ab89f0e875913161e0abdedf0b8b03776f5150e95651954d720b7a4e344b470ec9953f2087defda88fc4662f411f6bbc00496b0d01f1bde760f06168ea8577995a152857d51b72140e75f7ceffef81e5d6c10e18f58b44c522f7dc53aabc71df7ed98460f3eb8bc4c798530f779dac2568cce17d94b10c13afd04153d5fb344a2376efd58a2c735d9660f7bbc8fdc285167f130fed8dab75619e8960b8a7c02d71138d1495b5435e24302fa6473ce76bd4959ac670339bd37a028195a8b88d76f01e4b80eb8c4c4262516aeb76df222e426b554a81ad98ace66531824fc86513ac0c5ee6be5d80f309c1ed6f490a22d3aef78b40a04306de7a41f28a3ab7e11a2063f5d5ec3769cc6785bb0ca6ed56720b95bfa197cb45ffd376e02eaca385ab360ea044b6d8a0297cb72469594edacfd3fd3d62c1aa6e28d9ed38c20479025c48d7f7d6816b0f901f48caa1f9a6c5977a9153dc236a8539f879147c5ee44a0b7e018e36c8c2c64ef0f261896b89738d71bcf51efaeab6db561a9b673fe1b0f9ddfc8010614e10721d3d837d1bd54644ef3cfc50a2c141a517506e921d14c1da1e53ae74ca61b8f1fda6b774229eca7e9ff72106a9b22869549687a5dfe7498eee2ba87d234e267e31f759621b908c74444c33b583a00373cc6c08b49b18d20cf200e180193ae24ac17b2030954936a44fe6305566f3045a56a5d942f4c84c78c75157a1521702bc60954eee081320e293bd70eec4f89a6dd40a45ce1b27139b45c07d8b57afc62d623d61745442fb3d2c6f1e3b78e57716fe3ef90360c3a67ba5ef1ec17a7a985d639846cd6549932e970f81d26c2fd29a9840a948a4ad04bc62508714f14c069cc578801aef2909d4a69b93fe915aeee8e867bfcea37618d295eb1cf7c9437def3aa9f67e572f81460d2aa4196192079336123778c065c8f6795c76aab6fad9a79cbe253502028e9ef039e66511028db87ad48662cd2bcab173f499d41558eb9944cfd588fb17228e2b662e53d348068c0f4428379a48fe6891b67b06c9089068c83ca49cc775e77944e20f16c68bacd4842ccafb6b60430db73bc4fe20aef692a19ffd6efff2d38c41293e404da34b947d37ceca3c0c602dfaf6c02b774ca093c0224ee0b2c4c5b627f609f32107dbfe1f46fdd0a98be5b342d801155e5c24a311e6e85fe794b5fd10d13bfcf4bc387d762c0e0e6e953a1536d726d413eace9f12904a9860ab14df0af54f161571612ddeb33e3d0244113ce6228c4c0b1d6edb6d09cdd8109bc422b27be89f92d9c9cef36a9431638e88a836f09000f5fa916a6fd17d9ef6a2e8b10f3b86df6b1aee84795af21c1fcbc3856f1d4c1161d7cdc8ca99710db8681729864c8703c02f1ca9db56ec5b0fd36f04e0266b076778b806652f53f762b8321c983fdb64d68efa94d1cdb4ee95dc48fc297e47dee3b886a341ad21f710cb246b1007402382622d4e0ed37ed8d55940a1f51a5234d4cc777dbd31b91c4e24dcacf701a8520f51d47e2bf66223c9cfcd248b785fc90315ed0469eaf9d3ec4a609c2304dd83e6427165cb775fe206d14c9afcf586b4f26e97c27b2e36dbfe8cfe45c1195aef73c7434bcd13a58f784ff7b60abf4c2528bce2dad918b8258527c49f37fcae2ae9d20af5ba78a6830ba9e25694c9cd5caeb115197f457143dd469ed22da559b8f400ed9dda3fad1e604e2d9924102a5275fe0cc99dbd38be0379a00c57fa7781c6c30c2d3ab091576eb3f103532dd2e1b5b7ca207f420a2630421eb056146030d24ff5fa95b6ee55db6cf3b7426b116d3e6bb3fb0ce5ca66385c4133da971444a813809293cd19cbabb63fdcb9fe1ce71b4a76dc9a1b74eb93c340812dbd02985e0f79303724022e330d0c49062abc72c6a81f4e5df033dafc9a0505988578644a90c5e6a194a275a7e098c038c2d878e479da8ecdc7a73173d8b1a52e976137a29c32d4766bbcadc9d913038ba355a94ce24ba7414d87cce2c29ab8f764fb868597547b38bc01814f00cd505e2fafc505854bdcc2d584d2f3e5359576ac6485f2ef65722cd8def14c59d6e37e3ac1662fc453ab14cc15587fad46d9e5edc155c8289ee5e9b24dd3c78dc24abe1d5a7a52264ca1ab6572f342cf204a34b15333924a5edb452d6838be820fb607694b6e3afed6c0fe071efc9c3125c847d63b45a4fed7978456ccfdae307c43f4483ee5acd2b24bd7ba90ee470000112946ee1afd1fe2193de0d18072c7007e6b0f4612a32644c1f04b040e1b7ed02e2668af43a589ccc4fd62c8bfc2ff6fd6a0698a6b3ce45d8b5335b8c3c29fabecca6ff89ba45928745b7f9f0ea5cb0db0a321d079e135c8b9730740e99dbf10875c8c2f3780c1665dd116600c437e80199e50ae56ac052fe7e1d17f2f61a97310b5fb70def4234362745e7fe72ac8211291deecbbf5eabdcef1aef4071529f0c658c671be865efb81a1fdcbabe45f259ebd8657ebdd5def6009a05506bc204d23f0f50205a32017cc40d3a9e8ddfe8e1b686503bd15d5c2cb1b6eec460d1d62095442943bc7e7ad104a019e3a448cbd220839f5febee18e30abadaf067f520c6043a15c9b23e45edaf8b0a4d98f196a3c08401d3ca222e4960b1b95c7f63ede9fcb224eb9bfd5e96ad33f547797b9d8036d211104ac65c73c5fad4a4a2b2d7c62c151b39a242dfd169ab9d19dbe14285f76b87b36ba42cfbc99795423853e9c705aaf36bede458f1ba2a220a47544cfecdc0281aa3bd83135e31afb9a392e3d58c4238cc2f9f6b407bcf1dc2c4d118b876af0dbf49bcc26c1f538415073e20fd6a5e2e03a4e90a3581eabda5ecd14a442db375bfa442d3342ad2e0759a3159a6b67d7f08b68fe1797cf5cfff62b94c68413432457bbad88d2a28019ebdb66fa96a1b1cb8a8f4ac7dce35b04474587feaa103c659e05f0cc6ce5a20b5e94caba8438a12521d5920707285358eac730b5e77fdfe4a4062919dab2dde8b1bec12777db43b20b81bfb5ec0214330fec56fad216fc64a4194d497e92196f26130cdec9585527fceb4f3c96e94d244d1e1138bdf2f32631350fbfee58a171ecfc50805c4aeef4d5a731af026c67cc3ee9687e554e58ab52f40225cb9bc9009131b4ba9825625b231ac81bdd0b2d3610af193e51f27f711b8f956f22f11ba14945aafe32e23e1f4bb7159739f0ab0f766473a77a8de5ef8c37f4de71dff9d01b5cda70a52164f1063a510cbc7bc5f6c875e754c824974a2a90dfd8a6b08725a9f1ae88c57151656c25efcc0434b82007b003b59d7bc98bb4905560eb37552731327a09510c84a6eee89bbd0491cb497fe020600c041b638e0f46d497d131e54770fc0bc1de059da8fe32e58ef6a335b409727fdf0d9ee3549145fa9dc89886c02a66a946d0b4559eba9e0942ea47404b79922f6dd8624b0f58fad28f9409a0cfb31522b1f24b3ed1c59e17213b916bea34176df7e55deb98a091791fa4156e01a84dc3dc19cfaefdbde51c08a41c7eba9dba740ccc639c649db3c58108e844db9aedc725970dc85d9a350dc2db3bafe59cf2e9c17b6d22c706546f24b184d741cdbe8fa44d6283dc78ee8e1bc28e88eb22dcf61e79bd8c7916ce34a056d57fa09f279c89f9bfbd86fdaaede101b8cc8e252aef49204a00ae521da40c6bc4b42c8ae911b1ef0cd94fff9d3ee923339f9cdd4d88b4ac6e0a491c48276be2659eaba81ed8ecee25e46f90e2d4e8ba4c7b181b58941619b79e35217dc00261d92f2c8efb6840de109aefc6446a7845f2268e83ee50ecc3d7aeafe71a6fb64c3e7766a60a5245a62547a9588a24c16340a52e051691e0dd05a595ae4b363b96d01f202cdbf5834119a19055656386efe6074b6264c76dfe0eb08ec1f0decd7efd3879f334d2314f9cfe54d788561476908a27b8c8b95bc23206806fa81193bab27742684362dc220e2431131654adf6a0b8deaa8036b21e6bbb7d808f10a68f84b6f35e2b224aca844f6217114c8e67ad7dcb0cd780ff371e87e8cdebf530d0838590bb05b6b75ae643a4d5aa7972bd274a7cb10e7524e8755ce1788ce0948ae38a014c352351b321e77da6289ce0f58d00010d13392ae68050e28f4c5c59443400d8566b33e4447ee55e834d40aabc3e33df12ff206bd4f95d9d6087aa9b651b9fea9d20a65667815dad289ee07e1166793d456522ba149e2f6da6e031336bf1d01a5cdadd6f1b12084c93691d5bb47f1004b8678144f257e8327311b28c3913b71013ca9eca60e2dfc4db2e6d76a6fb71bc30e79e97963d5843d91c84d0460c7f797534f247d5c86620f04eec8ee0955e0ad8ddb94d5857a18746b572793ac6b696f8c57a34dc3489811a90932fb294b2938f154dd4f1b8b9fb80efd885096468f005800dc7ac169b7365cda608031969532cdc8efe82d4e275a2a3de7f233922b251c07b25768263d6b2b83556c28328dab7fcba43d9a78db86e88f6eecfee68ae9d92a447970318ddcdeec70a030b9e163cecac166d84df487059afcf1ea55df9ae90ca8e29eac2bbea0e66c8b90592d734f48daf7df1536c6ed5d5945c16da88dab395c9b71b26465e0daeba70cd804082ab67573d2200711022cfcfed16cdfa97e424a8e84aeab36e114d311d381efd0b703acc49729ffa109491f16fe47d043211e45707301e25b031c374b78eb0c223388ea9c92e5de712c459976fec560b84f4370d1f635ff867b8b29fca5c390dc86608593652669d0fc6e1b11a217bcc3e40a808b2558377a3f386b80b319b668d2f35a62b843852cff7f1a65c8daf0c3cec7886cfcfe5ce548c04a0e0dc61ab85f99189e9b013f9c60405c2ed16b471a4cfecd873364e149b6edf588c202d4b8e1b21a23e3d4d66f1d18c92e18fe01cfb2a2c4672b1097e32774232765644e5218265aa36a93ac0792b7ca4a09502972570bb7d17852105de30906a832f43745fa9855d339bf8572c5c6232333b01666bbc0589f376b3ed5d9ce7b359528f289dd2c7b98cb16489ca31391527164d2fa15ccc1580c40cf29d150fb975409e631a07830b8162aaf8016d2d2f673856e3e3c5c99352ecd8c6385cca47463940958abed16fd2371650d134f39d8a303ba71c23c986df659341ba3adf9d144f7ba2e06ca51190bffb6e57a5e7ec1699f275c4971a777e1a1056632680a624d0712fcc6a79c4626fe4614ed989e429e643246f52bcd5b413dd324fabb1c40ece3dc39430ecfeb975336db07a8bc74ba6797ba815d67a65bf817c9f330ce612289532a70155a97eb33927eb50a472fb7f514019842fadf3c7fc5e0e6139d80cf85e7708aea35a309dc1931e06b60a6681e5f92d0d68010c51f9aae8926a4098fa50bd847e0297d751468b855e404374fa90166b5aff495e7f20792498d81fc9c148fce1612f6931c9903c42b6082b2d597a749bd7dd8211249cfcf32225eb8c467dc5bc051f0fd99a70c19311e659f39cee1368f08b783e5e834465da0aa899065b1c176a49372d58bf784df426294d926aa2009b8a8b96cbfa3805ea68300367bd1a06c36310e7833655d069334def7bbe7b542219e969bd1dc1b911495ffc543fd17923a6d7105ba702279be10e3b711c661de63edeedca3b1a2feb1ec7b50be0c8cbba1377daab073e9a035bfdb618153c06927c566782bfdf1af6e706c193e09b4e6d24602eee1fe5c0698ac4d2f2018bb98e0dbb4549a0f220bce83f37b29984af997f8ec5ab1d211aeb4b8820ac69a216cd68c67931acf9693a5d699adc31b2dcb500a71e61822950003f6f365ed3674944b12ce96092b152d37e264a121e75a4a5bd8ec7c351bfcfbeac8eb6741a81a1707a2f953ec4f90c51850492eb738636d81fe7a92526a7dde120cab20b7dc7fa60f67ac2e4222fb7e687bc9b675efa5ba8f473354d037a6fe13527b414763dc755247bcad65535aec47dc224c58bcd93e8e99c5a6e1c05a588e690c59f90bce19d833ff270e4521405271dfdc5af07bcfa946afdd5339afd4d1cb7b411197749afdb5357799a56a71a4b8e8b0a7c62f2d82c6b844c83899e4dc2f17fbe593ea8116631f4c456cd78f357a923d35de527cccc70ce0630c35a9a0173ec0d231dcd5ae80c94939088a8979e6821a15a868b839c4ef0abdd2e97f7e50395a74c5eef7b5df83b15a4caf01e0749eb5156c5a5417f456a4ba0a641b0f1b6664ecf87780c1a682fb4dfba2c8d758427a9368ceafcf6760f757c076769c9ec79bd705c2283ebd5c42abbc9911e36e2483e2fec369914b811a97b662703cec1638ac1e4bbab2ac6e20c7f273a69ea4ed5a42cdc0b0bbdac800a6a06d95421f8e8027901637ae6d4b6d67ccc050467ee7a87f75b03c47f947d06f8bc5f29cfa0f28ce1e5ead4558828f1df0d50a034e1d65ca31bcc08bb7285cf26adeb14efb82dabec4d1c4bff80b612a76156c47bd803b69d79d4ad199f46252dcbfab11e826b4d7d8cfbb52550cebf37b80cf0617b6d075bf50553829f8be107373c16e2821bf84f013f70eba67aef9b362bc602d19e6319de7304b91573395ed3f491f815e86f0363bbddc5294d65dd5c20c20f8171ac7c37c7f648af1a280c539ca44f479f473928b0cd4516cb7755fe1ec310d80644b5d052420f718932c1f6af218221680322baab5a7a31c0ded20237fa8e81726bbab93f0b2a8083fd2ea2f4239c8aae3b7195060b5c0982a96fdac1751bf8a56a2dbdd72c9114f40286ba3f1f2608c26e443089bcf71a36c9be780e8408b4dab4640ae3e0e039cc75cce8512729c8bbd6138ba1f75b099a5427ffce039e24069b7d1fcd0e1cfc54b1e1ba1a518f4184ff481277ecc479d447ef76b0032a0822e64b6db1eec4ac3a103284cb54475a51640196d425cbd3f680eb5747c855a5716a44bb886ae482de95c30d41ad05fd7b6987cdd59596b4f7fbb0f1fe591b85258f3d0d8e9b5f5b76068911636ec101074b3a3baf3c059a19ca2ac4e5e0f060b88135924a58a282af7ce3f4680e53caabc38710fb6d84f42a467e4ffb6f6be6a51aa772e34b3d572afc79b7637ea568bb4a01ec9adb837c41a14de24e9375383ce61dcb5642a950d99f72b847613ae85675762d05f007ea17f736c868f4261d853e8458efdef89b9d49e2f2add669e19c0b1b808361347bf41d02ca66dfa13defc6b245cbce6cb526eacd41b50adaeb55869564ec2d4d484e60317614e735d0b8442c9e36635997c67ab920e33e2c2644d0777bef1bb70fa53e3790225b7435eab56511df928586cbaf17fd8df7fdec7c1ea50c64e7ab3735985171a3368df962860760e748850ad4667fe2cdbd18d7be04c8a3d773d25fd8811a7004309136faac101554ab8946c9704f0b4c04b195ad48a57cb9e163db28bf189fae67f90a56fed37b12e38bcc40434a8f4b3e54306dde3dd0bc4c976a8a72a6b64fb060c1a46f9bcd64aa949dfba049dad553fcac4f6fae78aabda3f7c9f509f6e1318f42b0e7ec7f806ce17ce7179de0dd17a0c00885aaadcdf3a8baa0b69f134b59d90c1a03efde2a2dce0d3478a7b1f6d285e136dda200938475cefb09dce085351af5e9ab1629e27ec86deaac071f5b79a0a4678c0a62d6be4875f4864e72a2a62db0d088b4f9d91a48bd734b7767dcc25d2405820cb9e5ec8aa513f65b34c037b13ca1c68555b305db21f5dda8f35e30817cb3fc749186d1f67a60a406f6cd59718efe78994bd6001564479e8f3f5e037ef87b41d2de7f6565103081d29b2c20f373ecc2e13b67a35437e6ba578473b2d7074e8c514790f486b105626454091ed45663fe601c503979b21ae99827e1aab178d4a2efa235fa2dcc530f39f9e36819b205f7cb18692d35e5fd68a8b8a71985e44752ff82ce1e79d2e622e981fa2f3a65b9df0e8a0f4269c126a84da95b928d787e7b4310effe188fad501bc9ebdc808b1e6c7bd1bc0858309f74684b69d610df1589703b3dbd002c4f081550a0a8572c55e132c5b4c30174106a48c2a44aca470e84a0fe7b355ab000ee5fb366af61ff9d1ccf698df35bef273fba356780bb1cae91773cb23bdc14c9b810175c09543959dbdadf3b69933b5af3189df5dcb6f1bbe130ec0fb7f00a1d6000ddc7ac8118cd88df125caff653b6692387b57e4d20db380d48dcbf1f974f60afe9d8f2a8a65c51986eb8933169dc5af88c2250224a584f01aa2931e6920da6eefbf1a125e17b11df1dbac248b946ee0c199aa03d88bd97c387055855dcaf3f29d52d08d3cfd80a291aa7fc49566536d61ef0736aa3b7ac4c2e0e2b699698413cc7f4263875b8a73a215aee0b5025df194691bf7b5b252786792c8946106c47fa36f5da98046f00dd68fb7f308999b9ee99c48e861501299e2083cdba0ef527bdeca752525cb1495f87b140e12b25b305cb2ba8bc05a4469c1b5ac66c3e09011d8cfd6f2df54ff3d340fa86d89626fe33a6c248ee4d71bd221b1e5384a53df4f567707a9418631c704fbc9b8df8c3fde71b2cabcd5cebff7c1a5ddf149b2b55eaafb9a7798b1f7f7b382059498ac1bfe1df675493f4c5656408a87a67a0fbd1b5671fb5e5ef9c34a0e72e942697ac7365f59bfa8ce52faa0d17d1e8c50aef8a02296ef05cbae1554a1eb1412fce00daecc0a3c7b5b39dcf0e605b1ce9a340c26fecfe7cf518345c7ea4f156b147515896f33b87b1c81dcf05d27f80b0f8cd65d91dfe5832787ca550f5b2f83dd9e8ee1c1366e0c5bfc3654a22aeb0e6e2441838d34b85c93a0b0dd9aa94af09afbb343fb4a8fffc874e65533ba226b05091cb466e1e8be2b3144760266b73fd746fcef83cd2bd2726928ad64004266e1a10e913f91289c8f339ef029299f884265d03fc92cf81fa6b9d256055cb38220b01b3759b191f8a8b8341478144f29114ecbb4025e36e1aa40ff6b032e18efa16efdb5028e8821d78dd0244534e6f33f7473bda19e54676976e2f8ccece7276373310e33f12cef00dd1a3ab9a3f685eef6ad597cad8d5205723dbcb7a3b107f3640f5d29843294778c5ea4aa6ce500efbe3ba8cda4ab9981c9b2bec233137beead7d11ff69cadaaa67830c415249a650d170de25b0ff4a9f55080ff12ff1408f4c0d12b9d6d7a0a0962cfff06b1534b752c6b7e6dac26d953fa98039f621895cfddb561d175981616cdcb9a3ea9041d96a6007793f82e524947c93927fc7eb45fadb720b77c3b26c4bd5877c7aea777cf1344d56b879832ff24f6c2523bc535e86a2e3f9190de0a041c21a052fcb84484c1c29c68bfd69456b96a9b485c66d970c4c4651c179c80b128e28cc585ed7233829c14d45e2c7c4580273b3af36e06c80b967a59f80038f5ecbdaef0569497db954294b7e326caf1fd2980f7b74d57aaf1a23b8bb5db3bbdc5c3e49d829e57f4ad1fd9ad5ae1b01c75f4a8d5c85ea90b14016848c34485f5023322b8dfecf0d0ea8fc567dffad4463163afffe621db7a66fa1faa1593dfa619d589eb714a9bf78c7f7d0ae89059aa689b9523974ac433c49d5ce68d9595218e9e8578f7fd6be6b3cb7cbce54968d9fda4afc1f695ff0893d3a13226750a4ef5e1a86018a5d9b8bedd7f2390821e5eec9f281ca1b357366b164820dd171dc482ab6d02acd84f007938d81b154a76c0fe5d84fefc6e6da00faec76a8c6a8a3bf2a5d59388309b9d3d58a91b8ee3b45b93a51c007b266284f597a3be84ef1724b3d6c92792b342ca55f8d09187a31b66885a5c71b9a8d9ede592c42bcc0fad9f734a4297fc2a5a319eb4a49f434057014b27363bf360de9721dce5d4653ae832871dee913e233c3b7696036b6b8be6697359c7dafdbc69fd3f88e0d7338144dea31fa171b041e9a6ccefe279a2f41240f68373728ef78810c393fbef166084449da0d8508e6d8906ca4b921adf80a08277725b49a71c3ce12c0c43b8335501374500e84b331ae8be73609d2d52143eae93a22f112dbbf6ba63300c1a9a69a2afd7ef148247fdec14e3ffe22bd106901b0d717ad253a3bf2233f431f6bc56b42fa7a294eba2976b1d7e25de07d0960f9ca4663d8282bfc51b907af7edfce4b841e79357b93d4ef90a259d55e2850ebfe6d0f209faf0d3ea4dc748370cb3439f2ec0b7ca7c21ff1a848b1dcdad1fc648684427ea31570a9738d4d80ef81e3f8776dcd2a72fb238db0c42fdcb1cca48df2349b956ac3e66c70d58ace26d7ba51b5e49d6c3a5adbbb37ac3c8b1b54e225f23c974ba0ece8594c2c12cb577cd7ff339b84d08040bcbe1dc1eb1a70b6e2ea7e7f22d3f1be0c022a97e768f62c3985b76278df57f90ec39e149aafc4940c8598129911fcd52001040db6e39133c1b455d0541d5f2abb0c0201268ee3e7cdc29514d22fa9e05ddb42a13879c9305ef5eb62e4b45f7c7049458e3a559bc4e8f09578a43924908cb24ec9d61e5b3292f73583b4a34fc33f82a642fec4844bedcb4bf8187a60ecfded1c84f80ba135ecf096bec64f3f6b51af96a71564ffa8e4495c36d55955bfc44e7341139980a252a67f4f579f6a5f150d6c2d592177b2c26d627f32b8b4e067e840a2df4135ef7f2a0df67eb3b74d0dd71124db7214a7f88a25376577cf4f4064464ccbb9e0c16fe425e6fe8fc29647b32dd4183befecf7e149c18135d9dbf68bcc4cf642328b7646af876be4b5fc98979cae765d09c948f0f9f515db86843dfcfb7a4ea99a6671948424441899d1e9e0890409d282fc1dbcf9e10c2afa75e9afea7507a4af5c6ed2b82830c08a88ce367f4b4167e1b2afaee0752f2541a1e3cf3673367f5384d6eeb83f8482166abab8af31d552715ae1c8c27f23a8ce0fef93f30795684bde055c90c59e12d6a57e1b624401b44cd705488beb23f9f5277049e0deaf027e0b1e1cac1cbdfaa880fbfd2a74a3e493f21432d7f2bd49326ddf8ccebf9bdd70e8fb7af758e626216299bb5a63dd8e65844b77eb52ea050971dd564fed174f3dee160a6f1d9fc6c3df36a471534e4c9e80d30782ff3649d00097ae319549044f458e4d93c3f48f7b9419d31209fbd7ac87f2a2864fdb0988d99e1a9ad0c75793f585412a94a5107b5c5afed6072b5dcc5ae0f703f631129414ac3dc6dbcfd241908ceb3eb89206cca141c089f0ba7deabc1572c11409c45346a786fed6e77c6377b93f78cf4fa13ffeab04bc59268a3237a9e6341b175536a03cb728c72d9b8f1f5eee82b559bd6755fd6bc68eb3da440baf160ce9a8dfcb82899b1ee115075e1d2f5cad1ef812a6eb92b70561c67b720e82f53dbf0277f6e41ac958045200e02fed26ab6df0c0e0940882863a48d90f34420a0a7df02049643b7bacefc9545aed7c0f494e06bf97bfcfd3658a09cff0dae3593fee54c82ab786315496fcebac4d4b8eaf5cedc0de8e9ecfff5e09010d9e55ff6185fd7a4477934b2e35a34594c8bc18297026b4715bbe1138326a28592d1beef94663a4ae4e73a8b0bd349f66c8338e23f1a63e03a4d66013d8e550d6e6df867abbc2b8854cdff86c3b09e732d2396371e46d27a129f26ecc2c69d2037f06a13edd6afac90de9b695ae7d5a562616f6149101c9ff983bcd6afbecfd044cf66d3abecfada9b19302e7c8865496234b2f73228a9e14792ec567ffe86f12e5e8ed9712f8fcaaddac36d8d16b63724f717f4ad08ebfd00d1d0b5c320dc8f110a517544f5fe2ef74767fc4e4b7083158925fb4249c1ddd48efba0ad98b155a35db433f55a486f48acbaf45546ba1958ea923a6dfa6778047e782496a28c892848c86eb74b7bf57207eb3b2e4b528ae1bad1b6cc925fe9a6234a83f13bd72f8e7ac9e77ff19e824258a19d1c4e5413409220c21fc1f708548128efd8d78b693ae1ec6ba223f9e67fb1b9831fdb3f774234d54dea9aceddef6df4d16af118dedc1aa13a3f245d8638609b17f29f9c487a5558bbf79613cd76a9ffd07e8ee8b80e92e2b9b8691a87184d4945dd7272fe62e664204c3432ca4cb9f3646a4f4d833e0e3cd1009e60e19fe899a29b9c8ad1db2b7d386eb5e7280909a2fe24d1495aa78f525bb7bac3c43fb645dcd2a49d72551fe22a198a205694349d296b9ef0c3f0400b8bd0371da53c9fb30ba2a9d9bdf48a7a59f2d54a8ff3b58dbd706089a8095f26d926148a3c60ec4f320cd351be768e5f506c057c0152c249969bec5fda36a48c23df498d17d62880969b2592312eb07ce9015d2784cbc5f7a0b6bf2d4d3a3f0ac8227f3468e9b5e0013e29e9034d7e80b362f9f01e0fe811e5fe896f99bf4a4b55e0db5dbd16eb63d051f14cf016c31747f9dc03ee5fa6f7ba32619cf75c6d00c7f13de3a4d69740a030b40e55dd64b96d403f43ec615f697dcd01d65176ffc9ebf15f11f412e647ef19dd2034d1631cbdfa17e13aafadc6bc153696e25c0e1fc6a40d48466f92c93d3a9658249d90b2a7ef9bd11a70b4217f43efb1edf59f00c1acce794b5e688a0fe30d00571a9d161702b06dbc188bab132296ee1c17ac83a06db274b87320615235654aec8eb2f84f5d2d0c1579f659d426aa3158876acc60d39bba24d078141ac84c4d0860892ed1dd31c1091011faf01944e681bc94ba53d3c99ca1c30abe7f315ed94ed7f58f9640a9307838a1dcc4af9b0e2da49434730485f1cb59bdf212818bbf09b663bbf0ba34e8774b10538e5a44b5427d6a27a1d4f1a0b787ed199136ed5aa42cd7c31cc054c50daaa708546f8acdbd57d2323f356593abd294114333fbf7080a689a751c5905eeae3d1549ba784753f501d614898dad727bb3956ac548a42b60b464891515cccb57d78e80ca15058ed7fcf41a2c579b81c2486251e7b0726ef7203969a9dfb5913ebc771001651fcac980d79514b9a8b190ff6641ed8ba2b909115cd7667ef48ce8f2e29db7f613f7c71b7767da759982854ab38be1560a53d789c94ba6cb0ca32726be76d5a22692739daec654a512cf7d1bc16d7ebfb1877745a8336511aec7bff0523b640966b68e6e5b75b39d35f016db2f741f7ee68360e4888509a4664511e45c84a62256b9789bb64fb213e094eab69b8597aa92bbc7235b73b3126a9c50a93346727d01fe0b07191928593f82f90256aff5a15a12b0e5839ddae454685967b984363fb2e2e670e84b4e4a02c0aa5cb1e39d881c5f73190647cc4e650c208875690bcda608d074162e295eac51673762e684efb1daeb658ccdbdaf7b0ddb471f1d8c3682835b8b4f68b8d85080377149a47f0993d6e4a711fec71e6447977b062ed9a2c441f97d844ce6cc6fb63ad4484e1c06f0815c19f4d6f84c29f4874a740357d8f5d92a7c726860dee13e9353a2cf282d962270ad42490f972aa67e566b8b764c0d1a62d1b8f40693a12a19f966b5725a4469101b71c8fe196e53dd7c00ac06bca308540a8251024400e9bfaffc635f976cba6b3e62ba264787989731cd098d677ddea496ef99ef42bef4146b9855cc67f1e1fa6385a45f4661e26243b8d7cee2363af4b140573b1a87c20e42a8b680cd2f15bd1ac361b90b351920a6bc7e1676a4dd184af2c8e9aa000fb9c63ebdabee8a23cf648c4cda5120e9fbc8ac70da615970f650b435245db401cf24db0840b5a402c1aa022556293c26827df489d854bd878b918c864b4e66e6649009ed6b42213238ae8844f40cc566c03eda3f6f1379b2db7d4305262441a7a1c51ca0733f62800f61e422fdd3f7894d1130651d7b6f42bef37ef23b21b167399ca5602b73ab43709dc4c91daedc372b793994dd2020ab009c3a1155ed20f936ce24595a9508b1d99cbb0c03ef8a37f0bb0bb0b23596171cb9d911fbe16d7c0844abc6d7ca17b5d3504eb37103092684f533d4dae92cfac39b03b140a5db8bc8609d37e63568e561f3f1dcfbcd12323826d211677d7ca165892443c9973873fcb08c72747d4ae99d461332390bc56b589216001e2dce9d21cfa9f7a64489b8ab3e017aef5e8c96f8ea37e7b96869dcb236ccd533af6aa6d9e911e7681e1e43cf3f150b8d8e7dfa59007327621c7b470c6edc96a11f7daa86281117217ba4556f865c8394f9e527ca779354eed934e9872e8911beb04c7caa5ac1afdfbb47f638b81950353d1346f7082abd974891ddea8fdb8a0492fef5185a72ad7b0bed800fc780f198292486f892809c771bfd8be113c8199b5111ce54438ab8bd5e9e8a437bfaec45292d0ceacde890e0ed5eff0ef50881a9066fc36404de2990e43b30098f20cb97e890a541d09a973b11885484f366e0c89c2e99acb120d1fa0255a83701a24d572f505f096d041dd89b6076ca47fcdab5eda18f77ac523053d5d5fc22ac91e05bdf8d6338a2f868bddbf49f5212dfa41930caa3e78193c50e3ff068406127d6258eb9d9b32508852d40408020b750910310d99be7168ae8e8db3cd7cd419ddc8399a5798d438c88a8d7252d8f03204a0832a60c4d998fee3b66d14e37ba1fc348e426de503e5017bf123e970db241d9fdf37ded85f66c9d9005d9f82900cf0e01a9b7cf550c3d34635b197706422782b874e5c35a9489b2f3e130aef53060884b44c67c5032095f9b5c6cf0ba2e01510573c156000c60d0b8fadd4c33a9878513ad90bd9e3baab17b129db91af3ae874e29543c95f242cee3d51c9119ed984abf41e64b7294d9ea6caacfd6d24655e28782ca927e24268b7b47b438a945c23f1f79844ac30d8ad41126e41a835e5c6270a9e9f8be0061085718703bc006156f62750cf033cee040228a25489609403fbe3f8f006a2cf71a2ac4f6e2d1b404b003220a99d65da6e2c3270757b8fb520981464cfd247c08317d7f8435c1af543a6ca967d912cde626c81d47f5d185afb36c16a19db3d250ad5318f1794cfe82cc945d05ab1385730e26cd2c1485d23de774aa5437f08014b0742137ba2584dc1e8ced5b1c722a00fb7956aec6ccd6c5412221953cfac019ae359cf950a851b3e74f621e690a7749924c88ed4fefb61e36142ee0cf4ab1056f46508141300803d5637a2b569c98ca96f0d8850c2575a61153adb5406c4280857231e43cb96af07fa82a1305c779124adf13d5912ef42b0fc34bb738548b2b3cf0dc8c3fd953db8b7bfbff4313f5eeb4fb13901a8925436fd1399da39ecd12198de53f5062e1bcebff36fbd03c725b549e62fa1ce5b277d67dfdf39119f7c5336c206356abd6b20ddb46d6acff58b24ce6a0f0fff8afc6b32643dff416973a539d5c407f90ac4f892bec20c5f8c57e671a6fb140ebb51ee25a7b7f8d7f23273c77a9f9e336ddd0cc01f8c10c1ae7a40938494cc5cfd138e295beb9e7bbf9183dfd7ee954c5f75afa1d907aef8b70cbaa512f28800dbfe48cbde8d775836227a3fd1a522c398f4ee10d5680ad59f5b89096e5e7bbb87a631b636cc9924fa6252b8350ee1c2ccbedbc0278b4bc6b45b2841642b7c9b7973fbbda68dcf9bc512897eef7f121561229c6aac497363e2abebe97c2a60666cd52304b84bbc574d1adc9060af0236eda01bd38d51028359e0520e103292abbc127cf5a7fb08a14441396bd222cd7e0bf4c993150af5efe3537e9fb23838ffc31bf655c019b17012fb761d295540ae504ebd844bd4d38ef839ae6957a69aa80168c2e5be03db32605deb6792eb44e934fe709e807bec3035cd07ffe7057c5ab38992aa16c2141ffb473684e8a4cb33b09e0a20f6c3ab9b8cd92748485de349101aafa98cc8f904f3aec95cd36b10676741f4af5b8d4c8dff83ce5e7d611c399a9ae6dc5eee91d18fb445891351e1efe1abd6a78d8e0a23c69edd49726a5d77de33f5eb8bd0df091d4019b1bcdb935807fecfa30fa0024baac4d9058a38fab9d91b6a9f10801e7fe66d16fa308c4e1c05503bb5932b88390be29fc1fd4dbb016850bc356829264d52aebc429c91f7db130cd1466b2a15952a55c53ab57c0751cf9e90fd9380a803cde9a9d6dec9f793822c013875c07ae93740d9e16f630b4c6976d9be76dbd0e90cfd9955a665ff30dd9c4e4b25035d6f200c4aac90204f3817d3bbaf0f6fa7651c6e4190eb23425ee1140f625ab1d5ca8fe0bc60b07374ff16df053e11ee134c32e6b03266f5bfa8d8902fe5f2f7915f536045aa510146ff5655305c42504b8b848c92225fa79c956de113af2aa889e8038dd2c1fd11ad66d06f8fc9ac1eefcdde678712c4272e79cecc217e0b55fea2e4b30a667cb45d91cc96c211d4b7436b3be50749579d479aaa533737eb1d16f89b3502f0c2ade57a007cb4c0c7a11bbd6da62c52cb4e99fb5bcaf199c766cd0343437de20fab81b2372b8c1285ee9f85752c5c536b9e83de75a3ccc272513e8ac4b1817c049b6859136c3200471cadc6430577a9d9c07f3dff84988100892fec4753ff11ea8ade3bcd39b256187bb5f176731b8e5d4f55a1bc8dccfb829a6287edd089b95f1a106334f677717ddad0649aef18d5fb04686557b75c3487a5541db6ad9479b01625b06943987cdfa7054d1a933907f14ff0b585425c341e9912bb2a94439e27b2eea89672b64620535d9039b31acb0bb3af82ce36a16eec68e9bb4ebeddda317af38b7be960c3e7216c89e467d21a78c4c6cd000affdac2a35945c470b9d7261f1ba9e57482a0666e991fbe855b920184fa35437ae0e9607917216108f09a6b841473fcde3c860e395f6b1646db8b290ae79ce93047188a42a948bb3aa53c8f3a467a0185598cbf4f921e5e545f7b8df17f3c2b393b1ec1cc56cc921ca684b5949c13f03d83cd9f17176051e3c497e90f2bef489ab215a6dcf547819e7689ea1788192d206ee1ba18424dd46140e75ef46d8563907b06cc2ac750f2f8df2ede8685b9a1e118e18f87cefb98e21334a02a03245a8c3011a19b96f177aab3a244894077dfca51805a578be27472d554183ec7c2c7795a0807d618e1e8fafdb50a2e952b7ba3caffd38ea0d12077270f26d457b18760fd4f465feaaf9d1f88f927cb9b8a4326f8d679ee2525bd7c0ba9739957a4942abf3e3234ff9bf60396ccae2847a54a30ae4b144062adde23806ae0eb6b09d05ac1a596b18096349c126c5cda6bd51cdabd08940095724b8c8f8031e817bd00a5c46ee5e8a762a1e480677e4f223bb33b119128eab78d356f95c3099457332421e5510694f700836a466d9a0799d5ea45d0529aa5bd91d83a3c3c5f935e9f2399a947dbda678b7bcafb180d0ac92f4f63a3edb98e5115b32ba12164943c2029af793bfc3273f30c6e9ad8270644a096bb8257f324c75697041b14a2d0224d58f1e6980e180d5b76a2cb6fa94790ff4773475ac79de668f56345a5cf2a8dc16b152849a99281b229bcf8aa648184635101f60f812d4acefbf91e27ee889d3d7e451a066e9d4682e016c01de63d5ed395f5b16cdd239ccbc7e397ec5bfcbfb9d0911c99d3d2f3e0887c04c4c2b25d0ee3bcd52bae6be7a44f9d4acf48a9fc134b4da803a02d78050facb852b2365fe94a215f96fb8b74fef71a344fc7d70d02012911f8579f5bd0f54251e541bfb0c6f7b302cd64cbb190db3fc31c9fa29ddb648558fa39509c595eecf29585cd9e747b8e8074618a8bc5d95ca95d1c35b5e33df316f73d2744f427562ecf81dd0ce819209905fd0ce25b029517771c68b96923b97aba27ed47460578f58390fc61ad3013e50db42cccb220561480677e09a016f1117ccc213ce157766b3df3de45706c704cff1390db30cddcbf1658d14956d841ea9557c75b692ce1004808f165f2173d25839884271c3d2b5da47deb7e001fe73011c27631a93b7d4733ed6f6f0479e8e96889abc83fcf399fd1038e3ff0adc80b768bae468316ef293dbd7021c162ab81f0e18ea25b420c5bd11a8afb413167421060fd3d44f6bbf07582a8d68f702fed421c0e7fd7bc4b2c84ddac3ab74f452cacdb99bc932b17d6f8cbc2946f668e3c5d2a011101deca15f4ac9316618251457b39b11a10aa2e3803cdea27ff40a1aac953dd34b7e27efc601a9a92e843630ff5b6116f7df0f667bcf37933de9132d39b04ae7a804097b5a972dcd91749f85508bfb1bd02f6a25b32f7dfd9d1f4294a998b85f919f329ae3f9595f97e040e7bd233d511253b36c3bbf33525c74440d989187b853acc8b7399281b3a63f75e0afd7045ebc54578cb1c72322efb4761676c1059797cfeb6fc6c0098c6d01a391abff3b7085b40d381d43e4e43999ee973577c863b511e44f13a35bc60638e9cee8093efba8b459b1bc6f6687ae1a0f4bfa9ff06589732633499ca118292da44fa78d621aabc3f96f968b7c2538c1afe270a2aa18a321d9b26816f1fa7c58ba98d4c2a3bdec0a99900a98a6544a7f1932a56c1bca22b171d2fb42ce7615c1a7a647d064ef6435137131f1790d5bea2ab692bd9012436ca1a00e7cff4466b5273d8f3435f6f3330fc7bb29f2acb2725bf9f983eb762bd1f6418693decc0765872ce988781dbc3c53488821bbaefbdf17aeebb4bf03acd0f5fed06523e37b781b7267d07e22ea301f04eeee64e18aadd091e2af884248962c6cbea592f397360f7b0d57302d5f2c027ae8ad847a7f1879a096084e2b8a3c8ae3f76d4e4ac21e978acebac170ecf73284e9534530bc4f79e8100d003aa20b376543adc6b0790c98d3e25abcd4f1bb21c40c42ae62f64c2b2467904dcfd4b32ea39ae113138c26f6c9ebd99519d137f11f919721e9df6c7660ea2bebe1f91f741b971409178ec4d4244f9241704b104db52c006cbf8a4e9ff92be601020979862cbde40bc3c90c022159291c9fb18c8ef4b92a9841266f317ad0b5b132bf72558f0bbfd7ba955b6a9fcd19f8383f5e4a27861de1b067deb9308e2d7d3d6cad24ba76b470d0649c554bf5e0e418cb7739254d04b25e7e7d16ca33bf556a29f6781f7df23a0e30b5d77df638470bfb9123e50f2be59980341a79c9124bab80f70586b85563023bcc074dde6c8c32c5b59e06395ff0a275332d8315652df14c784d7e8c2150c7591fb9cc7e5bf60a6219c970c46f32da107d1bc323aae4a0e810517322694a6874ac84cac085162c6b4ee263cd351a80f9322d2d3a82bfbb3a091fb2cb68f58ba5ce96661a471f115bd01bc3044776ba245eac5c5d24639715eb07e026bfeb238c2e3b2567bf51dd9c5449cd75dd5b056db8d3f7f90de0d568d56db5d7ca881b4b6a15abaf866aab950847d16c1a5e59b82973406b93f6333ba958267d7a595aff474b6dd805f3b52d82b3eab350b0932685a31196a5052848cd92a8d0ce5b88f6aa854cd69c6e62d752886a5e04c8658b6c648eeb98aa6128e43f91c7e85bbcd1ce7b827471d3e4c0f6d8b80b97f3a3c6a438ac9c8bf447e6c840373d1999bef91b8f0b9e970599984b3779b886437d0a457b1b4787126c212a7cc4c7468ecb64f9334fcbc7d89c3f7abd5246839602764640acbe1e0842dc01556fd08c53693683e88a1a6bae3c9038020aa7f8aab27466791cd670a71db6f4ecbd664b86ef17340bef95d220d9df3b7f3f293f5e246f366865ad895cda146b550792a4b885c6d64aa53e113a9c19a4b734b4936019b945e0c7123f916c684b32e27b0b50278b3cbee31713d52b73f0e7f9517602fe3f8e3eb6cd0534dc4e6b5a02717c16e0d758cc6c0ca174197701419f88db98323f85608eaf5b83987a1c592781bc133adc71deeb22360909efcec56f9aae21fc477ae89b0665e4b229e757d877ec06f8f4c0c3b893455430970ff1ddff871e6400ba0113e42a399c9ba8534315354a30cfeaeea9878c8db497f4a59339fc44cfe30512393e7306bb925fa3dd31672b8c5f30f7fd04e514fa65e6a2a9326acb9cb8692307ecc5c4a4cff07eddd07ac26e2a8b871e59e63c354c8b461b8e8e38839d08846c6c59949986f53157a6c6c9dec4f8a21a7078a5d6300f20c84f4fc4d887ea96fc34e21e74bf14f16408321556b3a27769cd397db8b44fcd00c56b6b657b9f1fae8de73673e07db5f6f7b95016af7b1ac5dbeed887a8e7042cbe525fc9852b394d5fc2f70e0af30a89777a6c2747cd1b27ff9a717414091c3c2ff04130f6bba31736dbcced7dc53348f8d4eb3f8985e9ac0a02efbaaf337f14987678c4cde8753289cafb380be972dd23d741ecc4a02d66127b83c4c3bc54a0ea33ad0d790b526a228d70f390f85258c031154233975e602b549b19e2f7c1396c2b3e1980888c8ad9f356c82f581be59400a5d332dcd3af214835dc3d6d115cc281aacc716971f0ce9620f0e03dcab4c3d201cb6443dc725adf8e30acc40e11d26e75b5e7f0deceff38ce676cb2a6fc5382f3e33b2567cb28e41a71f32b05d2b0ea8d8105e4d87b21202e33f7c004880593966de0645760ec6e4f9e18b98c7726770336a87e434c5b0fed91ec3eb15cb1574eed6a532db58c1fd65f03ddae6c567c1b0ba8b332363a6f389eb5b912bafb68583d7047a4fbeef8d8b85fba8a847633a5c4563c0c0e4ba5977006ccd82e71e2644aec14dce9dc22a039ac581dcff726c60f729812b217c31859d1e2419889866ad9bea230aa2ae1dfd86fb9d7c79eae7964dbd36cc88e6d55640fb41657101007c2f33817bc728e5554f147ee3ee46ac0aed7dd60551698cdc863b54348d0698dfc38226f6e4bb3af07f54c0b5079374e47998f762ad201fd91c6f2b5783c0a0530945d634ee3c9e9ec8e8e137dfa21147a7dafcdb6ea9f0ac4fc18cc7a93419918f3d9e09537559ffc90d5bae4f6be68217a30d38dbad9f07cd99d2c7665c548d80b2cc13fd3803af507e978bd5fcf5ef4d3ec9e3f14a83be29f3667c827e896a14acb07935546d605c1b5eb89d3880781d1b1e3d33004466191abe5acb13f95b50f8b6faf5bce1c071b41bf12aa0eb2c3a88188099beacbf6da10fb74d5492988169c9c124a9d63abffa3334c9eeef5f2fa18c133a55fe81c10af751c818ecf3d3ff4e73df56d6ac35d6d542f65c3fa1ed85a192e6e8e71e04e26ed37a9e589400dba0b7b5783e59491a03ab2ff898f29c41a02fbc30143df7f8a32ac0ee5db3ffd08019655d0411ae39546561993567c39736975291b93f87f8f46466466f61bb284244c7002480d524200890874f99d3d01bd03ac75a87c6cba0258c9ef09cc8c2333e5c8b3d1f1e2c4fd164e7aa9f4220175d60779470c0045cbb4fe501309b01390ed95ffda9e80e98fca9d2c95d20f6c06e91e6a738ed51786b4ee7fa8f46705c23624f4fbbd3e938c03356b5b04f054fadbfed5e02cee902217d01ac78c1b6a9af294b6d78fdfb4c0000d9085b36a5028ee843cd97aa50739a2e982529bf145f7359a4346a819b18aa0682a16be26e997198b539fd9ab01f4ea9027ec205491d862b03f2bf661bf33738914d0a4efce39d9af17ddd5b80983530a2aa2bd9c08e8612687e8d7aa8148c14dc6c00012985119145aeea9cee8777553c2657eb7c8100682fcb7de24143b16ca355aa138be0856372f5dda5ab080eee007d0e661c24c895f77364a5424eb905a9e9562f113c1c8a8631f37dd9f89dc057528fd30962b2903115ebf27d1acc0c18e95b4b5c5e3db8c7675048642fc06d7307ff985996163d48ca7558f5c0ad64843b95205468ff67fc0a751b0fc9925de59971ab9ab4a64af21f5ba1b34be5a0b2b3cd34b38343e9503b991c23ab384344259396b0a9b888e18b38574dda673fa9ee2e1eaae969170238fcc7e30fe0d74c637b5fa789d72440446dae6160465aa606cfafdf775e2f7e1a627dc2de921ac1197d9dd15f06d7e3888242075c7a754464cefc88f6c167481b360d372c264435b131cffed06aedee5038ee3757a9d1926aa46e8aa88505f8eef95d60ffc78b7a192fd1037f83734ec11527b19d34393010d94b70e4f6610e27d9a3d7a5cf8e4dd896928457f660a4f563aacfbb26ab7c718896dfae4889f2c765e3db07e09205a5def3cb6ee0b95f92f643c89a22f50bc05373b812012c7c3e5e23f41f7308833c98bf902e9f585c16196be7705a93dc84cf997ee402a3b1104ac68be4d1df7ee747a14f78645377a74bdeddaeb1e990bbd57e298a1160b6ba4e46fd34543981f658d16767db625a38a5b463ce6b28385caf2aa7cdf7254a89b89a6ca0dfaf469ebe87cb859beecee419203827e57defce43bc3f1bae6e40e0f8dd89b01759e9e8e97ea68600e8b2a10b9cf8b5c92605b7ea6868fb19d586a711deec97c9908b8aaef709370c39a0822b8636f7e036abc3e8030348444407e08b0b0110ff9504e37199339f0261ccf503d886c0ed00798d3ee946707295886a265f4eee7877c0e58b3ed7e44206031e794571fa472c7870c895cc2ebb63a206af536624360c2b9949876d846c5b51123bec581a268b0ad3e9dd9c84cba4a0deb0c5b38f66a7d7642ebee4686894d2fe5062c9eac6c1248eca590154488cfe0052f6a231f041ba9451d2eb0871df9f1dc2e0fe8245ffabc382279ea46ebfea6f5d2bafecaa80c4d75d34fe6eabaac4bc94f402f6bbfc0c980a87345f05af1ff5d07a8098137389d123a9d5373ab01f49c4a5fc51fec87a7c3f8639bd134a5a6f1ecd7f8837c20149691f226ab83123c920064305f5877b7e07d8b5318d798f6c33ac8060939459f06ec2bc429404f422e38e2ee909ddc2cb44d2ad72f3f426218a92d58c5e557cfe4d56c37272eec11f63b8034064bffcb77b9b3e3ee0af4efad716f35b14a227d8eaf04ca022243fc0d038c79d7da5847c062f3dd25d4bb1d75b8de0924d0c46a43dc6bf2c0ef951404835665203ae65fb8f2f534c1118b15677cdf57f38398ee1ef416cb74ad29a0e19941d49d46e3cb1d9244d536f41aaed5e3380d4f90846d5688519936a6a4041143464c68b9df7f209cf8283626f660f37d879b2193021402f3eb285c270fcd4a470fe687090154a3f307bbb3d11f2d22f5a0d295369c043259fa8388cfcd31511c53f77328f3d65ec44e47f8b0249fa3afbe98d8df7b36c9c5fc55658d028ca3a06a0d83681979f66ab77b108b8b8e6d24b4e210e32edbf25fe8b3dc49f5d39e9b53c65b74d8405c986eded171113bcdda4636500425f93e2de8c2c525dd682e4cf35508a2647f711326d01b8953a2cdfcefc0bba5df47eafa2eb9ee69b689829836ce4d7fd11b9b17846b6edbec2f1b1d173fdb0b20afc9bfe53ce8822f6b721b54128b5cb1297079bc26e130f3676c48de5ed5dd784d57f44133e65aef13816ed17f53f1a64e190be349c6644460738793f57ebc9fa00c1a8ed88cf761c16b10255cbf0fbfcca533bffbc9dc0716e189c25b640aeb9e021b127f2ea76cadd92f741b06e194d6df74283879ccd440d47e0a183c97899dc347d1d93993bee3bc4dc9f6437a4f8fbe86b512efd2f0b3dd45ba624d874f059335807b94d33347e30e2cc8ed0b34a1416c47e36b4fd1a8ef09f0f72876544cb8a3078b19bcd54e39e754edd580cbcd87cb6722f0cc48cb1e1b0a75fb2f7d2ee9cc2fd6b2a67c8fd985f902e5e7d5c095a71c513303d2d2b86a3cb196bff7c447d1b4f9bbba8a245ec28209f6105cffa2e5fa6aef6aec9d04f3faedb9073cc0a5c52085c4c51ab3b3a80bfe7f89927493ee0f321b0ffcc889c4ceb696b5023c626f964d14e14bc558f314900c708b50801ab7750e5cc57aea97459d89766218c8be9903ca2131370053eed144441174c374ddabffc8a1711def923a86115489e6faeef052742e4ef7237216ca9adf1c8bd1f72459720b21d3afbed67e4676ac66533e582e09b5cb2b3bd2cffcd9dc9a3cf820e0ff02c645545957c326239144201939e1bea1d2c8f2319f31aa2dc09ce294d95d960386d2a3320c6767d954431473962071f66a9cd2069a0e278c1c7718ff5e726cfc743b4ad4fad2f20b7d6daa02173a5a845ab7b26b2a230a1cc11f30a4b02e43850e2dfffa99375cc5571fe210ebfc995c9a47bb983a10f2a1fbefd7a20d81b782891cdf54348b4352750efe4e4de284dd2f6fe52bed3ec20e709e370f80c2f8bbc34dbc0ea25f9b32a583bf7b3ca757b6719abb32897808c7716b1aaeebf9411f084cc53e731cf36f0de989d6349f3b733ac52fe205c2b59a74a2f28047855393511167901a3a6d454be80e5a8b4baa4b182139d5fd73aa499791b11c478fc9fb5d8fcb6689cb19c17e0af71af9d0a0d9da94f2e49185faa41ece03f6bf0e119650a5ad5202fbac0eb054f56443378097eaa486673cf5c5675ad1a597befa74d150adfa8e6887716811bcdd462ace86fe589b5db58d6faf44d08fb5b09f2d6b0b154d81d3fe8504522e8e06e2f1fecceaec0aa12322eb6db03a1bbdeefbfd3676be6a537a3239367b5c5cba6a65d62146375ded9b07b9dd1ca32c09ae7537b0b63987ec89331972ed7e00ab8fa1355252c477361eca6e1fd479bd551cabb61f90adb01314e3c5e8edc3648f7db8e4a0278bb4d34409b1997d3f25b56de4af18b2e942a6ed26f996e9975257eb482d9f57db051b7386384d4b7a47c2db363c2abc37966078a55af67f8371cbd645af20e4b1800ece6d4408976d79f97ee586ea2ecc1b46c78edd635d6ea265e2dc990a0577fb250e752f012d05d5ae4a434547c8db1b1777f2983acad2eda75f3c447dc48246fed296fe4f00fcfd87a221b864d6365ce31ff415d0e6af8a08e15aafb3de01ef3a55d9783b5eef532e30064d8113d391d7ad1a51632b1347d55388d7c730cf375c2ccb5ec460e9ab368346c9d013b1e1799bf6a41e4bcceaac7e7367090f8ea010ac7c043c3222df53743ae4dcd707e7625dc9d725a2956dfe78bf91828f989843f8fd5b3e22a2aaf8c4780defb6a2d62968a82a518e89728360ebb982c3a12e4a734403a355891a66e16cb2ff6fd3ea08a55d167c6688178f988e231286d0cdea126e34f45c43c617c656319d693d5896f140b1c1d965b11a38345b760644ac90cdb5954ce622ea24047de7117fb7e4530a4b308032205f0a561414d7b4f85a2c7c846311a1e35ffd5949b0d871b72ff4fea8459dae9abdbbf588c61097192715a569391a2ec7519d33d93c7cfd49f9fa8dfd8f96b9d59fe17e9eabafadff5356f841da87315a6b00d35f8815b29c6a2182789085cc4c6e512c1fded725df12b817ec230095d91972412fa26aeb71ac363b2f29c1d5b3d3e31d7babfcbcc32d77c0215ce628f9968eacd50c2455ec484dca2ed0325fbc852646d1a8c7464d3429a2d5fa0e7a8f48cd30151f7f28338a8f662eb15aa1accf35cf32e107b03b6460188d05bcb7d713d87aad7dc129c4264baf1994908e2d72b753b60b2eeefb8c578e213a7d0101f62c5464016e62fb037741afcf00e9104fca370112526e69eaf5ca77af2f985b6cfa8738e27d7f6789532c93370fd26981327a5c9c5c4233e0673997c5f7e6cb2cdc35baf15f7933a84b792b3fcf9bd3392648ca98c69193d4a6a412c724e54f0c8372ce6982df2b2eafc7b6cbe76a1b648cfc0477084512d5a6b3bd01e1c5bca3e8603a6cb48ca62d02c753ef45ca6960de56bc81da88f98ebecd41acb11f4f0019214d0e04dde602c588391e75051d08f1214e29f555975b305b674522181b837c777f52d7e06fb105c061838544b8c7d142a4c9b20d3284e38f69522870f5a21ec657e140d65e6d3659b54df91f28122263c3423509eb6d9db1fa745f1b18f78d034d05376c91195ce9d15a545ca3e8976b48b7111a30bf846d090daefef3551b12e080cd7dc0472935b3234b3988fd09b2d212cffefba94e6ed4db053ff76dd11416a6f3730bb7e22e3539baf2531a45aac3b3e7baed33ae136af1cf665adad2364ec11bfa2c373575c77daf40c3ce2963f1b8c24f8bd63327218a2e574f17e52c342be0f9ba04133d3b13b054ac797380304996e2b3d0ead6f842764ed247460d11f9378e25a5e06e14c28869ae0718f9d772077e67a1f4354105f0372805cd85f931800584a7500afca137b5871852ddbfa97754f4dffcd93c3ee342f9cc88e22920b730672cee7e4941ec9a6e9b0eb0d4c7be070c33665e1b24358202846b0e14cd4c030c30cb3d64c55a05f12d8304c1e137fc6cd42f721400a4697531b89224fe384a5cf66ca665cae23e33da1445c142d20801929bb95ff56042c6f47e3034e441148ceee4b15eaeb53f5c4204118a1a8d6fc0ac3faeb7072db293382e3a752c55c451aad6069a4422da32914e1f4bf7f21e2e4f31597db1f486799dcdd74e456956e6e65890f0c9ade9fed44a5c590e874190824d07cbbcf9874a5ecb99c05cee99bc83e8c4460033487f981f3423c91630fc828995fde7cded230ca77b2cbf8f9e0e6962c8efdeb254b61fe7d753fa8beb5a07fe70921785b3a9b0c9e768c1929c111289cc6d934d8ce5c1e246b70c1921b6148815519bcf8a25fdc0faf6a059ad816d24b069a7a0950e2438fb6a8a5d86833a420896a1504386d5b5adb410936a04ce5d4f15448341b720b5063698a1d9368e25295b00107b512acc224c85ae3da6e87ead7b0e5c8aa65bfffc2f8a78d0a97fee2963f79d9b9dd6ddf97d9aa68a88084e25955180729d34b8a9027cd050f518d91a36a62114c8a7bfb2d7dd378b792baab4fa849c8f5809da2d420c53c9896d071752e008803d8ee6955130d63e92422cb1cbc6c96c661bcd9402a23d2615dcb5cc479d6f07f7fb9d3c053fdcb816175813cf67a06d10c4b3ede8497dd8fcd09e59ccff6d9379566d203ed960e673072a130ef81d2102dda4b15ea9cf78583916926a732df5b7b133d553e06754d49ecc8856bc72b1bbd4edb5a67c5cbd3a088d7c3695526acb2af6cbd64b3c26776f03b316f0ad930f3dc751574521fe7dad646dafe15fca2714649cd5e3e8fa22cd4b444345a5b1a5de8b6f5d83f5b79f8d63de694eaa7c4dbb802872cc7fee497ef412a918107b8c6d79f220e70a2be507047380c160d6383e9540f1a8e4b747c4a2cb77b912de3e802017d4bd3696d2ffcdf10cac20355e4e3e683b77cba8e023c30ffa12f4f498acf4dcbf4af76228051b9f89e257e7c593fa8ce2230a7808b25014b6047864a6e49acceebb15f45cc452dd696ac0db9eb3144c666846f3f1837a7c44e6b30fdd82e372ac3824221e8474dc7b89425dc4f02c699c04a780937ffead5e1805bdd0e61867ba34ca2267646d147d0cbb9b22d62447933c24686da96d1dde041ef21efba44e0df9b467cef68c246199b2285006c7769cca400d61c334a89c84e0c6577923f0470978d0adf806fbea6d04d3c1c723628951c9ad894f307a3e8d73024a2377c4a674ad7504e889fd14c260c0899af6920d306116a3981a4040ccec6164038ff805ba5524ed371b907219c17c0df26429523138929b80f17ffcbbccbe674ae71b3340db1a6c7f54fabe5e97adcc9c8748d61b679f07685ca76486b4900bcd138f9ef78ac234249bee1a40aa4fd6699e76468d95f4ec8ac4c2a5f8087fd965129cf2f7613528131aa7d1859ea8af67ecb249bfaa1ce533892b7cd28c6d168c0ec5422339eb567abe6c0736057a24dbd6be017382c175b2da4200ab01637dc3ae4dfeef07bc279668cea88ea10119b6fde4c21e882e7217d3895c1afd701510dde999b6659015c51233b24e8ae79fda7704a8d5f02680d06ca9caf308ddef3ec9d97b136dc31a4fbe80ecfe1930278d9268c97092dc8bf5371426c7d01450abaaee5d75d89631258dd03f99e583793a44c8436ae0fc073e72dda78036589e2eb3a455a31466fd8837bbefec91b5c3779c92bf8ec837b3235040b70f80f6cbfa476d9a099f7bdaa491ccf3f7434e62948bdeb522e5286fe11747f5c9022785a2d7042c772f198d60bb5f7e220ec21c69e33d94164a7ea0123c3ce0f12843a5cb9a029d8522f92c65b54b8a09c8be45c2246d691da67a47bbc9f63210e8b6765b78bb49d02fcca1aca67c3e6d23b8ec49c6daf74c2092710537dc1bd5804f86d9cca2e5320a1091e9791fc135a7ce4e923a36c5f2feb3ffba00805a9c01b8b1bee0605e70a3a407b2d7d525c1ff577575d062350af1384eafb66213bf03f064c0b0dace1a2c7a39183ebe2e5bab72844079db26820b5d85f7c3d85da70e8cf18600643a6fb399628041c49fb33df8e83dc8f9519ff84462eb801be7abdd58a6b1b182c21e2d32f752a3ead47407f9c5bf933ef76a58afaf017d0a2b54422db2b19070b5101932d3addd410d938df9a23b6ff60a5be274af829b2d8bffb012968e178a39edd1f09e022b394612b2177646aa63ee40b89c1bcbb1add09ee916b3811539c24b05441224106c82eff800eb11d552672dadd1b306f7610e2b136b9d36454cd790ce0368d27aa73ea06af8e8638ae81557d17904c7385be8e3c0856d64d19e2cd4367a249b1ed014ed84af3338ac21583b004f776eaebd5e1469d8d5c6e049f6e3a6d2ac116ef5b29f89ca954a54aed89a288b01d5c2f0a785a08960b315c8593c1d531a25f053922edf50716be47ca235ef18c479b53269c047c9f087f52dfcf91107515705df29853ee2571bd5f9a308652f3f7134609d755418b80088ead5b99c6a4b4c879391f8104c1440dff6c74ae2cfd7eb015c7e48523738744487593a371d8d24b9dbc6f821a4020b5e6f05735fa4b18b304d8f141f175f756fd4372089a5e4627d6a19340d48dbd16227b9af11681396972a3f31463da4e63a9db564c7302e9b900358d8b5c227b1a29d71f34f42854a4413d55d98425b8c8cb6c6eb17520bcefb7e4b333206b8c4fe56ea3cf0d57892d09ac07d60ca9589897ad0141f9efb39dac12e073ef249477eff07581efb106cfd11679d818ed82e350653e3def47116287ee80291798396aa95f55e8f64834b769842c91be220b5942b67fed3ac605cb16fac354b72a8d4d4729439a2bb798ed2307dd55da1f0f339a5320f073010cdebac49117cd87de3d7fb861ee3f3e2a2db00ba051cf2bb9cc0fcb1bfcf560ea6678e0769bf9f61e50ec60ba98f0fdf7c55f0e8c70e693d2c24b486433f842064a98042626f8032e8d063f5e4fccb08457d1a308bc29958037e70754dd4c5b604d41ab6533fd20d3b85d42f1f2c6f08f9902219ffe755d0573301199021ba5f402f3ffecde18173a7e6a121c50c2833233b980b29bcafa440bde5f9f82f68490f320087008bfa95ceec0ec1a5572e03e24ede0e79b82f748a71c753db50bcb89148b00cb5acccbd0cc6eaa775e8a7fd9195770c660529a84a261e750488545329ffde15fd9e239f3352db5de1c21fc4fdb8153aae8562915ee3acb33dc3ba202de31c9b875ec342be443faf5f47de5c180eddf82c9b2fc9175ffb2aaec619d48c3a6bc6284775e8c7c5f72662ba6a3a050f3ed65d147b5412582186f14dc9da99c38b62a870742e063004738b3028e0cfcb8c7e6c9e7840708f94b8443f637652b0e325797d4fa7bfbea1411ae709bae8d3ce05877da6c9ebcf2ed7f688c2ae3209c53e19e3ec60d57c536b1865d55c42fca51711fca256fa4bec11e51ee1b3c45757cbca5220119e69e20e12a71c4141c4f09a7bfb83c2e9df8d87bf2ae21f0f4504a6db51e77b4c26c3a7d321f5e375e99083cf6b31aca4e085733e45127f5575e23132be682481ba73c3229245f3e6cec00f4e3a84e2bd34749a832ad1fb4f02ea5333d7abc44d901b35a70b9b57bc024023bc3070b22516277bbff20a23d1d76551800165e148d5852f7b8345f8db42f3dd8383dd39bf48204d8cb22eecc0da295aaa18777cc8e8cd80887dce1c6aa913884c81966de996a72254a9c936e6d08ef2b482ce346a32842ac0bc5ea192848c4850109ca4f974df91534ca2c6ca4cd3273917deed1d9faf7fb782bde431c3a83ea10a9c6a9be83f7b64c75016b36a09635684ec3e1ae5eb08f4a08dbc5a0d1822c026ff1482dba97a41dda7f4807c190ca98004d98d4fee42c1504cdda6d12bfb680e9335c458dbfc76902f4de31cf8f976b05b46608281f80728f435ea414497ad805fe1b59d6884fdc6706da83d27f786e01ef947bed11b8a64e21907b0475a57c2be2b2212f9880506d4d571b4ab0a2bd04c199b0c60dc6033c656462e7e354b7fb40bb1ad2609b8fa8df3fffa7e110d70f321f63aa63a875ad06bbc4f48e82c8f86b97edf2ddf18352446019bb043c662fab73d8e3668c2f708b14bfa76b001433cc5152208be5162b98deeda2e5b5e84231d2488fc3cedde71fe69f0bcfa52597ccee84d269bdcc5c1152cbbc6cee40e05b2a47848778a6289c4da434d68f74bb273c6168166cdbaa9e817601694b527c273f6ba396a04034044218576a4985ef52f76344d8a6fc426272990043e7bf69eedb1b522f0d53122e83acd7de6697f17db39249bf868273108caa7f7d8214bc7a28216fcd9381dbb24d2a08de9a9d0d77ad9c75b1acb25f9537f74797c1cfae86bb6814d5efada9c1a866905a8946660f6773a4f3dafde9f56beba9df29898dec2c36fd48050fc1f65d15219e900cf4bfca63c412c79e73e21d9f20166e119aef808b61716e50c482d19f8de398052a7614a0f9f3da1bc3117f88bd68264cae7caf4fa9dd32f2951d38187084aedc70162d5a8d35463923231dbdcf12cc6c3cf4f934ba47373c7e928ba05d382d4fb82480db5ed6f34290bed453b0e605f75b74690452c69eced2cd7a8af29f436edffe37aeee72b92bd5e55cef6bb3a92ac8865754039bd34b50d2948460e8de0dddaf1a8b7badfac40050d35629f0cceda32567e1e791a8b817d69c575b0531411d8cc3110bc47125a47711cb672996404ef619ae00f669c0d30771fb2eee45d34e36cb514cabc71a7c99fc12fe36da0b74677e87e0d7b2b127333f76a1ceefa7d3ed5071fa8ff850f3b35139ded2a8848fa010bdde3bd001664c25e68c3a0c130a0ae5cfbd044f2d7375b351382116ec0b84176964f8b8c5834b1d0b4506b0786b6c16865349d87431c94eb0cb6b8ed4df942f647ba0c70f5535c4f672c6e8d1d00559d263617540453092d746a99077982221d7d1dfb52a411b7510af2bcd5faa5662662f384965247616509106c46c4e8fe3411d936f92de79a09f481766f8fe4289d60ef2dc4490e0f28c218788c1e5ea02866cc51d9e0ec88d825f02ff011008d92c97287e2eff500d0964f2c12f31548e347171f4ae4e01973f3ef2396f2e2d86a290748a8b6c77b8fce2d0a8fdc9473d2bc5b832f4f2768705bd2705a5f82b67218e55d9b4eab8f9dd1c2eb11845d11c86bcb8a43af6db4a4c15224ec2066adb5b11702f49779c6dc0b0997206e8ab9ae050a842a4a518059dc715c32c63ac26a52c130632f5d97553f2d17bd1a96ba4d3c16ecfd33742c065504dd51a980c16e7024b8fe52d31d04216f908421d23a0ead19cd817d50925834315961aa88085bcb2199745e4bc079f45f14cfe69385823eb895f80b25463455670f4034d1fc469fb07f0b6fe299812c7f7d345c6a08f4931cc6ac4c5c15e2781a7747a7f20aa5a9bb9db6191c0118779eb3f83f9b5415918469d613f4591edb814ed703772b9a3609dd13eadf1401b8ed6c6b67eece23d95d33e370a35e715950315272d73f0b073c1a12a1f60084c912cbc4397c7be20b5090ed14de6ac7fe627225827cadcdb71393503e30bda6f3e05ea7bd536d0277d353a8b943e1577e156e5ea24dba95f2dcbcc395a8bd78f59aa3606e4a36ad340c6ff16936c71b8b73dc67456d05e4a8856717ac03f939071a64e0d63b7766f8607503e569e248c7b25fcbbeb98d3b2ff4e58b58371722702c8e0a19b4e7f1b27ac07fc0a68de8cc05936179f00d9bad06c5d0417c6a259e895e6ca1cb5b5c78a41f9e57b9e87a5b1da537d2a6f0912eb8217b7909ea593c39d78478e4a6f6f79e60829c6e5fee1ca93702c8705f3f9e20647e1bb206877acda66c24f47145f2e3e5a9482f22d11e69e1032f435265402bd2ba43f33c02db13204685b1f3f49fd01460850d0de30a0176e62b122f0276f10966e1852e2a4a10e3ac1d37bb9c83d20154ee2764a2cfb9698a43052a32e2838b1754070024132d6aba9b6d69c3d5b2d5794ee31bee37504b0c1bb6ef60085fd624492ae7c734ab6a46436e07fac95e23105d45e29e199301f598a74845770cb8707c5e5b35e5cfb12e622c53e8994e230ba8129c654b35e5849fc3bbc28c17eca402ae0645eba23ec0114bd132343fbae3f7da0dc1cf8fc0bd3b045e8bec1dfb92c0ce489f90fc7e01b1e4e9407dee4393501be234c8438e83a20b68fd7c203d40012553a28a5ba754b800c4a5c0ea46ea903ab6a1f2736760ce9e0f05c6e3baf95e6accd057bd3ba91cdc20253cd7827d5f2a2b26f56cdc01b9504726489d3210fa3233a4fe4e27246bf402a642659ea18a5572976c9ee1741cee047402e32ee0be5b2e02e94269b2661d625632393733c6490e74cf8dd7136ddfd6653bc49ece651057f6aa1a2f84bb92ef38980f7aac4955dcb390d7b1560efd4e3de64c4e679c2ef435a636daced1792167b41a0678ede245f0989ebf6417ca261f98c01ef86aa402500919a8b536bdb85c2addebb7e1bfac68c73966f09236396894379e9777ccd34e4eef72879c6dcdf0ead38e620670aba13386bd08f33a1296ef68afa658a1163b01cd27eafd4ca02010ac9d19a9153603f3f160c4f4cdb30d9891e1c1d9a4f07a723b30a1366b22d0efdc7772f46d474d2978c4ff511fdc8f7808a060b90e444fa50da302de71869d83d5920b4b511ecd38b05db2dee315021552ed523cfe53242aca66d2d227abe8dd66916a76cf5b9a9b7f1b0bd226b289391b6038b0354989771cefa97224c27e44364ab819f23faa348db475fdf93e698cf2297a61d92eaf26799538b6f0314a81560894310daf400392c616bb64662f04e7ebfdb37ed45eb84fbf6e764df106cffcb72e38e88b91a80b9397e103536d3952f154ab36183f333ede8768b239608a55c38bbfcf1dcece5889fa689ad964124363b43b9af0f300eb938675c60c51f1d9ad91492aa5f0cf1b27876cb9ed8a69dfb3a5989f0007703b7b54a53d8b494b280692325a0e0e7dff731d211549d4e600002ce95c50b358e9879f53c12b7891671736ca1f7ae58015a1aa84d39596409739765e70af8b005b7c80c71297c9026abed26e2980546cb1a8eca91dead8cb15d89f120826717b47bf5b2494dee13446bf8cef7fdd83e00ab72334c0f535c682f445c8e3fd8bd024afb4086f09bbcd942963f39fbc8ddf823f32d6c6da9f077127e41ba8e64742d49db3bcfaeb56d961a89d453f3be38c6db88b653e852d0f1b28e2685118c3118f939f96bd493c4e588fc1b7f077e060d383a31fc8740f274f7b545e364500edc4cda17ac76a0d87c1e63c5b733f68f90541ad4d55655b067eeb89cfec3502a7d64c39e0a225a195fbd9a164f2e6131a7e0028d8e849fb045ba08f7587a3300b693014a4948dc32551f906a9bbb64dfec41b6eaa2cd3e6e8efa1a1901b756873d451ebaaef23a4ab2ae31ecbd5ce0364029a84b7643af45a9a2b799b91d8ce8e134ad1e7e2cbf9b528021f3e590e14c9bf4055e907c4b7ab69aa4efda4824e58864363648d284d6e6d619592bb6c64bd321c8ef54737427b12f17d2a6d278044db56f9788d1cedc8ccdf5246862d5cafc55b9f41bbacfd0be09405b1f65690d1cd036a8a160824bffff9bac6b45aa7e72507e44aefdaf1180d2efb5ee7f05597a5fb95b572705b9d336f2de7dc64d49959d083dea4c28fbf694708abb97fac4e707fb17d42414f97d096da75c59fdce911c00b7e5c5b4771780d2ef6f2a4f95397afa969670ac0eacfdcc6b7fe36c5e5bdfc6c04421a1bc423f6cf7373aed71b03c1a620b4d1f419ea73c39110e51167cc1573824b745e1bcc70bdde0689ae7f0cb9d2d5bb9c779ebc416009cb3d0888be5d9f9334810d1cfdb7bd6ca182fe7340d21f9b41b08811eecfc8d73dbccc91a663e85df25cb4fe8223eb79a8203946bf54fdf74851c2a2a19781e30dd49f850b36c35637c2cf433ed2de6d4209435b7981f2235cceed591ad85b8c5a7c2695ccbcd21fb2231b9e032291d8361a480f7e02880c8995dd67b320fc814ce1aa0487a2356e58f766f850b88a64d5a636bebfe0fcd863fce9a3a13b6109b4692c044e4f1ce8224d05fe5eac7fa9113f62630f820742cda8982e387f1f163075bc5e922660b0521ffbf88c10686b476ea7e01e391c3cbf913b70db6b82fd353a6cc97060b58d812b7862d6bae347238967e382b2eca44bbc4da54ba3dc8e81138307afb93b32fea60e0c1003e96860b4a5cb67f1685a0897c7ad1dfdb4801e20f413ef18cff6d2850b75466848e6942d6865f2eec27caee087a5fdad1805e51e91dc52506bf547b200a5c05bf1eac048524afa17d081319bbb06c26cf7768ac8bd8fa1386730e289503075978f5f4ed01b2d412df808ed7563ad524a63ab664971ba53495276586d3bf89b1eae2593c7dea7be06221970dad591e280442b31432b0cacff4bdaa221ed3ec6d5fbf836da8791c467f07c0c2ef66ca5d1105d866ccd3c9beec8862720349175bdc81857f8f312a8e1d65033d4b485a0f01a20232b2863ea4cde938d9ee1f6724b748521058ff19e3685be836b895461e783231f04f61a22c2e01ad8bff410710408e864cf93a56505a2a7411ebf01751e8ff6583fdf28fb0c0ba5960bbdcdce7419fcafabdba941dda1943b977f9eca4706c853ae955b5730f3decc703f72ea61034a51628439f18e57029ca64070f36b6c3e174c2459fc9af081334e0ed51560113a6be07417f9bab0b9c68f4062c0b166c53e76d1f83409777b2f90b21da5c8c96d79a4727c59f515166c5e225450a6ebb8427534b1f8f2a352227825efa9547068d4cb3f32725a602e76d1179b9f66dc8efc13915a6368b04100e198441e12a6f0f376cfe45ff8127f6ea0b6cac1b7a63692ba4dc106775be829fb0ff61023baf3ddc27c614e22605d73d31c8305d6e89203c4a043dce73bf7b3bfc181b7fba0eac5f302d6316f80d930c91f73e953e737b77bce0f9ff91f352834167d6194a9c04c35dd3a3e3867b9d14aa8a5e094cc9be0bc2a5b59bc129380a44fbfc70145dbc442eb0f6f6e416c45fe0ea6c6c62ac975a62f546344b01998ad63fb78486d77f11080f5298b7c1d35a6fb76ec578bc1c177210a9cf53e16371d4cc1f89a161515a58ada40cbf67c2cf02d43a0b92f0c82300e23a198d08bcb41d5842459a76dd2431c512317b4a8d923e7eca7353aeb07bf2e75f86df33271a296007cedf1a5bd93d8105e0a6d6445ac5fa2f593726b1eb85af6cf0b2b31b87ce5efd81da767471fb2ebfb5384505035b6bdbb26879d550d5488bfa873c4efe6561301084ac35f0b42fc0b4f510a0218a5320df6371b076522175d8b53bdb083f8be181ee1eb9faf0543d2adad7d2659222aa379dd2603fcd40c268132ef297305ae385172ad5edf515c20bb7b8b236d637fa8018401567752c964e8156e5cf5822a1a8f1d2cd976f38de8dd6590dc4331e0fe094a832d5f728698338a945104f326d2562711dfb84859716439417c9983165778b31bf8d82ec3af0cd9fd4c1eeccd5b0433f3c95872520eb52c7f9fd0d08db365e65ee5a437e9b913ad8efebafcae7f4c5e2ddf615b19aae85f967024d2f4956fe5c656315b3c19b303afbcbc67b1a77e806dd0240aa084c0a2527da69dff9df8c33d5f2ffca7bb4f6da0d643a471c89df5815b0d6c7ac3c82a424ed37ce01f44802919a6edc7e22be2965ac6b693787856162e4a05810978024d311d303a3a8776ff2706e4f16cbf24de26db8a396106c66ed5e487cabbd8eb918d5af994da3fde3d7c8e0549e5aeb046e9366d8961ccb2ecbec3395c3a61bd0e11a72c5b2aa563d49d25dd2b28bddccecb544492febd47349d5321443e9d9d6141a96a82952cd0ef087d767ed2f0f3ffd758538aa9da83bfde3e1e21d928946e10df3d4c44f215f8fdf908a4967c146c2e4e28da96ccb78a79029666c6bba2a04e713a5c976ce5b9b6288df3cfa2c9839831067fc9adbd713db951af518c1d24d694aad68bbfa5e11c912e3641f2682c687c04e5882a7101a3177550d141936263a1e992ec9c1c58018f660bdcd7d3f7c594cea85f2d88e62adb31116c187f5a0902efb123b53d0da6edecc2f701075acc17a17e341b5de2cd1f7109c85971bfadc5eac580d4a890d79cdb27a19fefcd7ba1c59e711e4c85391a5c21c4fb3c4ac11ce22b9d224a3d4577d03403c3a5ca206f79f95fe25d8c5edb94cba7f8cd165310894c8e7d117572660ee8bfdc8623b60b64f0892a3652d77262600dd0ab6d2e02f6c1a8c77811354ea34b3b2e6ab93a0d984300437ebed3abaf966f8f924346778974ad5cd7ddb8912e67871266938e5d80e0856364cfee92a353f5bc9db849276e9cfa3c2d4007bdd4aa67a58913c2bc4de809543837caf0e1796572eab95e6775f3013c3c8ed6c427f4098dc4480b4956399bb2bc7f336ad34fbb84b1b9ca1145a410feb4c222224baed4b5e2e2a073d051628a271a336f3e733d7ef32146642ef04c76ac2643bd61ab975afecca135559d383141485892ded3dc36800e17885e7943d6f7521ed777ba335914a1a0b049a0c7e8e6bd3fa709e92b93acdaf22f6198912a7f52dcfcf14b1e2d95ed566a29ed642efdce44e39957ed0f81b1bba3c5c1b57404686a749d1cf90d7545012605423313ba4f9ad049ec922cd5874b504aad5f9318746c87fee7289fe8cada4071cc100f8863a89075e254ed4f4357d5ccf0b9c32ce64c7ea969149d5924a0d73e69c406c7c7e6514ce6a416c6bc786854272c5290356ef022bf5f7a5dc764a97f409f6f7405bc03ca2343364d83e97308e559d8b46861107c79241ad1704d1d7a07255b2b2425b1a2f513258c2d6a01ac448f48e4d0d4661700873f30fc29afbf8318c5564c3f24084487cc846cd716fc0063911745099943b3a11b137056c403446b143d2130e6b48f27439f20576882b004302a11e13c46283efa784bd0f29e9d1df94e46c45f3bad681dc2dd15e65f810405884a555c5b1126d26468c15303010fe6eb4cee83f5398ed90c72bade8c29b51cac46db0ed976f4f587c41b4e216a305429a00eed275cc15eaaac5274189953aa9357dccd62a3ede790102842ac5208a215f3b80a79c66bf25cd623abcb9d7955473dfee5936725b43592edc9aec14b3acaa058863eaacd47eb46a55359adaef0c81e9cefbe0c6d15eb7771cd8e19e6960559f6c87f7f242f9deba31ef4b728e2d971eac175a729bffb60e514323bbafec91a72753b0ff1e8ee1f8041dfde12c4b696cc144192a9a3944d126819dac7c7d849d0458635c8461ddf9078f99c91111f5a2e490a5903b1cef23872fa483c2f3eafb237257e8760394c0d2179a940edca1730dd61980e700a464946b6633263c4ce91ce7ab3f1fcd2f1264bdb8e40e5618dd55a2079a09959e45be61f3403a5194039223f453b7ce253876f29e669a6267c3566a882e9000442112438e81b4771d7f05e3e32d5a583380569508ff8d637ca7b50a49350d63d0c51a7cea4169c528efdc89038d6e38d57a2262d7b930e67ef04b29886e73c3be8ec56d2c2ae43151e90b1c84b47a88f9ef98a57b14ae4b06b03c848589f8c3c12e88a4054983f3235279e7b436e6ca989ef1d0b0ab7c16ab42d6870219b00ae29b672f88ad0e6e7b6e866206f775880a10a0362bb68b27150322c2961e8e03c72a2b5b1693d9aae044dd85d6ddc041128aa65b3e8915633e894d588934974d1c89b3af0cb4c61c6fb823d412de3cdb9dbcd1c6c1a30bc49c12678c5b20f98697f2fe777a656217489b3cd80df7fd71e8ecdce423d1a8003314c9faf593164f52d2d314b4832c45a560e26d1bb381b263dc996e391ec96e8ec7aae2736af205a29e6262b627af1f899f1922aa44f10d03293570316cf23768fcfd281dd0e28246d69dd4bba6f6621456394587d31b1189cfbb65fc9d4e2e3073403c147721fb30197448e29c44b5c6ca5303001817c1cd213955ab5debcd1f63d9f804dfb13df9184e45cd5a007e1e2734bc809afd8f1b9c248ce1c69052f6a68df5e1a8745be35328ec094e00a760728a9530e0c7ad5b3e3664e8178325b1cae3ab7d1ca9308b17ed8c5ce91391e8fc9110cb13afe8de430b586b4b4105706e23b6ec5cb8b2430f228450a7805e7fabba404baf5ca7aec9678ee77ad57906296d0ad857a6e11497933ad3d260af66a89e44edbcf5064f5dce5b51b48470b1036fb1f1e5d3ee1bdb9eefce1c6042951dc83557d5fc2bfeae454a70e41b6156433f359fe73e5303502fcc13fe48a839e88cbf70fc17b45181cede8db0026f6c9c17a3eadd4fa837bd627d63e31ec4b0a6a35f0834b4fc91ed770eeccc0e71fd2ea98fea0bcb0265109b320284c626324059e53f866b99ff7a181f8131b9896a43ab1246f88fc400d1bd84c18e6f40c1e9f05c427778423564a35da63396d503621757f1f5015951e317955f1363f954c9c7705ff7babef8e45e0ea3e4fad7cb4027f63b553baf26e331561e84ce21d7ab21d580048603477a13aaa105229e3bcdbbd88fcfc77d53dbfd3c5bc6b0b7cea3899c280150dfab205e0c5a81c5c61ab8a7b817dc49b05cfeedd0ff258f7bcfc414fdedd98fd587edda873693c9bc6e67fc9f79c6f3da782c4fd91b87c9e9cfe1abc13d24719098626c7fb147f2debcfded4391e28fb5b36935b4de9551e3289f11ba2dac26fb51504ac3e3f1acd1b73ff2dbcf4567387e0790c871cb095a47fb585ff897493d3f23c0355f5f27a04a01ffbf262a29a22d809d74bf85bd781fff287d9e609ea2a9d2d7983460549d85eee840c9eb17405a99f2b6c9bad2a23cf79f39dd5228a67422c72ed23dffa2c59c18ae3163e63e57b1ea2903f369c1c1d7793d42a294516d395139f32989b434f2cf5bc56ba0379ea591b4250fb6de87f1d5dc874b1b1b73bb2a4a7a7da24c1c95a2a3f981ff457fe808cb07076233bbae4f71b5a176e9935495a2469a3bfcd6baf1ba334bffb16b49b66564830f1d5f433bd5e17aac886d76f4bc1dae0debc8273e08b62decdd3253ec53e93877e9aebf1371a2b3ff045fb9e51ddcac5fb2ac94bbcdf2b7b3bc83e7f7a0d822af7f22286c3d7a8133fc9a847578e48e965ebbfe97d2fd26e7361a6cf3b716aea578f1ac5acb1fe57f8eb71df0cd7efcb71aecf224d0ebfeba44b2f0d0b33ed0b5ed869a9da8d1b78a339fbc21afbcb9143c1d850bd7ef7e5bbae837dd84a604ec9dc8f76f0f171ad894564233edb0edf3a1533acdde2539906a351232abacc1e9af3e4533a582bacc6dfd17f79a63a0ad8e31157fd39eb7b0b10bb5ec61c1c4d714e5493027447747c292ec2a297025f701b120b9fe11afff14958f3b94c09944c53e54131725fd8ec28e067b0811d250cb38271102ffe2b1f042ffafaefa11582cb37228532fbac2c3fb81ea4e3aecc88e9c712ebf1e5a409e05dbc6db31b35341ddf9a851ac2d343309f12c7b97761ce15ff13c457b9266d5dc583163b7ca2c9dab5ec00b9a0b97bcdfc660b03599c5f613eef35f1387404d67a5bca2fab5220f0388f270bb51ec6e43c54e69212af75a0febf5865d9bd4238932f242d960e79edab25306b1377e17990b15d49406aa4cf007665b835f132bb159ac29bf14bd4f860bafa5feb37e37220237a922066566bb2936bbc5efa8a02156199610a7a8212b8439835b5e2b0f19441842e7f52a9a0a5b26517f49cd6da0b2a453705489fd40bcb42979e817d2bdd1b4b0c642480ef9a1d76e2f136f4d00505f4c1daec2e8ddab95a04a3c9e4eee2122cf5d552db421d31e3a63cf1f05d98cfa9c1df95542b19c9015704d1fdc27a172d3885377c36805a4e1eced1816d7881e00917122f0afc4a75c1acfc2ff8139af0565df30efa4fd91c8a74c53dd725a429b12948ad2b9d608a1b3057858e8e6a2bdda6ac03ae943efedd593bb3384ee3f7f67de560d08755c1caeffda885091c8dd808029179cc5bcb940a8675ddbd4f7702a5777bb2f15eb95e9e926abd998327c0587fe7a436171b1f13c0624ed15eca1488749c345923f147f731713058d9a3be6248acc93c2eeec61cd7db0ea81c4a7f9414e2cd5f5b3cfa0d9e9d61516597d142924caa443c7d89a8f36d98b12b00d16d8cd118a41de9159ce7a226d0d64ba3c06b02da6069a9e4b0050c4b330d417c128c2929c7f907acbd41bfdf410f9edc631a8bf6234b0653ef4b17a96a79ea76b4819c34d083538435482d2cd2bae8139f6354237ed6c6bffbd4aeac9cb4560715c080879330a3a08961517dd7bfffd08c6a1dc8d3d3d3e0f9a664aac5d68a76595279a1468a02c455146e52c5b1efe7685ec496af3aa05c7e614399c74ddd88a3c5367dddc38a0b1ae9b4088e2fff2cc534a8dbb6602a163bf1659f4968753d1ac4a36efe3a91c49e0924e18ba8d4e78aeb51b4238df678d32e8884bc256100adb3dde597d4861fe7e174ecf8b06c947e7dc09950c9794fe75248af9f2dbc8de5afca9b62e576f0178a43038cfcd43c046c8501d3f4ab07c628e70cf4116783cab8d1bca5aff5d8d2ddf53bb5741cce5c374e908376c976fd842208029ad3ca2be73f82ad231ea4a7d3fe0e69ae0146a730ed84cdfe37b490602fb55bc67b5160f3578b974301a522e98c8b0fa8e8f5b4506ace37438d538fe446fecd873b90710a32e53d32082ac437c081b9a4de68796ed5f587fa621d53fea00499aae64be10815957037dba0e6254da26fc08d5a865da7939c25cb8dbb36415c837c410566fbbc47df7e6e80539b4ea7c4f4b9d483473286c7b8cba51d0e8640eae374605fc60733101b42ea67f45bc275172ecd0e5317551b3b0438b59ab51ea99ab56056f2c58ca47ad51f8236603bb0fe3b109e6e94bbeb9eed06d7cde52de873acd1fb3d25a9faec25d263f07091b6203cab6c230621e15c22129f4f7857cef0f559c2a52ad316a2fa0ffb72c24cfe667b542eea53972edc365ce3b19deeed2740b37ffd6b95523b1126b19af6b39c4f2d95eee00e98324df159e4a1f33b71fcaa7d8b92c5faca7d4376752a654faeb567f57b6dfd9d132b4e06d075e5314fa582e4ab2d8d9b96ebeafa9a4f034d8ca37e44e8d91435b77b01ccd1fc62975cb96873ce35410201377b0ea639ac5089788c6ee927a2da8f0f64d31d8cfb53d362a0849a6cc95ea2752b4271f767f9a851aa537a9adb7bc01a3decb52e8efe7434631460280b13acf8206a12214c7cf0871144cbcab9f5e01dd867acada02f9720189bcaeddaa2148a23aa36dad091f201582ff4f0cc02329ddac7fc2ecca2e92ee21b158d2cba7900d2c4f36a3ed8f1909bd21be38228aa5ccf414e9f26b1f0bcbbab29d58b8d862d1f65a76eb3c4f3facd1fd3393bd22356b1125c5b89e63bafaa9659d12ffa842f3a5d4d0da74bbf8f40a20a57a7bee9484cf01c984d70502ee321606c488c52a49904b84aa12919cb4cddb4ac366dad19cd5863ab6c4bdba212e624e73782994c1b2ca021ab6653d3815fc8f329eb7f1b41810b7ce13abfafe4288b168f43a69d3aa5ade130016f102cb57ef9b9130164734c5b67bae6c5eec940f60b8fe0f0cb0b1c44a550b0e8b743e82858ca5c733e206f8dcb79f5ba3d753f14319e1e7768c1bfd1cd117f02ea1ae4745437f6ab3104953738064167f949292e35081f557d1b88cdb1a28c2ae74053a9d601f8f73fbbc73435159e9386ba9c22558103463aac6066f85ddf3484559e802746c1dba700c17ddd70ae04f27dd9571acad7db4d23685aab3b2001b11c5c37228799f3bf659f12fa333cad79a49250abce395bd8c3e5d5bf1f2bf2155edb9c09ad9f47346a06949669716a1f3e22208ff1e9f3462cb266a5127c34444dc7c4bd5ba06c36b52c95756176400325525cb2e8a84912af2eeeb14c62ae0850ba81e1cba6e3c302af041941474c434403d0688091d82bd90f27ae962411616c9ac3379c35cadfeb6810760e9c4c7e30884a51b6f6bfc2e3c4263c74cea2a80b9d342a2b81f3779002522ff7bb472a9eb52a70bff7a7c3f56ba6c7bf5af62f3b6df8365cd62a7854e76475b841fc3258b45ed28878cbc174d0369a28f1535cedd79d72e8325c2c47121525bc35c7b4fd0674542388be1d00a5256bb75aee084b8b00f244ebc75269e049bf3c260109212e47e3072be005fbfd265ff75c40fe84aa675b31554b3559e2dbe09cc6f1a241ddbc2b19d408cabfdf832c8479ef3512cecb5a38faa4e3171ec903e6ae36859168782ccfca8297f897b2ab02213a6e4dfb695d3fd2dee2cfa3007da247287aff3d1910af865623c49a9c4fa770723234dfecc14ffd69bc42ee37eaf3a6179685d16fe355cc7e1131b72a9a88225de7d1f731e2206a731098d031ff79e2cfa6f812976b792cb87ce42b7c44972cf083a6fc989d6292f5ff986ebcb5e632fef3656b0adf6578cfa63e4bae0721219ddaa6e629ca96f0c88ced9040a2c0d22394391f7ebe44db1670b9286286d71de65a52d23672aa7a475b55f5e411c4410b1159a9b374ab46206b6894e363e20128572fea973d7ca40bb00c1e380ee463d3b08d7b55414a17bc20c1281ef1f1597c0ca6c8522bdec5847ac0d51051023468fc7782b71db780d29575500f0dc2d2e1e1f06cfdfbefe07651eb0b92c52fab4cf1be98128ff9fbf88d3d636082fb2a3293e4ecadc7b21178729b3c2813788e0050e4259b5127be1db3d2eb582f2fcac71bd648bab706b33e6190111017c444ab977cc384b5b730012f1497a3275f3bd98e683c325ba78b89cb8b15202a83d3c915ecf2c72536349cc92e57dc8586d813f2c89d0ed36ded3bb5b6bc784a45923eb0f7b844ca528c435f434f5a67b8e38cc9353fc1a700e9cf71a97409c93f3cd18d7b47a028458d16074552c6a6b807b1c835827d14b9398ab1c8083437cf6e370a732c3772ebefe09d5b87c4bae4d085b8d9b93038cf7ad189916d292439afb434de52cc0be30ed6eb4753ba595e8b785bc789374fb87b9f1f3d355bac58654e22d19c6a1aef15b3608d82a2c776a806d729aa21def983fbed87ec41d3b05853bdf1538e6f2f0efd2b39936d46fc5e99f8652b8490d81bf6bade22917a7effcf54a279a6b931c4271acc15473fa928dcaf0702db8899793ecc1bff37ba3046b263a056ef62f645872a0a4afb66877c04e2e7b4d0666ecfe5fb49ebbd8790facfaf390cd5373835df59b80c7a461119906a87d7d22e4626d0d3a23fc57dfe56bb5b8de48d65cc968469f02a315b8ed8dbc765ce4fdf71a2821f304a5e46df3ee594b65365e1790aef79e8c403cb42a086266d255a3de5f2c29baaa772cacb8c07a420efa0af77eb2fb5d968c3c43a739ec82ecee887ff146f7655babb5cc742e3a1e120add8a884b1ec936ba347f083deb41bc741d8146cbf98a715258bc99fdc1f375f8025ccac1aa0c6b5dab5c67026055481bb7b68fb73ff46d64fb42e0a010c14166aa9d29e7f09a50c7bf01f71c5342a28cb5cb243fd357c3e61f5a8c568f18974e5f542484edbf27d57803d9c79a8931febc510f9d27a191ae87e3bcc72053062c1c55f610de07a145095b366e91b217da684dc356a95fa0671f589cdae6f6ecf4edcd05336f0b6e8dcb173ce6894e8b6cf7649e45e26b9a250f99f0558c4d85292d44aff5c186b9b499c1dce1c6524ca3907f32ec69c98d8a2c4caed4dd20d2806e658931a2e088f328e8024f54c9da6d56acdac67124e9e3ad2a5d2369ce43ed385798a3f3d0094fa884e5f08009a5bcc7db46e8dd9192802c60dc15a8915a0cc1f56889ff43f7ac2c832caa69d8de202a32330d80ff8be08bab9a32fa433780a430870efcdcb92135e5a99252c0ef8778034f449a8b7f82f313171f1d44a92c7e9a654252c46d6a03cbbe37224bf3e665a470c0c641c839a38a19f6e883d8218a010407333239df3f18c0e39c04220d2e86cf30eb9679d1961ffa225fe7d2ab90891ff4bd5f3ea9a7fbc2b3f467f738a9a2b628ebb4c9d407f99a9f1b527554be4f39b2ab0762d64f5e50cb43268a3e3d7344d93a6d7254602a653128ae92b35ea64612cf201337cd61c1d02d6d7ea0f4ce780b30760b4e7a5eb4a6b0ddc5d5fc21715dcf61de37f491ed6e5465a94cbd0d02608fb55b4b0eb0ba56d2121605316c4a8923fc4b185de44385785a08ef0188e184f2280f2904877c03b9ca07b4dc297e0fb0723b3c00fe4a027a780cac798d1199eb4b0d8e91e21d38b9e41503a4ac380f426fabd9f626fca73152d61e3f12febee29ec77c45496911ee889d2f8cc14abab80d9be3dfdae0db34082155d1d4983315e4046abaf546eb739b59197ffd83be7d9d6830f00b17fa27c478521f14b7a0517102ef556ca992b008f053f3f06406c921246aff68dfaa8d7b32126549a28e914260a4aeac40ef49e6360f3d5bb343bcc067f273071de3dd349eafd081c466999a6667437c51bf454ea4ffc9cc16c845a8f725b977f9d3c24d562fe016b3ecd0292fbcb110a3b2bbe83a4368d5bc938d40ee9b3257cfaf9b71f80b9d71ccf6e3664e7e687184f5ba6234e7f205f22d89cf1c65b0aee3ac7fe53c7690f8bb5cb23f2ede62bcae445dce1d0e553798e072c312d1d8e99b54d675148730c4101a20878c097bb6f4fd9b26b41925570c11417703d1ee545d422aa2b07cd527a91acd5df7c0048b2556e23a861b900136478baf90705d162eeed057ffc3946f641e9bfb32ca06d5fd1abfa04c0420f99696d35e47b3a554486f15b97bbadbea984856fabdb87caad7bfd9cebd59834da70b15f371dec0955bf099787f2f6a916798370afc5bc867b23fec266dddabc4dcd1f1df3fecc7a9c7e413b302b941eea3eef247b9ec56aac95484cd55046b8e7fda3e6c8b574281acc2ddaf86d8c27c3f0916db3df057761f776b21a69bc5d1b49fb3e995efaab81e702d14e56031340977756cdc3bb651f1c144da2b72487d1d1a1232bdcb478ad6e18fe0523059ef350a7ca540249ef5bd958cc6e81e88dbc7582763927b68fc0822ee0e6b6f9a458bba3000816cacf9aa062b8425f4bf7f8db7432ed57c92ab732eb635d6bad3d88fb0b1d67b9e7a10ada01cae72411fc33b83259f25c98b1469c696f9b75607435697e045dc25692ab228870da3b4058cb79aac0d4d23e337e771d67a1ab2bb8ff9afff03673fceb531200b9c51fbf763813d034dfec46496fc3fd958580bb72eb864d6ebdf65fd0cf27ae30808d2cf39f1d63665c49d532deb93a68340c5d6e06c9d149c3d2c82f544b5fd3938b0acb33d8ee11b16462fd26572d62172a2e3c6243dd9e7f473e1df78264eb7f316f1570b1569c84405355cd8c95a082a9ab0f67eda765986aea676e7ced3b55b522f79fa874ca5dd372033da7e086c14d0ed33b6e6099ca99d244d76d00ec89ec4669cd40a07e883e6b81aa6278d80ee3c97931b14239620d65530514efcf4e179f72d49e62c99ed86b522719e8c6b76f341e15c6ade556eb553f415c56c6ce92107492c2b1a37ecf97a32cce93b69cad71e4a51095e9883b6e0c57035b4718eb948929bd1a5ab990528c3d6e806ea356800ebcafba6a736d64902f069345e6652e410b2fe9996b98a315c53fcfd368b25c78b6607caff29c4b6024f902683469b56e7948a7c358b1e8b11bb6dfe40a4b8e95d935bd76c51baa916bf28fb08f57970eabf9aebfbc0155ce7bc13dab13906dd58f77d5f546b84bf9cf671b6a94d952bab71653f49d262ba082d4c4c5f26d88661a38481213720fb9607f7e642a429e499d47f92dc17acffbbb0d55cc1c682f19763b7353e3fc758b19a798fd97d5ab732d0a962726ac96fc20551c789e6267e540787ca37884990919e81f9d5a4f407aa8b9ca59adaa73d58a98253024e862959a9cbc0d0d30e231bd80bb9f4ea9dae9531493cc54bbc2c899c01a2534c358f7e4c43f0d7d09a85f7ccc55a9940effab9c56ee7950eb23a1ef14366b6b86cc7d2b28d7576c0ba101147b02243dc4cb058631b5251888a699234383a7d06b38e98c1533071870ee43c4073f86434a15104eba8486c431b6d0755d5cb76cf2b1839b7fbd815d9a08c63cfe307a8a6b442af7c57d0e3215430f7b9d2f801145b8478504d57acc9b45ac67417e1754b5fffe3727305a8b374bea3c237bbbafc5e3e8b8ab355f29ebabf87463c531c1825ab87fe8c0673f0f5954a566a97cb92050ffe939a19701121b4e24157ac5abcb276ff7080177039ea07276d1396a02705125f62c751fc58fbd1e35cef69d63e155c18b070b652a5ce0190fb7286c49dcfca0daf0701561fd8be81b325632d655570b024889d15569c8d51cc570e8ae011be10f9bf9214775f35c9e936d3709ae6813ea64e6d7ad2f6a97ff9c54b0b63f3fa80f719a930879543c6a7aabdb88638ff0a9d49231b3c1273105bb0a3e3317d8cf94fa144494c70a5cb5e827450d5bd2a1cae34dfd98df3fbf0ed363a336a13c66d193a689c02c959974dd408ea85d5c8c9d9a0ebef42d05c6c990c51c5a97d47615ea6b2137e8702cc48dfd197fd7b6302dafb183035ea4faaab161bdcfc6d34abcc92f0e59fae5cac884cbd4b0d5ce960c96394dc562b2e883a179bb99ccea0ea826ef542a0d5acf0bf97bc9e2d5a04c8218a37335f817322534f343122cd511dd1fd4a3c03e88be6718997f035bab8e0119f6a95bd91ed71a0bd0e545431a23abb81062cc4c4fb5ec3c4bace3684e94560f909b03515c3e6af17069364b47d5d1127806cce92b9e60775bf0705f1e6bdb1f7cc9a7f73ebf50ca25163799dc5b7ecd4927bcacb267e6f53ff924183a4c342eb67c6a7550608f388e19c295defd5b18e5c904e807891ee4afbd90358fe64ae37d13cfa05ba12030d63a41ced9ac9ba3b11223aa1bf8c4ddb72e81f6b8e0408c395ffa11d3aba17e2d753d58161f04c4251b149a7b0268c9b4ff2be9ee50a4ca15118eb0b6ea18b6b9f4fd01baccdfac391c7ad83e13640ddd20cdbf7d1792dcc283b6e035e6943efc9e9fb62a1b728bf88363cbd28ed6c531b28a396afce594a5aee25ace6a3e8811977462d8eb753910925b4fe10a6342d8292fa87ef78bdaf285b31fd0fec744c28559cdecf16931734d07ac1ac6685176a59b1ac11fb37e36d7b98d1415e8bff70530f79ddb95a0cb0a95f80a2c72ee8535d4028438a6a68b135b3eab1e3ead3e426374b54fca94ddec9abcc4ec2a185e782eab0eb77ae2cfacf0dd2f94414c21a469eb3df549b54e4818020452d6c68a233f52ec6a3ca75f3a6af0ae3040d6c773b2c419be24cec197deeef0827dafad52757658be94d0d8b3ec02d97be90feae7ab37599e8bef50e3c2c05db2c010b24637aa564d8bd6ad27a6dfa28c297e7066700745aa0bffd935b23fba6307d5b9fc116713362ee76b13a385d2b6c5f059c08d557a41c3915688ab89948a2e49fc7e5bd9280042be6bf7b2a82ceb51b6320366071f4bf419ece7fbd833543e6f579dd1960f075fb1babeaa2237b4f69cda985aec071d377930a39b715b915b50af425894d13cc014cd278cffb3d36e9d6c5283195a106d34d7355aa5408844eeaf701e924f09e99f32f1aa89c28c501c5db356ab79c56253cc02dee99484090102cc2cb80e6829fa3a8e70840329f1e51864d7b88511f481125ca349fb82ce82fd6f8119d0c25c624eea10448ac30dcf244e947ac8542961cd556efb10d6e4b2afc35c097d2d9664ea9b3169a793435d5df05f8f27c75ae5ce6cfaecd38e52568196c6599ee231e06a89599082628cb6a9804a9efa1dab165953835fd807bb56fd8ada7bb650519fc11990deba2869cfadfe7ddeeb033be073f73f7e368201a288185ae4e516f213cb5dcbe1cdb05a3b5f0d235a47a2f815cb695d4524774198b796ba17f3be057f594d2ca2690f5f6fcb3ac7229d2cf10186e8fde5823959b772abba17e257cf3af46ac9a7212bacb5f6a9ca3e2529f395316f2eb5016f4408a767bf9ce248ee358cf6647412aa6727207a8971a2c692677ad902db4416a0fd86df6fd38652c6f50d1a205f0f31d5b6e49c7f092c8e15760d91624c34446106a97b76106b347304f02d40e83093e32c71b66f6f08fa984070712812c60527f3f7e997c4f3844659357d133e9b43cbe32da1588fcccb9c6aacba0ede487a0eda0f518b53d4404318b06581046666b37d4760377e9f009e08e59191f550503d3b2f185c23933bdac11ec3434c27522b90bfc5449719b42e061bbe2733fd862d405f13adcc0fd68ad6be154ac5618666245a4fd1b83e163b574c8c00fb534c1e9b4299b30cf8c261e93b1c470eae64747f7e3b536bae1b828210703785dd6f6b9ee0ca5b2f52bd9dedb4042c6e6d973686b0ff50495454d3c146b77e75fb47c079de7f12df387637cff6e58e4c871a418ca67e373251dd05c77c322d04f3c048153c6fc1a04bf6007f293af0da1674551741f4b1ce4cf2aa07afc9b8b06c4a14cc610febf3766d774894938c163fd7099373a12252f2b4b4ecda889fbbc1e99c13e8ab6d535dc08970914cbb716321142dc372d3bc17a065e31ffc651b2ac3d046e6da82057d1ce92d58a8e1120f30df7c1020a1eb229d1e813d3b211b8d685d37d583ade9bd8aeb6b7aa524442734256637f62ca5183937ab756d6707efce724477f5bcc65b2020f0295f088c0df3cf8530b47d17338123784e5a0e13fdabb9b76720b9937ce6445de86238c90b2bb425f7107645caebdbf1a5b2c6fedb409ee49a9c71b23bde9b65196d9ee73b63ff0e7a58f16c91c9f51a21f4a95f63cbd7cb68c2318f49036e75621a726f1e707cebda49b925125cbd43b4aa5cda4f64c17a8db75212a35e8f98e11119aba8790c3ee0433e3d45fb99fb7517e4db112f1d8d14ad40f64c21a708a1808902f9e2066b6eb1b9a0b50427c841ff099261b6849b65e28af2b18c89561bbfa33da348db73a3dfa675bef0cd0273180ad13a56c97573565504a5c9065f2caa31ea72d5f753261a0771ef868e00d12f5b5e726425c478b0d0b06850126913965a9e81fc03662feb8c7d79bc74b385363b801a059579c31ba4d4cc9fdc62c4eab80085124cb558e99a200c3c9fc5bd45bd3581351c3b5feb74a8e3573f74442170b6e934d06b4ae4ff1459e41f51a1b170447c76998713f1219c88df7279585da0007249439ea9f9dadedcefd960979309ab4bf5f1a067c25067f7d46172268b064c5dfa42cd0e7a0fe417e8a6f124a142cb306806f9d09f37ddb0b57cf69df3676c284f15833933606407e913d30597e541677f4b4adbada72913d572474eb23ecf5dae70ba04f2a8e75202866d9005be8f6340ee1d6b6c59614de68bb82426db2bc615a4fe96da1ed7ee64677f34c8417c8f3017e158583d16b83f65cab391482f0055f23975ab654159d3a615fc6271f3aabdbf4c245bf587be8d1152d074ce7025fb52c63824df9ed816a9cbde0c774e387ade2b7d90cba7a7b0d24ece79bbe63cbd00c5a104ea9c12d02c0b7dc24640f11c6d14d12e595f019eac4041f3818a27c4de3cc88bcc1a504c2139a4ce53abae4515a5f2b1fdd4cecc71318d1663be033c267fc857ff74e8d9a8f98e4dc1772996b5ef105b10b90b1ef94c514c0cab60fe32dd9c978582268efbcf317f3bed53c9fc87442e46d58501fa70fa336692d55f48a7e39e4327d84ae1840bee231aadf2a1055da75a1aefca762e7fea9554f1b6d2030711bfbe71ea5be078cdc6001c6a4b3f517a22c9e57969a23de79dad6b65b7a771e7971a3edb2c1d87f4bbd57e9015861d3b766ed7fe7836bfcce9641c095223344fe4c2b27ddf88b8e963096e87cb2daccfdb1ad338aef0cae82e20ed483096f1ddce7bd1ce8c78c004dda0403656eebc89524ca7e576dec45373ba5ece1e0795404df39ba825539b56602ea2bf2645e5a2381f73d6906e26fbd75b1bd9034f047ce68dd02e315f3cd6df0d9dc06e25a3f326766928a90677be66a48f266b39e1e6dd25ad3ff709739ef62b4b64d7628ba13cbcfabeecd6fc72351848dfe4bfa9b56b4df48334bcc96046576f56031a69eae107c837440c93b4782a7ec874ad565d72e037ab814f2fe2555b69ef620a0cf3e5e164e8d8f61dcd8603d8336170b84820a50966df167532cd3c6b6cae431e2bb527c4ba6dd2bbfb202682fdb4679faad0879172f573557af515f22ab230449cd1ec50576151b08237d72c883493a03797ea679068741c78dbdcb1c4716e36d9018dac6344f9cb68e61b847fec997fe81cae8fa8643bc779f9a25aaacb8e1955bfb0ab744a9e5c5a970b47c502b3682b3fc9b01f1bc9941615c334ed5fbad9597e4e2ad95a22f187d00539f70098acf1e5d4c7e8172e74a02f219b85cee7820fd73c2dc861bdc15f66dc157c8b30407e7b547c0f8c719c5223898912cddcf8d3146ab99f0befc68fa71368cb069659465a086fc70c30075b1e1d9adf9c17ea535b2a1b9c5dc4bed717f38d3d2c1275fc778b54851cc7f714e4f29a4ca4614db53d24a93fac48cd86404f3e833a1c98b6a7e65465d20ef0cfe880c5fa11018ae5d8071541994af8c776fa2ccc67fc49f25c49ec8ada36414dcc5553f07b0fd8e41f13f32d8ee89d81b509694aad18c90ca2ca4462669f15facf39128bba87666b48513562a12badfb080d4d8b693db4676b12623f827a495abbfa39fde0345865c899d3cc19dfae71d4c559c2e287daafd5bd7dc2e70ad12a19c1a33d0a6465fd125e97e95f8b4543a7642698156669450d43fc4f4ebd1d5c37c23ed65fdf1e73c85e0ba785befd6ad85d51dbbcc0caca5fc86699fe34f187ac173151d92ee945b41f329b5c3d10dbbaa165ca846ef9a82f7fabf90e58a51c4471c91400db707dedbf4bea68f5fc0108cef734da974b1277c95c560a69625f5cd058c63b4ab544f027a0d7d39634ab94a7209e6e8398a2c3384540192efc1a6a64f196b2eb8cab87da1f55bf2ffcb925b2aadceed9289c4bff50c8b3a0cbd9eed1e79606cbf5f8e5dc26972f7585b01bbf81a47e08299eccf36d347bdfe8852cfc5251049fb843fe6b08ae87158a95eba2361b7d094fd942b2b3dd5481af6467b0d047ab348e1b1c3fda159429993511e7b59269873243d75854b172a62fbca31b00e37577c9a32376c4be92c57100b83d24772cf983269db76be391e36848d5d77756c9fde38e2aedcc7c9f2e4074ebd015cd92e24a0ec25e911dee96a1ec9ff063ecee8a0b7036d3cc918788b5b715b362b1965b4c7dac6ee448235e0f8896676cb6fbfa7a7614f5b36d393be8041f89f90bc3200a187846fb5651f451ced812d8cfa7a814b65cbe0932a36647a3df5a169e2b1a8e1a834a6d3a939618dc2c0b5fe08dfa76b7de12a406c358abab66facbf11462bea9d0d24be5af2d916163869d9bd9581cc0bff0983c3649b74620fd6710ab876725b63e38dd4dac2530a762504cb08d673d8d6e943eb04840de6e215cb58c3914aef4fde860be867b61e48063b981493f6941d23771de9db270c1f18cf88cd7975c2f7c005c12f87d73a420bc8d803cb0a1400f04331fb7a9fde3a739d18e209d7e790b111afe89af67c223befb85cc0f26023c78768f8ee3b2a28e6b2e9a3d92d1f1464040a6c009e64ff5aeec3db1b675b8360f373a2adf1ad1e06e3d9bce4e9c3d1584b216b3950e8fa6ad48ea32ff6e924402ce9e3b8d41b07406f4ef5cfad3b3436b240d9c7a5563ca5160daa277a69a6884169602740ba6b860f19c06efb273520c95054032f01584117e1d3f43271e665f809b8d617865745178a6cfef480d80afd9a027c09006b7b74372d77f2457ce9dc7505bf4fd2b350d56dd749ba70ba46d02e6a688021d389526a6e8e966150aa2e6b927e19ac403e1213eb89ca923455590cb5768365c840509fc680d9b76491f64c81708dc3d7779102054006e8122e45c9e4333859bb3438bc1ab22cb40b4a8602498ba1045f7f3376fefc95d4fd97bdf28112951e64c48e12a3f1dbb0e54b54c730ed0f417308cd146e7b925480a0cfb545a2526f43c20790db270a1b7b8cc841efff8d6b50dec2c86731b2b761bcf5b22ea77a9322d936cbe9434933d697297e9975ad5343f2e7bfd66b0c9749b51f860ae06575083457d839b47dd01c1f912403c201c0cae5de467b20d4ecc4bc858997e8a9d42c733d29bbc7628e9dd573bc1e996f27dda4b790af269df02e5d910243ef3507e390d63b959ea7827c54f55c68b06fcbae19fad2b03237b7bacf5c9ca733fc25eed198abdd3f723a270f8eef05b8b2d31ed7868e2037eeb853e81a5f9984dcd7a72e973766996f532ae7fcceffa0b7e4a6775b1bbf308841803a75cd2371042d133e43de3aa6483f3ae3512bcbc18595a526e038aaf69a0eddea6eb023c9a4e0190d1e960b98d22aea4aec01fcf06dbf08311ac70e50dbac036943509934d4646ffd598409ce07df85375ad722e978ca78ad6d7c493c1c81391cf7bfab3405ca24406e97a72dce5d5f3200976d8c0e0137b254619c01b95ec203901731f034908f5741eb6ca300993d9dbd0694a03e10e1b61981253a4f0426e675c0d8e06dd32910857bc517c927f2390255028dd6f4f8ab8429227cce41e68dfce9e4918119bc652afc8d7f3fdace8ae20456534577b80cd7affea57fabf7dccec59913265e90496511c6c827e2081ba87375bb2660502767136b958d8d8eb2ceb873ae37001d0ad7d1184eda40c07d3d9358d1e6a0e848b06cfd4fa124e20864ab6c3e5077435d43148a1506df3d97382e7565e0f4f5dc786ead2d507cd92557c6a9080fd72cb13479c92f135bfdee13306df0a2518e4b370cc3c498309ea17c88e7162b4eb33793f933275bfd9279db6a44a47d2180e1f95dee5dbded35fc0ba68491f847411ffcdaee9eacc3b124fb9c9ee58c5506124a346ef0718daeefb8d8a6cf40907f9c1701fabd56ab18f2b79ae85a082a7ff0d67c72226e62b8110603ae117318b95bcfecdfd58e033c2f314cce9f86ccdf29dc1715980cdc711f6845fd48ac1f25120e269e8e134ce2b79840a145c3c7814d003ac0d47b3fff54180f9b9373ad9645c0c31cf6ffa8c36cebfc2dfdef03c2362eca5ab907fe60bb71af5b68155361c4dbdaa8eda85707f183e5011f544d888c774619c3b122a40a760808f233efaab9a897c6e0c86d088a5143e017755b73839ffde0e2e4e05b32892c7fb5249405fcd15401d15d87b069946ccd2a8830a82b3a51cbe73efddac1c3caca75274ed086cd6c25e4ebfb67366306a034931493a1f13ec21804e78da8b326beae836fe203826f830b5a85535038b021ba585c83f7eed6f928927d0904cc8f5fd8d28d3c69bc64bb2e6b5916ceb12e53a3ac3675082306c3dd29f0d3c7418437205b395d12ffc1e6655b0f7216ba444f7259f9de9f8daf77840f5f9c30eed753b471e712c3161b09fea22f57af8c50bd0f47c1969aef35f99043ef2534202d3a173c7ab44e6fe5c2f45be9c3ed38c38454da7f8194be610d81fb912bb31a4b696342d7643ce80118292b76ce95ef60f2282c034aeb943cb2681c8fd5a9d373f5ca92af931239382493ddba9040e33c767c2df19953c43d56a4ca5dc889663279ddb3fb3923b58d2fe21150b946fdd1e29834ebd516bea1b7aa504c50c37558b382b7d7ffa4476518a4412eec85e2ec59e46989d84ef8357695c606144a3ffcb2298abb00111604572aeea6df0bee2e7094954c84e67f8cce1328b367f4c39156ee03e4b25d7734f47676c8f8157f27724509f8889e6e77cedfd28889f907f446cecf1c4e3e7fa41841ff6806fe25c3c26f36f5ee974dd21447c49b39f881fe9b4bdf884f28c54a171b35990adbc9d701d58e56077fcfd433198c22541c1f33656bd0b168c934a54337da7343a777f2f7e0fd3a5564e73f2eaff3c774738f7500d103d833801576dad800272c32907a961bb4a42b9c9892a32b169cc51fb1abc5238180cd6edc8af7e7763841f233a8ff396a74530026b7cdf6f63756bde0b3a72528ad3c2d8747952e524037c629d25462874a816d69b5fc8d9a2a38d2c5c001922c489467257b05ed89e1cdc3dd4ef2382ca179aab175b176747765dab9ccd3ed2e59fcd43b04805c2dbce0979d7095479f6e9b69e74a2bfea3117863f05b8116b7bdbf27d0546392380d9dd4db343a57618a29256c9e99297bda79abdec5fbe953b8b88015d00514143e6e7ea9429e9746122d9c5888551ce6afabec5d9575bc5f618598803640fa16e03fd4b080cc4633f21d0a455780606cd9956ae5b929e04f570378c3a6287692ff4d76217a3c697b0bdc0e7bd043b6069298a68bfce2b9e5f81c0a2d6c84e2ab0e6ae97d659590230e730d34a4d578ee15f34d907bd70f9556587e8c725e1b7f6e6425733f82f0f2de38f118040110992fd91e1d98340108a36cdc4b3cd0b2cd014fdc0ebe7c40789adee9ddb2ccaae4ad7f578d14735e0e8d893b69ec67f8711b0e5977a82d3f83fcb827dd6d8c62578135e7b1bcfe9407cbd16c5afc53e98288d139f71e431fdcc68d77bf620702c1f7ca50c26ade46597433861481ceb21350d910b5c662d86c7910244a1ba51e7bd9d6eb8b6d2c000882a249e52e6a2e2c7b5f440afd6a204e8f17d08688ff94c17f80cd0214229a4d83139dce50432b6c9fcd96ea2d30012650d4f796638dbb7e634c7ca466fa6ff16d85a3edee8da6e19572e5185989bc8f03a79739545eb1424a7dc67a93a5c7fe8f3ea92b9bb67bb29fc9e31d5d30a9dc630d02ea928b5a3375d7b736298707c37cb5f56608a509926f6274c30921f0e7a1a73c854a11aae087f0019f1e33d71ed8c75f0a571796d184aeede140f550a4bb55ddc4b2c84b35c9a927f9bfdc98b9fb1849d6152b846f647f209f73d72a7452d976b039eb2337170e943ce8b7f12b0895ccd0bc536da617957697b3f4d261dc30b361ce52d827e3c75807f21135c7d97d0234d7466cfa590d6d9cb842f0a154f9a7cedcaf0048b410b76eaa3aafc15241b1a38abc5eda27f464490b648a387cbafce9376be96d2589c242077fa0cb746e11fb69d6f73681187d21223e9a66dcd7566bfab765baa3a212391df1fbbeb0765aff475461d6ca54ee478acac26890cb9cb2624925f33444a79b9ce6f6788c8141f82c43896d9a13ad867383a2d3371f7e50346af142badb2807525be08fb8e98fe9cd6a9adb4754545340cfa7ea397d2b75c836035a14ed20334ab8f70a48894a9cffadfa6d2b37659830b4b9479c0447b4436b463c2d980b848084a7fcbd3a6bb5f95709fcd77c9847e461af18cab3ed6a7493f649ab33e094166483ba0609c46165d48c92a858d5483ea10412588b9f7e8510b4e6cfbafe08a20c15d40360df4c9c574919753a7bda331a4e57c349eb9bfed7fe19585e9f8771da32b4f65de4a4d2bfc902288f311a238be0fe8a7332118c60e5d6266dee7e148b083b457e68a3983e081bd57c4589cb61d58e75cde1c9310aee66de6b5431f0c91ebbaa9553a7a18094e570caac18c72b6b11d6c7276567719c51cd0935d51bd03ee74bc5956c02b8c788ec0d2766c1249dcf8758582ce775e41813e6da8b0097fbb346fd5f7022291f6d514c31eac4d335b16e7504d548029fb4c9cb53b8d8b98d97e7fe0ff33c794db66ceb578c3557a5bdb963c3493729d63a55e7d52d150aaef3560db61c51705ba19a103b6307eb3dfff31f13b92162aa697ec37fbb1846c5b973aa71faad1a9a5f1f1720b7a49127425b0c13b9371582d405f8057834566a2497e632874ff4ce7130d189f76b8385b39cf7937bf1ab78013a83d283963d018b7737f0159eda44b2616c86057c7b99d9a8768ad50e33b961023ab3fcf1e1ab031f3ab9d057473bb50e3d5f4c8da0522235bb9172a31b00dc8e0b3e9328a63e5d922e4e329e94e4426bb0fa70339af2507da65fd22e39e20ef3a66ee465bb8768dc065db2a26bdcc987cb3b41d995366a5a9bb0700c40b3f13eb4d4b3aa5573d24f49dfc56e5fbb780f4beda04ff69e261772428bf6885d70e95d7965d2343d7816cc828ba7012eaf60e273c5fee2768e6cdaf6f51684d7aa18858a1ad1bc6701240e4a121314eff4c08270f18df19d2a2fd948921711f233a3cd27e7ec1fa0dcadf05960fd289fb2fe3814c89ebdcdc8caa80ea316b20dc8667227970791a36bd77c0713354e87ae23b2124b2094f3f6a309a7b60b9444a332e51d9d348f7968ca61ea39be505ce1d35d852bec9080b399e79c0e2aefaa2e5dcd0a3bf86bc90f1e87454319a546bcf808b7d22ad39715780c71c23ca2cb3919a590b06ea412cb976f65bcdf0eb5de6d4ca446fbfabb83017afb1d6e9114dd5993ea05855bfd1e2175224c1eba90ce695a074a4fa42936c695d0c9b3780494b4156df8da5b3e01b379539457ca85da29e27b96bb820e8c0a5dd82bbcaad2606d750623809103229795d07014e7cf79b012abd37d740969c8e0b0bc38f3f1a78f5ee777dd6c95001f695305cc5d2bfc956759e126fa27b1e53e794eac6b389233e56f363a9f4bed70e7f3ae10bd3eaff26ba8d4cfd3a29661bfd7bc80de6f4471be11ada52578f5282144e0ee30fe90b00f0b9e30ce9a708e92f1305dd6c70c8650a5fd7a1162052c6469796eb9ddca11e4dc60ef5fac778266507c3c146e95632ba8ff08c8cf17d36fe29a46ab6defba7d7dfb27e2b5d0611cd63358ccd7ac04e323e1f6d637696a09eec98636362706dd6707a804260c55c33c44e36b28036d67ff0742c57d3732aa2e445ae7baf5bdeebcb809dd05b50b580304fd5151897ec4056795009aca9a9dacc556c60baca95e7a6c030bd569011b6eb6e53c6e34ea75f0683b7dccdd92b6dbf9491046d40df8f66b8450d099d35a5c3d27b650b9c1fc3d7ab475e3f8b0005f39b445a053d6fefbd987ce97e7d6fd04cd560270e7df6384cdc26bcae301f0a4acba7819a50c2364c265b1a98ba4f0e13db771c6c9fcb73a5b88626c0d955afbd28f2aca837a07d6f6b801d2cf53ba8b9755d445fba46b4c3a04f46e99e1ee3e65afb5ad62c87bbdc94ee76fea88c8c19658e4490b3abe7f7d269d0d14daab9812b746eda709f6f1c8015025eae580fc10936ba76a988dd72182f6c0d386540075acf0d907181ca514fec121755fced7df4ca6431d200b25a5b6a60491f5fc43ee7c54f8cad9778b7e883f86f17011ca553cdc755a1c8b9558149c0a8979b77447e976d817d3e3d01305462fc53fb3da3b9cfc11e158b28cb987290db3d234f393daf8997e92e4d64f21c6fcca5568b2c52944c291bd5df9fae8eede6ae92038ff73857212bf4f732864c5a947efb50f84472583d15d039cc6ad85d79908a405f0428d7bc2fc766b457e425e33a823b9185b3df76fbd473692e111c196986ef06b35d118a91ea2488caf86d42983a1910fe4ce74ead57a1ce11413a57add00559e619aded8fa2af069c026e3526826f4f0f8fa000de3e431b3268c6963498fcbf9ca5ba2224852d5103c839f4a63a9393745ee423bb8df9df92e21c5748cd577a1f649e348a3597584672c1ed130607d2135407390846560590394def65b162f3449e9061d88d27ef120f16ffcca66af4ba1299df4b5f58cbab8964a190868e84bf96294c2be44a14af08427d313325098775eb96c1726cabe41511e3d9465c19b0f232aeb70d9f901b0e360ef6391f92a3f54edac7c7a7ed0dd6fa79c66411dab54424568af966c3179e93afa0efeb38f6d69239e7d881fa6ed9ff5eccb91c91bbfc686d6a1ac4dfe968be86bc3e20ac64e9c5eb4c103249df82cc393e524bb8db4c96712126eb80f2e31bd5251d65106d61e9501687e37381eebd3f1ec78c06e45b521f9e93f187cd8d850ff2546c10253f7518b3e986c13c7e27158979574531b5c4eb370582fca8baf4b31f2e7921983e30f95bc485c78cb4a17de0186beace79c1117c9fae25e3098ca62fab2f6240cccb9d1e59f1f4e80eae04d7a18a2905cd66b6b25a850a86eb7d1136c2a9ce5e55e6e963030a747d0979758513656543b9dbfd353840b308fdf2067a185b516b0f61cf5fe9dd293eba13f6b0c6ccef3c60dbfaa6d1ac81a26d45ff51165e57c40599f175237c928a03535e96f401debb476b00c2d3f5944ddbfce50875fe7268a0cd1e96a3dc2217f01e03e52229ee207b39caae8f458a5c04fbae4e9d1018c7586fb8420f4585f5d20727941a995df43894fba6ccca972e05e2ffa3e174d6edcda3727874ce823cd18c30926201029aa37b7b5596027777102d21a6eb8a1f0227e6fbf474e160bbe5f6187e2ec9b65961dcec0c68f077a8dd82bb0f8252b1f0654a238619f986023ade0b779ca66508cbf06749ff1bf2f82dbeca2ab1da74f7441babdab4e7763dc00c4f7004778649653aec9fe87faa4f00667db54da4a6d0d8cf12bab83ac95ff50bc337145a6c6eb4cc367af89fef3648fb6755c2af8e07ce0d2b8d88229d90f10dc3a8bddde219ba3b9f17f8b8845a3bbb482b26e35064eefc26363c3887f9796b9c53fa2bd94a377cb50c61d43d131f12a4ffd210d382c0a0a081fa06c4b9ee5428105ef5dddfd8506fee6f659dba64742adff298daf3a779bcd3a18aa0112632ae8065497a2046fa1461120d56fde2936c47b6b73e84f26693979933a19034444acef04cfb1fd865d7fe2b076aa317424e311043bb3eeaa731d636f7b99bc36979264eb24901b685b7db153896ed294c20465f33a86dcf943de9e7ffc9324d2f48b98fbacabf9f8c8fa36f5d945fa06c3791f1c3105f48c638070e56ff5363bd579c2dcdeb34a0ded8a8cfdd60989e98086865c4da1b9c40f83bfb2ba6a5fe00c6d61f56f63702b455b47f36de181e01dac0e233396125836e22a2c324daac206538f2df4b5290e7251aa92b8f71d2295b3aa72ae4bc9ae4ce7cfdd3ae94955778e498393904fd579733fb2db9dd3c1cef15b7f8c1d12eb57c99d2db6e0e87e73bf351db9013f6f27e41c551beb72405d54a1b2aa01107f72724122a5274252df6a49988c5c1e74aed72e067e62550f13ed5ef90dee385c41da083b317ddc72b7b71f2bde11ed89d9e7e097a846180107dcf86a8775dd8cffb535208104874553f1f4fd627a64cb27c88faa1596c9910de4bfa6fee3b41507739a23b976a38cd1d963dd164e245db6d24c82a173be3905d74a20d22592dc4ce7de3167613c529ef807ebc2e1ff4e5cecb1ecba424e396f7dd79232220e0092c01926a5d7b86b686f699ecf5bec8d0156bb7094fbf3d321be5ea29bf535cc9a65ec22cb8e32b1d7cfc9b539e36203d8874c707ead7203d10e9ee0abb4f33de1df0ccf82e548eb3120245b8b9c4b59bb90f77ef026ff215b82380d3efaa48ce36586680ae94d69d520daa910c06f8fdb006c3a2ce727267d932a334e9e8cfed5658ac54ad39557a9020fede1aebf2eeaa446561da1321c792f446e2a21f4e894a851d580251ed61a894959fbf3d86937fde51b3913af00544625c1e7d04b749e2b704cf1bbd09c1edde10a49628f3537c83857c568b21892e015d09fab14644f8f50e83e5842c12bb1775a996914f96b16d985533e4e9182ba5f07e2517425a8fae4fbd6fd61148a2da7a07c333f8406d78dcbb8a888b769e8b15719e6c296c06f0b4389eeb0a28833fbdaed0aa5baa98ce769177bbe454f1f956cc4d5197679e22adc5b4e6866986e8f06d8feebc2fc897f61b07c2776fc37fde961fea2268b65f41a19627188158346119183d382b890427acd0c0466aa8edf3c1ec59d08c245ab63fc0e1e8b8e03bc7f67e32e2c8649fd647a1e89cdb0858caaef684b215ebaa5f5e7acf3727fc0162c18ebbdc12d1726d514938302ca2dfeb2d5071693ae2eaa77947b9fe7d3990c60d990a58f6ae9552d7fca49f9aed99da3a53ea83e6c5d51e0aa6c821cb0e51f1caab13c7605b907542282dc4aef2c1b96873e4df97b254a0344e0a2e097f43acdaa33e30371937e0f8b7ba1996c1195a7a675142b77bcb0d9cbd84a63a8bc15fa28b8a687f0567e250acc0af70cc98474a38f21a13fdf5c05b51a49e14839e8b2a4a02b9bfc95e0b4c1aae3c6cc1ea4b89eb4f9be6a8f03b3487dd0c41d824a0c82b28ce2475e4ddb456ed980ce2c3d6f01d9f8f2de3d2601d0ec1572b99d2b779a8045d3817b2c82810a9847ed4bb1cf71172bd7fc428374a022e0ee9340c52bf1ee242e056fe2c2e3e0762a1d5e5bf77eb203ac8fe271fbc4d88cbeebb6785195bf7a24ce4529f6924fe652561d77a03bc88b64af21576eea4423f7fc364617f19b837a5f9fdafeacbb3662ad4669e49ea4bb30830c3f408db3e16eab493565c9f3daf038ad52a7a6770e6998d76fadcbf999d8a90de9812362974449d1a798f0978926711710ca990218d3f5227600899d5ebeb34326a5db7f3e71e13648897d8315ab92a038c3eaa87063807cdd5ad011bb03eef87acb2fd35ead72c4d0f3da51db3c74b2a5983058339c3437abe12395452480711ac62da7da432b197844aef2b2838b23a3fa55cef86ad04dd7a334a59674e075465926f682191a61d196f711f625bd4bbb47180deee0f9701c9a744b3683b5e5af9745dee815a899071981ec2d8410e81faba2b337021f247e55d1b98090076ec099b44cc2074744ffa83e3f54b086f8746bb5e89de1befce2ef4345f1280bf739454a27c376b02b26f062938e92a6cc01844d7148ad6a341c0d75d46c1a48e5ff8b90209a3837761900a414cc60818a4730bc084efce6e27bf375c86e97820d3f2875bb1b2a2f3e7aee991c097cde4ce12b7494eee8d1a36af87cc06fdced3db8107546a66fb322daa6d0012252e541657dcbad863d65cecd2aaea7ce6ac6ef4a36f14251bc1f9aeb9a8fc0bbf06a395406418f921891a325dc760fcffcaaecac82b33712cd9ddbfb3a34c46b28291a77508b8f4e21585311652c549ca82e5358eca490af31d2f9839047a5f938878270a88ac12062fc1262f0a711c825c1ff3b3e71c754e1c415175874edb2ec50774b968f701494564fac70c27957df1ebfe294dec2c4dcea1a839358b465214cd3db4ec7bc94e4f4783186a670775582d05f74ece05091f99c7f5cc997d0891807703dd2d9a63f8dda763fe32cb5621315874f1c8e32dc3fdd63332bb77caeb8c6083ca8b4d239effbaeb21fa940a052dde5ee8d85701c63f36371793d01d154f96a72d3cee101902aa8af2c7ee508d5a9a2f777cc7e0eeb3da7f01e206c7b450c38a583032042d63ef4d6cdf752680bb8cb6b000b044ca5d7c6c0aa08035bcac6725f686169e38a1d99359b486df11135e9a0d3114c0557bdd6724f381397c6fd6fbc9336a43cf254aabc45bcabedbae6faacf7d224901843eb5f5f18e40b4e72f50d84d547d5e32f28e8cd89117f42c16371e6b1f1ce4808c4f735534f558c618a410bb2c9304786ad34e3bd3f88491f90c8226cc3eea3e6fb788b089d71e3abca6ab6841092aef022f8f41a38e06176de48531adde767f6b41efb6ace1f1a9b827627cd4dc3374ab871a5754f15234af1bfbf9b8e3571c92764955f7d6c927f637d992e02a469f14caf4947377fe33c5d99ceec17482815ea3198cf629ce9747add05b580146c8999f36ee4da253593b2bcf62047f4ab1040a3c3f73374706f1f39dbda98ec22a55c0c141cbd668a57ef0945d36521ebdd2357e7f08d2c3934f8098500f13580cf31339a751489bd5b58e577451515ee1eed5ddc8897d5f2d2c73d517e5f48423cb0a183eca27e9905dc8ad54f956b222bb80e86abd5c252014b2ec833480f02a9f218f53ab8824ce68863f723dd746f9e317754bae00462390b3a740d342a5719348177affad374926c52f2c8097b00489521c2d4767516efdd551cd8e72e080058fd75353a5897c0dd6241e110160d560255d287a894b773c0c7c15eaadb7b4d8187d3fd3376bb499a247d1b53aa0a12ec02569ff1a39a69fac7f76a975e9c3eacd1589427214444395513b2ad97d04a577336a5d87a09ad06d1cbfe27329a12e473d475c6228fcd77b1377d775b0afdfab25e8e83b9938bb6352dbd9ab693420173d39ce0453640ee2b4146501e3079c6c7d51c690bcca283c6bfa3b35929c85084fe10c0250d5e02b26c96920d784d76542dc37419d35bbab6ea21b0f9ab45b7b0eff177ae1ae556ffd3e0e930c40f398c02fd41223b8b425c48616a1d52c1a13dd918a7d83e1ebb9f3c3f71aad44dec6abed519cecdfa906e6daa4e7a7a45c5c933e1e5c428fcb46de25dadd8d551217d2f11969ae179dcf8837ac99f55ddd9c0d5e2c601370704452ad8279bbace9d1344ee5b4f75e2ff1541351e5d04347a0d26f95dee77e8e1084abfc957bd7babbebe659b0b05a20b829648559448df3f9e2b5bffed7249bc18df6623e4ad6e5724b828605a0215e39b903b45e75e08097a2b679a76282d5f31300788adaa4709002bb773c477d5c90766c1bb1364c6d45a73e7f4613f663e5ec3174fd52b532c974ea31d0a6deb2510c750a2b9242038c6a7047b08f4c64eb6f5e3f142a2be8385917894de785f16fe9d28a0572ee2736ff87bc1c8cfe318be81f02f4b35909059ef0bd5b59554a67a451bc5d9c5eae830caaeab324c5f1b2304f2bf249a186f4fb22ba0983e660d7ed73bad2d596a9116cb93010da16628471e8d30e996a625d71890a11c716f4b074c296adfc83579d7e04834af59a0fe27fc088e33a34cd193f03e9e8e7f576ff2d71db23636848b6608203385be2744d6af4613eb7a3720273ebbd3202dc3ebd37df52fc527d2db1cd141b9746103897a6ab9f7ce70473e3a91a775c3402359155bcabb016fbdf1c1e013</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Pwn笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux管道机制</title>
    <link href="/posts/12101e44.html"/>
    <url>/posts/12101e44.html</url>
    
    <content type="html"><![CDATA[<h1 id="文件描述符"><a class="markdownIt-Anchor" href="#文件描述符"></a> 文件描述符</h1><blockquote><p><a href="https://blog.csdn.net/yushuaigee/article/details/107883964">彻底弄懂 Linux 下的文件描述符(fd)</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo log &gt; /dev/null 2&gt;&amp;1<br></code></pre></td></tr></table></figure><ul><li><code>&gt;</code> 表示数据的重定向，可以理解为数据的传递<ul><li><code> echo '123' &gt; a.txt</code> 就是将123写入a.txt文件</li><li><code> cat &lt; a.txt</code> 将a.txt文件中的内容写入cat，这里因为cat可以接收数据在终端显示(文件描述符1)，所以它会显示a.txt的文件内容到终端</li><li>这里 <code>&gt;</code> 与 <code>&lt;</code> 默认都是对于标准输入和标准输出的处理，对于其他文件描述符而言，需要在前面加上对应的文件描述符才可以(补充，文件描述符都是对于一个进程而言的，所以对其操作需要一个进程来完成)</li></ul></li><li><code>/dev/null</code> 表示空设备文件<ul><li>所以这里的 <code>echo log &gt; /dev/null</code> 表示把日志输出到空文件设备，也就是将打印信息丢弃掉，屏幕上什么也不显示</li></ul></li><li>文件描述符 <code>0</code> 表示 stdin 标准输入，<code>1</code> 表示 stdout 标准输出， <code>2</code> 表示 stderr 标准错误输出<ul><li>文件描述符就是内核为了高效管理这些已经被打开的文件所创建的索引，它是一个非负整数(通常是小整数)，用于指代被打开的文件，所有执行 I/O操作 的系统调用都通过文件描述符来实现。同时还规定系统刚刚启动的时候，<code>0是标准输入，1是标准输出，2是标准错误</code>。这意味着如果此时去打开一个新的文件，它的文件描述符会是3，再打开一个文件文件描述符就是4……这里可以将文件描述符视为全局文件，对它进行操作就是对于文件的读与写</li></ul></li><li><code>&amp;</code> 表示拷贝操作，这里 <code>2&gt;&amp;1</code> 就是说将执行文件描述符2的指针执行文件描述符1，就是将2输出的内容从1中输出，相当于两个不相关的管道进行了合流<ul><li>在这个例子中，1首先重定向了空设备文件，然后2再重定向到1中，表示2的输出也被丢弃了</li><li>对于 <code>command &gt; file 2&gt;&amp;1</code>，这里将标准输出重定向到file中，2&gt;&amp;1 是标准错误拷贝了标准输出的行为，也就是同样被重定向到file中，最终结果就是标准输出和错误都被重定向到file中</li><li>对于 <code>command 2&gt;&amp;1 &gt; file</code>，这里标准错误拷贝了标准输出的行为，但此时标准输出还是在终端，所以标准错误输出拷贝了目前标准输出的内容输出到终端的状态，&gt;file 后标准输出才被重定向到file，但标准错误仍然保持原来的拷贝状态，将内容从标准输出到终端</li></ul></li></ul><h1 id="管道"><a class="markdownIt-Anchor" href="#管道"></a> 管道</h1><blockquote><p><a href="https://zhuanlan.zhihu.com/p/58489873">Linux 的进程间通信：管道 - 知乎 (zhihu.com)</a></p></blockquote><p>​简单而言，管道就是应对系统在执行命令的时候，将一个程序的输出传递给另一个程序而产生的，以往可以使用输入输出重定向的方式和文件进行解决，但是相对而言比较麻烦，所以催生出了匿名管道和命名管道</p><h2 id="进程间通信ipc"><a class="markdownIt-Anchor" href="#进程间通信ipc"></a> 进程间通信(IPC)</h2><p>​每个进程有各自不同的用户地址空间，任何一个进程的全局变量在另一个进程中都看不到。所以进程之间要交换数据必须通过内核，在内核中开辟一块缓冲区，进程1把数据从用户空间中拷贝到缓冲区，进程2再从缓冲区把数据读走。内核提供的这种机制就是进程间通信。</p><p>​通信需要媒介，两个进程间通信的媒介就是内存。通信的原理就是让两个或多个进程能够看到同一块共同的资源，这块资源一般都是由内存提供。</p><h2 id="管道符"><a class="markdownIt-Anchor" href="#管道符"></a> 管道符</h2><p>​管道符主要用于多重命令处理，前面命令的打印结果作为后面命令的输入。管道符也是一种匿名管道。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这个就是将前面的输入当作后面的输入</span><br>ps -aux | grep bash<br></code></pre></td></tr></table></figure><h2 id="匿名管道pipe"><a class="markdownIt-Anchor" href="#匿名管道pipe"></a> 匿名管道(PIPE)</h2><p>​匿名管道最常见的形态就是我们在shell操作中最常用的 ”<code>|</code>”。它的特点是只能在父子进程中使用，父进程在产生子进程前必须打开一个管道文件，然后fork产生子进程，这样子进程通过拷贝父进程的进程地址空间获得同一个管道文件的描述符，以达到使用同一个管道通信的目的。此时除了父子进程外，没人知道这个管道文件的描述符，所以通过这个管道中的信息无法传递给其他进程。</p><p>​**通过父子进程继承关系，再将文件描述符关闭，实现一端写，一端读，就是匿名管道。**它通常使用系统调用 pipe 来进行创建。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pipe</span><span class="hljs-params">(pipefd[<span class="hljs-number">2</span>])</span></span>;<br></code></pre></td></tr></table></figure><p>参数：(输出型参数，通过参数找到打开的2个fd)文件描述符数组，其中pipefd[0]表示读端，pipefd[1]表示写端</p><p>返回值：成功返回0，失败返回错误码。</p><h2 id="命名管道fifo"><a class="markdownIt-Anchor" href="#命名管道fifo"></a> 命名管道(FIFO)</h2><p>​命名管道在底层的实现跟匿名管道完全一致，区别只是命名管道会有一个全局可见的文件名以供别人open打开使用。载程序中创建一个命名管道文件的方法有两种，一种是使用mkfifo函数。另一种是使用mknod系统调用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">root:~/re$ mkfifo t1<br>root:~/re$ ls -al<br>total 24<br>drwxr-xr-x  3 tcz tcz  4096 Jan 31 17:02 .<br>drwxr-x--- 20 tcz tcz  4096 Jan 31 13:25 ..<br>-rw-------  1 tcz tcz 12288 Jan 31 13:25 .swp<br>prw-r--r--  1 tcz tcz     0 Jan 31 17:02 t1 # 这里就是创建了一个命名管道，它使用p来标识<br>drwxr-xr-x  3 tcz tcz  4096 Jan 18 10:59 tools<br></code></pre></td></tr></table></figure><p>​对于创建的命名管道，它也是半双工的，如果只对管道t1进行写操作，那么该操作将会阻塞，只有再对t1进行读操作之后，写操作才会停止，然后读操作读出写入的内容。同时反过来也相同。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">root:~/re$ cat &lt; t1 # 只是读取管道，没有写操作，进程将会阻塞<br>^C<br>root:~/re$ cat &lt; t1 &amp; # 后台执行读操作<br>[1] 571<br>root:~/re$ echo &#x27;a&#x27; &gt; t1 # 之后进行写操作<br>root:~/re$ a # 然后会打印出写入t1的数据<br></code></pre></td></tr></table></figure><p>​如果需要制造一个可交互的双通道，则需要两个命令管道进行处理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">shell脚本</span><br>/challenge/embryoio_level* &lt; t1 &gt; t2 &amp;<br>cat &lt; t2 &amp;<br>cat &gt; t1<br></code></pre></td></tr></table></figure><p>​拿pwn.college中Program Interaction的 level 93进行举例。这里需要先创建两个fifo管道t1，t2，然后 <code>&amp;</code> 是后台运行。通过 <code>cat &lt; t2 &amp; cat &gt; t1</code> 创建了一个可交互的双通道，challenge的输出给了t2，再由 cat &lt; t2 显示到终端，然后终端通过 cat &gt; t1 输入数据到终端，数据给了t1，再由t1给challenge</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root:~/re$ <span class="hljs-built_in">mkfifo</span> t1<br>root:~/re$ <span class="hljs-built_in">mkfifo</span> t2<br>root:~/re$ bash b.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OS相关</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《软件分析》Lab2</title>
    <link href="/posts/88c3bf7c.html"/>
    <url>/posts/88c3bf7c.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="93275ed7d1224e8cfb8df6edff470f8faa97871530a685573d8267e490ea55e6"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>静态分析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>花指令</title>
    <link href="/posts/9ffaa92b.html"/>
    <url>/posts/9ffaa92b.html</url>
    
    <content type="html"><![CDATA[<h1 id="disassembly-introduction"><a class="markdownIt-Anchor" href="#disassembly-introduction"></a> Disassembly Introduction</h1><p>​针对目前主流的线性扫描反汇编(如obidump)和递归下降反汇编(ida)，通过插入一些汇编代码(花指令)干扰反汇编<br />器的识别，以达到千扰程序静态分析的目的。</p><blockquote><p>Linear Sweep: objdump、windbg、od(直接打开文件)<br />Recursive Traversal: ida、od(ctrl+a分析代码)</p></blockquote><ul><li>线性扫描反汇编(Linear Sweep): 一条指令的结束，下一条指令的开始，需要确定起始位置。其能覆盖到全部代码，但是在冯诺依曼体系结构下不能区分数据和指令，从而导致将代码段中嵌入的数据误解释为指令的操作码，错误的将数据和指令混合反汇编，比如遇到一个jmp，其仍会反汇编jmp后紧跟着的数据，而这些数据往往是垃圾数据或是转表的数据等</li><li>递归下降反汇编(Recursive Traversal): 递归下降算法中强调控制流，对可能的分支进行扫描，会根据指令是否被另一条指令引用来决定反汇编，但是其也会用到线性扫描来反汇编。它通过程序的控制流来确定反汇编的下一条指令，遇到非控制转移指令时顺序进行反汇编，而遇到控制转移指令时则从转移地址处开始进行反汇编(线性扫描)。缺点在于准确确定间接转移目的地址的难度较大，并且无法处理访问动态变量如堆栈和寄存器等数据。</li><li>IDA Pro简单介绍了递归下降反汇编(其处理顺序指令是线性扫描的方式)的一些缺陷，对于不明确的跳转除非启发式方法才能判断，并且其在处理call指令时会延时发编译，等等这些缺陷让我们能通过内联汇编来干扰IDA的反汇编</li></ul><blockquote><ul><li>对于分支处理，对false的情况继续线性反汇编其下的指令，而将true的目标地址放到稍后反汇编的地址列表中。</li><li>无条件分支，对于能识别出地址的跳转则会到目的地址进行反汇编，而不会继续反汇编后续地址的指令，因为可能是数据，但是如果的jmp eax间接跳转无法识别出地址，这时反汇编器可能就蒙了。</li><li>函数调用指令，因为call之后会回来继续执行，反汇编器会先线性扫描call紧跟的指令，并将call的目的地址放到延迟反汇编列表中，但如果call中会修改返回地址，那么递归下降就会失败的将call之后的指令反编译.</li><li>对于ret指令，递归下降反汇编无法访问栈信息，所以遇到ret就会停转。</li></ul><p>PS: 主要借鉴学长的博客，自己加了点新的东西</p></blockquote><h1 id="conditional-jmp"><a class="markdownIt-Anchor" href="#conditional-jmp"></a> Conditional jmp</h1><p>​反编译器会先对false的指令进行反汇编，目的地址的指令延时反汇编，那么直接jz后面跟一个垃圾代码就会让反汇编器失效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">__asm&#123;<br>push eax<br>xor eax, eax<br>jz label1<br>label1:<br># junk code --&gt; example: __emit 0xe8;<br>pop eax<br>&#125;<br></code></pre></td></tr></table></figure><p>​它是最为常见的一种花指令方式，通过条件跳转来影响反汇编，这里0xE8被线性解析为了 call 导致反编译失败</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401281935607.png" alt="image-20240128193530512" /></p><h1 id="unconditional-jmp"><a class="markdownIt-Anchor" href="#unconditional-jmp"></a> Unconditional jmp</h1><p>​如果反汇编器能识别 jmp 的目标地址那么其会跳转到目标地址进行反汇编，如果其不能识别会干扰CFG的构建，因为根据 <code>基本块 A jmp 到 基本块B</code> 来建立基本块A和B的边，而 jmp eax 时的eax对于静态是不可知的所以无法构建CFG</p><blockquote><p>但如果直接mov eax，一个函数之后jmp IDA是可以识别调用的</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">__asm &#123; <br>    push eax<br>    mov eax, label1<br>    jmp eax<br>label1:<br>    pop eax<br>&#125;<br></code></pre></td></tr></table></figure><p>​这里就是CFG中少了一条边，出现红色的 <code>JUMPOUT</code> 字段</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401281955050.png" alt="image-20240128195547015" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401281957367.png" alt="image-20240128195735320" /></p><p>​这个也是 jmp 的识别错误，导致多出了</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">__asm &#123;<br><span class="hljs-symbol">start:</span>// 多级跳转<br><span class="hljs-keyword">jmp</span> label1<span class="hljs-comment">;</span><br>__emit <span class="hljs-number">0xe8</span><span class="hljs-comment">;</span><br><span class="hljs-symbol">label1:</span><br><span class="hljs-keyword">jmp</span> label2<span class="hljs-comment">;</span><br>__emit <span class="hljs-number">0xe8</span><span class="hljs-comment">;</span><br><span class="hljs-symbol">label2:</span><br><span class="hljs-keyword">jmp</span> label3<span class="hljs-comment">;</span><br>__emit <span class="hljs-number">0xe8</span><span class="hljs-comment">;</span><br><span class="hljs-symbol">label3:</span><br>&#125;<br></code></pre></td></tr></table></figure><p>​算是基础的花指令，很容易看出来</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401282032164.png" alt="image-20240128203257130" /></p><h1 id="call-function"><a class="markdownIt-Anchor" href="#call-function"></a> Call Function</h1><p>​反汇编器会线性扫描 call 下一条指令，而延迟对function的内容反汇编，所以只要在call之后插入一些垃圾代码，并在function中改掉返回地址即可。</p><blockquote><p>对于foo的构建需要考虑原本的push esp和一些函数框架，只需要通过ebp操作返回地址即可。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">()</span> &#123;<br>    __asm <br>    &#123; <br>        __asm mov eax, dword ptr[ebp + <span class="hljs-number">4</span>] \ <span class="hljs-comment">// 获取函数的返回地址</span><br>        __asm add eax, <span class="hljs-number">1</span> \<br>        __asm mov dword ptr[ebp + <span class="hljs-number">4</span>], eax \<br>        <span class="hljs-comment">// 这里将函数的返回地址修改一下，跳过了之后的 __emit 0xe8，从而让程序在执行时正常</span><br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>__asm &#123;<br>        call foo<br>        __emit <span class="hljs-number">0xE8</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​这里上面的 call 是 foo 函数，下面的则是被 0xE8 误导的结果</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401282013159.png" alt="image-20240128201322133" /></p><p>​但是还有瑕疵，这里在反汇编器中会直接暴露 foo 的调用，然后通过分析 foo 函数来理清楚逻辑。所以将call foo 分解为 <code>call S 和 jmp</code> 或是 <code>push foo、pop eax</code>。这里 <code>call、jmp eax</code> 会被ida识别。</p><h1 id="return"><a class="markdownIt-Anchor" href="#return"></a> Return</h1><p>​ret从栈顶获取数据，并且修改IP，所以即便是干扰反汇编，也是和call指令成对出现，但是出现ret会让反汇编器<br />终止，并转去处理延迟反汇编的数据，干扰函数代码识别。</p><blockquote><p>call和ret出现，一般都会对ip进行修改或者插入一些垃圾代码。</p></blockquote><p>​下面首先使用 call 把 label1 地址压栈，然后执行label1之后的指令，其中 add 指令使堆栈下降5，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">__asm &#123; <br>    call label1<br>label1:<br>    add dword ptr[esp], 5<br>    ret<br>&#125;<br></code></pre></td></tr></table></figure><p>​这里就是识别到 retn 之后的指令就不作为这个基本块的后续了，反编译失败</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401281940961.png" alt="image-20240128194027916" /></p><h1 id="other"><a class="markdownIt-Anchor" href="#other"></a> Other</h1><p>​来自VNCTF的一个指令，融合了条件跳转和ret。这里首先将eax值设置为4，之后mul为16，因为call $+5压入了mul处的地址，retn后会跳到mul的位置执行 mul eax 即16x16=0100，满jz跳转，跳出循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">__asm &#123; <br>    push eax<br>    xor eax,eax<br>    xor eax,<span class="hljs-number">4</span><br>    call label1 <span class="hljs-comment">//识别成--&gt; call $+5</span><br>label1:<br>    mul eax<br>    cmp eax,<span class="hljs-number">0x100</span><br>    jz label2<br>    retn<br>label2:<br>    pop eax<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401282029092.png" alt="image-20240128202933062" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401282029549.png" alt="image-20240128202949522" /></p>]]></content>
    
    
    <categories>
      
      <category>逆向笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Pwn相关配置</title>
    <link href="/posts/98d6e652.html"/>
    <url>/posts/98d6e652.html</url>
    
    <content type="html"><![CDATA[<h1 id="tmux配置"><a class="markdownIt-Anchor" href="#tmux配置"></a> Tmux配置</h1><p>​借用一下别人的关系图展示session，window，pane的关系。这里是<a href="https://louiszhai.github.io/2017/09/30/tmux/">tmux使用手册</a>，下面有一些常用的快捷键。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202402151938660.png" alt="image-20240215193845523" /></p><h2 id="session"><a class="markdownIt-Anchor" href="#session"></a> session</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建session</span><br>tmux new -s session_name<br><span class="hljs-meta prompt_"># </span><span class="language-bash">继续使用session</span><br>tmux attach -t session_name<br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭session</span><br>Ctrl-a d<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列举所有的session</span><br>tmux ls<br><span class="hljs-meta prompt_"># </span><span class="language-bash">杀死所有的session</span><br>tmux kill-server<br><span class="hljs-meta prompt_"># </span><span class="language-bash">杀死对应的session</span><br>tmux kill-session -t session_name<br></code></pre></td></tr></table></figure><h2 id="window"><a class="markdownIt-Anchor" href="#window"></a> window</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">Ctrl-a c# 创建新的窗口<br>Ctrl-a &amp;# 关闭当前窗口<br>Ctrl-a n# 到写一个窗口<br>Ctrl-a p# 到上一个窗口<br>Ctrl-a f# 切换窗口<br>Ctrl-a ,# 重命名窗口<br></code></pre></td></tr></table></figure><h2 id="pane"><a class="markdownIt-Anchor" href="#pane"></a> pane</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Ctrl-a |# 左右分屏<br>Ctrl-a -# 上下分屏<br>Ctrl-a x# 关闭当前pane，或者exit也可以<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/luhao19980909/article/details/89718899#:~:text=ctrl%20%2B%20a%20%E6%9D%BE%E6%89%8B%E6%8C%89%20%22%20%23%E4%B8%8A%E4%B8%8B%E5%88%86%E5%B1%8F%20ctrl%20%2B,%2B%20a%20%E6%9D%BE%E6%89%8B%E6%8C%89%20%26%20%23%E5%85%B3%E9%97%AD%E6%89%80%E6%9C%89%E7%AA%97%E5%8F%A3%20exit%20%23%E5%85%B3%E9%97%AD%E5%BD%93%E5%89%8D%E7%AA%97%E5%8F%A3%201">分屏命令总结</a></p><h1 id="gdb调试"><a class="markdownIt-Anchor" href="#gdb调试"></a> gdb调试</h1><p>​需要在tmux中执行python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>, <span class="hljs-string">&#x27;splitw&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;-F&#x27;</span> <span class="hljs-string">&#x27;#&#123;pane_pid&#125;&#x27;</span>, <span class="hljs-string">&#x27;-P&#x27;</span>]<br><span class="hljs-comment"># gdb调试</span><br>gdb.attach(p)<br>gdb.debug(binary_path)<br>pause() <span class="hljs-comment"># 暂停进行调试</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Pwn笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu和Wsl配置</title>
    <link href="/posts/a0244f85.html"/>
    <url>/posts/a0244f85.html</url>
    
    <content type="html"><![CDATA[<h1 id="下载安装类"><a class="markdownIt-Anchor" href="#下载安装类"></a> 下载安装类</h1><h2 id="虚拟机下载"><a class="markdownIt-Anchor" href="#虚拟机下载"></a> 虚拟机下载</h2><p><a href="https://huaweicloud.csdn.net/63560351d3efff3090b58aa7.html?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-2-120698714-blog-107017669.pc_relevant_vip_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-2-120698714-blog-107017669.pc_relevant_vip_default&amp;utm_relevant_index=1">VMware虚拟机安装Ubuntu20.04详细图文教程</a></p><p><a href="https://blog.csdn.net/m0_72237413/article/details/125477492">Kubuntu 22.04的安装及基本配置</a></p><ul><li><p>这里按照教程下载安装，然后换源即可</p><ul><li><p>对于有GUI界面的Ubuntu而言，换源可以直接在设置中选择位于中国的服务器</p></li><li><p>对于没有GUI界面，需要查找相对应的源，这里注意，不同Linux的源不一样，</p><p>谨慎换源操作</p><ul><li>换源版本需要准确 <a href="https://zhuanlan.zhihu.com/p/357751721">ubuntu20.04 CUDA10.2 安装避坑 - 知乎 (zhihu.com)</a></li></ul></li></ul></li></ul><h2 id="vmtools下载"><a class="markdownIt-Anchor" href="#vmtools下载"></a> VmTools下载</h2><p><a href="https://blog.csdn.net/dengjin20104042056/article/details/106396644">Ubuntu安装VMware Tools</a></p><ul><li>两种方法，建议使用命令行安装</li><li>有的情况是安装完了虚拟机，然后VmTools就直接安装好了</li></ul><h2 id="pip3下载和换源"><a class="markdownIt-Anchor" href="#pip3下载和换源"></a> <strong>pip3下载和换源</strong></h2><p><a href="https://blog.csdn.net/qintaiwu/article/details/89393028">Ubuntu安装pip3工具</a></p><ul><li>如果发现升级显示成功，但是最后版本不变，可以试试再运行目录中看看有没有<code>version</code>文件，将此文件删除即可更新</li></ul><p><a href="https://blog.csdn.net/limengshi138392/article/details/111315014">ubuntu修改python的pip源为国内源</a></p><h2 id="python虚拟环境"><a class="markdownIt-Anchor" href="#python虚拟环境"></a> <strong>python虚拟环境</strong></h2><ul><li><p>可以使用workon直接进入，不需要被目录限制(拥有包管理工具)</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">virtualenvwrapper</span><br></code></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/lxb_wyf/article/details/116122087">python虚拟环境</a></li><li><a href="https://blog.csdn.net/u011817217/article/details/102662307">使用pip命令安装第三方包时报错</a></li><li>安装出错大概率与pip的源相关(下载速率)，此时使用临时换源的方式进行安装<ul><li>补充：<code>ipython</code> 可以直接pip3进行安装</li><li><code>pip3 install ipython</code>只要python安装后，虚拟环境中也可以用</li></ul></li><li>这里需要注意，它只是管理器，如果想要其余版本的python，还是需要从官网上去下载，然后它可以去管理。综合考虑还是很繁琐的。</li></ul></li><li><p>可以直接下载 Anaconda，但是这玩意实在是太大了，建议考虑miniconda(推荐这个)</p></li></ul><h2 id="版本不匹配"><a class="markdownIt-Anchor" href="#版本不匹配"></a> <strong>版本不匹配</strong></h2><ul><li>lib6-dev<ul><li>依赖的版本不对，建议不要盲目的降版本，很可能导致ubuntu打不开也关不了</li></ul></li><li>bits/libc-header-start.h<ul><li>报错原因：使用了 <strong>m32</strong> 指令，而 64 位系统 GCC 默认安装环境无法直接编译生成 32 位程序</li></ul></li></ul><p><a href="https://askubuntu.com/questions/1387067/usr-include-stdio-h2710-fatal-error-bits-libc-header-start-h-no-such-file">问题论坛</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装aptitude</span><br>$ sudo apt-get install aptitude<br><span class="hljs-comment"># 通过安装的形式查看无法安装的软件/依赖库的依赖,lib6-dev选择第一个即可，gcc-multilib选择第二个方案(先No，再Yes)</span><br>$ sudo apt-get install XXXX<br></code></pre></td></tr></table></figure><h1 id="便捷配置"><a class="markdownIt-Anchor" href="#便捷配置"></a> 便捷配置</h1><h2 id="apt安装卸载"><a class="markdownIt-Anchor" href="#apt安装卸载"></a> apt安装/卸载</h2><p><a href="https://blog.csdn.net/LEON1741/article/details/85114318">apt命令删除/卸载软件包（remove/clean/purge）</a></p><h2 id="vscode连接ubuntu"><a class="markdownIt-Anchor" href="#vscode连接ubuntu"></a> <strong>vscode连接ubuntu</strong></h2><p><a href="https://blog.csdn.net/u014240299/article/details/105000312">Ubuntu安装openssh-server</a></p><p><a href="https://blog.csdn.net/nnyQQ/article/details/115671346">vscode连接</a></p><h2 id="vscode无密钥连接ubuntu"><a class="markdownIt-Anchor" href="#vscode无密钥连接ubuntu"></a> vscode无密钥连接ubuntu</h2><p>直接使用<strong>git bash</strong>，在<code>C:\\Users\\用户名\\.ssh</code>中输入 <code>ssh-copy-id -i ./id_rsa.pub 虚拟机名称@ip</code>然后就可以了，需要哪个用户无密码登录就更换名字</p><h2 id="配置zsh"><a class="markdownIt-Anchor" href="#配置zsh"></a> 配置ZSH</h2><p><a href="https://regding.github.io/ubuntu-zsh">使用 Zsh 作为 Ubuntu 的默认 Shell (regding.github.io)</a></p><p><a href="https://www.cnblogs.com/langkyeSir/p/13906461.html">安装Oh-My-Zsh-国内地址</a></p><p><a href="https://blog.csdn.net/Jonder_wu/article/details/100529721">ZSH–agnoster主题乱码问题_“zsh_theme=“agnoster” 乱码”</a></p><ul><li>使用国内镜像下载——只有这个可以连接成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL &lt;https://gitee.com/shmhlsy/oh-my-zsh-install.sh/raw/master/install.sh&gt;)</span>&quot;</span><br></code></pre></td></tr></table></figure><h2 id="程序执行"><a class="markdownIt-Anchor" href="#程序执行"></a> 程序执行</h2><h3 id="执行32位可执行文件"><a class="markdownIt-Anchor" href="#执行32位可执行文件"></a> 执行32位可执行文件</h3><p><a href="https://blog.csdn.net/kingroc/article/details/51143327">参考博客</a></p><ul><li><p>下载的ubuntu一般都为64位版本，执行32位的需要安装支持32位程序的二进制库，若没有安装，使用<code>./filename</code>执行会显示无法找到文件</p></li><li><p>可以使用<code>file [文件的路径]</code>来查看文件属性</p></li><li><p>若是显示</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">bash: ./[<span class="hljs-built_in">file</span>]: 权限不够<br></code></pre></td></tr></table></figure><ul><li>需要使用<code>chmod +x file</code>或者<code>chmod 777 file</code>来使文件可以执行</li></ul></li></ul><h2 id="配置-git"><a class="markdownIt-Anchor" href="#配置-git"></a> 配置 GIT</h2><p>​git失败的原因绝大多数都是网络问题，所以挂代理是最为推荐的选择。以下是起作用的一些方法</p><ul><li><p>通用方法，更换git的代理为443</p><ul><li><a href="https://www.cnblogs.com/tsalita/p/16181711.html">SSH：连接到主机github.com端口22：连接时间超时</a></li></ul></li><li><p>但是对于wsl，直接使用最新wsl2共用主机的代理即可(<strong>最为推荐</strong>)，不嫌麻烦可以给配置个代理</p><ul><li><a href="https://github.com/microsoft/WSL/issues/10753">配置wsl镜像</a></li><li><a href="https://wph.im/199.html">Windows10系统下配置WSL2自动走Clash代理</a>，之后clash打开allow lan模式即可</li><li><a href="https://nafx.top/archives/88ca14b9#5-etc-resolv-conf%E9%87%8D%E5%90%AF%E4%B8%A2%E5%A4%B1">WSL2内使用Windows的v2ray代理 | Nafx’s Blog</a>，这是v2的模式，首先最后面设置，然后前面配置bashrc</li></ul></li><li><p>有时候最后的方法会起点作用</p><ul><li><a href="https://blog.csdn.net/m0_38068229/article/details/108205928">git clone失败解决方案</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Pwn相关小技巧</title>
    <link href="/posts/9fc4ccba.html"/>
    <url>/posts/9fc4ccba.html</url>
    
    <content type="html"><![CDATA[<h1 id="一些linux的工具"><a class="markdownIt-Anchor" href="#一些linux的工具"></a> 一些Linux的工具</h1><h2 id="strace"><a class="markdownIt-Anchor" href="#strace"></a> Strace</h2><ul><li><strong>Strace</strong> <strong>用于检查一个应用程序所使用的系统调用以及它所接收的系统信息</strong> 。strace会追踪程序运行时的整个生命周期，输出每一个系统调用的名字、参数、返回值和执行所消耗的时间等，是高级运维和开发人员排查问题的杀手铜</li><li><a href="https://zhuanlan.zhihu.com/p/106890931">Linux程序调试工具工具—strace命令 - 知乎 (zhihu.com)</a></li></ul><h2 id="ltrace"><a class="markdownIt-Anchor" href="#ltrace"></a> ltrace</h2><ul><li><strong>ltrace 能够跟踪进程的库函数调用</strong> ，它会显现出调用了哪个库函数，而 <strong>strace则是跟踪进程的每个系统调用</strong></li><li><a href="https://zhuanlan.zhihu.com/p/107063011">Linux库函数调用工具—ltrace命令 - 知乎 (zhihu.com)</a></li></ul><p><a href="https://www.yanbinghu.com/2018/05/28/26708.html">系统调用和库函数的区别 | 守望的个人博客 (yanbinghu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Pwn笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一些资源</title>
    <link href="/posts/fd6916f2.html"/>
    <url>/posts/fd6916f2.html</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统镜像"><a class="markdownIt-Anchor" href="#操作系统镜像"></a> 操作系统镜像</h1><ul><li><p>这个网站可以百度网盘下载<a href="https://msdn.sjjzm.com/win10/1903.html">Windows 10 1903 - MSDN - 山己几子木 (sjjzm.com)</a></p></li><li><p>这是吾爱破解的地址，上面有对于种子文件的加速处理方法<a href="https://www.52pojie.cn/thread-1033069-1-1.html">求一个win10的镜像</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>周报</title>
    <link href="/posts/594d9f6c.html"/>
    <url>/posts/594d9f6c.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="88823c64ff5ec36bf1a89d7e528fbaba6b839dfc6fd3d41324955f5c64439b44">f0c149f72439c7ef7e2db179cea9a9dcbbe80016fd284dde4b75bd58a8c33697be6a94f26a23354049d1ae015b338cb45da001f8affe8759ae490994949febbd3bed693fd5a7c71e2ed646bfd2b719df26dcfa5abe556ab24155abf444d0a50aa42766cae2c3122f06a5765b7e1bc74bd7a888cf1066497c16cf4d148e4dd1c81a9301f98ce0fd782dae6bf3a16da776b101b21806294f3cb4215ffe0b00d037d8960048775ba8c155f16978ac1db929969eb2d20a1bf3d49c59a10f3a11384949f545bd0e697f1f4a0a5fc238e5de070d79c0b9758049773af5e92e3e566e5f3b825a04d9ded36f8a32035dbdff93ca8eb062aa9c0811a5a2099f5dba2c6f216285bcf26f454ecb7cad29d513dce63ccc48642147802226297aeb7d2a6810b62ed2d2141532922f93c79164f701abb740e952375708619595e9ef0434215bd02476ce0a6a1ca654a2c080c18d7143d1c52d9ca3dbdefb36d26624356e27b64ba2fd389825e725c8ad77a76306dc0062670c6eaa21334593b91b5a6c272cfe598e870b088fe772e3376876f89aeea5cca6482982592fe325a99ba4334fbabfb449761ff9bf9f11b2dd58e458e3f549c41fd32ff291921a10ae76ba70a48a73458a1f97cf79deb0a467e2d66aaebd361283b9897e649697f6f6157883c70c7986150c8ae40020d908afb220e662dcb910e25e71764cecf2dbc230aa017958163fb04851512b2a268dd161e3b47bfd13c75d7ffea8929282d1c593ac4a031faaaf528cc46fb02d9dd2bbbede9ce08acffae5c12074292394c87c168026371446623ce195173a71366ceab4a1856ccef5ec83fef472bef92a4e5af9c9a98a64a9a1e519429349b6478d3b9c97434da2b5e434ad4aa56e51319ee2d1bae9d5c7461fa1c6088983771c21c8dae761502f27ecfcc91aba10c5a36029fab99161d3695b120eccda58d4cc250830fd50a8cd623655b6f01274d07ce36151bf038e8e1d8faecfa1a0968dc8dfac414dacf60ab519138314849656bf6067a410d4af39539932ec5c6798b526303654503564a87627435bed93593920cc2255f2905d247a002208d1a9f1fa4d98ff40430e13fd25046f539f6264646441285f248d491c165f8588008342e8ad39b0b996e3053a8fc8f6f70f1d2725063a0d311855e0ec51a6c04e54d7944bcc8c96f8027b09c50cc9b28d63f4f46f45c2b4e2fcdabe4bd9dfeb962b409b38a9c4cd88ed3d2e220c0ed6e7488ef49be724528d0771b780418c24d3ff3d352fc4d737889b68451095a3d51e1f5d81ab6dfda56a0f64f4fe68e79bfa0f6076f8c0f3d62247d614ac60a52cf52d242f7b08e8421817706ac5ef057768b22287c8bd2aa51fa0bd48953c49b3dd8afa0e5f7279ad6d4fb086d31bd2c3ed9c66c6a1c2dc22e5d037e65259f403449c1aa5a70100424e54d51739e9322e196ca514b78b5db21b4529404f4c41558a9d13f1fa9c9c0e08eaed32712cdf8aa0a6c4e6929ac06764bf34dbe923606c3fb38512cba1916d7022f3198d0fbcc6aafc8fe403aee051e4ec4c0ac9c1dac8e927fb0150c22f3cf52c8cf7114a5c43dff76a60120b2272e8b7a89bd8a81b47858333734204d303480f5e419ae561b4d0a9c0b46673a107cdc5ba2ae9a42f59b16021c4a029e033b54594b5ace03527c83ca643980a5fb629187f41aaced47ca09e5ecb93eb8d7d35075ea235be1d71edfb62ebf50f6d814bb0e2a808bea00b5389dc7ad36bb5c889c7e408cc2c0479c3653d4cf0d1c769dfc25ac07dc2a4eecf8be0485afcdeebd8a74533e67d5af2af553271265b81bfcce653ecbb9bf4b72f6f921799e1f4df9ddf2e293347ee94e4985989df18bf88d837d46c12e6f9c1a676b88f06a7a765b5a6f77fd43a6deb92a422ce29fac8566b8b07f579fd82b5c5abc73b11c5bd71cbb9c469df25475efc39b29d4f04634c3ca660b4a200f01570038cedb2e12e632187cd6efaf1c43500afe1d6e82956f4154f4a16fc0cf8156437ce4795231a08b95cd1f034448bc07dd568cf46dd8863ad65e1aa6e3ff7c29271781142bd5d7a0c8af63e16d572aba8f5b8ac3f80fd3c1f0c973804e9c8533d7127b2364b7b39e744bdf4ba0ba62ccab718ab08cf8d4b78dfdec0fca1e081198e4c186e3b8950cf597b9f9e435f852071e4ec9be4aff9cb54914b66582afc515be979b3db808956131c08b52b09354b096da1571e3ad5d5c463240195e5b8308db6b2b47e1b0310a6afefa222eae5e455718c7e4d0cba6e65907b135bcad77eae8ba5f07e74735f180dc6e4ce27472496abe0f3676369ce9291653bd8e925576330ef9a87cd21a928ef3ba89c8dfa5c21e7a7b627b51e773ca8f325f5215d3be3a56c1db67f2ffbf7783977b00e57dd3862c95883b55e18df5021bb49ce863096ef0738a7954935cccccea401a9e1a46631d78464fe423c6336b2479bb04e8af192c7297bf810560d12bf64c233afaba8f97b0ed4595c8a25df58af23b774975c3065343afd521d464459dc9493952e79723665daaa8b49c543b2622d62856945e9c249e9dd1657cd360c5d6daa618ee449c47151fcee7c68186be2cdca26260674c54dc0b8eece4ec79cc1ea06919d59e7bfecded7e83af5a4c9899a45598835b2056dfa37243ec053b759fc745eb7f0c9c1fed7a2726cd1c9cee62e6388a340532ae827a74069f9970b93d173f6f6e2de5af65540d0c8bc9dff15541974a44995c8bda0650108b532c2b4b2a55819b4e43a6a38e1f3065a04ee9d74b5b78d3cf82299512598fa4c03f808c2cfd932c0a4a861f563907f2ee0764b426eebac8d19c4ece335360b660a48d49e7b101776afb48e2a690be6e8f282d2961777fccd663d71a639f60b98f7395791a31512a3f41ceee18e6ad37cfb05ab2463535c19270f5e0602f12f17374365a696a67dff11483f541086f3a719a8f724bf332efb88a993c7635ee7d8dcea8ee416eec722619c862ff1cfc89bf74cdc8055dd6039a728ce3330a2ea200e3b927ab9f6c4f0f120d94ea89486b68b69694243bd8e2717bf49dc2823e32e5d97900ea72a61f30d9ec3e09f10bb62f8cf75ca40dc759e29d9bf526cb516a0a0ba70bbaac87af601c64e64bbee538fb624edc4663057302bce96185da3ee4f033f52d625c3ce5f802db514808f4bad5e92fe6e50e6ae16ae4102679eb5e0c94e56e6c009366675fea8da6f4d37fb2374e69b263861e5f885cf4a368d418524c4ce3212eb06c0e134935ca715d71e1f62e67e3a12e65602448474713e6590658ba2376bbf37335837744947dd0cd641f6d65a0476f5b79045dd111dc86b8d557aa941a2f1f6bbf2e56eb7da24109226eed017abd2ee4b3b4519717ae3db26809d53027cfbbb4558241a989facce6a48f1dd4b3531d8b8953657fb2a676dc4c34c7ad24493a4265cb38364e3bc2152f52693cf033c9e6b3e7826ca3a435ec68a543f29baff3caf5dab6cb9f14471b4cdda12b72414a36506fe0bd0392e3fa5d81ec104fea72410f94a7d9941112a3df8f7a87e368d2b9b0d36c3160660e8aa9c327c3a6ba613e039ae8e27cbf3cc6e3dbcd2d9ce9591cc8cda54638006adf367ceeb4fdb5b96c8589c85252c5927f5dcade024d2f679333229b6522f14f37dfb1adf64139800cb6e59a8b0714a4b1f9268e225e303ffb033a5c83f162c3bcb6052922ee576d27dc558649fffad054b7f3f8809d1371b45957f014f77648a0f6478b7e5463628fd2a2425f44b84b2fa40f2061208dca266e9b7e9098650e00aee3fcde5dbfe1c7b84636b26154503fb524b394a5f1f5dd023eb392ec5333f04762c0396eee497a565c0d4db298fe775ba804552a63ca09571b5fb5233bda840a2565a5062d1d1dace2a9abf1433f87d05d06075e7e806b43702bd39ec9fce39288f6dc2313340f6f945011acd418e05f86ebbb3908b3483138d5cb96532406a099b029aa46bddabb1543222748d7a5a572c0eada6947bdd15a8dc775cde469510783ecab54c6a974b98be4fccca1f5f30409358cd5b4e52620c744b232e62cf4ac03c00ff06ec664fb850970d0a0b4ebf9a50b25f6c93a48acaa1f37861ccce2a5e8df69c213be6b71df5c2b7455d0543ffbdf881a6e7fba80b327a2b04485e9961d4e367801c508cda8f1d2dbed039c8774cbd4619a769fd686d1f4cf9d03595c8d27686fd36337061c09e29db9cafcd9b93fdad0fd5daff9bf8bb30311631c8f273bb1f732b50c2790e79ef563b7f4eab745d4989a99c101a8bb6181805fc0aabd6e25de02efe54fed3a1b2ac8e44841a05465a4027829c3ae943cb994785ee7ec0eac68813fdc7b791373a73a73ec5a2ddabff49bab9e65d8d3800944e468edf3f97c7e9536cc3931240c911f175cf2e0184218c8e484d760b6ba011bcae4a51f58c1f9dd7a0fa63ad6be40885b4772f79c5c8b9b6325dea26581e40400273d52959d983d320a105a2873e810c7a66544e021ee20b96ad6c60cc29976e9e53b98c2e45325e3e7d257c5ee1a3bbfa46d7ffd2b067c6bd257fe8519ab7f8c514f86f4720de93835e6558a0753e539da3d414ebba7d8f9e1a3a34561a8e1686838eecc50a6146d5129888b773cfb5ba883e900c7d2999adc96ef2bf31a63aed33161f23209020b5af8b9dba851221e39f6f3d659fe7c691ae24cf898851c47e2bae092fc22ed872807689b1e9e61c78f2aa77964ee1762ca1015fbb5074ef5fd3fae6dc03cd7b00fcc6fbe9bb2cf3a91d06a5e9b87238ab8d8370c6fc48f3acb34c2f2ac481b397d4aeb68a7b30a157c29c291bd08d4348afec85cd48f7d269135705603513ff1895934b5f131455a87e43ffeeefc04d4ca8b254b11fcf94573641e5e444380003898b2f9210651341ce469c8210258fe69f69ccfc23bfd172d3ce575ad6b5a2bc0e36fa7af3468858b5e0f9641f973b170b87f8e69b99a4f1662a156e781d709aef2d602404d838edb62acc6f7d1b543bb98a10189965de90e5c2f8269fa11accf1c28baf63ff0dae15eba196cf07ed85254ff23a8c25069034ba7aebe3871495064efef7a600d510a39864be1c9047bbbb4f4717878c294c4502aff824ce55e2f001e3696cb19f23621f7028a42b8c91d413ff3ed7b55cd545f05957cf21075d2113848e699cb79c25531b1b4f62ec7e3d9547d9301538d1db569794de430456ed4d9eac6b13558d9f5823bc850f39354a7d7b394b80b6c5471aa1582413b11182a549a9339088750dc0874df39f04a26b1452026062b57d5b10df305eb354bfee761fbca0166294c8f81b21c04f27a0e9c8c83eb07f7f8c6f9164d60e5e07b7f17c7347489fdf2f152b093c2c6220509cd705b3e2d8b1546e738a8a6687d0063c381c16894790632d2c829d10b19199d82fad6ee9ebb2eeccf2254b7254cdc56b39c616d64f6ef4a1ff601a219f2cd8d1738885031ea47afb08664310176b5464e7cdcd674fb740fe40304625f79b9242692e12a1172744200a2db229402e1c67cd41648e3cebb9cb34999405d59815a2bd6c587b57b9a3d87104e2b6bd716947b9529cf8aa002ce8ef6669cb29f5a741faf5c395c85844e16ceed937c9606dad9c10381f179acd6ffd7863121b106d8f65f16d63867f75cf96fe3d3013b5a8899feaa447316bd762e98a68606f778e60bd907a26a9fa84bf890aa70cdd49b1d25b074ddc684c6e655cdd10ee931ca9ff9f75766a65636d3ca271b90ad56486199fb208f92953e0c949158b75cbbb8943a139dc8b85c7e78e8e82bb696663b8c3e3aca235a436ef39f626dba8b97b2019b4230e880b2902f150ef2dc0a9102abd6179099232433e87bd957930daf5760b2b5b72579612a814450f3f9bdf463588ae22008a4f940ea7b02ec923e401263e7120a1ed185b5b84d3dbde4ca31770eb8bd83a326e6fc20becf360e6e426428b8adac8c934d64fbfde78b4fe2ad3368f251aff430b5e37137132189d3b99b90dc2f170e3a4da4bd9013f3e5b5e5ea1dbc01a83ed42f941672735c983f1ee21230398820674a238f0cecd3ca63eaa814fe47ba77b201a6d8e5ea024036af5b443397fb52eb7cc53fd70a30cb046c82c718efe1a94f485a98753884123e359b13b566ad49205eb8b3e317743267a656ace57a100cf51dff71f340104994b0048d90ff827e62d1773dd53f85e3901d59fdb2152f5d42e457e9462988836bd15a903c8714ef3079701372485ac1622c9b776983293dc514b96f4029da97b08f03dfbb2a2dddccbe6f0f68b6ddc9c7a549fd1a10683b9568f0daaa8ab522ddd9a176cb4b86bdbbe59c2df0c09d4d180ddcf9763e93acbbfdb3c7eee73285c0143e99acb927564d6395edd211cd6dc01e35c2418c2b2f5ae5a1770b593a2b23ec568e15d0fefe1e730f077f443112af19456faa6edb5cefad5e8707f10f1e0442a7dacabf46190d41d777f1bb8cf068d239bfc2be72d6867febce3cc395e1fc79e09e089bf34b365e42a5dbdacbfa917761285c0660814929a8cc8262dae64bc650185474798026dac202b403b602482cb830e4a2f8a2eaeb3c0fabd629db383d80ef50ec10dcfa06796d4f699ae3a55065250bf459b987f9b898c2db4136ebd9bc8d95f8f6a35c60d640adaf4859eb56ae6f14e1c0f43db8379d3d081e1758f0a8c26d2b28a9e531bc818efb859b8318df3dd549be46f20b8054ca8cf3e6f9f7a1da2944d475cc347690fc632c16a119775d1f8b887198d1cb894d770dbbd10db65a2f5359cb43aaae25e635a96000bec7346ff491c3a8c7b4113e206abef11c5a1959b7813dd11931120685a62638f88d794c7a8b32bbcb473b4e82895126ec9462e689ff495a43e4039363745c6a1411404ab099ccba40bbb33d64a3eebdb74b4ed09602e3dc0e09fb3afdad3ad1deb657f86d064ae6f3d21493e6af88c9290d907fea464b45e5a0a1c02136cb2f3514ddb2e7f82151cd2e0956e1573729ab5130fc28749e6b0e66a8fa7a9c4eb782fedd50c96bd75a5fbf561c1b4019186b0feab0d8111cb2253857bd638d3eb093d91d81607dee07c847fa227463f1e911e9c388fe78434b304a9024faee8821d49bfb55af03fdea40844a71feb90d24959e02b9f3bb20d2030ab2e512ec294fd0acd1a542882cef8993294d42ec993cd2fd72000360b6d27fb82f4ad1d04ff27d50eeb0cfb02b69789334a933700734b030a1e9e74227f9d94cfc81da7f4afd16ba006c64e644c906ebde4bb01e9582c0b3893cf75f7e2900cdc3ecc67be4b0d2fcff9efc8712ff52c175191e3aafad2173691183e475a2db273b3f25213122058f1feeaf4581a593b8f0f5fa257fce0ac193cb4a0d6525efd71e10811e12145d835db6a4f8eff90197d925665d3a2ea99d83660a7554befbeafe8ac2c882a3f4f1bad13c01891b1164f5b27b30137666ef7c4b503c33a3a5c27ac91b1fc21daa985c64c40cdaabae13fe72ac4acc24fc823d2ca885e120d020d28fe35e6b78fca589e1031356c4e21ae925cd42f590426e4a01a3678743cf26297dedf9cf319b35c694cd08ccbc4e90bf2dcfc3dcb5cc0001bbf2e2d305ba747d01d62829205d3bea95f0f8598410e561ff6077695ba5856a4d264e9f6c650dc23427583715f6f3508b35bc82b79b010cc2435bffa7f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Pwn.college(1)</title>
    <link href="/posts/9b840b21.html"/>
    <url>/posts/9b840b21.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b9079ae758fc78308e43372ebd8183de9c051381206a239393ea0052eb069f75"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Pwn笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>白盒AES</title>
    <link href="/posts/7dd931db.html"/>
    <url>/posts/7dd931db.html</url>
    
    <content type="html"><![CDATA[<h1 id="原理分析"><a class="markdownIt-Anchor" href="#原理分析"></a> 原理分析</h1><h2 id="基本aes算法"><a class="markdownIt-Anchor" href="#基本aes算法"></a> 基本AES算法</h2><p>​AES算法基本就是两个过程，一个是明文的加密，一个是密钥轮的生成。</p><ul><li>对于明文的加密<ul><li>设中间值变量为state，它通常被描述为一个二维的字节数组，即一个4×4数组</li><li>轮密钥加：中间值state与16字节轮密钥进行异或</li><li>字节替换：通过S盒完成一个字节到另一个字节的映射</li><li>行位移：中间值state矩阵内部字节之间进行置换</li><li>列混淆：中间值state左乘一个在GF(256)上面的可逆矩阵，每次更新只影响中间值state的一列(4个字节)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self, message: <span class="hljs-built_in">list</span>, round_keys: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:<br>    state = self.AddRoundKey(message, round_keys, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> Round <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>): <span class="hljs-comment"># 1~9轮</span><br>        state = self.SubBytes(state)  <span class="hljs-comment"># 字节代换</span><br>        state = self.ShiftRows(state)  <span class="hljs-comment"># 行移位</span><br>        state = self.MixColumns(state)  <span class="hljs-comment"># 列混合</span><br>        state = self.AddRoundKey(state, round_keys, Round)  <span class="hljs-comment"># 轮密钥加</span><br>    state = self.SubBytes(state)<br>    state = self.ShiftRows(state)<br>    ciphertext = self.AddRoundKey(state, round_keys, <span class="hljs-number">10</span>)<br>    <span class="hljs-keyword">return</span> ciphertext<br></code></pre></td></tr></table></figure><p>​具体流程如下图</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401242251751.png" alt="image-20240124225106698" /></p><h2 id="基于表实现的aes算法"><a class="markdownIt-Anchor" href="#基于表实现的aes算法"></a> 基于表实现的AES算法</h2><blockquote><p>这里应该是Chow的实现方式，看的大多数白盒AES代码和题目也是这个，所以分析这种实现方式。</p></blockquote><h3 id="调整轮函数结构"><a class="markdownIt-Anchor" href="#调整轮函数结构"></a> 调整轮函数结构</h3><ul><li>基于表实现的AES算法将具体的加密流程顺序进行了变更<ol><li>重新定义for循环，将最开始的轮密钥加放入for循环中，第九轮的轮密钥加移除for循环</li><li>将行位移提至for循环的最前面，由于轮密钥加移到后面去了，所以每轮密钥都要先经过一次行位移再与明文进行异或，即密钥 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 成为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>k</mi><mo stretchy="true">^</mo></mover></mrow><annotation encoding="application/x-tex">\widehat{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9344399999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9344399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.24em;"><svg width='100%' height='0.24em' viewBox='0 0 1062 239' preserveAspectRatio='none'><path d='M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z'/></svg></span></span></span></span></span></span></span></span></span>。这里最后一个轮密钥不需要改变，因为把行位移提前，其对应的轮密钥更改为了原本它对应轮密钥的前一个，所以最后一个不需变动</li></ol></li></ul><p>​由此具体流程如下</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401242256033.png" alt="image-20240124225631973" /></p><h3 id="t-boxs"><a class="markdownIt-Anchor" href="#t-boxs"></a> T-boxs</h3><ul><li>这里将每轮的轮密钥加(AddRoundKey)与字节代换(SubBytes)进行组合，然后得到16个将字节映射到字节的查找表(8bit进，8bit出)。</li><li>下图的 x 为8bit，i 共计16个，代表了16个字节。第10轮的t-box包含了两个轮密钥(k9和k10)的字节，总共160个T-boxs盒。</li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.15999999999999992em" columnalign="right left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msubsup><mi>T</mi><mi>i</mi><mi>r</mi></msubsup><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><mi>S</mi><mrow><mo fence="true">(</mo><mi>x</mi><mo>⊕</mo><msub><mover accent="true"><mi>k</mi><mo stretchy="true">^</mo></mover><mrow><mi>r</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo fence="true">)</mo></mrow><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>for    </mtext><mi>i</mi><mo>=</mo><mn>0</mn><mo>…</mo><mn>15</mn><mtext> and</mtext><mi>r</mi><mo>=</mo><mn>1</mn><mo>…</mo><mn>9</mn><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msubsup><mi>T</mi><mi>i</mi><mn>10</mn></msubsup><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><mi>S</mi><mrow><mo fence="true">(</mo><mi>x</mi><mo>⊕</mo><msub><mover accent="true"><mi>k</mi><mo stretchy="true">^</mo></mover><mn>9</mn></msub><mrow><mo fence="true">[</mo><mi>i</mi><mo fence="true">]</mo></mrow><mo fence="true">)</mo></mrow><mo>⊕</mo><msub><mi>k</mi><mn>10</mn></msub><mrow><mo fence="true">[</mo><mi>i</mi><mo fence="true">]</mo></mrow><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>for    </mtext><mi>i</mi><mo>=</mo><mn>0</mn><mo>…</mo><mn>15.</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{rll}T_i^r\left(x\right)&amp;=S\left(x\oplus\widehat{k}_{r-1}[i]\right),&amp;\text{for}\ \ \ \ i=0\ldots15\text{ and}r=1\ldots9,\\T_i^{10}\left(x\right)&amp;=S\left(x\oplus\widehat{k}_9\left[i\right]\right)\oplus k_{10}\left[i\right],&amp;\text{for}\ \ \ \ i=0\ldots15.\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-4.05002em;"><span class="pstrut" style="height:3.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.441336em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.441336em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-4.05002em;"><span class="pstrut" style="height:3.15em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9344399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.24em;"><svg width='100%' height='0.24em' viewBox='0 0 1062 239' preserveAspectRatio='none'><path d='M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.15em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9344399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span><span class="svg-align" style="top:-3.69444em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.24em;"><svg width='100%' height='0.24em' viewBox='0 0 1062 239' preserveAspectRatio='none'><path d='M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z'/></svg></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathnormal">i</span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathnormal">i</span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-4.05002em;"><span class="pstrut" style="height:3.15em;"></span><span class="mord"><span class="mord text"><span class="mord">for</span></span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mord text"><span class="mord"> and</span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">9</span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.15em;"></span><span class="mord"><span class="mord text"><span class="mord">for</span></span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mord">.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">u8 TBoxes[<span class="hljs-number">10</span>][<span class="hljs-number">16</span>][<span class="hljs-number">256</span>];<br><span class="hljs-type">void</span> <span class="hljs-title function_">GetTbox</span><span class="hljs-params">(u8 key[<span class="hljs-number">176</span>])</span> &#123;<span class="hljs-comment">// 密钥是扩展后的密钥</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> r = <span class="hljs-number">0</span>; r &lt;= <span class="hljs-number">9</span>; r++) &#123;<span class="hljs-comment">// 轮数，这里由10个SubBytes和前10个AddRoundKey组成</span><br>shiftRows (key + <span class="hljs-number">16</span> * r);<span class="hljs-comment">// 这是对于每轮密钥进行行移位处理，每个key的长度为16字节，所以通过16*r来索引下一个key</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">16</span>; index++)<span class="hljs-comment">// 这里的index应该是为了key而存在的，主要目的是根据index去索引每一轮16个字节key的数值，从而异或</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt; <span class="hljs-number">256</span>; x++) &#123;<span class="hljs-comment">// 0-255，遍历所有8bit可以得到2^8个结果，由此可以组成一个大小为256的查找表</span><br>TBoxes[r][index][x] = SBox[x^key[<span class="hljs-number">16</span> * r + index]];<br><span class="hljs-keyword">if</span> (r == <span class="hljs-number">9</span>) &#123;<br>TBoxes[r][index][x] = TBoxes[r][index][x]^ key[<span class="hljs-number">16</span> * (r + <span class="hljs-number">1</span>) + index];<span class="hljs-comment">// 这里将最后一轮密钥也加进来了，直接组成了新的查找表</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="tyi_tables"><a class="markdownIt-Anchor" href="#tyi_tables"></a> Tyi_tables</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401251639492.png" alt="image-20240125163941414" /></p><p>​主要逻辑就是上面这张图，构造 Tyi_tables 的重点就是对于混淆矩阵的处理，它将4x4的混淆矩阵分为4部分(每一列就是一部分)，然后形成了4张表。构造表就是遍历所有的2^8的取值，然后写入表中。若是使用表，则是通过查4张表，再合并处理(异或)，这样就得到了完整的混淆矩阵对于该数据的处理，也就将矩阵相乘转化为了查表。</p><p>​上图对应着4个表的不同生成方法。下面的代码形象化地对应着上图中的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mover accent="true"><msub><mi>c</mi><mn>0</mn></msub><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">M\vec{c_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.864em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>生成过程，从而形成4张表(x代表s)。这里对于s的处理不是简单的&quot;+“，而是由8bit–&gt;32bit的叠加过程(第一个结果占据高8bit，以此类推)，这样进一步压缩了表的空间(之后的操作只需要根据<strong>偏移</strong>来找到特定的结果即可)。最后每个表之间最终的”+&quot;是32bit的异或过程，需要使用之后的XOT tables表来进行处理。</p><p>​最终列混合就转化为4次查表和3次查表异或过程，这就是完整的混淆矩阵相乘的结果</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>M</mi><mi>i</mi><mi>x</mi><mi>C</mi><mi>o</mi><mi>l</mi><mi>u</mi><mi>m</mi><mi>n</mi><mi>s</mi><mo>:</mo><mi>T</mi><msub><mi>y</mi><mn>0</mn></msub><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><mo>⊕</mo><mi>T</mi><msub><mi>y</mi><mn>1</mn></msub><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><mo>⊕</mo><mi>T</mi><msub><mi>y</mi><mn>2</mn></msub><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><mo>⊕</mo><mi>T</mi><msub><mi>y</mi><mn>3</mn></msub><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">MixColumns:Ty_0\left(x\right)\oplus Ty_1\left(x\right)\oplus Ty_2\left(x\right)\oplus Ty_3\left(x\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">u32 TyiTables[<span class="hljs-number">4</span>][<span class="hljs-number">256</span>];<br><span class="hljs-type">void</span> <span class="hljs-title function_">GetTyiTable</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<span class="hljs-comment">// 4张表，对应不同的列混合规则</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt; <span class="hljs-number">256</span>; x++) &#123;<span class="hljs-comment">// 2^8种可能输入</span><br>TyiTables[<span class="hljs-number">0</span>][x] = (gMul(<span class="hljs-number">2</span>, x) &lt;&lt; <span class="hljs-number">24</span>) | (x &lt;&lt; <span class="hljs-number">16</span>) | (x &lt;&lt; <span class="hljs-number">8</span>) | gMul(<span class="hljs-number">3</span>, x);<br>TyiTables[<span class="hljs-number">1</span>][x] = (gMul(<span class="hljs-number">3</span>, x) &lt;&lt; <span class="hljs-number">24</span>) | (gMul(<span class="hljs-number">2</span>, x) &lt;&lt; <span class="hljs-number">16</span>) | (x &lt;&lt; <span class="hljs-number">8</span>) | x;<br>TyiTables[<span class="hljs-number">2</span>][x] = (x &lt;&lt; <span class="hljs-number">24</span>) | (gMul(<span class="hljs-number">3</span>, x) &lt;&lt; <span class="hljs-number">16</span>) | (gMul(<span class="hljs-number">2</span>, x) &lt;&lt; <span class="hljs-number">8</span>) | x;<br>TyiTables[<span class="hljs-number">3</span>][x] = (x &lt;&lt; <span class="hljs-number">24</span>) | (x &lt;&lt; <span class="hljs-number">16</span>) | (gMul(<span class="hljs-number">3</span>, x) &lt;&lt; <span class="hljs-number">8</span>) | gMul(<span class="hljs-number">2</span>, x);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="xor-tables"><a class="markdownIt-Anchor" href="#xor-tables"></a> XOR tables</h3><p>Xor tables用于对于每轮当中的两个半字节(4bit)进行一个查表的异或运算，因此我们定义数组为：Xor tables，其中9为轮数，96为一轮所需的异或次数，16为4bit数所有可能值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">u8 xorTable[<span class="hljs-number">9</span>][<span class="hljs-number">96</span>][<span class="hljs-number">16</span>][<span class="hljs-number">16</span>]<span class="hljs-comment">// 这里记住它大小为2^4，4个bit就可以存储</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">GetxorTable</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;<span class="hljs-comment">// 加密轮数，对于列混合只有九轮</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">96</span>; j++) &#123;<span class="hljs-comment">// 这里为什么是96？我感觉没什么必要，因为9*96个表都是一样的，你要说数据大可以混淆，那我真没话说。这里9迎合加密轮数，96是因为列混合，这里要具体查看下面总结的过程。每一轮列混合要使用3(列混合的三次异或)*8(每次处理4bit，但是列混合后有32bit)=24次异或，然后4次列混合(每次只处理4个字节，共16个字节)，所以24*4=96次</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt; <span class="hljs-number">16</span>; x++) &#123;<span class="hljs-comment">//2^4=16，两个4比特数据进行异或</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = <span class="hljs-number">0</span>; y &lt; <span class="hljs-number">16</span>; y++) &#123;<br>xorTable[i][j][x][y] = x^y;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="表合并"><a class="markdownIt-Anchor" href="#表合并"></a> 表合并</h3><p>​T-boxs表于Tyi_tables实际上可以进行合并成为新的表Tyiboxs,组合查找表可以减少执行加密所需的单个表的访问次数。这个合并就是把T-boxs嵌入到Tyi_tables中去，相当于先T-bosx一遍，然后再Tyi_tables。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><msub><mi>y</mi><mn>0</mn></msub><mo>∘</mo><msubsup><mi>T</mi><mn>0</mn><mn>1</mn></msubsup><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>T</mi><msub><mi>y</mi><mn>0</mn></msub><mrow><mo fence="true">(</mo><msubsup><mi>T</mi><mn>0</mn><mn>1</mn></msubsup><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">Ty_0\circ T_0^1\left(x\right)=Ty_0\left(T_0^1\left(x\right)\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2141179999999998em;vertical-align:-0.35001em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span></span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">u32 TyiBoxes[<span class="hljs-number">9</span>][<span class="hljs-number">16</span>][<span class="hljs-number">256</span>];<br><span class="hljs-type">void</span> <span class="hljs-title function_">GetTyiBoxs</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> r = <span class="hljs-number">0</span>; r &lt; <span class="hljs-number">9</span>; r++)&#123; <span class="hljs-comment">//加密轮数，对照列混合次数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>  index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">16</span>; index++)&#123; <span class="hljs-comment">//对于16个字节</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt; <span class="hljs-number">256</span>; x++)&#123; <span class="hljs-comment">//对于2^8种可能</span><br>u8 t = TBoxes[r][index][x]; <span class="hljs-comment">//首先经过T-boxs一遍</span><br>TyiBoxes[r][index][x] = TyiTables[index % <span class="hljs-number">4</span>][t]; <span class="hljs-comment">//这里再Tyi_tables一遍，由于这里列混合是将一列的数据查表用一张表表示，所以这里 %4</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>​整个AES加密流程可以通过Tyiboxs,XORTables,TBoxes三个表实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//u32 TyiBoxes[9][16][256];</span><br><span class="hljs-comment">//u8 xorTable[9][96][16][16]</span><br><span class="hljs-comment">//u8 TBoxes[10][16][256];</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Table_encrypt</span><span class="hljs-params">(u8 input[<span class="hljs-number">16</span>], u8 output[<span class="hljs-number">16</span>])</span> &#123;<br>u32 a, b, c, d, aa, bb, cc, dd;<span class="hljs-comment">//这里aa,bb,cc,dd开这么大我是不理解的，他们作为xorTable的结果，只用4bit即可，直接用u8就可以，用u32占用空间(这里观察好几个白盒AES算法都是u32所以觉得不合理)</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;<span class="hljs-comment">// 前9轮加密，因为列混合共9次</span><br>shiftRows(input);<span class="hljs-comment">// 首先进行行位移</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<span class="hljs-comment">// 对应着列混合的4种规则，每4个字节使用一张表。所以这里将4个使用不同表的数据放在一起</span><br>a = TyiBoxes[i][<span class="hljs-number">4</span> * j + <span class="hljs-number">0</span>][input[<span class="hljs-number">4</span> * j + <span class="hljs-number">0</span>]];<br>b = TyiBoxes[i][<span class="hljs-number">4</span> * j + <span class="hljs-number">1</span>][input[<span class="hljs-number">4</span> * j + <span class="hljs-number">1</span>]];<br>c = TyiBoxes[i][<span class="hljs-number">4</span> * j + <span class="hljs-number">2</span>][input[<span class="hljs-number">4</span> * j + <span class="hljs-number">2</span>]];<br>d = TyiBoxes[i][<span class="hljs-number">4</span> * j + <span class="hljs-number">3</span>][input[<span class="hljs-number">4</span> * j + <span class="hljs-number">3</span>]];<span class="hljs-comment">// 中间的索引对应密钥，后面的索引对应着明文的8bit输入</span><br>aa = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">0</span>][(a &gt;&gt; <span class="hljs-number">28</span>) &amp; <span class="hljs-number">0xf</span>][(b &gt;&gt; <span class="hljs-number">28</span>) &amp; <span class="hljs-number">0xf</span>];<br>bb = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">1</span>][(c &gt;&gt; <span class="hljs-number">28</span>) &amp; <span class="hljs-number">0xf</span>][(d &gt;&gt; <span class="hljs-number">28</span>) &amp; <span class="hljs-number">0xf</span>];<br>cc = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">2</span>][(a &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xf</span>][(b &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xf</span>];<br>dd = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">3</span>][(c &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xf</span>][(d &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xf</span>];<span class="hljs-comment">// 这里选取了列混合的4张表(24*j+?)，然后由于xorTable是4bit进行异或的，所以这里只取4个32bit结果的每4bit进行处理，这里总共处理了2次</span><br>input[<span class="hljs-number">4</span> * j + <span class="hljs-number">0</span>] = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">4</span>][aa][bb] &lt;&lt; <span class="hljs-number">4</span> | xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">5</span>][cc][dd];<span class="hljs-comment">// 这里和上面的两次处理是同一批的，aa/cc与bb/dd处理了前后的异或，然后在这里完成最后的异或，共异或3次。之后再进行拼接，形成8bit数据放入指定位置 </span><br>aa = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">6</span>][(a &gt;&gt; <span class="hljs-number">20</span>) &amp; <span class="hljs-number">0xf</span>][(b &gt;&gt; <span class="hljs-number">20</span>) &amp; <span class="hljs-number">0xf</span>];<br>bb = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">7</span>][(c &gt;&gt; <span class="hljs-number">20</span>) &amp; <span class="hljs-number">0xf</span>][(d &gt;&gt; <span class="hljs-number">20</span>) &amp; <span class="hljs-number">0xf</span>];<br>cc = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">8</span>][(a &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xf</span>][(b &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xf</span>];<br>dd = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">9</span>][(c &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xf</span>][(d &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xf</span>];<br>input[<span class="hljs-number">4</span> * j + <span class="hljs-number">1</span>] = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">10</span>][aa][bb] &lt;&lt; <span class="hljs-number">4</span> | xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">11</span>][cc][dd];<br>aa = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">12</span>][(a &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0xf</span>][(b &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0xf</span>];<br>bb = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">13</span>][(c &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0xf</span>][(d &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0xf</span>];<br>cc = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">14</span>][(a &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xf</span>][(b &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xf</span>];<br>dd = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">15</span>][(c &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xf</span>][(d &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xf</span>];<br>input[<span class="hljs-number">4</span> * j + <span class="hljs-number">2</span>] = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">16</span>][aa][bb] &lt;&lt; <span class="hljs-number">4</span> | xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">17</span>][cc][dd];<br>aa = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">18</span>][(a &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xf</span>][(b &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xf</span>];<br>bb = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">19</span>][(c &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xf</span>][(d &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xf</span>];<br>cc = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">20</span>][(a &gt;&gt; <span class="hljs-number">0</span>) &amp; <span class="hljs-number">0xf</span>][(b &gt;&gt; <span class="hljs-number">0</span>) &amp; <span class="hljs-number">0xf</span>];<br>dd = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">21</span>][(c &gt;&gt; <span class="hljs-number">0</span>) &amp; <span class="hljs-number">0xf</span>][(d &gt;&gt; <span class="hljs-number">0</span>) &amp; <span class="hljs-number">0xf</span>];<br>input[<span class="hljs-number">4</span> * j + <span class="hljs-number">3</span>] = xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">22</span>][aa][bb] &lt;&lt; <span class="hljs-number">4</span> | xorTable[i][<span class="hljs-number">24</span> * j + <span class="hljs-number">23</span>][cc][dd];<br>&#125;<br>&#125;<br><span class="hljs-comment">//第十轮</span><br>shiftRows(input);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">16</span>; j++) &#123;<br>input[j] = TBoxes[<span class="hljs-number">9</span>][j][input[j]];<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)<br>    output[i] = input[i];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="感想"><a class="markdownIt-Anchor" href="#感想"></a> 感想</h2><p>​这里白盒AES就了解的差不多了。经过理解，我感觉它确实起到了混淆想要去理解人的效果。主要理解难点我觉得有两个，一个是列混合那里，这个可以查看普通AES的查表操作来辅助理解，两个的思路是一样的。然后就是代码问题，它这里为了迎合循环次数而将一个表复制多次组成一个大表的操作，我是真的欣赏不来，当然这个也可能是它对比直接查表和索引之后得到的最优解，由于我没有具体分析，所以我只是简单抱怨一下。</p><h1 id="例题分析"><a class="markdownIt-Anchor" href="#例题分析"></a> 例题分析</h1><h2 id="2023巅峰极客"><a class="markdownIt-Anchor" href="#2023巅峰极客"></a> 2023巅峰极客</h2><blockquote><p>m1_read，这里主要是记录白盒AES的处理</p></blockquote><h3 id="qiling模拟执行"><a class="markdownIt-Anchor" href="#qiling模拟执行"></a> QiLing模拟执行</h3><p>​该程序主要调用 <code>sub_140004BF0</code> 来进行白盒AES加密，由此我们的目的就是模拟执行函数 <code>sub_140004BF0</code> 来插入缺陷数据并获取错误密文，这里根据分析，需要 16 组错误的密文才能恢复原始密钥。</p><h4 id="参数传入"><a class="markdownIt-Anchor" href="#参数传入"></a> 参数传入</h4><p>​这里的 <code>rcx</code> 存储着输入的地址，即传入的第一个参数的地址(没有读卡器，从别的 WP 中获取的信息)。模拟执行该函数，需要在函数起始地址修改寄存器的值，使其指向我在其余内存中初始化的<code>输入</code>，从而到达构造输入的目的。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401242211672.png" alt="image-20230724213132695" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">hook_args</span>(<span class="hljs-params">ql: Qiling</span>):<br>    ql.mem.write(<span class="hljs-number">0x500000000</span>, <span class="hljs-string">b&quot;\x01&quot;</span> * <span class="hljs-number">16</span>) <span class="hljs-comment"># 在虚拟内存地址0x500000000(不干扰程序的内存空间)处写入一个16字节的字节序列，这是在向指定地址写⼊需要加密的内容</span><br>    ql.arch.regs.write(<span class="hljs-string">&quot;rcx&quot;</span>, <span class="hljs-number">0x500000000</span>) <span class="hljs-comment"># 将0x500000000处内存写入rcx寄存器</span><br>    ql.mem.write(<span class="hljs-number">0x500000000</span> + <span class="hljs-number">0x10</span>, <span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">16</span>)<br>    ql.arch.regs.write(<span class="hljs-string">&quot;rdx&quot;</span>, <span class="hljs-number">0x500000000</span> + <span class="hljs-number">0x10</span>)<br>    ql.mem.write(<span class="hljs-number">0x500000000</span> + <span class="hljs-number">0x20</span>, <span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">16</span>)<br>    ql.arch.regs.write(<span class="hljs-string">&quot;rbx&quot;</span>, <span class="hljs-number">0x500000000</span> + <span class="hljs-number">0x20</span>)<br>    <span class="hljs-keyword">return</span><br><br>start_addr = <span class="hljs-number">0x140004BF0</span> <span class="hljs-comment"># 函数起始位置</span><br>ql.hook_address(hook_args, start_addr) <span class="hljs-comment"># ql的hook功能，第一个参数是hook函数，第二个是hook起始地址</span><br></code></pre></td></tr></table></figure><h4 id="定位插入缺陷数据的位置"><a class="markdownIt-Anchor" href="#定位插入缺陷数据的位置"></a> 定位插入缺陷数据的位置</h4><p>​首先确认 AES 最后两次列混合的位置，这里分为了前9轮和第10轮两种，那么最后两次列混合就在第8轮与第9轮之间，这里可知第九轮为<code>v4 == 0x9000</code> ，则需要在第八轮后，即 <code>v4 == 0x8000 ---- r12 == 8000h </code> 的位置之后插入缺陷数据。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401242345399.png" alt="image-20230724201323127" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401242345461.png" alt="image-20230724201532610" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">index = <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hook_code</span>(<span class="hljs-params">ql: Qiling</span>):<br>    <span class="hljs-keyword">if</span> ql.arch.regs.read(<span class="hljs-string">&quot;r12&quot;</span>) == <span class="hljs-number">0x8000</span>:<br>        <span class="hljs-keyword">global</span> index <span class="hljs-comment"># 定义为全局变量</span><br>        ql.mem.write(<span class="hljs-number">0x500000000</span> + index, <span class="hljs-string">b&quot;\x00&quot;</span>) <span class="hljs-comment"># 这里的 b&quot;\x00&quot; 就是插入的残缺数据，往这里写东西就是往 rcx 中写东西，即第一个参数的值被修改了</span><br>        index += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span><br>index_addr = <span class="hljs-number">0x1400052c5</span> <span class="hljs-comment">#这个地址就是判断是否到第九次的地址</span><br>ql.hook_address(hook_code, index_addr)<br></code></pre></td></tr></table></figure><p>​这里 <code>ql.mem.write(0x500000000 + index, b&quot;\x00&quot;)</code> 与后面的16次循环都是为了插入缺陷数据而服务的，但是还需要一个正确的第10轮之后的密钥，所以不再加上这个语句和16个循环再单独执行一遍。</p><h4 id="获取密文"><a class="markdownIt-Anchor" href="#获取密文"></a> 获取密文</h4><p>​这里 a1 存储的就是密文，也就是 rax 存储的位置，而 rcx 则存储着自己输入的明文加密出来的结果，所以最后在 rax 处获取自己构造的错误密文(因为知道整个算法的逻辑，输入一个指定的明文会得到一个知道的密文，然后错误传播就是在第8次与第9次列混合之间插入数据，通过错误的密文来得到密钥的信息)。(先不关注最后的 xor 0x66)</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401242354753.png" alt="image-20240124235448701" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401242356738.png" alt="image-20240124235601706" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">hook_enc</span>(<span class="hljs-params">ql: Qiling</span>):<br><span class="hljs-built_in">print</span>(ql.mem.read(<span class="hljs-number">0x500000000</span>, <span class="hljs-number">16</span>).<span class="hljs-built_in">hex</span>()) <span class="hljs-comment"># 获取 rcx 对应内存地址的密文</span><br><span class="hljs-keyword">return</span><br><br>enc_after = <span class="hljs-number">0x1400053CA</span><br>ql.hook_address(hook_enc, enc_after)<br></code></pre></td></tr></table></figure><h4 id="获取所有错误密文"><a class="markdownIt-Anchor" href="#获取所有错误密文"></a> 获取所有错误密文</h4><p>​通过函数的执行，错误密文与自己构造的密文相比，只有4个字节不同，证实了DFA起效。那么就来只需要逐字节来插入缺陷数据即可得到所有的错误密文。这里通过更改 <code>index</code> 的值来逐字节插入缺陷数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> qiling <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> qiling.const <span class="hljs-keyword">import</span> QL_VERBOSE<br><br>index = <span class="hljs-number">0</span><br>ql = Qiling(<br>    [<span class="hljs-string">&quot;E:\\reverse\\source\\frame\\qiling\\examples\\rootfs\\x8664_windows\\m1_read.exe&quot;</span>],<br>    <span class="hljs-string">r&quot;E:\\reverse\\source\\frame\\qiling\\examples\\rootfs\\x8664_windows&quot;</span>,<br>    verbose=QL_VERBOSE.OFF,<br>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hook_args</span>(<span class="hljs-params">ql: Qiling</span>):<br>    ql.mem.write(<span class="hljs-number">0x500000000</span>, <span class="hljs-string">b&quot;abcdefghijklmnop&quot;</span>)<br>    ql.arch.regs.write(<span class="hljs-string">&quot;rcx&quot;</span>, <span class="hljs-number">0x500000000</span>)<br>    ql.mem.write(<span class="hljs-number">0x500000000</span> + <span class="hljs-number">0x10</span>, <span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">16</span>)<br>    ql.arch.regs.write(<span class="hljs-string">&quot;rdx&quot;</span>, <span class="hljs-number">0x500000000</span> + <span class="hljs-number">0x10</span>)<br>    ql.mem.write(<span class="hljs-number">0x500000000</span> + <span class="hljs-number">0x20</span>, <span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">16</span>)<br>    ql.arch.regs.write(<span class="hljs-string">&quot;rbx&quot;</span>, <span class="hljs-number">0x500000000</span> + <span class="hljs-number">0x20</span>)<br>    <span class="hljs-keyword">return</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hook_code</span>(<span class="hljs-params">ql: Qiling</span>):<br>    <span class="hljs-keyword">if</span> ql.arch.regs.read(<span class="hljs-string">&quot;r12&quot;</span>) == <span class="hljs-number">0x8000</span>:<br>        <span class="hljs-keyword">global</span> index<br>        ql.mem.write(<span class="hljs-number">0x500000000</span> + index, <span class="hljs-string">b&quot;\x00&quot;</span>)<br>        index += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hook_enc</span>(<span class="hljs-params">ql: Qiling</span>):<br>    <span class="hljs-built_in">print</span>(ql.mem.read(<span class="hljs-number">0x500000000</span>, <span class="hljs-number">16</span>).<span class="hljs-built_in">hex</span>())<br>    <span class="hljs-keyword">return</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    index_addr = <span class="hljs-number">0x1400052C5</span><br>    start_addr = <span class="hljs-number">0x140004BF0</span><br>    end_addr = <span class="hljs-number">0x14000542D</span><br>    enc_after = <span class="hljs-number">0x1400053CA</span><br>    ql.hook_address(hook_args, start_addr)<br>    ql.hook_address(hook_code, index_addr)<br>    ql.hook_address(hook_enc, enc_after)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        ql.run(begin=start_addr, end=end_addr)<span class="hljs-comment"># 通过 golbal来对于index的值进行修改，从而插入缺陷数据到不同的位置</span><br></code></pre></td></tr></table></figure><p>​运行得到16组错误密文</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401251138859.png" alt="image-20240125113810812" /></p><h4 id="获取正确第10轮密文"><a class="markdownIt-Anchor" href="#获取正确第10轮密文"></a> 获取正确第10轮密文</h4><p>​将获取所有错误密文代码中 <code>ql.hook_address(hook_code, index_addr)注释</code> ，然后 <code>将16轮循环改为一轮</code> ，之后代码就可以通过 <code>hook_enc</code> 来得到构造的正确密文。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401251135686.png" alt="image-20240125113505529" /></p><h4 id="获得原始密钥"><a class="markdownIt-Anchor" href="#获得原始密钥"></a> 获得原始密钥</h4><p>​得到16个错误密文，再加上一个正确的密文，就可以获得第10轮的密钥。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> phoenixAES<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;tracefile&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> t: <span class="hljs-comment"># 第一组为正确密文，后面16组是错误密文</span><br>    t.write(<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    c3af71addfe4fcac6941286a76ddedc2</span><br><span class="hljs-string">    45af71addfe4fcee6941546a76b1edc2</span><br><span class="hljs-string">    c3af717cdfe440ac69a6286aa2ddedc2</span><br><span class="hljs-string">    c3af8baddf45fcac4141286a76dded22</span><br><span class="hljs-string">    c34271ad40e4fcac6941289b76ddc5c2</span><br><span class="hljs-string">    c3e871adace4fcac694128a776dd3fc2</span><br><span class="hljs-string">    1daf71addfe4fc4a6941c76a760aedc2</span><br><span class="hljs-string">    c3af7164dfe448ac6998286a35ddedc2</span><br><span class="hljs-string">    c3af43addf7cfcac5741286a76dded8c</span><br><span class="hljs-string">    c3afe6addfc9fcaced41286a76dded5b</span><br><span class="hljs-string">    c31071ad73e4fcac694128c576dd4cc2</span><br><span class="hljs-string">    4baf71addfe4fc266941806a7652edc2</span><br><span class="hljs-string">    c3af7157dfe4a9ac697e286a2cddedc2</span><br><span class="hljs-string">    c3af71ebdfe4c0ac6920286afdddedc2</span><br><span class="hljs-string">    c3af0baddf1cfcac0a41286a76ddedc7</span><br><span class="hljs-string">    c3b871ad9de4fcac694128a376dd37c2</span><br><span class="hljs-string">    09af71addfe4fc436941886a7698edc2</span><br><span class="hljs-string">    &quot;&quot;&quot;</span>.encode(<br>            <span class="hljs-string">&quot;utf8&quot;</span><br>        )<br>    )<br>phoenixAES.crack_file(<span class="hljs-string">&quot;tracefile&quot;</span>, verbose=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401251135166.png" alt="image-20240125113530137" /></p><p>​之后使用 <code>Stark</code> 项目就可以得到原始密钥</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401250016368.png" alt="image-20230724223417776" /></p><h4 id="获得flag"><a class="markdownIt-Anchor" href="#获得flag"></a> 获得flag</h4><p>​之后由 <code>out.bin</code> 文件中提取出密文，然后由密文和密钥使用AES算法进行解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>enc = <span class="hljs-built_in">bytearray</span>(<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;0B 98 7E F5 D9 4D D6 79 59 2C 4D 2F AD D4 EB 89&quot;</span>))<br>enc = <span class="hljs-built_in">bytes</span>([enc[i] ^ <span class="hljs-number">0x66</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)])<br>key = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;00000000000000000000000000000000&quot;</span>)<br>aes = AES.new(key=key, mode=AES.MODE_ECB)<br><span class="hljs-built_in">print</span>(aes.decrypt(enc))<br></code></pre></td></tr></table></figure><h3 id="直接解密"><a class="markdownIt-Anchor" href="#直接解密"></a> 直接解密</h3><p>​分析出了 ARS白盒加密算法，<code>比对N1CTF2021 hello</code> <a href="https://github.com/Nu1LCTF/n1ctf-2021/tree/84a3fff50ee0ef2f1fece112c75104600cc86a5d/Re/hello">参考解法</a> 即Chow方案，然后对数据进行 xor 0x66操作。这里 hello 可以参考 DFA 的文章一起分析。</p><p>​首先从tbox解出key:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> CryptoAttacks.Block.whitebox_aes_sage <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> CryptoAttacks.Utils <span class="hljs-keyword">import</span> *<br><br>T = [<span class="hljs-number">0x7C</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x39</span>, ... , <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>]<br><br>TTyboxFinal = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(T), <span class="hljs-number">256</span>):<br>    TTyboxFinal.append(T[i:i+<span class="hljs-number">256</span>])<br><br>key_recovered = recover_key_unprotected_wbaes_from_TTyboxFinal(TTyboxFinal)<br>key = matrix_to_array(key_recovered)<br><span class="hljs-built_in">print</span>(key)<br><span class="hljs-comment"># print(&#x27;&#x27;.join(list(map(chr,key))))</span><br></code></pre></td></tr></table></figure><p>​得到key为：b’\x00’*16，之后就是正常aes进行解密。</p><blockquote><p>库的地址为:<a href="https://github.com/GrosQuildu/CryptoAttacks%EF%BC%8C%E4%BD%86%E6%98%AF%E5%AE%89%E8%A3%85%E5%B9%B6%E4%B8%8D%E6%88%90%E5%8A%9F%EF%BC%8C%E5%85%B6%E4%B8%ADwhitebox_aes.sage%E5%A4%9A%E6%96%B9%E6%8A%A5%E9%94%99%EF%BC%8C%E5%8F%AF%E8%83%BD%E9%9C%80%E8%A6%81%E5%9C%A8sage%E7%8E%AF%E5%A2%83%E4%B8%AD%E5%AE%9E%E7%8E%B0(maybe)">https://github.com/GrosQuildu/CryptoAttacks，但是安装并不成功，其中whitebox_aes.sage多方报错，可能需要在sage环境中实现(maybe)</a></p></blockquote><h3 id="frida-插桩"><a class="markdownIt-Anchor" href="#frida-插桩"></a> Frida 插桩</h3><blockquote><p>frida -p &lt;PID或者进程名称&gt; -l hook_example.js</p></blockquote><h4 id="得到161个密文"><a class="markdownIt-Anchor" href="#得到161个密文"></a> 得到16+1个密文</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> baseAddr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(<span class="hljs-string">&quot;m1_read.exe&quot;</span>);<span class="hljs-comment">//使用frida的&quot;Module.findBaseAddress&quot;来查找目标程序</span><br><span class="hljs-keyword">var</span> whiteAES = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(baseAddr.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x4BF0</span>), <span class="hljs-string">&#x27;pointer&#x27;</span>, [<span class="hljs-string">&#x27;pointer&#x27;</span>, <span class="hljs-string">&#x27;pointer&#x27;</span>])<span class="hljs-comment">// 创建一个NativeFunction对象，用于调用位于&quot;m1_read.exe&quot;程序基址加上0x4BF0偏移的函数。接收两个参数，均为指针，并返回一个指针。这里实际上是在将&quot;m1_read.exe&quot;中的函数whiteAES绑定到JavaScript中，以便我们可以在后面的代码中调用它。</span><br><span class="hljs-keyword">var</span> count = <span class="hljs-number">9</span><br><span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;<br><span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(baseAddr.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x4C2C</span>), &#123;<br>    <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<span class="hljs-comment">//进入目标函数时</span><br>        count++;<span class="hljs-comment">//第一次的时候count已经等于9了，之后再++，达不到count==9的条件，所以跳过了插入残缺数据，所以获得了正确密文</span><br>        <span class="hljs-keyword">if</span> (count == <span class="hljs-number">9</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-property">rdi</span>.<span class="hljs-title function_">add</span>(index).<span class="hljs-title function_">writeByteArray</span>([<span class="hljs-number">0x00</span>])<br>            index += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;,<span class="hljs-comment">//在这里，count递增，并且如果count等于9，则在rdi寄存器的index位置写入一个b&#x27;\x00&#x27;</span><br>    <span class="hljs-attr">onLeave</span>: <span class="hljs-function">(<span class="hljs-params">retval</span>) =&gt;</span> &#123;<br><br>    &#125;<br>&#125;)<br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">17</span>; index++) &#123;<span class="hljs-comment">//第一次获取正确密文，后面获取16个错误密文</span><br>    <span class="hljs-keyword">var</span> l = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">allocAnsiString</span>(<span class="hljs-string">&quot;abcdefghijklmnop&quot;</span>);<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">alloc</span>(<span class="hljs-number">16</span>);<br>    <span class="hljs-title function_">whiteAES</span>(l, b);<span class="hljs-comment">//这行代码调用之前绑定的whiteAES函数，传入l和b作为参数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(l.<span class="hljs-title function_">readByteArray</span>(<span class="hljs-number">16</span>));<span class="hljs-comment">//最后，它将读取并打印由l指向的16字节内存区域的内容，这里的内容没有异或0x66</span><br>    count = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​上面代码的 0x4C2C 就是明文输入赋值的地方，它通过 <code>v6 = v2(mov rbx, rdi)</code> 来修改明文的数值。比对上面 QiLing模拟执行 寻找的 rcx，这两个其实是一个地方。最后也是在这里获得了密文</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401250022125.png" alt="image-20240125002252081" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401250023712.png" alt="image-20240125002311667" /></p><p>​运行之后，获得一个正确密文和16组错误密文</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401251147349.png" alt="image-20240125114703308" /></p><p>​然后格式化之后获取第10轮正确密文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">str_table = [<span class="hljs-string">&quot;c3 af 71 ad df e4 fc ac 69 41 28 6a 76 dd ed c2&quot;</span>,<br>             <span class="hljs-string">&quot;4b af 71 ad df e4 fc 26 69 41 80 6a 76 52 ed c2&quot;</span>,<br>             <span class="hljs-string">&quot;09 af 71 ad df e4 fc 43 69 41 88 6a 76 98 ed c2&quot;</span>,<br>             <span class="hljs-string">&quot;c3 e8 71 ad ac e4 fc ac 69 41 28 a7 76 dd 3f c2&quot;</span>,<br>             <span class="hljs-string">&quot;c3 10 71 ad 73 e4 fc ac 69 41 28 c5 76 dd 4c c2&quot;</span>,<br>             <span class="hljs-string">&quot;c3 b8 71 ad 9d e4 fc ac 69 41 28 a3 76 dd 37 c2&quot;</span>,<br>             <span class="hljs-string">&quot;c3 42 71 ad 40 e4 fc ac 69 41 28 9b 76 dd c5 c2&quot;</span>,<br>             <span class="hljs-string">&quot;c3 af e6 ad df c9 fc ac ed 41 28 6a 76 dd ed 5b&quot;</span>,<br>             <span class="hljs-string">&quot;c3 af 0b ad df 1c fc ac 0a 41 28 6a 76 dd ed c7&quot;</span>,<br>             <span class="hljs-string">&quot;c3 af 8b ad df 45 fc ac 41 41 28 6a 76 dd ed 22&quot;</span>,<br>             <span class="hljs-string">&quot;c3 af 43 ad df 7c fc ac 57 41 28 6a 76 dd ed 8c&quot;</span>,<br>             <span class="hljs-string">&quot;c3 af 71 eb df e4 c0 ac 69 20 28 6a fd dd ed c2&quot;</span>,<br>             <span class="hljs-string">&quot;c3 af 71 7c df e4 40 ac 69 a6 28 6a a2 dd ed c2&quot;</span>,<br>             <span class="hljs-string">&quot;c3 af 71 64 df e4 48 ac 69 98 28 6a 35 dd ed c2&quot;</span>,<br>             <span class="hljs-string">&quot;c3 af 71 57 df e4 a9 ac 69 7e 28 6a 2c dd ed c2&quot;</span>,<br>             <span class="hljs-string">&quot;c3 af 71 ad df e4 fc ac 69 41 28 6a 76 dd ed c2&quot;</span>,<br>             <span class="hljs-string">&quot;c3 af 71 ad df e4 fc ac 69 41 28 6a 76 dd ed c2&quot;</span>]<br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> str_table:<br>    val = <span class="hljs-built_in">bytearray</span>(<span class="hljs-built_in">bytes</span>.fromhex(s))<br>    <span class="hljs-built_in">print</span>(val.<span class="hljs-built_in">hex</span>())<br></code></pre></td></tr></table></figure><h4 id="获得正确第10轮密文"><a class="markdownIt-Anchor" href="#获得正确第10轮密文"></a> 获得正确第10轮密文</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> phoenixAES<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;tracefile&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> t:<br>    t.write(<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    c3af71addfe4fcac6941286a76ddedc2</span><br><span class="hljs-string">    4baf71addfe4fc266941806a7652edc2</span><br><span class="hljs-string">    09af71addfe4fc436941886a7698edc2</span><br><span class="hljs-string">    c3e871adace4fcac694128a776dd3fc2</span><br><span class="hljs-string">    c31071ad73e4fcac694128c576dd4cc2</span><br><span class="hljs-string">    c3b871ad9de4fcac694128a376dd37c2</span><br><span class="hljs-string">    c34271ad40e4fcac6941289b76ddc5c2</span><br><span class="hljs-string">    c3afe6addfc9fcaced41286a76dded5b</span><br><span class="hljs-string">    c3af0baddf1cfcac0a41286a76ddedc7</span><br><span class="hljs-string">    c3af8baddf45fcac4141286a76dded22</span><br><span class="hljs-string">    c3af43addf7cfcac5741286a76dded8c</span><br><span class="hljs-string">    c3af71ebdfe4c0ac6920286afdddedc2</span><br><span class="hljs-string">    c3af717cdfe440ac69a6286aa2ddedc2</span><br><span class="hljs-string">    c3af7164dfe448ac6998286a35ddedc2</span><br><span class="hljs-string">    c3af7157dfe4a9ac697e286a2cddedc2</span><br><span class="hljs-string">    c3af71addfe4fcac6941286a76ddedc2</span><br><span class="hljs-string">    c3af71addfe4fcac6941286a76ddedc2</span><br><span class="hljs-string">    &quot;&quot;&quot;</span>.encode(<br>            <span class="hljs-string">&quot;utf8&quot;</span><br>        )<br>    )<br>phoenixAES.crack_file(<span class="hljs-string">&quot;tracefile&quot;</span>, verbose=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>​同上，把相应的数据填入上面的代码中，然后得到正确的密钥</p><h4 id="获得flag-2"><a class="markdownIt-Anchor" href="#获得flag-2"></a> 获得flag</h4><p>​之后使用 <code>Stark</code> 项目就可以得到<strong>原始密钥</strong>，然后使用上述代码获得flag</p><h2 id="2023强网杯"><a class="markdownIt-Anchor" href="#2023强网杯"></a> 2023强网杯</h2><blockquote><p>dotdot</p></blockquote><p>​整体逻辑：这个题除了WhiteBox AES之外还有RC4，序列化替换等考点。它首先通过BBB来获取输入(赋值给了v6)，然后使用AAA对输入进行白盒AES加密，然后再通过CCC将加密结果与v4进行判断(v5的那个判断不用处理，具体看下面)。之后DDD提取的&quot;License.dat&quot;文件，然后EEE将输入作为key(<code>WelcomeToQWB2023</code>)进行RC4解密。再分析解密后的License文件，发现其调用FFF函数进行tea加密，在原程序获取加密后的结果再进行解密，得到了字符串(<code>dotN3t_Is_1nt3r3sting</code>)。最后调用binaryFormatter.Deserialize 解析 License，这里在反序列化的过程中报错。探究其原因，原来是License中FFF的参数全是0导致的，根据FFF参数，在特定位置填入21字节字符串与16字节字符串(上面引用出来的两个字符串)然后运行即可解密。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401251215909.png" alt="image-20240125120143982" /></p><p>​主要关注白盒AES加密过程。这里BBB是获取输入且要求为16个字节，AAA是白盒AES加密，CCC是数组比对，它将白盒AES加密后的输入与常量进行对比。详细分析，BBB获取输入然后传输给v31，然后AAA对v31加密之后给array2，同时AAA也将全为0的array进行加密之后给array3，然后分别使用CCC进行对比。这里对比v5与array3是永真，所以不必理会，只用查看前面的CCC。由此就是将输入进行白盒AES加密，然后比对，最后拿输入进行后续处理。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401251810729.png" alt="image-20240125181016604" /></p><p>​分析AAA方法，很容易比对出这是白盒AES算法，而分析白盒AES的关键就是找到AES加密的原始密钥，然后再通过AES解密得到最后的输入。做法要么使用插入残缺数据的DFA方法，要么就进行爆破求解。</p><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><blockquote><p><a href="https://blog.csdn.net/weixin_73270563/article/details/135634596?spm=1001.2014.3001.5506">白盒AES–从0到1-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_73270563/article/details/135708944">AES白盒–从0到1(代码补充)-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_37638441/article/details/128968233">AES白盒加密解读与实现(Chow方案)-CSDN博客</a></p><p><a href="https://www.cnblogs.com/fuxuqiannian/p/17679058.html">白盒AES和SM4实现的差分故障分析</a></p><p><a href="https://www.cnblogs.com/gaoyucan/p/17577858.html">巅峰极客 2023 逆向 Writeup</a></p><p><a href="https://www.52pojie.cn/thread-1870480-1-1.html#48952066_dotdot">2023强网杯部分RE_WP</a></p><p><a href="https://www.cnblogs.com/gaoyucan/p/17914856.html">2023 强网杯逆向 Writeup</a></p><p><a href="https://www.cnblogs.com/kentle/p/15529251.html">AES查表优化©</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>逆向笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GIT相关</title>
    <link href="/posts/7356a93f.html"/>
    <url>/posts/7356a93f.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>相关教程</p><p><a href="https://wiki.wgpsec.org/knowledge/base/git-base.html">GIT</a></p></blockquote><h1 id="git命令"><a class="markdownIt-Anchor" href="#git命令"></a> GIT命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 本地仓库初始化</span><br>git init <br><br><span class="hljs-comment"># 将文件提交到暂存区</span><br>git add [file name] <br>git add .  <span class="hljs-comment">#添加全部</span><br><br><span class="hljs-comment"># 将文件提交到本地仓库</span><br>git commit [file name] <br>git commit -m <span class="hljs-string">&quot;commit information&quot;</span> [file name]<br>git commit -m <span class="hljs-string">&quot;commit inforamtion&quot;</span> <span class="hljs-comment"># 提交全部到本地仓库</span><br><br><span class="hljs-comment"># 提交到远程仓库</span><br>git push -u origin [branch name]<br>git push -f <span class="hljs-comment"># 强制提交</span><br><br><span class="hljs-comment"># 分支操作</span><br>git checkout [branch name] <span class="hljs-comment"># 切换分支</span><br>git branch -a <span class="hljs-comment"># 查看所有分支</span><br>git checkout -b local_dev origin/remote_dev <span class="hljs-comment"># 创建本地分支并于远程分支连接</span><br>git push origin --delete remote_dev <span class="hljs-comment"># 删除远程分支</span><br></code></pre></td></tr></table></figure><h1 id="git-加速"><a class="markdownIt-Anchor" href="#git-加速"></a> Git 加速</h1><p>​git失败的原因绝大多数都是网络问题，所以挂代理是最为推荐的选择。以下是起作用的一些方法</p><ul><li><p>通用方法，更换git的代理为443</p><ul><li><a href="https://www.cnblogs.com/tsalita/p/16181711.html">SSH：连接到主机github.com端口22：连接时间超时</a></li></ul></li><li><p>但是对于wsl，直接使用最新wsl2共用主机的代理即可(<strong>最为推荐</strong>)，不嫌麻烦可以给配置个代理</p><ul><li><a href="https://github.com/microsoft/WSL/issues/10753">配置wsl镜像</a></li><li><a href="https://wph.im/199.html">Windows10系统下配置WSL2自动走Clash代理</a>，之后clash打开allow lan模式即可</li><li><a href="https://nafx.top/archives/88ca14b9#5-etc-resolv-conf%E9%87%8D%E5%90%AF%E4%B8%A2%E5%A4%B1">WSL2内使用Windows的v2ray代理 | Nafx’s Blog</a>，这是v2的模式，首先最后面设置，然后前面配置bashrc</li></ul></li><li><p>有时候最后的方法会起点作用</p><ul><li><a href="https://blog.csdn.net/m0_38068229/article/details/108205928">git clone失败解决方案</a></li></ul></li></ul><h1 id="git-提交"><a class="markdownIt-Anchor" href="#git-提交"></a> Git 提交</h1><ul><li>github连不上<a href="https://zhuanlan.zhihu.com/p/521340971">ssh: connect to host github.com port 22: Connection refused</a></li></ul><h1 id="远程仓库到自己仓库"><a class="markdownIt-Anchor" href="#远程仓库到自己仓库"></a> 远程仓库到自己仓库</h1><p>​拉取别人的仓库到自己仓库，主要应对github中没有对应仓库的情况<a href="https://blog.csdn.net/wangyangzhizunwudi/article/details/127330070">繁琐指南</a>。简单的操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -r | grep -v <span class="hljs-string">&#x27;\-&gt;&#x27;</span> | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> remote; <span class="hljs-keyword">do</span> git branch --track <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;remote#origin/&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$remote</span>&quot;</span>;<span class="hljs-keyword">done</span>   <span class="hljs-comment"># 获取所有远程分支到本地</span><br>git fetch --all  <span class="hljs-comment"># 获取该项目远程库的所有分支及其内容</span><br>git fetch --tags <span class="hljs-comment"># 获取该项目远程库的标签(没标签就不必了)</span><br>git remote rename origin old-origin <span class="hljs-comment"># 将原来的origin重命名一下</span><br>git remote add origin git@172.28.3.77:xs-soc/test-code.git  <span class="hljs-comment"># 指定需要迁移到新的目标地址(自己的仓库)</span><br>git push origin --all  <span class="hljs-comment"># 推送所有分支及其内容</span><br>git push --tags  <span class="hljs-comment"># 推送所有标签及其内容</span><br>git remote <span class="hljs-built_in">rm</span> origin                 <span class="hljs-comment"># 删除当前远程库</span><br>git branch -M main  <span class="hljs-comment"># 重命名主要分支仓库</span><br>git push -u origin main  <span class="hljs-comment"># 推送到指定分支</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>软件工程B</title>
    <link href="/posts/a57dfeb7.html"/>
    <url>/posts/a57dfeb7.html</url>
    
    <content type="html"><![CDATA[<h1 id="复习资料"><a class="markdownIt-Anchor" href="#复习资料"></a> 复习资料</h1><h2 id="前人金币"><a class="markdownIt-Anchor" href="#前人金币"></a> 前人金币</h2><h3 id="金币1"><a class="markdownIt-Anchor" href="#金币1"></a> 金币1</h3><p>总共四个大题</p><ol><li>基于给定的需求绘制DFD图 25分。<ul><li>掌握结构化分析的方法，按照数据流图的一般步骤基于给定的需求绘制DFD图，绘制DFD图要遵循DFD的守恒、封闭和父子平衡的原则。</li></ul></li><li>用判定表描述加工逻辑，10分。<ul><li>基于给定的需求利用判定表描述加工逻辑，要掌握判定表的一般表现形式。</li></ul></li><li>过程模型应用，10分<ul><li>基于给定的系统开发需求选择合适的模型进行系统开发，要掌握常用的过程模型，例如瀑布模型、原型法、增量模型、螺旋模型等。在回答问题是重点阐述模型的特点，然后针对待开发系统的需求详细阐述选择模型的理由。</li></ul></li><li>测试用例设计，15分<ul><li>掌握逻辑结构覆盖法与等价类划分法设计测试用例。逻辑覆盖法设计测试用例时需要给出每种覆盖粒度对应的测试用例，以及该用例对应的执行路径。等价类划分设计测试用例时，需要按照等价类划分的步骤：(1)划分有效及无效等价类；(2)基于给定的有效和无效等价类分别设计测试用例及预期输出。</li></ul></li><li>面向对象综合应用题，40分<ul><li>基于给定的需求说明给出USE CASE图、类图及时序图，以及开发该系统时选择何种语言及开发工具进行开发，并阐述选择语言的理由。</li></ul></li></ol><h3 id="金币2"><a class="markdownIt-Anchor" href="#金币2"></a> 金币2</h3><p>A卷</p><ul><li>数据流图 软件结构图 25分</li><li>用等价类划分的方法设计测试用例 15分 为每一个无效等价类设计测试用例 越少越好</li><li>判定表 给一段需求 把判定表画出来 判定表包括条件和动作，取值对应规则 15</li><li>给出一段需求 设计用例图和类图 25</li><li>简单的需求 给出顺序图 20</li><li>没有考ns和pad图</li></ul><p>B卷 EZ</p><ul><li>数据流图 软件结构图 25分</li><li>设计判定树 给出一个规则的描述 按树的形式把规则描述出来</li><li>根据要求设计测试用例 20分 满足语句覆盖和路径覆盖 给伪代码 程序流程图画出来 然后设计满足语句覆盖和路径覆盖 不要仅仅给一个测试用例，要把测试用例走的路线走出来，把边的编号写出来</li><li>根据要求设计用例图 没有类图 15分</li><li>设计顺序图 需求大家经常会用到 (？) 不难理解 大家都用过这个东西</li></ul><p>ps 书写工整</p><h3 id="金币3"><a class="markdownIt-Anchor" href="#金币3"></a> 金币3</h3><p><a href="https://junyaohu.github.io/2022/01/10/%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E3%80%8B%E7%AC%94%E8%AE%B0/">胡椒笔记</a></p><h2 id="计科重点"><a class="markdownIt-Anchor" href="#计科重点"></a> 计科重点</h2><ol><li><p>给出需求 数据流图(3层:顶层 1层 2层)(每一层具体的哪里流入和流出)</p><ul><li>给出加工逻辑信息 画出判定树 判定表30分</li><li>给出代码片段/程序流图 画出pad图/ns图报</li></ul></li><li><p>测试 给出源程序代码 设计测试用例</p><ul><li>程序流图 测试输入 测试预期输出</li><li>白盒(逻辑覆盖5种/路径覆盖)/黑盒(有效等价类无效等价类</li></ul></li><li><p>给出需求 面向对象分析</p><ul><li>用例图 actor 用例 之间通信关联 用例和用例关系(包含/扩展/泛化)10分</li><li>类图 要素 属性方法名 类和类关系(关联/依赖/泛化) 类和接口关系(实现)</li><li>根据类的角色设计类</li><li>时序图 组成</li></ul></li><li><p>编程语言10分</p><ul><li>用什么语言工具 优点 不足 适配性</li><li>给出软件开发场景 选择过程模型(瀑布模型 圆形 增量模型 螺旋模型)</li></ul></li></ol><h1 id="软工复习"><a class="markdownIt-Anchor" href="#软工复习"></a> 软工复习</h1><h2 id="题型"><a class="markdownIt-Anchor" href="#题型"></a> 题型</h2><ol><li>数据流图(DFD) 软件结构图 - 3、4</li><li>N-S图 PAD图 - 5</li><li>判定树判定表 - 3</li><li>等价类 - 9</li><li>测试用例 - 9</li><li>用例图 类图 - 4</li><li>时序图 - 5</li></ol><h2 id="第1章-概述"><a class="markdownIt-Anchor" href="#第1章-概述"></a> 第1章 概述</h2><ul><li>开发模型<ul><li>瀑布模型</li><li>原型模型</li><li>增量模型</li><li>螺旋模型</li></ul></li></ul><h2 id="第3章"><a class="markdownIt-Anchor" href="#第3章"></a> 第3章</h2><h3 id="判定树和判定表"><a class="markdownIt-Anchor" href="#判定树和判定表"></a> 判定树和判定表</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401092110511.png" alt="image-20240109211007436" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401092109006.png" alt="image-20240109210921921" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401092110178.png" alt="image-20240109211036999" /></p><h2 id="第-4-章-面向对象的方法"><a class="markdownIt-Anchor" href="#第-4-章-面向对象的方法"></a> 第 4 章 面向对象的方法</h2><h3 id="用例图"><a class="markdownIt-Anchor" href="#用例图"></a> 用例图</h3><ul><li><p>关联：<strong>实线，无箭头</strong></p></li><li><p>包含(include)：通常是对于一个复杂的用例进行拆解，<strong>虚线，箭头，从较复杂的用例(基用例)指向拆解出来的功能(相当于把一个功能再用函数包装)用例，标注《include》</strong></p></li><li><p>扩展(extend)：为用例提供附加功能，<strong>虚线，箭头，从延申功能指向基础用例，标注《extend》</strong></p></li><li><p>泛化：类似于继承，<strong>实线，空心三角箭头，从“子”指向“父”</strong></p></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401092130749.png" alt="image-20240109213042692" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401092130063.png" alt="image-20240109213050036" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401092130600.png" alt="image-20240109213057566" /></p><h3 id="类图"><a class="markdownIt-Anchor" href="#类图"></a> 类图</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401091520575.png" alt="image-20240109152034529" /></p><ul><li><p>关联</p><ul><li>普通关联：<strong>实线</strong></li><li>组合：部分不能脱离整体 1对1，<strong>实心的菱形+实线</strong> --&gt; 鸟，翅膀</li><li>聚合：整体和部分，部分可以脱离整体，<strong>空心的菱形+实线</strong> --&gt; 大雁群，大雁</li></ul></li><li><p>依赖</p><ul><li>A类中的某个方法中，使用了B类，就说A类依赖于B类，它们是依赖关系，<strong>虚线箭头</strong></li></ul></li><li><p>泛化</p><ul><li><p>继承</p><ul><li>子类继承父类，实现父类所有的功能，并拥有父类没有的功能，<strong>空心三角形+实线</strong></li></ul></li><li><p>实现</p><ul><li>实现表示一个class类实现interface接口(可以是多个)的功能。：<strong>空心三角形+虚线</strong>/棒棒糖(实线+空心圆)</li><li>图中的的是：大雁 -&gt; 飞行</li><li><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401091541536.png" alt="image-20240109154158506" /></li></ul></li></ul></li></ul><h2 id="第-9-章-测试"><a class="markdownIt-Anchor" href="#第-9-章-测试"></a> 第 9 章 测试</h2><h3 id="白盒测试"><a class="markdownIt-Anchor" href="#白盒测试"></a> 白盒测试</h3><h4 id="逻辑覆盖法"><a class="markdownIt-Anchor" href="#逻辑覆盖法"></a> 逻辑覆盖法</h4><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401082318291.png" alt="image-20240108231839181" /></p><p>​这里的覆盖指每个测试满足覆盖条件</p><ol><li>语句覆盖：将程序中<strong>每个语句</strong>至少执行一次<ul><li>每个测试用例都要经过SACBED</li></ul></li><li>判定覆盖：<strong>每个判定</strong>的每个分支路径至少要执行一次<ul><li>对于两个判断A和B，找到测试用例，从而实现其T、F都经过(这里就是指所有的测试用例加起来)</li><li>例如：SACBED，SABD就满足条件</li></ul></li><li>条件覆盖：<strong>每个条件</strong>的真假两种情况至少执行一次<ul><li>对于A&gt;1 B=0 A=2 X&gt;1，找到测试用例，把每个的T，F都经过</li><li>例如：TTTT，FFFF就可以满足要求</li></ul></li><li>判定/条件覆盖<ul><li><strong>每个条件</strong>的真假两种情况至少执行一次</li><li><strong>每个判定</strong>的每个分支路径至少要执行一次</li><li>这里就是把判定覆盖和条件覆盖组合，找到测试用例可以覆盖所有这两个覆盖的情况</li></ul></li><li>条件组合覆盖：每个判定的所有条件的<strong>各种可能组合</strong>至少执行一次 -&gt; 最强白盒测试<ul><li>这个就是对于3的全组合了，3只要求至少实现一个就行，而这个是全组合，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">2^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>可能，但是可能存在一个测试用例覆盖多个，所以比<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">2^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>少</li></ul></li></ol><h4 id="路径测试法"><a class="markdownIt-Anchor" href="#路径测试法"></a> 路径测试法</h4><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401082333108.png" alt="image-20240108233332059" /></p><ol><li>点覆盖：每个节点至少执行一次 = 语句覆盖</li><li>边覆盖：每条边至少执行一次 = 判定覆盖</li><li>路径覆盖：每条路径至少要执行一次 -&gt; <strong>最强白盒测试</strong><ul><li>这里即对于每个点之后存在两条边的情况，都要分两种测试用例</li></ul></li></ol><h3 id="黑盒测试"><a class="markdownIt-Anchor" href="#黑盒测试"></a> 黑盒测试</h3><h4 id="等价类"><a class="markdownIt-Anchor" href="#等价类"></a> 等价类</h4><table><thead><tr><th>输入条件</th><th>确立的等价类</th></tr></thead><tbody><tr><td>取值范围、取值的个数</td><td>一个有效等价类，两个无效等价类</td></tr><tr><td>输入值的集合</td><td>一个有效等价类，一个无效等价类</td></tr><tr><td>布尔值</td><td>一个有效等价类，一个无效等价类</td></tr><tr><td>数据的一组值</td><td>每一个输入值就是一个有效等价类(多个值多个等价类)，所有不允许的一个无效等价类</td></tr><tr><td>遵守的规则</td><td>一个有效等价类(遵守规则的)，不同角度违反规则的多个等价类</td></tr></tbody></table><ul><li>每个等价类都需要标上序号，然后在测试用例中覆盖等价类时写序号</li><li><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401092113163.png" alt="image-20240109211353096" /></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401090947702.png" alt="image-20240109094742622" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401092111803.png" alt="image-20240109211116760" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401092113523.png" alt="image-20240109211326461" /></p><p>这个测试用例后面还有</p><h2 id="简答"><a class="markdownIt-Anchor" href="#简答"></a> 简答</h2><p><strong>开发模型</strong></p><ul><li><p>边做边改模型</p><ul><li>开发过程<ul><li>与甲方不断沟通，不断打磨 -&gt; 没有形成文档化需要</li></ul></li><li>问题<ul><li>忽略需求环节</li><li>缺少规划和设计环节，软件的结构随着不断地修改越来越糟，导致无法继续修改</li></ul></li></ul></li><li><p>瀑布模型</p><ul><li><p>特点</p><ul><li><p>阶段间具有顺序性和依赖性</p><ol><li>顺序性: 必须等前一阶段的工作完成之后，才能开始后一阶段的工作</li><li>依赖性: 只有前一阶段的输出正确，后一阶段的工作才有可能获得正确的结果。</li></ol></li><li><p>推迟实现</p><ul><li>把逻辑设计与物理设计清楚的划分开来, 尽可能地推迟程序的物理实现</li></ul></li><li><p>质量保证</p><ol><li><p>各阶段都必须完成规定的文档</p></li><li><p>每一个阶段结束前都要对所完成的文档进行评审，以便尽早发现问题，改正错误</p></li></ol></li></ul></li><li><p>优点</p><ul><li>“线性”顺序结构</li></ul></li><li><p>缺点</p><ul><li>要求用户一开始清楚地给出所有需求，以后也不能发生任何的变化</li><li>由于开发模型是线性的，程序的运行版本一直要等到项目开发周期的晚期才能得到</li></ul></li></ul></li><li><p>原型模型</p><ul><li>步骤<ol><li>收集用户需求</li><li>建立原型 -&gt; 反映用户主要需求，集中于用户可见部分</li><li>用户评价原型 -&gt; 进一步精华软件</li><li>逐步调整原型</li></ol></li><li>优点<ul><li>原型为开发人员和用户提供了一种标识软件需求的机制</li><li>用户不必等到项目开发周期的晚期才能得到程序的可运行版本</li></ul></li></ul></li><li><p>增量模型</p><ul><li>软件被作为一系列的增量构件来设计、实现、集成和测试</li></ul></li><li><p>螺旋模型</p><ul><li>= 瀑布模型 + 原型模型</li><li>制定计划，风险分析，实施工程，客户评价</li></ul></li><li><p>演化模型</p><ul><li>不是很明确的软件项目，从需求清楚的部分开始，根据用户的建议逐渐向系统中添加功能</li><li>与边做边改相比，改变在于周期拉长，每次迭代采用瀑布模型等</li></ul></li><li><p>喷泉模型</p><ul><li>重复与迭代</li></ul></li><li><p>敏捷开发原则</p><ul><li><p>Scrum模型</p><ul><li>遵循敏捷开发原则的<strong>迭代</strong>式增量软件开发过程</li><li>工件<ol><li>产品 Backlog</li><li>Spring Backlog</li><li>产品增量</li></ol></li><li>角色<ol><li>Product Owner -&gt; 负责产品待办事项表</li><li>Scrum Master -&gt; 定时组织会议，不要管理团队</li><li>团队</li></ol></li></ul></li><li><p>看板</p><ul><li>后道工序在需要时，通过看板向前道工序发出信号–请给我需要数量的输入，前道工序只有得到看板后，才按需生产。-&gt; 信号由下游向上游传递，拉动上游的生产活动，使产品向下游流动</li></ul></li><li><p>极限编程</p></li></ul></li><li><p>统一软件工程(RUP)</p></li><li><p>devops开发维护模型</p><ul><li>多主体，可以随时更新(代码托管？)-&gt;模糊开发与运维的界限</li><li>引入自动化工具呈现持续集成，持续部署等实践</li><li>Scrum模型，看板，极限编程</li></ul></li></ul><p><strong>编程语言选择</strong></p><ol><li>系统用户的要求</li><li>选择适合应用领域的语言</li><li>可以使用的编程程序<ul><li>编程程序是否可以运行在目标系统的环境中</li></ul></li><li>可以得到的软件工具<ul><li>是否有支持某种语言程序开发的软件工具可以利用</li></ul></li><li>软件可移植性要求<ul><li>如果目标系统将在不同类型的设备上运行，或者预期的使用寿命很长，那么选择一种标准化程序高、程序可移植性好的语言就是很重要的</li></ul></li><li>人的因素<ul><li>尽量选用程序员和系统维护人员熟悉的语言环境，以节省开发时间，也有利于将来使用和维护工作</li></ul></li><li>工程规模</li></ol>]]></content>
    
    
    <categories>
      
      <category>课程复习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>密码学</title>
    <link href="/posts/abb54922.html"/>
    <url>/posts/abb54922.html</url>
    
    <content type="html"><![CDATA[<h1 id="复习资料"><a class="markdownIt-Anchor" href="#复习资料"></a> 复习资料</h1><h2 id="历年考题"><a class="markdownIt-Anchor" href="#历年考题"></a> 历年考题</h2><h3 id="2021-b"><a class="markdownIt-Anchor" href="#2021-b"></a> 2021-B</h3><p><strong>简答题(30)</strong></p><ol><li>根据密钥，密码体制的分类分为哪两类？</li><li>分组密码的2个设计准则是？分组密码中的轮函数F由哪三部分组成？</li><li>密码协议的秘密共享里的唯一一道例题</li><li>明文、密文、加密函数的概念</li><li>Hash函数数据填充</li><li>RSA算法，Alice传消息给Bob用哪个钥匙？设计一个用Alice私钥签名的流程？</li></ol><p><strong>计算(30)</strong></p><ol><li>仿射密码，已知明文攻击，给出完整密文、第一个字母+最后一个字母的明文，推出所有明文。</li><li>画出Feistel一轮循环的图示，S盒代换(给出了S盒和输入序列)</li><li>A/B差异(maybe)<ul><li>RSA计算，模重复平方法，实现加密。</li><li>是不是任意公钥算法都可以用来签名？什么样的公钥算法可以用于签名？</li></ul></li></ol><p><strong>论述/分析(20)</strong></p><ol><li>给出了具体的Shamir数字签名方案和p、q、e、i数据，求解私钥</li><li>A/B差异(maybe)<ul><li>证明算法正确性(给出了要证明的公式)。</li><li>线性移位反馈寄存器的反馈函数+周期+输出序列+游程(给出了一组数，分析长度为1的游程有几个)</li></ul></li></ol><p><strong>综合题(20)</strong></p><ol><li><strong>(2分)</strong> AES迭代轮数与密钥长度、分组长度的关系(给出密钥长度、分组长度，写出AES迭代轮数)</li><li><strong>(10分)</strong> 分组密码里的多项式乘法(题目为：57*13)</li><li><strong>(8分)</strong> 设计一种密码工作模式：并行、速度快(计数器模式)<ol><li>画出图示或写出加解密公式</li><li>如果明文分组内容相同，密文分组中的密文是否一样？</li></ol></li></ol><h3 id="2022-a"><a class="markdownIt-Anchor" href="#2022-a"></a> 2022-A</h3><p>基本不考察理论背诵和算法记忆(除了AES、DES、SM4)</p><p><strong>第一大题(30分)</strong></p><ol><li>画出Feistel一轮的流程图</li><li>给定消息bit数问hash(MD5)的填充方式</li><li>给定6位密码包括0-9和a-z分析秘钥空间</li><li>给定一串字符计算游程的个数(要首尾连接)</li><li>aes的子密钥多少bit，简述生成过程</li><li>给6bit值计算des的sbox替换</li></ol><p><strong>第二大题(30分)</strong></p><ol><li>给定仿射加密式求解密，本次解密结果为CUMT</li><li>AES列混淆中GF(2^8)域上的乘法，多项式运算，本年计算0x2*0xc1</li><li>RSA给定p、q、e小数据，要求解密密文</li></ol><p><strong>第三大题(20)</strong></p><ol><li>证明DES有代数互补性、画出CBC的解密图</li><li>LFSR给定一个特征多项式，要求画出LFSR的图和给出f函数，第二问是给定初始状态求输出序列和周期(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>5</mn></msup><mo>+</mo><msup><mi>x</mi><mn>4</mn></msup><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x^5+x^4+x^2+x+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>)</li></ol><p><strong>第四大题(20)</strong></p><p>一大题，三小问，本年度考察EIGAMAL算法，公钥只要求记忆RSA的算法，所以EIGAMAL和ECC的算法都会给出。</p><ol><li>EIGAMAL的公钥和私钥(5)</li><li>证明算法的正确性(5)</li><li>给定参数实现加密和解密(10)</li></ol><h2 id="复习要求"><a class="markdownIt-Anchor" href="#复习要求"></a> 复习要求</h2><p><strong>第2章 密码学基础</strong></p><ol><li>主要是香农理论，需要知道熵的概念，叙述与计算公式，给出具体数据计算</li></ol><p><strong>第3章 古典密码体制</strong></p><ol><li>基本置换、替换密码基本概念</li><li>对经典密码算法分析密钥空间</li><li>给定明、密文进行求解</li></ol><p><strong>第4章 分组密码</strong></p><ol><li>DES与AES算法的原理与流程，加解密过程</li><li>DES，AES安全性分析</li><li>难点在于AES的计算 --&gt; 字节上的运算</li><li>五种工作模式，画出加解密工作图</li><li>用代数系统分析优缺点及错误传播情况</li></ol><p><strong>第5章 序列密码</strong></p><ol><li>线性位移寄存器，给定初始状态，特征多项式，反馈函数(注意区分)，需要写出工作图，框架图，写出输出状态与周期，理解什么是m序列</li></ol><p><strong>第6章 Hash函数</strong></p><ol><li>不会去描述具体的算法</li><li>需要知道大概的框架，对于数据填充有了解</li><li>知道hash本身的概念，设计原则</li><li>关于hash函数的碰撞性和典型的攻击方式</li></ol><p><strong>第 7/8章 公钥密码体制与数字签名</strong></p><ol><li>只考RSA与ELGamal</li><li>RSA的概念及算法，安全分析，给出具体实例可以计算</li><li>ELGamal也一样，不要求具体流程，但需要安全性基础，数学基础(书上的例题)，加密解密数字签名的逻辑进行分析，对安全性进行分析</li></ol><h1 id="第2章-密码学基础"><a class="markdownIt-Anchor" href="#第2章-密码学基础"></a> 第2章 密码学基础</h1><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401022134058.png" alt="image-20240102213458956" /></p><h2 id="密码体制"><a class="markdownIt-Anchor" href="#密码体制"></a> 密码体制</h2><h3 id="组成部分"><a class="markdownIt-Anchor" href="#组成部分"></a> 组成部分</h3><blockquote><p>五元组(M、C、K、E、D)</p></blockquote><ol><li>明文空间<code>M</code> --&gt; 全体明文的集合</li><li>密文空间<code>C</code> --&gt; 全体密文的集合</li><li>密钥空间<code>K</code> --&gt; 全体密钥的集合。其中每一个密钥K均由加密密钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>e</mi></msub></mrow><annotation encoding="application/x-tex">K_{e}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和解密密钥<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>d</mi></msub></mrow><annotation encoding="application/x-tex">K_{d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>组成，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi><mo>=</mo><mo>&lt;</mo><msub><mi>K</mi><mi>e</mi></msub><mo separator="true">,</mo><msub><mi>K</mi><mi>d</mi></msub><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">K = &lt;K_{e},K_{d}&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span></li><li>加密算法<code>E</code> --&gt; 一组由M到C的加密变换</li><li>解密算法<code>D</code> --&gt; 一组由C到M的解密变换</li></ol><h3 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类</h3><h4 id="对称密码"><a class="markdownIt-Anchor" href="#对称密码"></a> 对称密码</h4><ul><li>序列密码(stream cipher)<ul><li>RC4，A5等</li></ul></li><li>分组密码(block cipher)<ul><li>DES，3DES，AES，IDEA等</li></ul></li></ul><h4 id="公钥密码体制非对称密码体制"><a class="markdownIt-Anchor" href="#公钥密码体制非对称密码体制"></a> 公钥密码体制/非对称密码体制</h4><ul><li>典型公钥密码体制<ul><li>RSA，Elgamal，ECC</li></ul></li></ul><h2 id="密码分析"><a class="markdownIt-Anchor" href="#密码分析"></a> 密码分析</h2><h3 id="攻击密码系统的方法"><a class="markdownIt-Anchor" href="#攻击密码系统的方法"></a> 攻击密码系统的方法</h3><ul><li>穷举攻击：攻击者<strong>试遍</strong>所有可能的<strong>密钥</strong>对所获密文进行解密，直至得到正确的明文<ul><li>变体：字典攻击</li></ul></li><li>统计攻击：根据明文、密文和密钥的<strong>统计规律</strong>来破译密码的方法<ul><li>多适用于对称密码体制</li></ul></li><li>数学分析攻击：针对加解密算法的<strong>数学基础</strong>和<strong>某些密码学特</strong>性，通过<strong>数学求解</strong>的方法来破译密码<ul><li>多适用于公钥密码体制</li></ul></li></ul><h3 id="密码分析攻击"><a class="markdownIt-Anchor" href="#密码分析攻击"></a> 密码分析攻击</h3><blockquote><p>前提：攻击者知道密码算法</p></blockquote><h4 id="唯密文攻击"><a class="markdownIt-Anchor" href="#唯密文攻击"></a> 唯密文攻击</h4><ul><li>被动攻击，密码分析者仅能根据<strong>截获的密文</strong>进行分析，以得出明文或密钥</li><li>穷举攻击和统计分析都是唯密文攻击</li></ul><h4 id="已知明文攻击"><a class="markdownIt-Anchor" href="#已知明文攻击"></a> 已知明文攻击</h4><ul><li>被动攻击，密码分析者除了有<strong>截获的密文</strong>外，还有一些已知的 “<strong>明文—密文对</strong>” 来破译密码</li><li>现代的密码体制(基本要求)不仅要经受得住唯密文攻击，而且要经受得住已知明文攻击</li></ul><h4 id="选择明文攻击"><a class="markdownIt-Anchor" href="#选择明文攻击"></a> 选择明文攻击</h4><ul><li>主动攻击：密码分析者除得到一些 “<strong>明文—密文对</strong>” 外，还可以<strong>选择被加密的明文，并获得相应的密文</strong>；<code>密码破译者暂时控制加密机</code></li><li>变体：自适应选择明文攻击</li></ul><h4 id="选择密文攻击"><a class="markdownIt-Anchor" href="#选择密文攻击"></a> 选择密文攻击</h4><ul><li>主动攻击，密码分析者可以<strong>选择一些密文，并得到相应的明文</strong>；<code>密码破译者暂时控制解密机</code> --&gt; 它与选择明文攻击相反</li><li>密码分析者的任务目标是推出密钥</li><li>多用于攻击公钥密码体制，可以用于 ElGamal 的小步大步法破解，即伪造真实密文与自己的密文的联合体，对其进行解密，然后用得到的信息可以再解密出真实的密文<ul><li>可以理解为真实密文保密等级高，不能解密；自己伪造后保密等级降低，可以解密，从而可以根据低等级解密信息来对真实密文进行解密</li></ul></li><li>变体：自适应选择密文攻击</li></ul><h4 id="选择文本攻击"><a class="markdownIt-Anchor" href="#选择文本攻击"></a> 选择文本攻击</h4><ul><li>主动攻击，选择明文攻击+选择密文攻击</li></ul><h2 id="信息论基础"><a class="markdownIt-Anchor" href="#信息论基础"></a> 信息论基础</h2><ul><li><p><strong>单符号离散信源</strong>：如果信源发出的消息是离散的、有限或无限可列的符号或数字，且一个符号代表一条完整的消息，则称单符号离散信源</p></li><li><p>**信源空间：**若信源的输出是随机事件x，其出现概率为p(x)，则它们构成的集合，称为信源的概率空间或简称为信源空间</p></li><li><p>**自信息量：**一个随机事件的自信息量为其出现概率对数的负值。–&gt; 事件x发生可得到的信息量，即</p></li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>l</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>log</mi><mo>⁡</mo><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>l</mi><mi>o</mi><mi>g</mi><mfrac><mn>1</mn><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">l(x_i)=-\log p(x_i)=log\frac1{p(x_i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-0.936em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord">1</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><ul><li><p>随机事件的信息量和不确定度有很密切的联系</p><ul><li>如果发生一个不确定度小的事件，则带来的信息量较小</li><li>如果发生一个不确定度高的事件，它带来的信息量很大</li><li>如果是必然事件，则没有信息量</li></ul></li><li><p>**联合自信息量：**若两个消息<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">x_{i},y_{j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>同时出现，联合自信息量定义为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{I(x_i,y_j)=-\log_2p(x_i,y_j)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">x_{i},y_{j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>相互独立时，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>p</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(x_i,y_j)=p(x_i)p(y_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo lspace="0em" rspace="0em">=</mo><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo lspace="0em" rspace="0em">+</mo><mi>I</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(x_i,y_j){=}I(x_i){+}I(y_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mrel">=</span></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord">+</span></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li></ul></li><li><p>**条件自信息量：**若两个消息不是独立的，则事件<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>出现的条件下，随机事件x_{i}发生的条件自信息量定义为条件概率对数的负值：</p></li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo lspace="0em" rspace="0em">=</mo><mo>−</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(x_i/y_j){=}-\log_2p(x_i/y_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><h2 id="熵及其性质"><a class="markdownIt-Anchor" href="#熵及其性质"></a> 熵及其性质</h2><h3 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h3><p><strong>定义</strong>：信源的平均不确定度H(x)(信息熵)为信源中<strong>各个符号的不确定度</strong>的数学期望</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mo stretchy="false">[</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><munder><mo>∑</mo><mi>i</mi></munder><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><munder><mo>∑</mo><mi>i</mi></munder><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}H(X)=E[I(X)]=\sum_ip(x_i)I(x_i)=-\sum_ip(x_i)\log(p(x_i))\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.6276740000000003em;vertical-align:-1.0638370000000001em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5638370000000001em;"><span style="top:-3.5638370000000004em;"><span class="pstrut" style="height:3.0500050000000005em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0638370000000001em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>单位为 <strong>比特/符号</strong> 或者 <strong>比特/符号序列</strong></li><li>表示信源x每发一个符号所提供的平均信息量</li></ul><p><strong>联合熵</strong>是联合符号集合XY上的每个元素对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_{i},y_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的自信息量的概率加权平均值，定义为</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mi>I</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}H(XY)=\sum_{i,j}p(x_i,y_j)I(x_i,y_j)&amp;=-\sum_{i,j}p(x_i,y_j)\log p(x_i,y_j)\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.763782em;vertical-align:-1.1318910000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6318909999999998em;"><span style="top:-3.631891em;"><span class="pstrut" style="height:3.050005em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8723309999999997em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.413777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1318910000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6318909999999998em;"><span style="top:-3.631891em;"><span class="pstrut" style="height:3.050005em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8723309999999997em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.413777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1318910000000002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>联合熵H(XY)表示 <strong>X</strong> 和 <strong>Y</strong> <strong>同时发生的不确定度</strong></li></ul><h3 id="性质"><a class="markdownIt-Anchor" href="#性质"></a> 性质</h3><h4 id="非负性"><a class="markdownIt-Anchor" href="#非负性"></a> 非负性</h4><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo lspace="0em" rspace="0em">=</mo><mi>H</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">H(X){=}H(x_1,x_2,...,x_n)\geq0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mord"><span class="mrel">=</span></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li><li>等号在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x_{i} = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>时成立</li></ul><h4 id="对称性"><a class="markdownIt-Anchor" href="#对称性"></a> 对称性</h4><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi mathvariant="normal">.</mi><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo lspace="0em" rspace="0em">=</mo><mi>H</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(x_1,x_2,...,.x_n){=}H(x_2,x_1,...,x_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mrel">=</span></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li>熵函数所有变量可以互换，而不影响函数值。熵只与随机变量的总体结构有关</li></ul><h4 id="确定性"><a class="markdownIt-Anchor" href="#确定性"></a> 确定性</h4><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mo lspace="0em" rspace="0em">=</mo><mi>H</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo><mo lspace="0em" rspace="0em">=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">H(0,1){=}H(1,0,0,...,0){=}0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mrel">=</span></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mord"><span class="mrel">=</span></span><span class="mord">0</span></span></span></span></li><li>即只要信源符号表中，有一个符号的出现概率为1，信源熵就等于零</li></ul><h4 id="性质4"><a class="markdownIt-Anchor" href="#性质4"></a> 性质4</h4><ul><li>假设X是一个随机变量，概率分布为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo>…</mo><msub><mi>p</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">p_{1},……p_{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo lspace="0em" rspace="0em">&gt;</mo><mn>0</mn><mtext>, 1</mtext><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">p_i{&gt;}0\text{,\ 1}\leq i\leq n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mrel">&gt;</span></span><span class="mord">0</span><span class="mord text"><span class="mord">, 1</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>。那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>≤</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">{H(X)\leq\log_2n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span></span></span></span></span>，当且仅当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo lspace="0em" rspace="0em">=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>n</mi><mtext>,</mtext><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">p_i{=}1/n\text{,}1\leq i\leq n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mrel">=</span></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathnormal">n</span><span class="mord text"><span class="mord">,</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 时等号成立</li></ul><h4 id="性质5"><a class="markdownIt-Anchor" href="#性质5"></a> 性质5</h4><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>+</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(X,Y)\leq H(X)+H(Y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span>，当且仅当X和Y统计独立时等号成立。</li></ul><h4 id="性质6"><a class="markdownIt-Anchor" href="#性质6"></a> 性质6</h4><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>+</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">/</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>+</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mi mathvariant="normal">/</mi><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{H(X,Y)=H(Y)+H(X/Y)=H(X)+H(Y/X)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span></span></li></ul><h4 id="性质7"><a class="markdownIt-Anchor" href="#性质7"></a> 性质7</h4><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">/</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{H(X/Y)\leq H(X)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span></span></li></ul><h3 id="完善密码系统"><a class="markdownIt-Anchor" href="#完善密码系统"></a> 完善密码系统</h3><p>P(明文/密文) = P(明文 * 密文)/ P(密文) = p(明文)</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>p</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>c</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>p</mi><mi>i</mi></msub><mo>∗</mo><msub><mi>c</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>P</mi><mo stretchy="false">(</mo><msub><mi>c</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>p</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(p_i/c_i) = P(p_i * c_i) / P(c_i) = P(p_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401022352342.png" alt="image-20240102235137112" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401030003528.png" alt="image-20240103000326443" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401030003640.png" alt="image-20240103000334588" /></p><h3 id="完全保密性"><a class="markdownIt-Anchor" href="#完全保密性"></a> 完全保密性</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401030006768.png" alt="image-20240103000654687" /></p><h3 id="互信息"><a class="markdownIt-Anchor" href="#互信息"></a> 互信息</h3><ul><li>互信息**I(X,Y)<strong>为联合分布</strong>p(x,y)<strong>和乘积分布</strong>p(x)p(y)**的相对熵</li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>X</mi></mrow></munder><munder><mo>∑</mo><mrow><mi>y</mi><mo>∈</mo><mi>Y</mi></mrow></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mfrac><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>p</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">I(X,Y)=\sum_{x\in X}\sum_{y\in Y}p(x,y)\log\frac{p(x,y)}{p(x)p(y)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.857444em;vertical-align:-1.430444em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.430444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><ul><li>熵与互信息的关系</li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>−</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">/</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>−</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mi mathvariant="normal">/</mi><mi>X</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>+</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>−</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi>Y</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}I(X,Y)&amp;=H(X)-H(X/Y)=H(Y)-H(Y/X)\\&amp;=H(X)+H(Y)-H(XY)\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000000000000004em;vertical-align:-1.2500000000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7500000000000002em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2500000000000002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312301833774.png" alt="image-20231230183333590" /></p><h1 id="第3章-古典密码体制"><a class="markdownIt-Anchor" href="#第3章-古典密码体制"></a> 第3章 古典密码体制</h1><h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><ul><li>替换密码/代换密码 --&gt; 用一个符号代替另一个符号<ul><li>单表替换<ul><li>移位代换密码(经典凯撒密码)</li><li>乘数密码 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mi>i</mi><mo>∗</mo><mi>k</mi><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E=i*k(mod \  q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span>，要求(k,q)=1，即可用密钥少于q<ul><li>密钥空间<ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>q</mi><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\varphi(q) - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个密钥，因为这里需要找到与q互素的数字，同时减去1，因为它会使得明文密文相同</li></ul></li></ul></li><li>仿射密码(移位密码和乘数密码的组合)<ul><li>n=26时的可能密钥数为<strong>12*26-1</strong>(乘数密钥空间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mn>26</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(26)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord">2</span><span class="mord">6</span><span class="mclose">)</span></span></span></span>与移位密钥空间26相乘，然后减去其中明文与密文一样的情况)</li></ul></li></ul></li><li>多表替换<ul><li>一次一密(Vernam)</li><li>Playfair密码(密钥空间 <strong>25!</strong>)</li><li>维吉尼亚密码(key长度为m，密钥空间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><msup><mn>6</mn><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">26^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span></span></span></span>)</li><li>Hill密码(key=<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Z</mi><mn>26</mn></msub></mrow><annotation encoding="application/x-tex">Z_{26}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>上的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>n</mi><mo>⋅</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[n \cdot n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">]</span></span></span></span>，空间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><msup><mn>6</mn><mrow><mi>n</mi><mo>⋅</mo><mi>n</mi></mrow></msup></mrow><annotation encoding="application/x-tex">26^{n \cdot n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.674115em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.674115em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">⋅</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span>)<ul><li>这里需要求逆矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mo stretchy="false">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd></mtr></mtable><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k=(\begin{matrix}1&amp;8\\3&amp;7\end{matrix})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.4000000000000004em;vertical-align:-0.9500000000000004em;"></span><span class="mopen">(</span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li>2x2的伴随矩阵求法<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>d</mi><mi>j</mi><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>b</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>c</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">adj\begin{pmatrix}a&amp;b\\c&amp;d\end{pmatrix}=\begin{pmatrix}d&amp;-b\\-c&amp;a\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathnormal">b</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></li><li><a href="https://hstar.me/2020/08/hill-cipher-study/">https://hstar.me/2020/08/hill-cipher-study/</a></li></ul></li></ul></li></ul></li><li>置换密码/换位密码 --&gt; 对符号进行重新排序</li></ul><h2 id="替换密码"><a class="markdownIt-Anchor" href="#替换密码"></a> 替换密码</h2><h3 id="单表替换"><a class="markdownIt-Anchor" href="#单表替换"></a> 单表替换</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312302055134.png" alt="image-20231230205505052" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312302055960.png" alt="image-20231230205530887" /></p><h3 id="多表替换"><a class="markdownIt-Anchor" href="#多表替换"></a> 多表替换</h3><h4 id="维吉尼亚密码"><a class="markdownIt-Anchor" href="#维吉尼亚密码"></a> 维吉尼亚密码</h4><ul><li><p>破解</p><ul><li><p>确定密钥长度d</p><ul><li>Kasiski测试法</li><li>重合指数法</li></ul></li><li><p>确定具体的密钥字</p><ul><li>重合互指数(两种 -&gt; PPT/<a href="https://zhuanlan.zhihu.com/p/386388707">网站</a>)</li></ul></li></ul></li></ul><h4 id="hill密码"><a class="markdownIt-Anchor" href="#hill密码"></a> hill密码</h4><ul><li>明文-密文对分析法：指攻击者不仅获得了若干密文，还得到了密文对应的明文，通过若干明文-密文对分析密钥的方法</li><li>对于希尔密码，其抵抗频率分析攻击的能力非常强，若仅知若干密文是很难破译明文的；但如果知道比密钥长度多的明文-密文对，则破译就相对容易</li></ul><h2 id="置换密码"><a class="markdownIt-Anchor" href="#置换密码"></a> 置换密码</h2><ul><li>明文字符集保持不变，但顺序被打乱</li><li>栏珊密码等</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401030023563.png" alt="image-20240103002322471" /></p><h1 id="第4章-分组密码"><a class="markdownIt-Anchor" href="#第4章-分组密码"></a> 第4章 分组密码</h1><h2 id="des与aes区别"><a class="markdownIt-Anchor" href="#des与aes区别"></a> DES与AES区别</h2><h3 id="des"><a class="markdownIt-Anchor" href="#des"></a> DES</h3><p>特点：</p><ol><li><p>使用了S盒，而S盒现在已经是几乎所有分组密码算法不可缺少的部件</p></li><li><p>迭代分组密码是分组密码的主流设计</p></li><li><p>轮函数结构是Feistel网络，这种结构现在已经是轮函数的经典结构之一</p></li><li><p>算法的第一个和最后一个部件没有密钥的参与，在已知明文攻击之下不起任何安全性作用。以后的分组密码纠正了这个缺点</p></li></ol><p>安全性主要争论：</p><ol><li><p>对DES的S盒、迭代次数、密钥长度等设计准则的争议</p><ul><li>S盒的设计准则还没有完全公开，人们仍然不知道S盒的构造中是否使用了进一步的设计准则</li></ul></li><li><p>DES存在一些<strong>弱密钥和半弱密钥</strong></p></li><li><p>DES的56位密钥无法抵抗穷举攻击</p></li><li><p>代数结构存在互补对称性 -&gt; 选择明文攻击，工作量减少了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>55</mn></msup></mrow><annotation encoding="application/x-tex">2^{55}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span></p></li></ol><p>破译方法：</p><ul><li>差分分析方法<ul><li>一种选择明文攻击</li><li>通过分析特定明文差对结果密文差的影响来获得可能性最大的密钥</li></ul></li><li>线性分析方法<ul><li>寻找一个给定密码算法的有关明文比特、密文比特和密钥比特的有效线性近似表达式，通过选择充分多的明－密文对来分析密钥的某些比特</li></ul></li></ul><h3 id="aes"><a class="markdownIt-Anchor" href="#aes"></a> AES</h3><p>安全性：</p><ul><li><p>避免弱密钥</p><ul><li>AES在设计上不是对称的，其加密和解密过程不一致，这也避免弱密钥的存在</li></ul></li><li><p>差分分析和线性分析</p><ul><li>由于在设计时考虑了这两种攻击的方法，因此AES具有较好的抗击其攻击的能力</li></ul></li><li><p>密钥穷举攻击</p><ul><li>平均需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>127</mn></msup></mrow><annotation encoding="application/x-tex">2^{127}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span></span>次AES运算，计算量是非常大</li></ul></li></ul><p>与DES相比：</p><ol><li>key的长度至少为128位，大于DES</li><li>AES面向字节运算，DES则是面向bit</li><li>AES加解密运算不同，加密器不可以作为解密器，而DES可以</li></ol><h2 id="设计要求"><a class="markdownIt-Anchor" href="#设计要求"></a> 设计要求</h2><ul><li><p><strong>分组长度要足够大</strong></p><ul><li>假设n为分组长度，则要使<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span>足够大，防止明文穷举攻击</li></ul></li><li><p><strong>密钥量要足够大</strong></p><ul><li>防止密钥穷举攻击</li></ul></li><li><p><strong>密码变换要足够复杂</strong></p><ul><li>使攻击者除穷举攻击外，找不到其他简洁的数学攻击方法</li></ul></li><li><p><strong>加密和解密运算简单</strong></p><ul><li>便于软件和硬件的实现</li></ul></li><li><p><strong>无数据扩展和压缩</strong></p></li></ul><h2 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h2><ol><li>速度快，安全性高，易于标准化和硬件实现</li><li>现代实现数据保密性的重要机制，有广泛应用</li><li>是构造伪随机数生成器，hash函数的方法</li></ol><h2 id="基本准则"><a class="markdownIt-Anchor" href="#基本准则"></a> 基本准则</h2><h3 id="扩散"><a class="markdownIt-Anchor" href="#扩散"></a> 扩散</h3><p>​扩散原则(移位)：密钥或明文的每一比特变化影响密文的许多比特的变化，以便隐蔽明文的统计特性(形象的称为雪崩效应)</p><h3 id="混淆"><a class="markdownIt-Anchor" href="#混淆"></a> 混淆</h3><p>​混淆原则(替代)：又称混乱原则，指密钥和明文以及密文之间的依赖关系尽可能的复杂化，以防通过统计分析法进行破译(如使用非线性变换)</p><h3 id="乘积密码"><a class="markdownIt-Anchor" href="#乘积密码"></a> 乘积密码</h3><p>​如果密码体制R不是一个幂等的密码体制(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup><mo>=</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">R^{2}=R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>)，则对 n &gt; 1，迭代密码体制<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>R</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">R^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span>的安全性可能会比R强</p><ul><li>典型的迭代密码定义了一个轮函数和一个密钥编排方案，对明文的加密将经过多轮迭代</li><li>分组密码设计中主要使用两种迭代网络结构<ul><li>Feistel网络 --&gt; DES</li><li>SP网络 --&gt; S代换和P置换交替进行多次迭代形成的网络</li></ul></li></ul><h4 id="feistel网络"><a class="markdownIt-Anchor" href="#feistel网络"></a> Feistel网络</h4><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312302146068.png" alt="image-20231230214652003" /></p><h4 id="sp网络"><a class="markdownIt-Anchor" href="#sp网络"></a> SP网络</h4><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312311042680.png" alt="image-20231231104231542" /></p><ul><li>S变换起混淆的作用； P变换起扩散的作用</li></ul><h3 id="设计准则"><a class="markdownIt-Anchor" href="#设计准则"></a> 设计准则</h3><h4 id="论函数f的设计准则"><a class="markdownIt-Anchor" href="#论函数f的设计准则"></a> 论函数F的设计准则</h4><ul><li>轮函数F是分组密码的核心，是分组密码中单轮加解密函数，其基本准则：<ul><li>非线性(主要依赖S盒)</li><li>可逆性(能够实现解密)</li><li>雪崩效应</li><li>位独立(要求输入中某一位的变化，引起输出中其他位的变化应是彼此无关的)</li></ul></li><li>其主要性能指标是安全性、速度、灵活性</li></ul><h4 id="子密钥的生成方法"><a class="markdownIt-Anchor" href="#子密钥的生成方法"></a> 子密钥的生成方法</h4><ul><li>密钥的生成是从初始(种子)密钥产生迭代的各轮要使用的子密钥的算法。轮函数F的功能是在子密钥的参与和控制下实现的，其评价指标：<ul><li>实现简单、速度满足要求</li><li>种子密钥的所有比特对每个子密钥比特的影响应大致相同</li><li>密钥和密文之间符合雪崩效应准则</li><li>没有弱密钥或弱密钥容易确定</li></ul></li></ul><h4 id="迭代的轮数"><a class="markdownIt-Anchor" href="#迭代的轮数"></a> 迭代的轮数</h4><ul><li>一般来说，分组密码迭代轮数越多，密码分析越困难，但也不是追求迭代轮数越多越好，过多会使输入与输出的关系复杂化，而安全性增强不明显</li><li>决定迭代轮数的准则：使密码分析的难度大于简单穷举搜索攻击的难度</li><li>分组密码迭代轮数一般采用8，10，12，16，20的居多</li></ul><h2 id="des-2"><a class="markdownIt-Anchor" href="#des-2"></a> DES</h2><p>DES的优点和缺点被密码学界淋漓尽致地讨论，举例如下：</p><ol><li><p>使用了S盒，而S盒现在已经是几乎所有分组密码算法不可缺少的部件</p></li><li><p>迭代分组密码是分组密码的主流设计</p></li><li><p>轮函数结构是Feistel网络，这种结构现在已经是轮函数的经典结构之一</p></li><li><p>算法的第一个和最后一个部件没有密钥的参与，在已知明文攻击之下不起任何安全性作用。以后的分组密码纠正了这个缺点</p></li></ol><h3 id="算法原理"><a class="markdownIt-Anchor" href="#算法原理"></a> 算法原理</h3><p>P置换-&gt;16轮加密-&gt;ip逆置换</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401040844070.png" alt="image-20240104084429955" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401040844457.png" alt="image-20240104084419310" /></p><h3 id="des的安全性"><a class="markdownIt-Anchor" href="#des的安全性"></a> DES的安全性</h3><h4 id="主要争论"><a class="markdownIt-Anchor" href="#主要争论"></a> 主要争论</h4><ol><li><p>对DES的S盒、迭代次数、密钥长度等设计准则的争议</p><ul><li>S盒的设计准则还没有完全公开，人们仍然不知道S盒的构造中是否使用了进一步的设计准则</li></ul></li><li><p>DES存在一些<strong>弱密钥和半弱密钥</strong></p></li><li><p>DES的56位密钥无法抵抗穷举攻击</p></li><li><p>代数结构存在互补对称性 -&gt; 选择明文攻击，工作量减少了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>55</mn></msup></mrow><annotation encoding="application/x-tex">2^{55}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span></p></li></ol><h4 id="弱密钥"><a class="markdownIt-Anchor" href="#弱密钥"></a> 弱密钥</h4><ul><li><p>给定初始密钥K生成子密钥时，将种子密钥分成两个部分，如果<strong>K使得这两部分的每一部分的所有位置全为0或1</strong>，则经子密钥产生器产生的各个子密钥都相同，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>1</mn></msub><mo>=</mo><msub><mi>K</mi><mn>2</mn></msub><mo>=</mo><mo>…</mo><mo>…</mo><mo>=</mo><msub><mi>K</mi><mn>16</mn></msub></mrow><annotation encoding="application/x-tex">K_{1}=K_{2}=……=K_{16}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则称密钥K为弱密钥(共有4个)</p></li><li><p>若K为弱密钥，则对任意的64比特信息有：</p></li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>E</mi><mi>k</mi></msub><mo stretchy="false">(</mo><msub><mi>E</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mtext> 和 </mtext><msub><mi>D</mi><mi>k</mi></msub><mo stretchy="false">(</mo><msub><mi>D</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">E_k(E_k(m))=m\text{ 和 }D_k(D_k(m))=m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">和</span><span class="mord"> </span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span></span></p><h4 id="半弱密钥"><a class="markdownIt-Anchor" href="#半弱密钥"></a> 半弱密钥</h4><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312311541753.png" alt="image-20231231154113638" /></p><h4 id="互补性"><a class="markdownIt-Anchor" href="#互补性"></a> 互补性</h4><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312311541525.png" alt="image-20231231154147487" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312311541210.png" alt="image-20231231154159157" /></p><h4 id="破译方法"><a class="markdownIt-Anchor" href="#破译方法"></a> 破译方法</h4><ul><li>差分分析方法<ul><li>一种选择明文攻击</li><li>通过分析特定明文差对结果密文差的影响来获得可能性最大的密钥</li></ul></li><li>线性分析方法<ul><li>寻找一个给定密码算法的有关明文比特、密文比特和密钥比特的有效线性近似表达式，通过选择充分多的明－密文对来分析密钥的某些比特</li></ul></li></ul><h3 id="多重des"><a class="markdownIt-Anchor" href="#多重des"></a> 多重DES</h3><h4 id="2des"><a class="markdownIt-Anchor" href="#2des"></a> 2DES</h4><ul><li>中途相遇攻击</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312311546928.png" alt="image-20231231154608859" /></p><h4 id="3des"><a class="markdownIt-Anchor" href="#3des"></a> 3DES</h4><ul><li>4种方式</li><li>密钥空间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>112</mn></msup></mrow><annotation encoding="application/x-tex">2^{112}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></li></ul><h2 id="aes-2"><a class="markdownIt-Anchor" href="#aes-2"></a> AES</h2><h3 id="算法流程"><a class="markdownIt-Anchor" href="#算法流程"></a> 算法流程</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312312042715.png" alt="image-20231231204239629" /></p><h3 id="有限域算法"><a class="markdownIt-Anchor" href="#有限域算法"></a> 有限域算法</h3><ul><li>加法：字节异或</li><li>乘法：多项式相乘，然后其中加法异或，最后模不可约多项式(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>8</mn></msup><mo>+</mo><msup><mi>x</mi><mn>4</mn></msup><mo>+</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x^{8}+x^{4}+x^{3}+x+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>)得到的最高项指数小于8的余数即为所求。</li></ul><h3 id="安全性"><a class="markdownIt-Anchor" href="#安全性"></a> 安全性</h3><ul><li><p>弱密钥</p><ul><li>AES在设计上不是对称的，其加密和解密过程不一致，这也避免弱密钥的存在</li></ul></li><li><p>差分分析和线性分析</p><ul><li>由于在设计时考虑了这两种攻击的方法，因此AES具有较好的抗击其攻击的能力</li></ul></li><li><p>密钥穷举攻击</p><ul><li>平均需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>127</mn></msup></mrow><annotation encoding="application/x-tex">2^{127}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span></span>次AES运算，计算量是非常大</li></ul></li></ul><h2 id="工作模式"><a class="markdownIt-Anchor" href="#工作模式"></a> 工作模式</h2><ol><li>电码本模式(ECB ，Electronic Code Book)</li><li>密码分组链接模式(CBC ，Cipher Block Chaining)</li><li>输出反馈模式(OFB，Output Feedback)</li><li>密码反馈模式(CFB，Cipher Feedback)</li><li>计数器模式(CTR，Counter)</li></ol><h3 id="ecb"><a class="markdownIt-Anchor" href="#ecb"></a> ECB</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312312325409.png" alt="image-20231231232510271" /></p><p>​特点：</p><ol><li>操作简单，主要用于内容较短且随机的报文的加密；</li><li>相同明文(在相同密钥下)得出相同的密文，即明文中的重复内容将在密文中表现出来，容易实现统计分析攻击、分组重放攻击和代换攻击；</li><li>链接依赖性：各组的加密都独立于其它分组，可实现并行处理；</li><li>错误传播：单个密文分组中有一个或多个比特错误<strong>只会影响该分组的解密结果</strong></li></ol><h3 id="cbc"><a class="markdownIt-Anchor" href="#cbc"></a> CBC</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312312325202.png" alt="image-20231231232536160" /></p><p>特点：</p><ol><li>一种反馈机制在分组密码中的应用，每个密文分组不仅依赖于产生它的明文分组，还依赖于它前面的所有分组；</li><li>相同的明文，即使相同的密钥下也会得到不同的密文分组，隐藏了明文的统计特性；</li><li>链接依赖性：对于一个正确密文分组的正确解密要求它之前的那个密文分组也正确，不能实现并行处理；</li><li>错误传播：密文分组中的一个单比特错误会影响到<strong>本组和其后分组</strong>的解密，错误传播为两组；</li><li>初始化向量IV不需要保密，它可以明文形式与密文一起传送</li></ol><h3 id="cfb"><a class="markdownIt-Anchor" href="#cfb"></a> CFB</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401040900607.png" alt="image-20240104090054495" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401040901868.png" alt="image-20240104090105780" /></p><p>CFB的优点：自同步能力强，可以处理任意长度的消息<br />CFB的缺点：</p><ol><li>明文某一组中有错，使以后的密文组都受影响，但经解密后，除原有误的一组外，其后各组都正确地恢复</li><li>密文里的一位错误会引起明文的一个单独错误，此错误进入移位寄存器，导致密文成为无用信息，直到该错误从移位寄存器中移出</li></ol><h3 id="ofb"><a class="markdownIt-Anchor" href="#ofb"></a> OFB</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401040901604.png" alt="image-20240104090124496" /></p><ul><li>可加密任意长度的数据(即不需要进行分组填充)，<strong>没有错误传播</strong>，适于加密冗余度较大的数据、语音和图像数据，但对密文的篡改难以检测</li><li>失去同步是致命的</li></ul><h3 id="ctr"><a class="markdownIt-Anchor" href="#ctr"></a> CTR</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401010036210.png" alt="image-20240101003645101" /></p><p>CTR模式的特点：</p><ol><li>随机访问特性：可以随机的对任意一个密文分组进行解密，对该密文分组的处理与其它密文无关</li><li>高效率：能并行处理; 可以提前进行预处理，这也可以极大的提高处理效率</li><li>可以处理任意长度的数据，而且加解密过程仅涉及加密运算，不涉及解密运算，因此不用实现解密算法</li></ol><h3 id="比较和使用"><a class="markdownIt-Anchor" href="#比较和使用"></a> 比较和使用</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401010037555.png" alt="image-20240101003739450" /></p><table><thead><tr><th>模式</th><th><strong>描述</strong></th><th><strong>特点</strong></th><th><strong>用途</strong></th></tr></thead><tbody><tr><td><strong>ECB</strong></td><td><strong>每个明文组独立地以同一密钥加密</strong></td><td>文明相同，密文相同；操作简单，容易受到重复和代换攻击；无差错传播</td><td>传送短数据(如一个加密密钥)</td></tr><tr><td><strong>CBC</strong></td><td><strong>加密算法的输入是当前明文组和前一密文组</strong></td><td>初始向量IV保密和完整性，密文差错传播</td><td>传输数据分组；认证</td></tr><tr><td><strong>CTR</strong></td><td><strong>加密算法的输入为当前计数器的值，该输出值与当前明文异或以产生密文</strong></td><td>只需加密，没有解密；简单，可预处理，并行处理</td><td>实时性和速度要求比较高的加密场合</td></tr><tr><td><strong>OFB</strong></td><td><strong>与CFB相似，不同之处是本次加密算法的输入为前一次加密算法的输出</strong></td><td>分组密码算法作为一个密钥流产生器，对于密文被篡改难以进行检测</td><td>有挠信道上(如卫星通讯)传送数据流</td></tr><tr><td><strong>CFB</strong></td><td><strong>每次只处理输入的j比特，将上一次密文用作加密算法的输入以产生伪随机输出，该输出与当前明文异或以产生密文</strong></td><td>有差错传播</td><td>传送数据流，认证</td></tr></tbody></table><h1 id="第5章-序列密码"><a class="markdownIt-Anchor" href="#第5章-序列密码"></a> 第5章 序列密码</h1><p>​流密码(也称为序列密码)是模仿一次一密系统的尝试：从一个短的密钥产生一个随机的密钥序列</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011042078.png" alt="image-20240101104249927" /></p><h2 id="分类-2"><a class="markdownIt-Anchor" href="#分类-2"></a> 分类</h2><h3 id="同步序列密码"><a class="markdownIt-Anchor" href="#同步序列密码"></a> 同步序列密码</h3><p>指密钥流的产生需要收发双方进行同步，密钥流完全独立于消息流</p><p>特点：</p><ul><li>无错误传播：各符号之间真正独立。一个传播错误只影响一个符号，不会影响到后继的符号(篡改密文位)</li><li>同步：发送方和接收方必须保持精确的、用同样的密钥并作用在同样的位置上，才能正确解密(插入、删除密文位将导致失去同步，导致解密错误)</li></ul><h3 id="自同步序列密码"><a class="markdownIt-Anchor" href="#自同步序列密码"></a> 自同步序列密码</h3><p>指收发双方中的任何一方，其密钥流的产生依赖于密文流</p><p>特点：</p><ul><li>有限错误传播：设密钥序列产生器具有n位存储，则一个符号的传输错误只影响到后面n符号的解密</li><li>自同步：只要接收方连续收到n个正确的密文符号，密钥序列产生器便会自动地恢复同步</li><li>消除明文统计特性</li></ul><h1 id="第6章-hash函数和消息认证"><a class="markdownIt-Anchor" href="#第6章-hash函数和消息认证"></a> 第6章 Hash函数和消息认证</h1><h2 id="hash函数"><a class="markdownIt-Anchor" href="#hash函数"></a> Hash函数</h2><p>Hash函数(杂凑函数/散列函数)是将任意长的消息M变换为较短的、固定长度的值H(M)的不可逆的单向密码体制</p><h3 id="安全性-2"><a class="markdownIt-Anchor" href="#安全性-2"></a> 安全性</h3><p>敌手的目标：攻击者的主要目标不是<strong>恢复原始的明文</strong>，而是用非法消息替代合法消息进行伪造和欺骗，对哈希函数的攻击也是寻找碰撞的过程，来进行伪造和欺骗</p><h4 id="基本攻击方法"><a class="markdownIt-Anchor" href="#基本攻击方法"></a> 基本攻击方法</h4><ol><li>穷举攻击：能对任何类型的Hash函数进行攻击最典型方法是“<strong>生日攻击</strong>”：给定初值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H_{0}=H(M)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mclose">)</span></span></span></span>，寻找<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>M</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo mathvariant="normal">≠</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">M^{\prime}\neq M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>，使<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><msup><mi>M</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo>=</mo><msub><mi>H</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">h(M^{\prime})=H_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>密码分析法：依赖于对Hash函数的结构和代数性质分析，采用针对Hash函数弱性质的方法进行攻击。这类攻击方法有<strong>中间相遇攻击、修正分组攻击和差分分析</strong>等</li></ol><h4 id="生日攻击碰撞"><a class="markdownIt-Anchor" href="#生日攻击碰撞"></a> 生日攻击(碰撞)</h4><ul><li>抗弱碰撞–第1类生日问题：假设已经知道A的生日，问至少有多少个人在一起时，至少以1/2的概率使有一个人和A的生日相同？</li><li>抗强碰撞–第2类生日问题：至少有多少个人在一起时，能保证至少以1/2的概率存在2个人有相同的生日？</li><li>假定: 一年有365天，且所有人的生日均匀分布于365天中</li></ul><h2 id="消息认证码"><a class="markdownIt-Anchor" href="#消息认证码"></a> 消息认证码</h2><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011111814.png" alt="image-20240101111101693" /></p><h3 id="主要构造"><a class="markdownIt-Anchor" href="#主要构造"></a> 主要构造</h3><p>基于分组密码</p><p>基于带密钥的Hash函数-HMAC</p><h1 id="第78章-公钥密码体制及签名"><a class="markdownIt-Anchor" href="#第78章-公钥密码体制及签名"></a> 第7/8章 公钥密码体制及签名</h1><h2 id="公钥密码体制"><a class="markdownIt-Anchor" href="#公钥密码体制"></a> 公钥密码体制</h2><h3 id="介绍-2"><a class="markdownIt-Anchor" href="#介绍-2"></a> 介绍</h3><p>对称密码体制中，通信双方共享密钥，因此</p><ol><li>接收方可以伪造原文—不能实现<strong>鉴别认证</strong></li><li>发送方也可以否认—不能实现<strong>不可否认性</strong></li></ol><p>公钥密码(非对称密码)：每个用户都分别拥有两个密钥：加密密钥(公钥)与解密密钥(私钥) ，两者并不相同，且由加密密钥得到解密密钥在计算上不可行。加密密钥是公开的</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011124631.png" alt="image-20240101112412521" /></p><h3 id="单向陷门函数"><a class="markdownIt-Anchor" href="#单向陷门函数"></a> 单向陷门函数</h3><p>单向陷门函数f：</p><ol><li>给出f定义域中的任意元素x,计算f(x)是容易的</li><li>给出y=f(x)中的y，计算x：<ol><li>若知道设计函数f时结合进去的某种信息(称为陷门Trapdoor)，则x容易计算；</li><li>若不知道该陷门信息，则x难以计算</li></ol></li></ol><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011126637.png" alt="image-20240101112611533" /></p><h2 id="数字签名"><a class="markdownIt-Anchor" href="#数字签名"></a> 数字签名</h2><ul><li><p>数字签名的目的：保证<strong>信息的完整性、认证性和不可否认性</strong>，即消息没有被篡改，而且签名也没有被篡改，消息只能始发于所声称的一方。一个完善的签名方案应满足以下三个条件：</p><ul><li>不可否认性：签名者事后不能否认或抵赖自己的签名</li><li>不可伪造性：其他任何人均不能伪造签名，也不能对接收或发送的信息进行篡改、伪造和冒充</li><li>公正的仲裁：若当事双方对签名真伪发生争执时，能通过公正的仲裁者验证签名来确定其真伪</li></ul></li><li><p>以公钥密码为基础的数字签名算法才能具有如此强大的信息安全功能</p></li></ul><h3 id="签名方案一"><a class="markdownIt-Anchor" href="#签名方案一"></a> 签名方案一</h3><ul><li>直接对于消息m进行签名，对事先设定的消息m，签名消息(m，s)具有<strong>身份唯一性</strong>和<strong>不可伪造性</strong></li><li>此时攻击者伪造的签名经过E之后就不是原来的信息，所以需要保证合法签名消息(m,s)中的消息m必须是有意义的明文，而不是乱码</li></ul><h3 id="签名方案二"><a class="markdownIt-Anchor" href="#签名方案二"></a> 签名方案二</h3><ul><li>对消息m进行hash，发送s = D(H(m),k)，验证H(m) = E(s, z)</li></ul><p>两种方案都不能抵抗重放攻击</p><h2 id="rsa"><a class="markdownIt-Anchor" href="#rsa"></a> RSA</h2><p>该算法的数学基础是初等数论中的<strong>欧拉定理</strong>，其<strong>安全性基于大整数因子分解的困难性</strong></p><h3 id="算法描述"><a class="markdownIt-Anchor" href="#算法描述"></a> 算法描述</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011126840.png" alt="image-20240101112647798" /></p><p>​正确性证明</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011127678.png" alt="image-20240101112706636" /></p><p>​注意素数生成和快速模运算</p><ul><li><p>一般的，选取一个素数的过程如下：</p><ol><li><p>随机选一个奇数n(如使用伪随机数产生器)</p></li><li><p>用某种概率性算法(如Miller-Rabin算法)对n进行一次素性检验，如果n没有通过检验，转到步骤</p></li><li><p>重复步骤2足够多次，如果n都通过了检测，则认为n为素数</p></li></ol></li><li><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011201994.png" alt="image-20240101120103894" /></p></li></ul><h3 id="对rsa的攻击"><a class="markdownIt-Anchor" href="#对rsa的攻击"></a> 对RSA的攻击</h3><ul><li>针对n分解的攻击<ul><li>试除法</li><li>因子分解法</li><li>二次筛法<ul><li><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011451046.png" alt="image-20240101145115985" /></li></ul></li></ul></li><li>循环攻击<ul><li><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011451304.png" alt="image-20240101145141251" /></li><li>需要p-1和q-1都有大的素因子</li></ul></li><li>同模攻击</li><li>选择密文攻击<ul><li><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011502436.png" alt="image-20240101150200380" /></li><li><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011502912.png" alt="image-20240101150210841" /></li></ul></li><li>低加密指数攻击</li><li>时间攻击</li></ul><h3 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h3><p>综上所述，使用RSA体制时必须注意以下问题：</p><ul><li>选择素数p和q时，应使其欧拉函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span>的最小公倍数尽可能大(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span> 有大的素因子)。最小公倍数越大，幂剩余函数的周期就越长—<strong>避免循环攻击</strong></li><li>密钥中的各项参数应选得足够大—<strong>避免穷举攻击</strong></li><li>在同一个通信网络中，不同的用户不应该使用共同的模数—<strong>避免同模攻击</strong></li></ul><h3 id="rsa签名"><a class="markdownIt-Anchor" href="#rsa签名"></a> RSA签名</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011638616.png" alt="image-20240101163847527" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011639246.png" alt="image-20240101163925205" /></p><h3 id="对rsa签名的攻击"><a class="markdownIt-Anchor" href="#对rsa签名的攻击"></a> 对RSA签名的攻击</h3><h4 id="不采用hash函数"><a class="markdownIt-Anchor" href="#不采用hash函数"></a> 不采用hash函数</h4><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011702365.png" alt="image-20240101170201310" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011703013.png" alt="image-20240101170343910" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011708556.png" alt="image-20240101170843504" /></p><ul><li>H(M)的另一个作用—加快签名速度对整个消息签名，<ul><li>由于公钥体制速度比较慢，当消息比较长时，签名与验证过程都会相当慢</li><li>对消息的Hash值签名，则无论消息多长，签名都只与Hash值的长度有关</li></ul></li></ul><h2 id="elgamal"><a class="markdownIt-Anchor" href="#elgamal"></a> ElGamal</h2><h3 id="介绍-3"><a class="markdownIt-Anchor" href="#介绍-3"></a> 介绍</h3><ul><li>理解生成元的概念(循环群的生成元，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>o</mi><mi>r</mi><mi>d</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">∣</mi><msubsup><mi>Z</mi><mi>p</mi><mo>∗</mo></msubsup><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">ord(g)=|Z^*_p|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.133108em;vertical-align:-0.383108em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span>)</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011600224.png" alt="image-20240101160054116" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011601930.png" alt="image-20240101160102891" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011602320.png" alt="image-20240101160223262" /></p><p>特点：</p><ol><li>非确定性：由于密文依赖于加密过程中用户A选择的随机数r，所以加密相同的明文可能会产生不同的密文—概率加密</li><li>密文空间大于明文空间：明文空间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>Z</mi><mi>p</mi><mo>∗</mo></msubsup></mrow><annotation encoding="application/x-tex">Z^*_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.071804em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span></span></span></span>，而密文空间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>Z</mi><mi>p</mi><mo>∗</mo></msubsup><mo>∗</mo><msubsup><mi>Z</mi><mi>p</mi><mo>∗</mo></msubsup></mrow><annotation encoding="application/x-tex">Z^*_p * Z^*_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.071804em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.071804em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span></span></span></span></li></ol><h3 id="安全性-3"><a class="markdownIt-Anchor" href="#安全性-3"></a> 安全性</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011606275.png" alt="image-20240101160644189" /></p><h3 id="攻击方法"><a class="markdownIt-Anchor" href="#攻击方法"></a> 攻击方法</h3><h4 id="大步-小步法"><a class="markdownIt-Anchor" href="#大步-小步法"></a> 大步-小步法</h4><p><a href="https://www.cnblogs.com/CaCO3/p/16057939.html">【算法笔记】Baby Step Giant Step(BSGS)及其扩展 - CaO氧化钙 - 博客园 (cnblogs.com)</a>–&gt;一个简单理解，但是这里得记住例题</p><p>这里例题看书，它原理的小步和例题的小步不一样，注意这个区别</p><h4 id="指数积分法"><a class="markdownIt-Anchor" href="#指数积分法"></a> 指数积分法</h4><p>不太理解，记住例题。主要是选取合适的素数，若是选不到，可能计算量也很大</p><h3 id="签名方案"><a class="markdownIt-Anchor" href="#签名方案"></a> 签名方案</h3><h4 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h4><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011709237.png" alt="image-20240101170940150" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401011709413.png" alt="image-20240101170952361" /></p><h4 id="安全性-4"><a class="markdownIt-Anchor" href="#安全性-4"></a> 安全性</h4><p>书P225</p><ol><li>非确定性数字签名算法，同一消息M的签名依赖于随机数k</li><li>安全性基于有限域上计算离散对数的困难性</li><li>随机数k不能被泄露(已知k可以计算x)</li><li>随机数k不能被重复使用(泄露x)</li><li>多次签名选取的多个k无关联(泄露x)</li><li>不使用Hash函数则易受到攻击</li></ol>]]></content>
    
    
    <categories>
      
      <category>课程复习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>网络攻击与防御</title>
    <link href="/posts/40c678cb.html"/>
    <url>/posts/40c678cb.html</url>
    
    <content type="html"><![CDATA[<h1 id="第1章-网络安全的概念与体系结构"><a class="markdownIt-Anchor" href="#第1章-网络安全的概念与体系结构"></a> 第1章 网络安全的概念与体系结构</h1><h2 id="网络安全的概念"><a class="markdownIt-Anchor" href="#网络安全的概念"></a> 网络安全的概念</h2><p>​<strong>网络安全</strong>是指网络系统的硬件、软件及其系统中的数据受到保护，不因偶然的或者恶意的原因而遭受到破坏、更改、泄露，系统连续可靠正常地运行，网络服务不中断。</p><h2 id="网络安全的属性"><a class="markdownIt-Anchor" href="#网络安全的属性"></a> 网络安全的属性</h2><h3 id="基本属性cia-3"><a class="markdownIt-Anchor" href="#基本属性cia-3"></a> 基本属性(CIA)-3</h3><ul><li>机密性：确保信息不会暴露给未授权的实体或者进程，保证保密性的主要措施是密码技术</li><li>完整性：信息在存储或传输中不被蓄意或偶然地破坏的特征，保证完整性的主要措施密码技术和身份认证技术</li><li>可用性：得到授权的实体在需要时可以访问资源或者服务，信息系统不能拒绝服务，讲求时效性，保护措施是访问控制技术</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312141325227.png" alt="image-20231214132529120" /></p><h3 id="信息保障与安全参考模型rmias-8"><a class="markdownIt-Anchor" href="#信息保障与安全参考模型rmias-8"></a> 信息保障与安全参考模型(RMIAS)-8</h3><p>​机密性、完整性、可用性、不可抵赖性、隐私性、真实性与可信任性、可说明性、可审计性、</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312141326474.png" alt="image-20231214132625436" /></p><h2 id="安全威胁"><a class="markdownIt-Anchor" href="#安全威胁"></a> 安全威胁</h2><p>​**威胁(Threat)**是指任何可能通过未授权的访问、销毁、披露、修改信息以及拒绝服务而对组织或国家产生不利影响的情况或事件</p><h3 id="安全威胁-3"><a class="markdownIt-Anchor" href="#安全威胁-3"></a> 安全威胁-3</h3><ol><li>信息泄露<ul><li>敏感数据在有意或无意中被泄露或丢失</li><li>包括 --&gt; 传输中，存储介质中，建立隐蔽信道窃取</li></ul></li><li>信息破坏<ul><li>以非法手段获得对数据的使用权，删除，修改，插入或重发某些信息，以取得有益于攻击者的响应信息；</li><li>恶意添加、修改数据，以干扰用户的正常使用</li></ul></li><li>拒绝服务<ul><li>执行无关程序使系统响应减慢甚至瘫痪，影响正常用户的使用，甚至使合法用户被排斥而不能得到相应的服务</li></ul></li></ol><h3 id="威胁来源-2"><a class="markdownIt-Anchor" href="#威胁来源-2"></a> 威胁来源-2</h3><ul><li>自然因素<ul><li>包括各种自然灾害、系统环境和场地、电磁干扰、设备老化等</li></ul></li><li>人为因素<ul><li>有意和无意之分；无意，操作、设计失误等；有意，恶意攻击等</li></ul></li></ul><h2 id="网络攻击"><a class="markdownIt-Anchor" href="#网络攻击"></a> 网络攻击</h2><p>​<strong>攻击</strong>指威胁的具体实施</p><h3 id="网络攻击分类"><a class="markdownIt-Anchor" href="#网络攻击分类"></a> 网络攻击分类</h3><h4 id="按安全属性和信息流动情况-5"><a class="markdownIt-Anchor" href="#按安全属性和信息流动情况-5"></a> 按安全属性和信息流动情况-5</h4><ol><li>阻断攻击：拒绝服务攻击，针对可用性的攻击手段，攻击者阻断从信源到信宿的信息流，使信宿无法获取信息</li><li>截取攻击：窃听攻击，攻击者通过物理搭线、拦截数据包、后门、接收辐射信号等方法获取从信源到信宿的信息流</li><li>篡改攻击：非授权者用各种手段对信息系统中的数据进行增加、删除、插入等非授权操作，破坏数据的完整性，以达到其恶意目的</li><li>伪造攻击：伪装攻击，通过出示伪造的凭证来冒充其他对象，进入系统盗窃信息或进行破坏</li><li>重放攻击：当一个消息或部分消息被重复发送时将发生重放攻击</li></ol><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312141342597.png" alt="image-20231214134215531" /></p><h4 id="按ccitt的x800标准划分-2"><a class="markdownIt-Anchor" href="#按ccitt的x800标准划分-2"></a> 按CCITT的X.800标准划分-2</h4><ol><li>被动攻击：不影响系统正常工作情况下获取信息</li><li>主动攻击：威胁到信息的完整性，造成信息破坏</li></ol><h2 id="网络安全体系结构"><a class="markdownIt-Anchor" href="#网络安全体系结构"></a> 网络安全体系结构</h2><h3 id="安全服务-5"><a class="markdownIt-Anchor" href="#安全服务-5"></a> 安全服务-5</h3><ol><li>认证服务<ul><li>分为对等实体鉴别，数据原发鉴别</li></ul></li><li>访问控制服务<ul><li>防止对资源的非授权使用</li></ul></li><li>机密性服务<ul><li>防止数据非授权泄露，应采取信息加密技术</li></ul></li><li>完整性服务<ul><li>主要应对主动威胁，保证信息精确地从信源到信宿</li></ul></li><li>不可否认性服务<ul><li>提供凭证，防止发送者否认或抵赖已发送地信息</li><li>可采取两种形式<ul><li>原发证明抗抵赖</li><li>交付证明抗抵赖</li></ul></li></ul></li></ol><h3 id="安全机制-8"><a class="markdownIt-Anchor" href="#安全机制-8"></a> 安全机制-8</h3><ol><li>加密机制</li><li>数字签名机制</li><li>访问控制机制</li><li>信息完整性机制</li><li>鉴别交换机制</li><li>业务量填充机制</li><li>路由控制机制</li><li>公证机制</li></ol><h3 id="安全服务和安全机制的关系"><a class="markdownIt-Anchor" href="#安全服务和安全机制的关系"></a> 安全服务和安全机制的关系</h3><blockquote><p>安全服务由安全机制来实现</p><p>一种安全机制可以实现一种或多种安全服务</p><p>一种安全服务可以由一种或多种安全机制来实现</p></blockquote><h3 id="网络安全等级保护"><a class="markdownIt-Anchor" href="#网络安全等级保护"></a> 网络安全等级保护</h3><ul><li><p>第一级：用户自主保护级</p></li><li><p>第二级：系统审计保护级</p></li><li><p>第三级：安全标识保护级</p></li><li><p>第四级：结构化保护级</p></li><li><p>第五级：访问验证保护级</p></li></ul><h1 id="第2章-黑客攻击流程与渗透测试"><a class="markdownIt-Anchor" href="#第2章-黑客攻击流程与渗透测试"></a> 第2章 黑客攻击流程与渗透测试</h1><h2 id="黑客攻击流程"><a class="markdownIt-Anchor" href="#黑客攻击流程"></a> 黑客攻击流程</h2><h3 id="攻击流程"><a class="markdownIt-Anchor" href="#攻击流程"></a> 攻击流程</h3><p>踩点 -&gt; 扫描 -&gt; 查点 -&gt; 访问 -&gt; 提权 -&gt; 窃取信息 -&gt; 掩踪灭迹 -&gt; 创建后门 -&gt; 拒绝服务</p><ul><li>踩点：收集信息</li><li>扫描：评估系统，寻找可攻击范围</li><li>查点：寻找系统中的用户信息以及可获得的共享资源</li><li>攻击实施：利用收集的信息，针对性访问目标系统</li><li>攻击善后阶段：掩踪灭迹，创建后门</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312141416531.png" alt="image-20231214141630481" /></p><h3 id="踩点"><a class="markdownIt-Anchor" href="#踩点"></a> 踩点</h3><ul><li><p>**踩点(Footprinting)**是指通过合法或非法的手段，有计划有步骤的信息情报搜集，从而了解目标网络的环境和安全防御设施的状况，得到目标网络的剖析图。</p></li><li><p>踩点的目的可以归纳为：获得目标网络的完整剖析图，寻找到目标网络中可能存在的薄弱环节，为进一步的攻击行动提供指引</p></li><li><p>踩点收集信息的途径</p><ul><li><p>公共渠道获取信息</p></li><li><p>WHOIS查询</p></li><li><p>DNS查询</p></li><li><p>网络侦查</p></li></ul></li></ul><h3 id="扫描"><a class="markdownIt-Anchor" href="#扫描"></a> 扫描</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312141511611.png" alt="image-20231214151121545" /></p><p>基本方法：ping 扫描</p><h3 id="查点"><a class="markdownIt-Anchor" href="#查点"></a> 查点</h3><p>​<strong>查点(enumeration)</strong>：对识别出来的服务进行更为充分的探查；</p><p>​寻找的信息包括： 用户账号名(用于随后的口令猜测攻击)，错误配置的共享资源(如不安全的文件共享)，具有已知安全性漏洞的旧版本软件(如存在远程缓冲区溢出的web服务器)</p><h3 id="攻击实施"><a class="markdownIt-Anchor" href="#攻击实施"></a> 攻击实施</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312141514429.png" alt="image-20231214151404378" /></p><h3 id="攻击善后阶段"><a class="markdownIt-Anchor" href="#攻击善后阶段"></a> 攻击善后阶段</h3><p>​掩踪灭迹，创建后门</p><h2 id="渗透测试"><a class="markdownIt-Anchor" href="#渗透测试"></a> 渗透测试</h2><p>​<strong>渗透测试(Penetration Testing)</strong>：一种通过模拟攻击者的技术与方法，以充分挖掘和暴露系统的弱点，挫败目标系统的安全控制措施，取得系统的访问控制权，并发现安全隐患的<strong>安全测试与评估方式</strong>。</p><h3 id="分类-3"><a class="markdownIt-Anchor" href="#分类-3"></a> 分类-3</h3><ul><li><p>白盒测试：渗透人员拥有客户所有知识情况下的渗透测试</p></li><li><p>黑盒测试：渗透人员不了解大部分知识情况下的渗透测试</p></li><li><p>灰盒测试：介于白盒和黑盒之间，渗透人员了解部分知识情况下的渗透测试</p></li></ul><h3 id="渗透测试七个阶段-7"><a class="markdownIt-Anchor" href="#渗透测试七个阶段-7"></a> 渗透测试七个阶段-7</h3><ul><li><p>前期交互：确定测试范围及限制条件</p></li><li><p>情报搜集：获取网络配置及系统信息</p></li><li><p>威胁建模：利用得到的信息规划攻击</p></li><li><p>漏洞分析：综合情报信息找出可攻击的点</p></li><li><p>渗透攻击：实施攻击获得系统的访问控制权</p></li><li><p>后渗透攻击：对目标组织的具体业务进行攻击</p></li><li><p>报告：汇总渗透过程并给出防御办法</p></li></ul><h3 id="渗透测试和入侵的异同-2"><a class="markdownIt-Anchor" href="#渗透测试和入侵的异同-2"></a> 渗透测试和入侵的异同-2</h3><h4 id="相同-3"><a class="markdownIt-Anchor" href="#相同-3"></a> 相同-3</h4><p>1.入侵和渗透在操作流程上类似</p><p>2.都是为了获取系统权限进行攻击</p><p>3.都是利用漏洞进行攻击和突破</p><h4 id="不同-6"><a class="markdownIt-Anchor" href="#不同-6"></a> 不同-6</h4><p>1.操作上类似，但是本质不同</p><p>2.入侵是以破坏或者盗取信息为目的，渗透是以发现和修复漏洞为目的</p><p>3.入侵会造成损失，渗透是为了避免损失</p><p>4.入侵的是黑帽子，渗透的是白帽子</p><p>5.入侵是非法的，渗透是合法的</p><p>6.入侵是攻击，渗透是防御</p><p>主要是在于：是否有授权；挖到漏洞了以后是否对漏洞进行了利用</p><h1 id="第3章-信息收集与防御"><a class="markdownIt-Anchor" href="#第3章-信息收集与防御"></a> 第3章 信息收集与防御</h1><h2 id="网络扫描技术概述"><a class="markdownIt-Anchor" href="#网络扫描技术概述"></a> 网络扫描技术概述</h2><p>​<strong>扫描的基本步骤</strong>：确定目标系统是否真实存在；确定目标系统上哪些服务正在运行或监听；探查操作系统</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312141619751.png" alt="image-20231214161914655" /></p><h3 id="扫描分类"><a class="markdownIt-Anchor" href="#扫描分类"></a> 扫描分类</h3><p><strong>按照扫描的目的</strong>，扫描可以分为：</p><p>主机扫描、端口扫描、漏洞扫描</p><ul><li>主机扫描：<ul><li>确定目标系统主机是否可达的过程，主要用于确定目标系统是否存活</li><li>基本方法：ping扫描，nmap -sP</li></ul></li><li>端口扫描：<ul><li>主动连接目标系统的TCP和UDP端口以确定哪些服务正在运行或处于监听状态</li><li>主要目的：<ul><li>确定运行的TCP/UDP服务</li><li>确定操作系统的具体类型</li><li>确定提供服务的应用程序名称和版本</li></ul></li></ul></li></ul><h3 id="掌握基本的端口扫描及指令"><a class="markdownIt-Anchor" href="#掌握基本的端口扫描及指令"></a> 掌握基本的端口扫描及指令</h3><h4 id="总览"><a class="markdownIt-Anchor" href="#总览"></a> 总览</h4><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312141624102.png" alt="image-20231214162419986" /></p><h4 id="tcp连接扫描"><a class="markdownIt-Anchor" href="#tcp连接扫描"></a> TCP连接扫描</h4><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312141623450.png" alt="image-20231214162358400" /></p><h4 id="tcp-syn扫描"><a class="markdownIt-Anchor" href="#tcp-syn扫描"></a> TCP SYN扫描</h4><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312141625784.png" alt="image-20231214162546746" /></p><h4 id="tcp-fin扫描"><a class="markdownIt-Anchor" href="#tcp-fin扫描"></a> TCP FIN扫描</h4><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312141626376.png" alt="image-20231214162606330" /></p><ul><li>这里两个变体，Xmas就是把六个标记位(ACK、FIN、RST、SYN、URG、PSH)为全部置1，而Null则是全部置0。这里都是目标端口关闭才返回一个RST包</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312141629793.png" alt="image-20231214162951744" /></p><ul><li>两个变体之所以进行标志位的设置是为了躲过FIN标记检测器(简单的过滤器和访问控制列表)的检测。</li><li>都主要用于UNIX/Linux/BSD的TCP/IP的协议栈；不适用于Windows系统</li></ul><h4 id="其余扫描"><a class="markdownIt-Anchor" href="#其余扫描"></a> 其余扫描</h4><p>[CH03-信息收集与防御-1.pdf](file://E:/Data/大学/大三/大三上/网络攻击与防御/课件/CH03-信息收集与防御-1.pdf)</p><ul><li>TCP ACK P31<ul><li>不能判断端口开放还是关闭，但是可以扫描防火墙配置</li><li>对于没有过滤的端口，若返回RST数据包的TTL值小于等于64，则端口开放。无法用于Win，win的TTL值原始值是128，判断不可靠</li></ul></li><li>TCP窗口扫描 P34<ul><li>发送ACK标识数据包，判断返回的RST数据包窗口大小，不为零：端口开放；为零：端口关闭</li></ul></li><li>SYN/ACK扫描 P35<ul><li>发送 SYN/ACK数据包，目标主机报错，判断为错误连接。若是端口开放，返回RST信息</li></ul></li><li>TCP Maimon扫描 P36<ul><li>发送 FIN/ACK数据包，其余与FIN类似</li></ul></li><li><h2 id="udp扫描"><a class="markdownIt-Anchor" href="#udp扫描"></a> UDP扫描</h2></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312141630853.png" alt="image-20231214163005813" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312141630304.png" alt="image-20231214163013270" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312141641747.png" alt="image-20231214164134672" /></p><h3 id="操作系统探查的主要技术"><a class="markdownIt-Anchor" href="#操作系统探查的主要技术"></a> 操作系统探查的主要技术</h3><p>​主要为了尽可能详细地查明目标操作系统类型、版本等重要信息</p><ul><li>旗标抓取技术</li><li>协议栈指纹分析技术</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312141643675.png" alt="image-20231214164343631" /></p><h4 id="协议栈指纹分析技术"><a class="markdownIt-Anchor" href="#协议栈指纹分析技术"></a> 协议栈指纹分析技术</h4><p>​可以将不同操作系统实现地不同之处作为“指纹”来判别操作系统类型，根据是否主动向目标系统发送数据包划分为以下两类</p><ul><li><p>主动式协议栈指纹分析技术</p><ul><li>向目标系统发送数据包去探查网络协议栈的独有特点，推测操作系统</li></ul></li><li><p>被动式协议栈指纹分析技术</p><ul><li>通过被动地监控网络通信推测目标的操作系统</li></ul></li></ul><h4 id="协议栈指纹分析技术的工作原理"><a class="markdownIt-Anchor" href="#协议栈指纹分析技术的工作原理"></a> 协议栈指纹分析技术的工作原理</h4><p>不同厂家的IP协议栈实现存在着许多细微的差别</p><p>探查这些差异，就能对目标系统做出有依据的判断</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202312141651410.png" alt="image-20231214165107369" /></p><p>查点：Nessus</p><h3 id="扫描总结"><a class="markdownIt-Anchor" href="#扫描总结"></a> 扫描总结</h3><p><strong>扫描小结：顾军ppt-ch3-2 p48</strong></p><p>[CH03-信息收集与防御-2.pdf](file://E:/Data/大学/大三/大三上/网络攻击与防御/课件/CH03-信息收集与防御-2.pdf)</p><h2 id="查点技术"><a class="markdownIt-Anchor" href="#查点技术"></a> 查点技术</h2><h3 id="服务指纹分析技术"><a class="markdownIt-Anchor" href="#服务指纹分析技术"></a> 服务指纹分析技术</h3><ul><li><p><strong>服务指纹(Service Fingerpringting)分析技术</strong>是一种能够快速有效分析出整个目标网络系统的自动化技术。它可以进一步解释与每一个端口相关联的实际服务，可以获取比扫描更有价值的信息</p></li><li><p>协议栈指纹分析是根据不同的操作系统所独有的协议栈来辨别目标的操作系统；而服务指纹分析技术是用来查点各种特定服务</p></li></ul><h3 id="旗标抓取技术"><a class="markdownIt-Anchor" href="#旗标抓取技术"></a> 旗标抓取技术</h3><ul><li>旗标(banner)是指在第一次连接时，目标软件给出的软件名称、版本号等信息</li><li>旗标抓取是连接到远程应用程序并现察其输出，以收集关键信息的技术手段，一般仅限于采用明文传输协议的网络服务</li><li>telnet和netcat</li></ul><h2 id="扫描与查点的防御"><a class="markdownIt-Anchor" href="#扫描与查点的防御"></a> 扫描与查点的防御</h2><ul><li>端口扫描监测：<ul><li>在某个不常用的端口进行监听：如发现对该端口的连接请求，就认为有端口扫描。一般这些工具都会对连接请求的来源进行反探测，同时弹出提示窗口</li><li>混杂模式下抓包(wireshark)并进一步分析判断</li><li>蜜罐系统(Honeypot)</li></ul></li></ul><h2 id="网络嗅探"><a class="markdownIt-Anchor" href="#网络嗅探"></a> 网络嗅探</h2><p>​网络监听(网络嗅探、Network Sniffing)：在他方未察觉的情况下捕获其通信报文、通信内容的技术</p><h3 id="交换式局域网嗅探技术"><a class="markdownIt-Anchor" href="#交换式局域网嗅探技术"></a> 交换式局域网嗅探技术</h3><p>[CH03-信息收集与防御-3.pdf](file://E:/Data/大学/大三/大三上/网络攻击与防御/课件/CH03-信息收集与防御-3.pdf)</p><h1 id="第4章-操作系统口令文件与破解"><a class="markdownIt-Anchor" href="#第4章-操作系统口令文件与破解"></a> 第4章 操作系统口令文件与破解</h1><p>​看书</p><h1 id="第5章-欺骗攻击与防御"><a class="markdownIt-Anchor" href="#第5章-欺骗攻击与防御"></a> 第5章 欺骗攻击与防御</h1><h2 id="arp欺骗"><a class="markdownIt-Anchor" href="#arp欺骗"></a> ARP欺骗</h2><h3 id="arp欺骗的工作原理"><a class="markdownIt-Anchor" href="#arp欺骗的工作原理"></a> arp欺骗的工作原理</h3><h1 id="第6章-web攻击和防御"><a class="markdownIt-Anchor" href="#第6章-web攻击和防御"></a> 第6章 Web攻击和防御</h1><h2 id="sql注入漏洞"><a class="markdownIt-Anchor" href="#sql注入漏洞"></a> sql注入漏洞</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">$<span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;SELECT * FROM users WHERE id = &#x27;$id&#x27;&quot;;<br><br># 构造<br><span class="hljs-string">&#x27; or 1 = &#x27;</span><span class="hljs-number">1</span> <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 这里后面的<span class="hljs-string">&#x27;是为了闭合后面的&#x27;</span>，使得成为 <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span>，由于php是弱语言类型，这个可以通过<br><span class="hljs-number">-1</span><span class="hljs-string">&#x27; order by 3 #</span><br><span class="hljs-string">// 这里是检测列数</span><br><span class="hljs-string">-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> database(),<span class="hljs-keyword">user</span>(),version() #<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> database()是返回数据库名，<span class="hljs-keyword">user</span>()返回当前MySQL连接的用户名和主机名，例如root<span class="hljs-variable">@localhost</span><br><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select database(),version(),group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>text<span class="hljs-string">&#x27; #</span><br><span class="hljs-string">// 之后的group_concat是查询数据库中所有表的名字</span><br><span class="hljs-string">-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>, group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span> <span class="hljs-keyword">and</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;text&#x27;</span>#<br><br><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,group_concat(id,username),group_concat(username,password) from users#</span><br></code></pre></td></tr></table></figure><h2 id="xss漏洞"><a class="markdownIt-Anchor" href="#xss漏洞"></a> XSS漏洞</h2><ul><li><p>反射型XSS</p><ul><li>[CH06-Web攻击与防御-3.pdf](file://E:/Data/大学/大三/大三上/网络攻击与防御/课件/CH06-Web攻击与防御-3.pdf)</li></ul></li><li><p>存储型XSS</p><ul><li>[CH06-Web攻击与防御-3.pdf](file://E:/Data/大学/大三/大三上/网络攻击与防御/课件/CH06-Web攻击与防御-3.pdf)</li></ul></li><li><p>DOM XSS</p><ul><li>[CH06-Web攻击与防御-3.pdf](file://E:/Data/大学/大三/大三上/网络攻击与防御/课件/CH06-Web攻击与防御-3.pdf)</li></ul></li></ul><h1 id="第8章-恶意代码防护技术"><a class="markdownIt-Anchor" href="#第8章-恶意代码防护技术"></a> 第8章 恶意代码防护技术</h1><ul><li><p>恶意代码：</p><ul><li>是指通过存储介质或者计算机网络传播，在未授权的情况下可能破坏系统运行的程序或代码</li><li>特征：一段程序或代码；具有恶意行为，且在没有授权的情况下进入系统；具有在计算机系统之间传播的能力</li><li>防御：预防、检测、识别、清除、数据备份与恢复</li></ul></li><li><p>计算机病毒：狭义的计算机病毒，即具有自我复制能力并需要寄生在宿主程序中的恶意代码</p><ul><li>生命周期：潜伏传播，触发执行阶段</li><li>组成：引导触发，感染表现模块</li></ul></li><li><p>蠕虫：一种可以独立运行，能主动寻找感染目标并且能够自动传播的恶意程序。传播依赖于特定的计算机漏洞</p><ul><li>特征：主动攻击、利用软件漏洞、造成网络拥塞、破坏性、消耗系统资源、留下安全隐患、行踪隐蔽、反复性</li><li>组成：扫描攻击，传输负载</li></ul></li><li><p>特洛伊木马</p><ul><li>木马具有欺骗性、隐蔽性、自动运行性和自动恢复等功能特点</li><li>组成：木马程序由客户端程序和服务端程序两个部分组成</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>课程复习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android简单逆向</title>
    <link href="/posts/71cb8802.html"/>
    <url>/posts/71cb8802.html</url>
    
    <content type="html"><![CDATA[<h1 id="android相关"><a class="markdownIt-Anchor" href="#android相关"></a> Android相关</h1><h2 id="源码查看"><a class="markdownIt-Anchor" href="#源码查看"></a> 源码查看</h2><ul><li><a href="http://androidxref.com/">http://androidxref.com/</a></li></ul><h2 id="手机信息查看"><a class="markdownIt-Anchor" href="#手机信息查看"></a> 手机信息查看</h2><ul><li>手机信息 -&gt; 决定使用什么版本的server<ul><li>adb shell中 <code>cat /proc/cpuinfo</code> 查看手机架构</li><li>adb shell中 <code>getprop ro.product.cpu.abi</code> 查看cpu处理器位数</li></ul></li></ul><h2 id="查看包名"><a class="markdownIt-Anchor" href="#查看包名"></a> 查看包名</h2><ul><li><p>adb shell</p><ol><li><p><code>dumpsys activity top | grep TASK</code></p></li><li><p><code>am monitor</code></p></li><li><p><code>pm path 包名</code> 寻找包名所在文件的目录</p></li><li><p><code>pm list package</code> 列出所有的包名</p></li></ol></li><li><p>打开apk, 寻找<code>资源文件-&gt;AndroidManifest.xml-&gt;package=&quot;包名&quot;</code></p></li></ul><h2 id="查看apk的安装目录"><a class="markdownIt-Anchor" href="#查看apk的安装目录"></a> 查看apk的安装目录</h2><ul><li><code>pm path cn.pojie52.cm01(包名)</code></li><li><code>cat /proc/pid/maps | grep /data</code><ul><li>查看包含 /data 的虚拟内存区域的详细信息，即查看包含/data名称的进程的相关信息，这里就是找到对应虚拟内存区域中的所有文件</li></ul></li></ul><h2 id="查看进程信息"><a class="markdownIt-Anchor" href="#查看进程信息"></a> 查看进程信息</h2><ul><li><code>ps -ef | grep (包的信息)</code></li></ul><h1 id="adb-使用"><a class="markdownIt-Anchor" href="#adb-使用"></a> Adb 使用</h1><h2 id="交互"><a class="markdownIt-Anchor" href="#交互"></a> 交互</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb install ./file.apk<br>adb push ./file.apk system/tmp<br>adb pull /sdcard/file# 这里如果提示权限不足，需要在adb中移动文件到/sdcard/目录即可<br></code></pre></td></tr></table></figure><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动指定的Activity</span><br>adb shell   #进入shell<br>am start -n com.kbtx.redpack_simple/.FlagActivity   #按AndroidManifest的路径(com.kbtx.redpack_simple.FlagActivity)，打开指定控件<br></code></pre></td></tr></table></figure><h1 id="ida-调试-apk"><a class="markdownIt-Anchor" href="#ida-调试-apk"></a> IDA 调试 apk</h1><p>​分为两种模式，一种是以debug模式启动，第二种则以普通模式启动，二者的区别在于使用场景，有时候要动态调试的参数在app一启动的时候就产生了，时机较早，所以需要以debug模式去挂起app。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb shell am start -D -n com.zj.wuaipojie/.ui.ChallengeEight (去掉-D 则表示不以debug模式启动app)<br>adb forward tcp:23946 tcp:23946 (端口转发)<br>adb forward tcp:8700 jdwp:PID (pid监听)<br>jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700 (jdb挂起)<br></code></pre></td></tr></table></figure><p><a href="https://www.52pojie.cn/thread-1315444-1-7.html">实战分析一个Crackme的过程 </a></p><h2 id="ida找不到so的情况"><a class="markdownIt-Anchor" href="#ida找不到so的情况"></a> ida找不到so的情况</h2><ul><li>因为APK设置了该属性<code>android:extractNativeLibs=&quot;false&quot;</code>，所有在apk的安装目录中不显示so文件，这个时候可以直接将 <strong>base.apk</strong> 作为so文件进行处理</li></ul><h2 id="attach模式"><a class="markdownIt-Anchor" href="#attach模式"></a> attach模式</h2><ol><li>注意端口转发 <code>adb forward tcp:23946 tcp:23946</code></li><li>找到base.apk的基址-&gt;这里可以直接从IDA的线程目录中获取，。例如<br /><code>/data/app/~~UbqwoOpDOTfYTfwZ1Ty9pA==/cn.pojie52.cm01-Fu70kSLImy0Ji7ekdGzWFQ==/base.apk00000076282C600000000002CB5FA000</code></li><li>修改静态分析的基址，方便我们查找函数的偏移</li></ol><h2 id="spawn模式"><a class="markdownIt-Anchor" href="#spawn模式"></a> spawn模式</h2><h2 id="安卓高版本android10及以上与低版本的差异"><a class="markdownIt-Anchor" href="#安卓高版本android10及以上与低版本的差异"></a> 安卓高版本(android10及以上)与低版本的差异</h2><ul><li>高版本因为libc.so的路径改变了，所以显示不出所有的线程。<code>IDA_LIBC_PATH=/apex/com.android.runtime/lib64/bionic/libc.so ./android_server64</code> 启动服务可以完整显示</li></ul><h1 id="frida"><a class="markdownIt-Anchor" href="#frida"></a> frida</h1><p>​Frida-tools共有六个小工具分别是frida CLI、frida-ps、frida-trace、frida-discover、frida-ls-devices、frida-kill。</p><h2 id="frida-2"><a class="markdownIt-Anchor" href="#frida-2"></a> frida</h2><h3 id="参数讲解"><a class="markdownIt-Anchor" href="#参数讲解"></a> 参数讲解</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">--version   # 显示程序的版本号并退出<br>-h, --help  # 显示此帮助信息并退出<br>-D ID, --device=ID   # 连接到指定ID的设备上<br>-U, --usb            # 连接到USB设备<br>-R, --remote         # 连接到远程frida服务器<br>-f FILE, --file=FILE # spawn这个应用<br>-F, --attach-frontmost    # 附加到最前端的应用程序<br>-p PID, --attach-pid=PID  # 附加到PID<br>--debug  # 启用兼容Node.js的脚本调试器<br>-l SCRIPT, --load=SCRIPT # 加载脚本。<br>-q # 安静模式（无提示），并在-l和-e之后退出。<br>--no-pause # 启动后自动启动主线程<br>-o LOGFILE, --output=LOGFILE # 输出到日志文件<br></code></pre></td></tr></table></figure><h3 id="启动"><a class="markdownIt-Anchor" href="#启动"></a> 启动</h3><ul><li>attach模式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">frida -UF #测试是否连接成功<br>frida -U 进程名(通常为包名) -l hook.js<br></code></pre></td></tr></table></figure><ul><li>spawn模式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">frida -U -f com.android.settings(进程名) hook.js --no-pause(后面--no……高版本不写)<br></code></pre></td></tr></table></figure><h2 id="frida-server"><a class="markdownIt-Anchor" href="#frida-server"></a> frida-server</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /data/local/tmp<br>chmod 777 *<br>./frida-server-16.0.8-android-arm64<br><span class="hljs-meta prompt_"># </span><span class="language-bash">防止反调试，切换端口监听(默认端口为27042)</span><br>./frida-server-16.0.8-android-arm64 -l 0.0.0.0:1314<br></code></pre></td></tr></table></figure><h2 id="frida-ps"><a class="markdownIt-Anchor" href="#frida-ps"></a> frida-ps</h2><p>​frida-ps用于列出进程的一个命令行工具。</p><h3 id="参数讲解-2"><a class="markdownIt-Anchor" href="#参数讲解-2"></a> 参数讲解</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">--version # 显示程序的版本号并退出<br>-h, --help # 显示此帮助信息并退出<br>-D ID, --device=ID # 连接到指定ID的设备上<br>-U, --usb # 连接到USB设备<br>-R, --remote # 连接到远程frida服务器<br>-H HOST, --host=HOST # 连接到HOST上的远程frida-server。<br>-O FILE, --options-file=FILE # 包含额外命令行选项的文本文件<br>-a, --applications # 仅列出应用程序<br>-i, --installed # 包括所有已安装的应用程序<br>-j, --json # 以JSON格式输出结果<br></code></pre></td></tr></table></figure><h3 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前手机运行的进程</span><br>frida-ps -U<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看设备所有应用程序</span><br>frida-ps -Ua<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看设备上的所有已安装应用程序和对应的名字</span><br>frida-ps -Uai<br></code></pre></td></tr></table></figure><h3 id="其他-2"><a class="markdownIt-Anchor" href="#其他-2"></a> 其他</h3><ul><li><p>日志捕获</p><ul><li><code>logcat |grep &quot;D.zj2595&quot;</code></li></ul></li><li><p>在手机查看 frida 的监听端口</p><ul><li><code>netstat -tunlp</code></li></ul></li></ul><h1 id="资源汇总"><a class="markdownIt-Anchor" href="#资源汇总"></a> 资源汇总</h1><ul><li><p><a href="https://mt2.cn/">MT管理器 (mt2.cn)</a></p></li><li><p><a href="https://github.com/githubXiaowangzi/NP-Manager?tab=readme-ov-file">NP管理器 githubXiaowangzi/NP-Manager:</a></p></li><li><p><a href="https://magiskcn.com/">Magisk中文网 (magiskcn.com)</a></p></li><li><p><a href="https://lsposed.cn/">LSPosed中文网</a>，<a href="https://github.com/LSPosed/LSPosed">LSPosed/LSPosed: LSPosed Framework</a> -&gt; zip到手机中，使用面具安装</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>心得体会</title>
    <link href="/posts/cf26faba.html"/>
    <url>/posts/cf26faba.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8eaae180fc530a0e8398cc35a2f803389521ad79e60fe1718db5b6587bc049ec">b61ac2957fe6e5696172d47e7b49d1ddbbc6337abdf627161c76f9507780f653d1a054b52b984b0a9be7cb35b6554b7c631ea1d34498e1b5c077c6c73bd69540e7493aaef9f4bdbac83242efbe7dd809a9967772cc9b7e9ed69d017236cf9019a5d69bb0c0c0c92c9ede89a04f3b3b7a586624c03a6cd5bd78eee6fe26abcedbf3151d4d2a087c42e4837e94026c5cff3de16c0bb66720d242c49e7429ec92ea6b0fae7f3712c69fd2b9f30ffbcabf6b163edbe0b064394c910b655f6f4d889e589ccc64206897879695abade2a0dd1464ee3d8a652e9c9e8f13501c6129e0b6a6e198a368d10d8453ad031d929d4caec0ef6ed24bdee269137c66a836a7e14e3fa0e50330237260d4f1b9aa4b3a3ba2d7dcc28fb479bd232439dddb9e9819ea6b1b0ddcd2b5b1e4323518e2ffc3956f493d31439f5b89dc24c494939f2489b177bc278b1cf9d011ebd7083ce299ff538343ae9b7be2ad2a0c99bd97867891699393ae686858005b83e66f335a51242df4337cd76413c32de066418b389894dec5d0d82e1a388743cb4e21e29b76e8d0e496e3a29249c8eaddda85d8648bc8f36881deeb7f52455af68ff99bad5651900f92bb7084d6049a8d769413a0eb5dca8e39aba51a69e984d05c44ab7b368236e7a885e3d857455b7085a1932751e016022ccd893cfd5659108867e5afe60598aef70a0d530ef5f71dbf90ad1d4c2dea2701a0a66adf714aa8860f1954b82e34935fcbba63418558d5401b013e0d61132b1ea67876e5fe62173f8b2a1be442501089a8a366165e5f7f14a83fadc27dab8bfa81c5fe7ae7618584f779d018a518f886e2b11c5c795eb9f269fe48277b33c81d24d76d851366e1959b7ea2ddf950665e55af017a563c54f010c9e265855ab56473e172bd5f12c257e42aa4e8a539d26e9cc22b52b9945a2eba7e19f9bc9b426fb3b3120d6ea71518e329f9cda397e4c3c7c7a08ce0964885070b499a913f7325e32a52111d36443ff1019b9810e4decd3a4364cead18e0f83b5be16b954bbcbbbfe083190b522beaeaf3583147120317114e7e506cc17d6d2f1771d041e0dd04c7e9aa709d757769b5d653ebc6d8bcdf860b4acfd9a4c5f6a72bf2f2a1045270983bd7f1bea4799849cb7b97b83f8c817f810f483dc7076bd13652478cb5c29ba5e1c06a68e38a0649a9aede794a51ca1eaadfb7babafae7148581982d8b8310fd4e9ede179e57ea77419683799d7b2852129e3d7f93196c3aefa5d2ec4ccaea857a6bb0e8ce9053512500806a3e422a5b82a640bf94c5ff7a71119d5687aa8ab78b2252e5763e38699cd0cd9c8215634acdedbb4b64add39792ed3c9f2c743361498ae2940b4bdd08cec3bc8bfc89b2fc87bb4bfb4fcfcfd8923d56b540aacd617d6f33246a9726924a468e70dc69c94f47073f974ed31e1eb7684f381f54f9ee7f54fea49c91914fc04a1f7942bcac6baa627dfccc7154982bdcd8a4e677b445915d89bbbc034edc41c9ddfba7703c6f0f834bf4d4387c65e60946ddfe4dae5cdf68922da5b12729764178428de0e74415620a9ab526d84b31ed351220cfc67ed4172772cd6efb5ba508120c2ea53ddc755945a59753c5789c509327d975da7c5a44c35c7c53c3e8506da8713facc652dccab05c81df3a1458e8f6423bf6d18f6b9b372506b7fe650bf2bf32eb9417ad885a05746a44e48c7ff06ab1027d8956f617f6823d962d880d4cdceae3ea3e058c9952be7efb7993de5f492a4fa3ca820a40c30ea293a23a7e48f21f2d28ebaef751d6225327a65c84f0fe19847e3db33bb82af7fb069d33a9c59823c5acc0fa1e50112beb9fe6cdce3f210df2e0be743c5df4f1b415d84b74e985ba2908a6c92af3b79898e07ca0a2eda905600d2f98b54628afd33b72987858509f39389b72996137166e35736263c739275cd26b09b74f6b678ecf04b014d6fa32f8a7f8bf9fe3f3f5a97bfe2fe00941ef8e03222306a53fa65ad983f783154409f1f153d5e504d4731598b2d4c40248c3d11af8ad763f54646d0f68dfb6c0c9a5a41250eab678b901d11403fb1409ecaf5bc76a1699bdf0caf6a168b07020fd7d95f01e414665175b6b861aa3794d44a572b395e64e5ac2fb1faaed35396642673a2ae45d56dc2716ad1e8293bddb3a7c5bc85eb0566d2c4db38443f7fddc83916b7c9681767a49c3853ff04992e707931473d0359cfc2587e0912fd9eb0dce6a750fc4bae8acf760a1ff494ef02880e285</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《软件分析》Lab1</title>
    <link href="/posts/f88cd8e5.html"/>
    <url>/posts/f88cd8e5.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6ccec4f5e6c70a0a52651f59b558172d49d47f650b6e71cfdfba73faf8751dca"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>静态分析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《软件分析》_part2</title>
    <link href="/posts/707fd24f.html"/>
    <url>/posts/707fd24f.html</url>
    
    <content type="html"><![CDATA[<p>This is my curriculum understanding.</p><blockquote><p>Reference:</p><p><a href="https://blog.csdn.net/zhang971105/category_10471447.html">静态分析学习笔记</a></p><p><a href="https://ranger-nju.gitbook.io/static-program-analysis-book/">上课笔记</a></p><p><a href="https://static-analysis.cuijiacai.com/05-inter/">详细博客</a></p></blockquote><h1 id="data-flow-analysis-foundations"><a class="markdownIt-Anchor" href="#data-flow-analysis-foundations"></a> Data Flow Analysis - Foundations</h1><h2 id="partial-order"><a class="markdownIt-Anchor" href="#partial-order"></a> Partial Order</h2><p>所谓偏序集合(poset)，就是一个由集合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span> 和偏序关系 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊑</mo></mrow><annotation encoding="application/x-tex">\sqsubseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊑</span></span></span></span> 所组成 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>P</mi><mo separator="true">,</mo><mo>⊑</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(P, \sqsubseteq)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">)</span></span></span></span> 对。这个对满足以下三个条件：</p><ul><li>Reflexivity 自反性: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi mathvariant="normal">x</mi><mo>∈</mo><mi>P</mi><mo separator="true">,</mo><mi mathvariant="normal">x</mi><mo>⊑</mo><mi mathvariant="normal">x</mi></mrow><annotation encoding="application/x-tex">\forall\mathrm{x}\in P,\mathrm{x}\sqsubseteq\mathrm{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">∀</span><span class="mord"><span class="mord mathrm">x</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">x</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">x</span></span></span></span></span></li><li>Antisymmetry 反对称性: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>∈</mo><mi>P</mi><mo separator="true">,</mo><mi>x</mi><mo>⊑</mo><mi>y</mi><mo>∧</mo><mi>y</mi><mo>⊑</mo><mi>x</mi><mo>⟹</mo><mi>x</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">\forall x,y\in P,x\sqsubseteq y\land y\sqsubseteq x\Longrightarrow x=y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">∀</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></li><li>Transitivity 传递性: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo>∈</mo><mi>P</mi><mo separator="true">,</mo><mi>x</mi><mo>⊑</mo><mi>y</mi><mo>∧</mo><mi>y</mi><mo>⊑</mo><mi>z</mi><mo>⟹</mo><mi mathvariant="normal">x</mi><mo>⊑</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">\forall x,y,z\in P,x\sqsubseteq y\land y\sqsubseteq z\Longrightarrow\mathrm{x}\sqsubseteq z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">∀</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord"><span class="mord mathrm">x</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></li><li>例子：小于等于关系就是一个偏序关系，但小于关系不是偏序关系，它是全序关系。</li></ul><p>偏序关系与全序关系的区别在于，全序关系可以让任意两个元素比较，而<code>偏序关系不保证所有元素都能进行比较</code></p><h2 id="upper-and-lower-bounds"><a class="markdownIt-Anchor" href="#upper-and-lower-bounds"></a> Upper and Lower Bounds</h2><ul><li><p>对于偏序集中的某子集 S 来说：</p><ul><li><p>若存在元素 u 使得 S 的任意元素 x 有 x <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊑</mo></mrow><annotation encoding="application/x-tex">\sqsubseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊑</span></span></span></span> u，那么我们说 u 是 S 的上界(Upper bound)。</p></li><li><p>同理，若存在元素 l 使得 S 的任意元素 x 有 l <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊑</mo></mrow><annotation encoding="application/x-tex">\sqsubseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊑</span></span></span></span> x，那么我们说 l 是 S 的下界(Lower bound)。</p></li></ul></li><li><p>然后我们衍生出最小上界和最大下界的概念：</p><ul><li><p>在 S 的所有上界中，我们记<strong>最小上界</strong>(Least upper bound, lub)为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊔</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">\sqcup S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">⊔</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>, 满足所有上界 u 对 lub 有: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊔</mo><mi>S</mi><mo>⊑</mo><mi>u</mi></mrow><annotation encoding="application/x-tex">\sqcup S \sqsubseteq u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord">⊔</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">u</span></span></span></span></p></li><li><p>类似地我们也能定义出<strong>最大下界</strong>(Greatest lower bound, glb)为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊓</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">\sqcap S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">⊓</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>, 满足所有下届 l 对 glb 有: $l \sqsubseteq \sqcup S $</p></li></ul></li><li><p>当 S 的元素个数只有两个{a, b}时，我们还可以有另一种记法：</p><ul><li><p>最小上界：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>⊔</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a \sqcup b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊔</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span>, a <code>join</code> b</p></li><li><p>最大下界：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>⊓</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a \sqcap b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊓</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span>, a <code>meet</code> b</p></li></ul></li></ul><p>并不是每个偏序集都有 lub 和 glb，但是如果有，那么该 lub, glb 将是唯一的。(可假设存在多个，然后用自反性证明它们是同一个)</p><h2 id="lattice"><a class="markdownIt-Anchor" href="#lattice"></a> Lattice</h2><h3 id="lattice-2"><a class="markdownIt-Anchor" href="#lattice-2"></a> Lattice</h3><p>​给定一个偏序集，如果任意元素 a, b 都有 lub 和 glb，那么这么偏序集就叫做 <strong>格(lattice)</strong>。也就是说<code>一个lattice的任意两个元素组成的元素对都有lub和glb</code>。</p><ul><li>属于 lattice 的：小于等于关系，子集关系</li><li>不属于 lattice 的：子串关系</li></ul><h3 id="semilattice"><a class="markdownIt-Anchor" href="#semilattice"></a> Semilattice</h3><p>​给定偏序集，对于任意元素 a，b 只有 lub，则称此偏序集为一个 <code>join semilattice</code>，若是任意元素 a，b 只有 glb，则称此偏序集为一个 <code>meet semilattice</code></p><h3 id="complete-lattice"><a class="markdownIt-Anchor" href="#complete-lattice"></a> Complete Lattice</h3><p>​给定一个偏序集，<code>任意子集S</code> 都存在 lub 和 glb，那么我们说这个 lattice 为<strong>全格(complete lattice)</strong></p><ul><li>属于全格的：子集关系</li><li>不属于全格的：小于等于关系，因为全体正整数没有一个边界</li></ul><p>​每一个全格都存在着 <strong>最大元素</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">⊤</mi></mrow><annotation encoding="application/x-tex">\top</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">⊤</span></span></span></span> (top)和 <strong>最小元素</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">⊥</mi></mrow><annotation encoding="application/x-tex">\bot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">⊥</span></span></span></span> (bottom)，他们分别是整个集合的 lub 和 glb。</p><p>​如果一个 lattice 是有穷的，那么它一定是一个全格。然而，一个全格不一定是有穷的，例如[0, 1]之间的实数是无穷的，但是期间的小于等于关系可以使其成为全格。</p><h3 id="product-lattice"><a class="markdownIt-Anchor" href="#product-lattice"></a> Product Lattice</h3><p>​另外还有 <strong>Product Lattice</strong>，多个 lattice 的<strong>笛卡尔积</strong>也能形成一个新的 lattice。</p><ul><li>product lattice 也是一个 lattice</li><li>如果 product lattice L是全格的积，那么 L 也是全格。</li></ul><h2 id="data-flow-analysis-framework-via-lattice"><a class="markdownIt-Anchor" href="#data-flow-analysis-framework-via-lattice"></a> Data Flow Analysis Framework via Lattice</h2><p>一个数据流分析框架(D, L, F)由以下元素组成：</p><ul><li>D: 数据流的方向，前向还是后向</li><li>L: 包含了数据值 V 和 meet, join 符号的格</li><li>F: V -&gt; V 的转移方程族</li></ul><p>从而，数据流分析可以被视为在 lattice 的值上迭代地应用转移方程和 meet/join 操作符。</p><h2 id="monotonicity-and-fixed-point-theorem"><a class="markdownIt-Anchor" href="#monotonicity-and-fixed-point-theorem"></a> Monotonicity and Fixed Point Theorem</h2><ul><li><p>对于问题----迭代算法在什么条件下可以停机？我们在这里引入不动点定理：</p><ul><li><strong>Monotonicity 单调性</strong>: 如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>⊑</mo><mi>y</mi><mo>⇒</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⊑</mo><mi>f</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x \sqsubseteq y \Rightarrow f(x)\sqsubseteq f(y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>，则说函数f: L -&gt; L 是<strong>单调的</strong>。</li><li><strong>FIxed Point Theorem 不动点定理</strong>: 给定一个全格 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>L</mi><mo separator="true">,</mo><mo>⊑</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(L,\sqsubseteq)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">)</span></span></span></span>，如果<ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo>:</mo><mi>L</mi><mo>→</mo><mi>L</mi></mrow><annotation encoding="application/x-tex">f: L \rightarrow L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span></span></span></span> 是单调的</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span></span></span></span> 是有穷的(也就是f单调有界+L全格)</li></ul></li></ul></li><li><p>那么</p><ul><li><p>迭代<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mi>k</mi></msup><mo stretchy="false">(</mo><mi mathvariant="normal">⊥</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f^k(\bot)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">⊥</span><span class="mclose">)</span></span></span></span>可以得到最小不动点(least fixed point)。</p></li><li><p>迭代<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mi>k</mi></msup><mo stretchy="false">(</mo><mi mathvariant="normal">⊤</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f^k(\top)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">⊤</span><span class="mclose">)</span></span></span></span>可以得到最大不动点(greatest fixed point)。</p></li></ul></li><li><p>证明：</p><ul><li>根据<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">⊥</mi></mrow><annotation encoding="application/x-tex">\bot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">⊥</span></span></span></span>和f的定义，我们可以得到：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">⊥</mi><mo>⊑</mo><mi>f</mi><mo stretchy="false">(</mo><mi mathvariant="normal">⊥</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\bot \sqsubseteq f(\bot)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord">⊥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">⊥</span><span class="mclose">)</span></span></span></span>。由于 L 是有限的，且 f 单调，根据鸽笼原理，必然存在一个 k 使得$\bot \sqsubseteq f(\bot) \sqsubseteq f^2(\bot)\sqsubseteq …\sqsubseteq f^k(\bot)\sqsubseteq f^{k+1}(\bot) <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>，且</mtext></mrow><annotation encoding="application/x-tex">，且</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">且</span></span></span></span>f^k(\bot) = f^{k+1}(\bot)$。</li><li>假设我们有另一个任意不动点 x，由于 f 是单调的，因此<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi mathvariant="normal">⊥</mi><mo stretchy="false">)</mo><mo>⊑</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msup><mi>f</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi mathvariant="normal">⊥</mi><mo stretchy="false">)</mo><mo>⊑</mo><msup><mi>f</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msup><mi>f</mi><mrow><mi>F</mi><mi>i</mi><mi>x</mi></mrow></msup><mo>=</mo><msup><mi>f</mi><mi>k</mi></msup><mo stretchy="false">(</mo><mi mathvariant="normal">⊥</mi><mo stretchy="false">)</mo><mo>⊑</mo><msup><mi>f</mi><mi>k</mi></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">f(\bot) \sqsubseteq f(x), f^2(\bot) \sqsubseteq f^2(x),...,f^{Fix} = f^k(\bot)\sqsubseteq f^k(x) = x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">⊥</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">⊥</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">⊥</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>可知的确<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mrow><mi>F</mi><mi>i</mi><mi>x</mi></mrow></msup></mrow><annotation encoding="application/x-tex">f^{Fix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.035771em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span></span>是最小不动点。</li></ul></li></ul><p>通过上面的证明，我们又回答了一个问题：如果我们的迭代算法符合不动点定理的要求，那么迭代得到的不动点，确实就是最优不动点。</p><h2 id="relate-iterative-algorithm-to-fixed-point-theorem"><a class="markdownIt-Anchor" href="#relate-iterative-algorithm-to-fixed-point-theorem"></a> Relate Iterative Algorithm to Fixed Point Theorem</h2><p>以上我们只是定性的描述了是否能得到最优不动点，但是迭代算法怎样才能算是符合了不动点定理的要求呢？接下来介绍关联的方法。</p><p>首先，回想 fact 的形式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msubsup><mi>v</mi><mn>1</mn><mn>1</mn></msubsup><mo separator="true">,</mo><msubsup><mi>v</mi><mn>2</mn><mn>1</mn></msubsup><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msubsup><mi>v</mi><mi>k</mi><mn>1</mn></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(v_1^1,v_2^1,...,v_k^1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.097216em;vertical-align:-0.2831079999999999em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4168920000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831079999999999em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，可以将其视为一个有限 lattice，它的积也是有限 lattice，因此 fact 对应到 finite lattice 是可以的。然后，我们的迭代函数 F 包括了转移函数 f 和 join/meet 函数，证明 F 是单调的，那么也就能得到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo>:</mo><mi>L</mi><mo>→</mo><mi>L</mi></mrow><annotation encoding="application/x-tex">F: L\rightarrow L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">L</span></span></span></span> 是单调的。</p><ul><li><p>这里分两部分。</p><ul><li><p>转移函数，即 OUT = gen U (IN - kill)，显然是单调的。</p></li><li><p>那么 join/meet 函数，我们要证明其单调，就是要证明：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo>∈</mo><mi>L</mi><mo separator="true">,</mo><mi>x</mi><mo>⊑</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">\forall x,y,z\in L, x\sqsubseteq y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">∀</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">L</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>⊔</mo><mi>z</mi><mo>⊑</mo><mi>y</mi><mo>⊔</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x \sqcup z \sqsubseteq y \sqcup z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊔</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊔</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>。</p><ol><li>由定义，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>⊑</mo><mi>y</mi><mo>⊔</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">y \sqsubseteq y \sqcup z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊔</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></li><li>由传递性，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>⊑</mo><mi>y</mi><mo>⊔</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x \sqsubseteq y \sqcup z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊔</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></li><li>则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>⊔</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">y \sqcup z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊔</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x, z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span> 的 lub</li><li>又 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>⊔</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x \sqcup z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊔</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x, z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span> 的 lub</li><li>因此 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>⊔</mo><mi>z</mi><mo>⊑</mo><mi>y</mi><mo>⊔</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">x \sqcup z \sqsubseteq y \sqcup z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊔</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊔</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>，证毕。</li></ol></li></ul></li></ul><p>于是我们就完成了迭代算法到不动点定理的对应。</p><ul><li><p>现在我们要回答本文开头的第三个问题了，什么时候算法停机？</p><ul><li>这个问题就很简单了，因为每个 lattice 都有其高度。假设 lattice 的高度为 h，而我们的 CFG 节点数为 k，就算每次迭代可以使一个节点在 lattice 上升一个高度，那么最坏情况下，我们的迭代次数也就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>=</mo><mi>h</mi><mo>×</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">i = h \times k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></li></ul></li><li><p>最后我们再列出这三个问题与其回答：</p><ul><li><p>算法是否确保一定能停止/达到不动点？能!会不会总是有一个解答？<strong>可以！</strong></p></li><li><p>如果能到达不动点，那么是不是只有一个不动点？可以有很多。如果有多个不动点，我们的结果是最优的吗？<strong>是的！</strong></p></li><li><p>什么时候我们会能得到不动点？<strong>最坏情况下，是 lattice 的高度与 CFG 的节点数的乘积。</strong></p></li></ul></li></ul><h2 id="maymust-analysis-a-lattice-view"><a class="markdownIt-Anchor" href="#maymust-analysis-a-lattice-view"></a> May/Must Analysis, A Lattice View</h2><h3 id="may"><a class="markdownIt-Anchor" href="#may"></a> MAY</h3><ul><li><p>对于到达定值分析，下界代表没有任何可到达的定值，上界代表所有定值都可到达。</p></li><li><p>下界代表 unsafe 的情形，即我们认为无到达定值，可对相关变量的存储空间进行替换。上界代表 safe but useless 的情况，即认为定值必然到达，但是这对我们寻找一个可替换掉的存储空间毫无意义。</p></li><li><p>而因为我们采用了 join 函数，那么我们必然会从 lattice 的最小下界往上走。而越往上走(相对于truth点而言)，我们就会失去更多的精确值。那么，在所有不动点中我们寻找最小不动点，那么就能得到精确值最大的结果。</p></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310221522165.png" alt="" /></p><h3 id="must"><a class="markdownIt-Anchor" href="#must"></a> MUST</h3><ul><li><p>在可用表达式分析中，下界代表无可用表达式，上界代表所有表达式都可用。</p></li><li><p>下界代表 safe but useless 的情形，因为需要重新计算每个表达式，即使确实有表达式可用。而上界代表 unsafe，因为不是所有路径都能使表达式都可用。与 may analysis 一样，通过寻找最大不动点，我们能得到合法的结果中精确值最大的结果。</p></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310221525983.png" alt="" /></p><h2 id="distributivity-and-mop"><a class="markdownIt-Anchor" href="#distributivity-and-mop"></a> Distributivity and MOP</h2><p>​与我们之前使用的算法不同，我们以前使用的算法是在运行过程中沿着数据流反复迭代的，而MOP是找出从开头到结尾所有路径，分别进行传递函数计算，最后将算完的所有路径进行 $\sqcup / \sqcap $ (即不是根据节点与其前驱/后继节点的关系来迭代计算数据流，而是直接查找所有路径，根据所有路径的计算结果再取上/下界。这个结果是最理想的结果。)，公式如下：</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310221646821.png" alt="image-20231022164631766" /></p><p>​由于某些路径可能实际无法到达，因此MOP不是特别精确；而在正常的程序中路径过多，几乎无法全部枚举，因此MOP也不太实际。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310221648079.png" alt="image-20231022164859036" /></p><p>​可以看到，迭代算法是 s3 对前驱取 join 后进行进行 f3 的转移，而 MOP 算法是对到达 s3 之后，s4 之前的路径结果取 join。</p><ul><li><p>那么迭代算法和 MOP 哪个更精确呢？我们可以证明，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⊔</mo><mi>F</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>⊑</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo>⊔</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(x)\sqcup F(y)\sqsubseteq F(x\sqcup y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊔</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊔</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>：</p></li><li><p>这表明 MOP 是更为精确的。但这并没有结束。而如果 F 是可分配的，那么确实可以让偏序符号改为等于号。恰好，gen/kill problem 下，F 确实可分配因此我们能确定，迭代算法的精度与 MOP 相等。</p></li></ul><h2 id="constant-propagation"><a class="markdownIt-Anchor" href="#constant-propagation"></a> Constant Propagation</h2><ul><li>这里可以直接参考 <a href="https://static-analysis.cuijiacai.com/04-dfa-fd/#_4-6-%E5%B8%B8%E9%87%8F%E4%BC%A0%E6%92%AD">这个博客</a></li></ul><p>​常量传播问题解决的主要就是确定一个程序点的变量x是不是常量的问题，如果是常量，那么之后就可以直接简化为常量进行处理了。这里主要涉及两方面的情况，一个是控制流的交汇，也就是说两个分支相同名称的数据同时传入，我这里需要把这个数据认定为什么，另一个是状态转移方程，给一个变量赋值，我怎么确定右侧的结果是一个常量还是别的东西。</p><p>​它这里主要是增加了对于数据流交汇和状态转移的处理</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202402291938557.png" alt="image-20240229193802488" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202402291938916.png" alt="image-20240229193816812" /></p><p>​再解决这两个之后，我们可以根据算法发现它是前向、Must的分析方法，因为常量的确定需要根据从上面传递的数值来判断，同时更换为常量不能存在错误，所以必须是必然性分析。</p><h2 id="worklist-algorithm"><a class="markdownIt-Anchor" href="#worklist-algorithm"></a> Worklist Algorithm</h2><p>​同时这里涉及工作表法，也就是将所有的BB条件到 Worklist 中，然后从头到尾抽取一个进行控制流交汇和状态转移方程，如果结果与之前的相同(transferNode来判断结果)，那么就直接进行下一个 BB 的分析，如果不同，则这个 BB 的下面的 BB 的输入值会改变，那么就会影响到输出，所以需要将后续节点继续加入到 Worklist 中继续分析。</p><h1 id="interprocedural-analysis"><a class="markdownIt-Anchor" href="#interprocedural-analysis"></a> Interprocedural Analysis</h1><ol><li><code>Dispatch </code>是从本身开始查找方法实现，如果没有找到，则继续向父类索引; 而对于在 CHA 中的 <code>Call Resolution</code> 算法而言, 对于 <code>virtual call</code> 需要对<strong>它本身和它所有的子类及其子类的子类</strong>都调用 <code>Dispatch</code></li><li>这里需要区分一下 ICFG 与 IDFA 的区别，控制流是基础骨架, 而数据流是在骨架上的血肉</li></ol><p>​<strong>过程间控制流图(Interprocedural Control Flow Graph，ICFG)</strong></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310252003222.png" alt="image-20231025200307155" /></p><p>​<strong>过程内数据流分析(Intraprocedural Data-Flow Analysis，IDFA)</strong></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310252003060.png" alt="image-20231025200324017" /></p><h1 id="pointer-analysis"><a class="markdownIt-Anchor" href="#pointer-analysis"></a> Pointer Analysis</h1><ul><li>我们将分析一个指针可能指向的 <strong>内存区域(Memory Location)</strong>，以 <strong>程序(Program)</strong> 为输入，以程序中的 <strong>指向关系(Point-to Relation)</strong> 为输出的分析称作 <strong>指针分析(Pointer Analysis)</strong> 。</li></ul>]]></content>
    
    
    <categories>
      
      <category>静态分析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《软件分析》_part1</title>
    <link href="/posts/4002e7c0.html"/>
    <url>/posts/4002e7c0.html</url>
    
    <content type="html"><![CDATA[<p>This is my curriculum understanding.</p><blockquote><p>Reference:</p><p><a href="https://blog.csdn.net/zhang971105/category_10471447.html">静态分析学习笔记</a></p><p><a href="https://ranger-nju.gitbook.io/static-program-analysis-book/">上课笔记</a></p></blockquote><h1 id="intermediate-representation"><a class="markdownIt-Anchor" href="#intermediate-representation"></a> Intermediate Representation</h1><h2 id="rice定理"><a class="markdownIt-Anchor" href="#rice定理"></a> Rice定理</h2><ul><li>对于使用 <strong>递归可枚举(Recursively Enumerable)</strong> 的语言描述的程序，其任何 <strong>非平凡(Non-trivial)</strong> 的性质都是无法完美确定的。<ul><li>关于递归可枚举，其含义是存在某个计算函数(可以是图灵机)，能够将这种语言中的所有合法字符串枚举出来。目前我们所能想到的所有的编程语言都是递归可枚举语言。</li><li>关于非平凡，如果一种性质是所有的程序都满足的或者都不满足的，那么这种性质就是平凡的，除此之外的性质都是非平凡的。其实和程序运行时的行为相关的，让我们感兴趣的性质，基本都是非平凡的性质(可以理解为不确定的性质)。</li></ul></li></ul><h2 id="compilers-and-static-analyzers"><a class="markdownIt-Anchor" href="#compilers-and-static-analyzers"></a> Compilers and Static Analyzers</h2><p>编译器将源代码(<code>Source code</code>)转换为机器代码(<code>Machine Code</code>)。其中的流程框架如下</p><ul><li>此处也可以去延伸了解一下<a href="https://en.wikipedia.org/wiki/Chomsky_hierarchy">乔姆斯基体系</a>，包含了0型文法(对应递归可枚举语言，图灵机)、1型文法(对应上下文敏感语言)、2型文法(对应上下文无关语言)和3型文法(正则文法，有限状态机)</li></ul><h3 id="scanner"><a class="markdownIt-Anchor" href="#scanner"></a> Scanner</h3><ul><li><strong>词法分析器</strong>(<code>Scanner扫描器</code>)，结合正则表达式，通过词法分析(<code>Lexical Analysis</code>)将 source code 翻译为 token。<ul><li>这里就是根据语句的不同组成成分进行划分，例如划分出关键词，标识符等(由正则表达式进行匹配)，之后进提取形成一个标记(Token)串</li></ul></li></ul><h3 id="parser"><a class="markdownIt-Anchor" href="#parser"></a> Parser</h3><ul><li><strong>语法分析器</strong>(<code>Parser解析器</code>)，结合上下文无关文法(<code>Context-Free Grammar</code>)，通过语法分析(<code>Syntax Analysis</code>)，将 token 解析为抽象语法树(<code>Abstract Syntax Tree</code>, AST)。<ul><li>解析器内部应该是实现了一个有限状态机，用来识别和分析每个语法格式的正确性—这里解析器实现了token和语法规则的匹配(具体可以联系主谓宾的匹配，存在这种组合既可以通过，而不必考虑这句话的含义是否正确)</li><li>解析为抽象语法树----递归下降解析器等</li></ul></li></ul><h3 id="type-checker"><a class="markdownIt-Anchor" href="#type-checker"></a> Type Checker</h3><ul><li><strong>语义分析器</strong>(<code>Type Checker类型检查器</code>)，结合属性文法(<code>Attribute Grammar</code>)，通过语义分析(<code>Semantic Analysis</code>)，将 AST 解析为 decorated AST。<ul><li>这里语义分析主要就是对于变量声明和类型检查(例如INT与String进行相加)，作用域分析，类型推断(rust的推断功能)，错误检查等，然后生成一个抽象语法树</li><li>抽象语法树相比于语法树，包含了更多关于源代码语义的信息。普通的语法树主要表示了源代码的结构，但不包含关于标识符、数据类型、作用域等语义信息。</li></ul></li></ul><h3 id="translator"><a class="markdownIt-Anchor" href="#translator"></a> Translator</h3><ul><li><strong>翻译器</strong>(<code>Translator</code>)，会将抽象语法树翻译成中间表示(Intermediate Representation, IR)，IR 的出现解耦了编译器的机器相关(Machine Dependent)部分和机器无关(Machine Independent)部分，上述几个层次在不同架构的机器上面是可以几乎不加改动地复用的。Translator，将 decorated AST 翻译为生成<code>三地址码这样的中间表示形式</code>(<code>Intermediate Representation</code>, IR)，并<strong>基于 IR 做静态分析</strong>(例如代码优化这样的工作----下面提及的机器无关方面)。<ul><li><strong>编译器的结构</strong>：编译器通常包括两个主要部分：机器相关部分和机器无关部分。机器相关部分负责将源代码翻译成特定计算机体系结构的机器代码，而机器无关部分负责执行编程语言无关的分析和优化。机器相关部分需要根据不同的目标体系结构进行适应和修改，这可能是复杂且繁琐的工作。</li><li><strong>中间表示(IR)的作用</strong>：引入中间表示的目的是为了将机器相关和机器无关部分解耦。IR 是一种抽象的、与计算机体系结构无关的表示，它在编译器的不同阶段中用作数据结构，将源代码的语义信息转化成一种通用形式。这种中间表示有助于减少编译器的复杂性，使编译器的机器无关部分不需要依赖于特定的硬件体系结构。</li><li><strong>机器相关和机器无关的复用</strong>：由于IR是与硬件体系结构无关的通用表示，机器相关部分只需关注如何将IR翻译成目标机器的机器代码，而无需关心源代码的编程语言细节。这使得机器相关部分在不同的计算机体系结构上能够以几乎不加修改地复用。同时，机器无关部分也不需要知道目标机器的具体细节，因为它操作的是IR而不是直接的机器代码。</li><li>简单理解，在拥有翻译器之前<ul><li><code>机器相关</code>就是负责将中间表示(IR)翻译成目标机器的机器代码，处理与底层硬件相关的细节，以便将源代码转化为可在特定机器上执行的代码。</li><li><code>机器无关</code> 就是负责对中间表示(IR)进行分析和优化。这个部分独立于目标机器的体系结构，它执行编程语言无关的操作，如常量传播、死代码消除、循环优化等。机器无关部分的目标是提高源代码的性能、可读性和可维护性。</li></ul></li></ul></li></ul><h3 id="code-generator"><a class="markdownIt-Anchor" href="#code-generator"></a> Code Generator</h3><ul><li><strong>机器码生成器(Code Generator)</strong> 会将 IR 转化成物理 CPU 能够直接执行的比特序列，这个过程是<strong>机器相关的</strong>。</li></ul><h3 id="summarize"><a class="markdownIt-Anchor" href="#summarize"></a> summarize</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202311060905306.png" alt="image-20231106090527264" /></p><ul><li>这里的<code>e.g</code>为被剔除的语句</li></ul><h2 id="ir-three-address-code3ac"><a class="markdownIt-Anchor" href="#ir-three-address-code3ac"></a> IR: Three-Address Code(3AC)</h2><ul><li>3AC的要求:<ul><li>在一个指令的<code>右边至多</code>只有一个操作符</li><li>每个3AC指令<code>可以至多</code>包含三种地址：变量名(如a、b、c)，常量(如数字3)，编译器生成的临时变量(如t1)</li></ul></li><li>这里使用的是java–&gt;IR Jimple–&gt;有类型的三地址码(typed 3AC)</li><li>这里需要注意一下的是，无论是三地址码还是汇编，其指令类型不取决于具体的语言，而取决于运行这个语言的机器的指令集体系结构(Instruction Set Architecture，ISA)</li></ul><h2 id="static-single-assignment"><a class="markdownIt-Anchor" href="#static-single-assignment"></a> Static Single Assignment</h2><p>所谓静态单赋值(SSA)，就是让每次对变量x赋值都重新使用一个新的变量xi，并在后续使用中选择最新的变量。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">  <span class="hljs-number">3</span>AC         <span class="hljs-string">|         SSA</span><br>p = a + b     <span class="hljs-string">|     p1 = a + b</span><br>q = p - c     <span class="hljs-string">|     q1 = p1 - c</span><br>p = q * d     <span class="hljs-string">|     p2 = q1 * d</span><br>q = p + q     <span class="hljs-string">|     q2 = p2 + q1</span><br></code></pre></td></tr></table></figure><h3 id="why-use-ssa"><a class="markdownIt-Anchor" href="#why-use-ssa"></a> why use SSA</h3><ul><li>控制流信息间接地集成到了独特变量名中<ul><li>如果有些对控制流不敏感的简化分析，就可以借助于 SSA</li></ul></li><li>定义与使用是显式的<ul><li>更有效率的数据存取与传播，有些优化在基于 SSA 时效果更好(例如条件常量传播，全局变量编号等)</li></ul></li></ul><h3 id="why-not-use-ssa"><a class="markdownIt-Anchor" href="#why-not-use-ssa"></a> why not use SSA</h3><ul><li>SSA 会引入过多的变量和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">ϕ</span></span></span></span><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">ϕ</span></span></span></span> 函数–&gt;面对 SSA 中不同控制流汇入到一个块中,导致多变量备选的问题，使用此合并操作符，根据控制流来确定使用哪个变量</li></ul></li><li>在转换成机器代码时会引入低效率的问题</li></ul><h2 id="basic-blocks-control-flow-graphs"><a class="markdownIt-Anchor" href="#basic-blocks-control-flow-graphs"></a> Basic Blocks &amp; Control Flow Graphs</h2><p>​控制流分析(<code>Control Flow Analysis</code>)通常指的是构建控制流图(<code>Control Flow Graph</code>, CFG)，并以 CFG 作为基础结构进行静态分析的过程。CFG 的一个结点可以是一条单独的 3AC，但是更常见的是一个基本块(Basic Block)。所谓基本块，就是满足以下性质的连续 3AC：</p><ul><li>只能从块的第一条指令进入。</li><li>只能从块的最后一条指令离开</li></ul><h1 id="data-flow-analysis-applications"><a class="markdownIt-Anchor" href="#data-flow-analysis-applications"></a> Data Flow Analysis - Applications</h1><h2 id="data-flow-analysis"><a class="markdownIt-Anchor" href="#data-flow-analysis"></a> Data Flow Analysis</h2><ul><li><p>分析的行为是数据的“流动”，分析的方式是 <strong>安全近似(Safe-Approximation)</strong></p><ul><li>根据安全性需求选择过近似(Over-Approximation)还是欠近似(Under-Approximation)</li></ul></li><li><p><strong>数据流动的场景</strong>有两个：</p><ul><li>在CFG的点(Node)内流动，即程序基块(Basic Block)内部的数据流；</li><li>在CFG的边(Edge)上流动，即由基块间控制流触发的数据流。</li></ul></li><li><p>数据流值</p><ul><li>也称为<strong>抽象数据状态(ADS)</strong>，为程序 P 中所有的数据的抽象值的整体</li><li>称每一个 IR 语句 <em>s</em> 执行之前, <em>pre(s)</em> 执行之后的<strong>数据流值</strong>为 <em>s</em> 的 <strong>输入状态</strong>—&gt;IN[S]</li><li>称每一个 IR 语句 <em>s</em> 执行之后, <em>suc(s)</em> 执行之前的数据流值为 <em>s</em> 的 <strong>输出状态</strong>—&gt;OUT[S]</li></ul></li><li><p><strong>程序点</strong>可以用控制流中相邻语句的<strong>顺序二元组</strong>表示。</p><ul><li>每个程序点都对应了一个数据流值(<strong>这个数据流值表征了在这个程序点能够观察到的所有可能的程序状态</strong>)–&gt;这里和后面提及的 bit vector 相联系，这个点可以看到所有可能的程序状态</li><li>每一个不同的(集合具有互异性)数据流值都会有一个或者多个程序点与之对应。</li></ul></li><li><p>数据流分析就是要寻找一种解决方案，对于程序 <em>P</em> 中的所有语句 <em>s</em> ，这种解决方案能够满足 IN[s] 和 O<strong>U</strong>T[s] 所需要满足的 <strong>安全近似导向型约束(Safe-Approximation-Oriented Constraints, SAOC)</strong>，SAOC主要有两种：</p><ul><li>基于语句语意(Sematics of Statements)的约束，即由状态转移方程产生的约束</li><li>基于控制流(Flow of Control)的约束，可能性分析/必然性分析</li></ul></li></ul><h2 id="reaching-definition-analysis"><a class="markdownIt-Anchor" href="#reaching-definition-analysis"></a> Reaching Definition Analysis</h2><h3 id="basic-concept"><a class="markdownIt-Anchor" href="#basic-concept"></a> Basic concept</h3><p>​如果在程序中点p到点q构成一条路径，在点p处的<strong>定义d</strong>在这条路径中不会被杀死，则称<strong>定义d</strong>可以从点p <strong>reach</strong> 点 q。换句话说，就是：<code>p处定义的变量 v 从点 p 可以 reach 点 q，当且仅当，v在整个路径中不会获得新的定义</code>。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310210027371.png" alt="image-20231021002745300" /></p><p>​Reaching Definitions可以用来检测可能存在的、使用了未定义变量的情况。例如，在CFG入口为每个变量引入一个虚拟定义，如果这个虚拟定义能从入口reach一个使用了该变量的点p，那么这个变量就有可能未定义便被使用。(因为“未定义”reach了使用变量的p)</p><h3 id="comprehend"><a class="markdownIt-Anchor" href="#comprehend"></a> Comprehend</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310211945453.png" alt="image-20231021194510364" /></p><ul><li>如图所示，关注的目标是<code>程序中定义的变量</code>，<strong>即数据流值是一个程序中所有的定义</strong>。可以使用bit编码表示在某程序点的多个Reaching Definitions，从左数第几个字节就是第几个definition<ul><li>Di如果为0表示Di无法reach该程序点</li><li>Di如果为1表示Di可以reach该程序点。</li></ul></li><li>这里D即Definition，可以表示为   <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext> </mtext><mi>D</mi><mo>:</mo><mi>v</mi><mo>=</mo><mi>x</mi><mtext> </mtext><mi>o</mi><mi>p</mi><mtext> </mtext><mi>y</mi></mrow><annotation encoding="application/x-tex">\ D: v = x \  op \ y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">x</span><span class="mspace"> </span><span class="mord mathnormal">o</span><span class="mord mathnormal">p</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><ul><li>其中一个D可以视为一行三地址码<ol><li>生成了一个定义D</li><li>在保持其他传入程序不受影响的同时，杀死了程序中其他对变量v的定义</li><li>语句 <code>D: v = x op y</code> 生成了关于变量 <code>v</code> 的一个新定义 <code>D</code> ，并且覆盖了程序中其他地方对于变量 <code>v</code> 的定义，不过并不会影响后续其他的定义再来覆盖这里的定义。赋值语句只是定义的一种形式而已，定义也可以有别的形式，比如说引用参数。</li></ol></li></ul></li><li>由此可以得到对于<strong>Node(Basic Block)的传递函数</strong>和对于<strong>Edge(Control-flow Hangling)的控制流函数</strong></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310211453613.png" alt="image-20231021145323589" /></p><ul><li>Transfer Function(到达定值的转移方程)<ul><li>从入口状态删除 kill 掉的定值，并加入新生成的定值</li><li>D：v = x op y，gen v, kill 其它所有的 v</li><li>注意，是所有其他地方，不仅仅是之前的control flow，因为程序control flow可能存在环，我们不能确定运行时真正的执行先后顺序。即使kill掉了无环执行流的下游的定义也没有关系，后面再重新定义即可。</li></ul></li><li>Control Flow(到达定值的数据流处理)<ul><li>任何一个前驱的变量定值都表明，该变量得到了定义</li><li>其中U表示union，结合前文使用bit字节表示的D，可以知道，IN[B]的输入等于OUT[P1]并OUT[P2]，意味着只要存在一条路径可以reach，那么就算作可以reach</li></ul></li></ul><h3 id="algorithm"><a class="markdownIt-Anchor" href="#algorithm"></a> Algorithm</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310211454978.png" alt="image-20231021145410941" /></p><ul><li>这便是Reaching Definitions的算法表示形式，其中入口和每个OUT都初始化为空集即00000(bit vector)的形式，是因为1并0或1都是1，会导致算法无法继续进行。算法的<strong>停止条件</strong>是：经过一次完整的迭代后，迭代前后所有的OUT都不再发生改变。<ul><li>首先让所有BB和入口的OUT为空。因为你不知道 BB 中有哪些定值被生成。</li><li>当任意 OUT 发生变化，则分析出的定值可能需要继续往下流动，所需要修改各 BB 的 IN 和 OUT。</li><li>先处理 IN，然后再根据转移完成更新 OUT。</li><li>在 gen U (IN - kill)中，kill 与 gen 相关的 bit 不会因为 IN 的改变而发生改变，而其它 bit 又是通过对前驱 OUT 取并得到的，因此其它 bit 不会发生 0 -&gt; 1 的情况。所以，OUT 是不断增长的，而且有上界，因此算法最后必然会停止。</li><li>因为 OUT 没有变化，不会导致任何的 IN 发生变化，因此 OUT 不变可以作为终止条件。我们称之为程序到达了不动点(Fixed Point)</li></ul></li></ul><h3 id="example"><a class="markdownIt-Anchor" href="#example"></a> Example</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310220959122.png" alt="image-20231022095908077" /></p><h3 id="疑问"><a class="markdownIt-Anchor" href="#疑问"></a> 疑问</h3><ul><li><p>这里的 bit vector 为什么是和每一个 statement 相联系，而不是和对于变量的定义所联系，比如为什么不把所有对于 x 的定义作为一个 bit？</p><ul><li>这里针对的是所有的定义，对于每一个定义给予一个 bit 位(题目的要求)。我的理解是，这样对于每一个定义(也可以说是statement)是为了存储更多的信息，就比如第一次B2之后的程序点上，杀死了D2，但是保留了D4，存储了D4的信息，即y的状态更明确了。但是如果是通过变量名来分配 bit，那样在这种时候，y的信息不会改变，因为它又被定义了，这时候就搞混D2和D4的信息了。</li><li><code>这里进行补充</code>：我们可以用 D 的子集(即定义域中的元素)来表示每个<strong>程序点</strong>处，能够到达该点的定义的集合，即该程序点处的数据流值。这里的程序点就是两个 <strong>基础块</strong> 之间的连线，它是一个二元组，图上也展示数据表示在线上，也体现了数据流值的位置。</li></ul></li><li><p>这里最后的结束条件表示了什么，这里 bit vector到底反映了个什么状态？</p><ul><li>这里对于某个程序点，为1表示能reach到这个程序点，即一开始被定义的变量v，存在一条路径使得到达程序点前没有被再次定义，这里由于是sound分析，所以只要存在一条从Entry到这个程序点的路径即可，所以很好分析。</li></ul></li><li><p><s>结果这两个问题和再看视频，我这里应该理解为 为每一个 definition 给予一个 bit，这我感觉是 definition是抽象出来的结果，它每一个都是不同的，而例子中不同的 definition 都是为同一个变量的判断，应该是具体的方面，抽象的静态分析不关心具体的数值。</s></p><ul><li>这里就是这样设计的，我需要考虑的问题应该是为什么会有覆盖(kill)的存在？<ul><li>从头捋一遍，kill就是设置为0，即其余的定义不能reach到这一点，也就是说任何一条路径都有重复定义，因为这一个transfer function 就是守门员，它下一个程序点必定会受到这个func的影响。(这里相同的变量已经定义了，主要的目的是为了删除之前的相关定义，而删除后面的感觉是为了方便操作，因为后面会重新定义，所以删除不影响)</li></ul></li></ul></li></ul><h2 id="live-variables-analysis"><a class="markdownIt-Anchor" href="#live-variables-analysis"></a> Live Variables Analysis</h2><h3 id="basic-concept-2"><a class="markdownIt-Anchor" href="#basic-concept-2"></a> Basic concept</h3><ul><li>变量 v 在程序点 p 上的值是否会在某条从 p 出发的路径中使用</li><li>变量 v 在 p 上活跃，当且仅存在一条从 p 开始的路径，该路径的末端使用了 v，且路径上没有对 v 进行覆盖(redefine)。</li><li>隐藏了这样一个含义：<code>在被使用前, v 没有被重新定义过, 即没有被 kill 过, 则证明 v 在 p 处是活跃的</code></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310211523664.png" alt="" /></p><h3 id="comprehend-2"><a class="markdownIt-Anchor" href="#comprehend-2"></a> Comprehend</h3><ul><li><p>可以假设以下，如果从后往前搜索，只要在某程序点处找到一个变量vi的使用，就证明在此之前任意可达此点的、定义了vi的程序点处，vi都是live的(<strong>这里疑惑为什么只保证了被使用，而没有保证没有重新定义就确定它满足条件</strong> --&gt; 它关注的是一个程序点(变量值的定义)到这个变量被使用的点，这条路径中该变量的值就是存活的，它强调变量的值被使用，如果被重新定义了，该值就不会再被使用，所以被使用一定标注着它没有重定义)；而如果使用前向传播的算法，每到一个程序点都要正向搜索一遍后方的路径查看是否被使用，才能确认变量在此处是否live，虽然也能进行分析，但是效率较低</p></li><li><p>这里关注的是<code>程序中的的所有变量</code>，即<strong>数据流值是一个程序中所有变量</strong>。在程序点 p 处，变量为1，当且仅当变量在 p 点存活。</p></li><li><p>Transfer Function &amp; Control Flow</p></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310220928054.png" alt="image-20231022092800008" /></p><ul><li><p>分析：</p><ul><li><p>一个基本块内，若 v = exp, 则就是 def v。若 exp = exp op v，那么就是 use v。一个变量要么是 use，要么是 def，根据 def 和 use 的先后顺序来决定。对于上图，我觉得OUT[B]={v}只是一个初始条件，最后的结果都是看IN处的结果，所以OUT[B]中的v并不代表它是存活变量的意思。由此，上图中的4，5，6的差别就在于use 和 def 的先后上面，对于4，因为B先使用了v，所以可以理解v在B上面那个程序点就是存活的，因为分析的是一条从程序点出发的路径，它从一个程序点p出发，然后到B中def前都是存活的，这条路径也包括了IN[B]，所以v在IN[B]中是存活的。5，6的分析也是同样的。(这里注意最终结果只看IN，也就是只有IN中的数据才决定这个变量是否存活)</p></li><li><p>考虑基本块 B 及其后继 S。若 S 中，变量 v 被使用，那么我们就把 v 放到 S 的 IN 中(IN[S] = {v})，交给 B 来分析。因此对于活跃变量分析，其控制流处理是 <code>OUT[B] = U IN[S]</code>，也就是 <code>B 的输出是所有后继 S 输入的总和</code>。</p></li><li><p>在一个块中，若变量 v 被使用，那么我们需要添加到我们的 IN 里(IN[B] = {v})。而如果 v 被定义，那么在其之下的语句中，v 都是一个非活跃变量，因为没有语句再需要使用它。因此对于Transfer Function，IN 是从 OUT 中删去重新定值的变量，然后并上使用过的变量。需要注意，如果同一个块中，变量 v 的 def 先于 use ，那么实际上效果和没有 use 是一样的。</p></li></ul></li></ul><h3 id="algorithm-2"><a class="markdownIt-Anchor" href="#algorithm-2"></a> Algorithm</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310212020469.png" alt="image-20231021202056427" /></p><ul><li><p>我们不知道块中有哪些活跃变量，而且我们的目标是知道在一个块开始时哪些变量活跃，因此把 IN 初始化为空。</p></li><li><p>初始化的判断技巧：may analysis 是空，must analysis 是 top。</p></li></ul><h3 id="example-2"><a class="markdownIt-Anchor" href="#example-2"></a> Example</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310220959784.png" alt="image-20231022095945740" /></p><h3 id="疑问-2"><a class="markdownIt-Anchor" href="#疑问-2"></a> 疑问</h3><ul><li>为什么使用 backwards ?<ul><li>使用 forwards 来确定变量在某一个程序点是否存活，那每到一个程序点，都需要查看之后的路径有没有在重定义之前使用该变量的情况，需要查看的情况众多。这里就是因为要保证这个值被使用了，所以要到后面找被使用的情况才能算这个变量的值在该点处是存活的</li><li>使用 backwards 来确定，在 BB 中存在对于一个变量的使用而在同一个 BB 中没有重新定义，那么这个 BB 之前最近的一个 程序点 P(我们分析的那个 program point)，它这里一定是满足活跃变量的，即 IN[B] = {v}</li></ul></li></ul><h2 id="available-expressions-analysis"><a class="markdownIt-Anchor" href="#available-expressions-analysis"></a> Available Expressions Analysis</h2><h3 id="basic-concept-3"><a class="markdownIt-Anchor" href="#basic-concept-3"></a> Basic concept</h3><ul><li><p>程序点 p 处的表达式 <code>x op y  </code>是 available(可用) 需满足2个条件：</p><ol><li><p>从 <strong>entry</strong> 到 p 点的所有路径必须经过(使用) x op y</p></li><li><p>最后一次使用 x op y 之后，没有重定义操作数 x、y</p><p>(如果重定义了x 或 y，如x = a op2 b，则原来的表达式x op y中的x或y就会被替代)</p></li></ol></li><li><p>这个定义说明，在p处如果表达式available，就可以将其替换为最后一次运算的结果，或者可以检测全局通用表达式，感觉这里可以直接优化，首先计算表达式的结果，之后直接替换即可，相当于 <code>#define PI x + y, 这里x与y为常量</code>。</p></li><li><p>也就是说一个表达式是可用的，指的是这个表达是的值肯定已经被计算过了，可以直接复用之前的结果，没必要再算一遍，也就是说，这个表达式 <strong>不需要忙碌于计算</strong> 。</p></li></ul><h3 id="comprehend-3"><a class="markdownIt-Anchor" href="#comprehend-3"></a> Comprehend</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310212025007.png" alt="image-20231021202525968" /></p><ul><li>这里关注的就是<strong>程序中的表达式</strong>，那么每个程序点处的抽象程序状态，也就是数据流值，则为 <em>E</em> 的一个子集(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mo stretchy="false">{</mo><msub><mi>e</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>e</mi><mn>2</mn></msub><mo>…</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>e</mi><mi>n</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">E=\{e_{1},e_{2}……,e_{n}\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span>)，即数据流值可以是{0,1,0……，1}之类的(这是子集)。</li><li>Transfer Function &amp; Control Flow</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310220921179.png" alt="image-20231022092148128" /></p><ul><li>我们要求无论从哪条路径到达 B，表达式都应该已经计算，才能将其视为可用表达式，因此这是一个 must analysis。也就是说可以不优化每一个表达式，但是一定不能优化错误(也就是说一旦决定优化某个表达式，这个表达式就必须必然是可用表达式)。</li><li>注意到图中，两条不同的路径可能会导致表达式的结果最终不一致。但是我们只关心它的值能不能够再被重复利用，因此可以认为表达式可用。</li><li>v = x op y，则 gen x op y。当 x = a op b，则任何包含 x 的表达式都被 kill 掉。若 gen 和 kill 同时存在，<code>那么以最后一个操作为准</code>。这里kill的是B中被重定义的变量的集合，而不是单单指IN[B]中被重定义的变量的集合，这是因为 gen 和 kill 需要能够在数据流分析算法执行之前被静态的计算好，这样在算法过程中就不需要每次迭代都重新计算了(gen 和 kill 的生成一开始都需要固定)，并且我们之后是取差集操作，因此 kill 大一点并不会影响结果</li><li>转移方程很好理解，和到达定值差不多。但是，由于我们是 must analysis，因此控制流处理是<code>取交集</code>，而非到达定值那样取并集。</li></ul><h3 id="algorithm-3"><a class="markdownIt-Anchor" href="#algorithm-3"></a> Algorithm</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310220923234.png" alt="image-20231022092329180" /></p><ul><li>这里 OUT[B] = U(全集)，因为采取的取交集的操作，所以之后的数据会逐步减少，所以取全集剔除所有不合规的情况</li></ul><h3 id="example-3"><a class="markdownIt-Anchor" href="#example-3"></a> Example</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310221000927.png" alt="image-20231022100017882" /></p><h2 id="summarize-2"><a class="markdownIt-Anchor" href="#summarize-2"></a> Summarize</h2><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310220933086.png" alt="image-20231022093321043" /></p><h2 id="归纳"><a class="markdownIt-Anchor" href="#归纳"></a> 归纳</h2><blockquote><p>这里对上文三种数据流分析做一个要点提取归纳</p></blockquote><ul><li>什么改变了数据流的数据<ul><li>对于 Initialization 而言，这里基础块初始化不会对数据流分析产生任何影响，它的设定我认为就是为了与下一次分析进行对比的，如果一样的话，就可以认为初始化的结果就是最终分析的结果(我认为不太可能，这样的话这个案例实在是太完美了)。</li><li>同时，对于 Boundary 的初始化才会对数据流分析产生影响，但是这种影响也是固定的，因为程序流若是固定从上往下依次进行的，而没有后面数据对于前面造成影响的情况，那么数据流的多次分析结果就会是一样的。因为这里一开始边界一样，然后唯一计算的地方也被约束成了基础块的的固有操作(这里就是gen，use等，它在数据流分析算法执行之前被静态的计算好)，所以输入不变，执行流也只会从上往下执行(指后面的数据不会对之前的产生影响)，那么结果也不变。</li><li>那么影响数据流分析的只有程序流中数据的循环利用了(例如for，while等循环，或者调用)，这些操作会将之后的数据传递给上面的处理。比如产生了第二轮的数据，那么在产生第三轮的时候，如果程序流存在后面的数值传递给前面的流程，那么对于这个产生第三轮数据的程序点，它的来源就有传向它的第二轮和第三轮，这个过程会影响一轮的输出，所以改变了数据流的数据。</li></ul></li><li>最终结果看哪一块的数据<ul><li>我们知道当这一轮的数据与上一轮相同时，我们就达到了一个平衡点，这个就是我们需要的。这个时候，我们具体看在某一个程序点的reach或变量存活等情况时，我们是根据 Direction 的状态来看的，正向(forwaeds)就是看OUT，反向(backwards)就是看IN，初始化的时候也是同样道理。</li></ul></li><li>为什么转移方程都是对于基本块而言的<ul><li>这里先说一下问题的含义，当我们使用gen，kill，use的时候，我们会发现它拿到的就是基础块中的所有结果来进行操作，但是我们分析的不应该是从IN里面的数据来进行转移吗(对于正向而言)，那么我直接分析IN和基本块中的交集岂不是更好，这样一来分析的数据就少了。</li><li>这里确实分析的数据少了，但是会造成每一次迭代都要计算一遍这个取值，这样一来减少的时间和消耗又增多了。而对于直接采用基础块的数据，一来提前计算了，而且只用一遍，在复杂的情况中的损耗就更低了，二来这样不会对数据流造成影响，对于基础块中多kill的情况，如果在之后这个kill存在，那么它会在后面再次补进数据流中，否则就不必关心(因为这三种分析都是对于一条路径而言，后面不补的话就说明它到头了，后面没有了)</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>静态分析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MIT6.S081 实验</title>
    <link href="/posts/3fdc6854.html"/>
    <url>/posts/3fdc6854.html</url>
    
    <content type="html"><![CDATA[<h1 id="环境配置"><a class="markdownIt-Anchor" href="#环境配置"></a> 环境配置</h1><h2 id="配置环境"><a class="markdownIt-Anchor" href="#配置环境"></a> 配置环境</h2><p>​这里使用Ubuntu22.04(wsl)进行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 按官方指南手册 安装必须的工具链</span><br>$ sudo apt-get update &amp;&amp; sudo apt-get upgrade<br>$ sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu <br><span class="hljs-comment"># 单独移除掉qemu的新版本, 因为不知道为什么build时候会卡壳</span><br>$ sudo apt-get remove qemu-system-misc<br><span class="hljs-comment"># 额外安装一个旧版本的qemu</span><br>$ wget https://download.qemu.org/qemu-5.1.0.tar.xz<br>$ tar xf qemu-5.1.0.tar.xz<br>$ <span class="hljs-built_in">cd</span> qemu-5.1.0<br><span class="hljs-comment"># 报错处理</span><br>$ sudo apt-get install libglib2.0-dev<br>$ sudo apt-get install libpixman-1-dev<br>$ ./configure --disable-kvm --disable-werror --prefix=/usr/local --target-list=<span class="hljs-string">&quot;riscv64-softmmu&quot;</span><br>$ make<br>$ sudo make install<br><br><span class="hljs-comment"># 克隆xv6实验仓库</span><br>$ git <span class="hljs-built_in">clone</span> git://g.csail.mit.edu/xv6-labs-2020<br>$ <span class="hljs-built_in">cd</span> xv6-labs-2020<br>$ git checkout util<br><span class="hljs-comment"># 这里将远程仓库换成自己的，然后就可以提交了，具体看博客中GIT相关那一篇的操作</span><br><br><span class="hljs-comment"># 进行编译</span><br>$ make qemu<br><span class="hljs-comment"># 编译成功并进入xv6操作系统的shell</span><br>$ xv6 kernel is booting<br><br>$ hart 2 starting<br>$ hart 1 starting<br>$ init: starting sh<br>$ (shell 等待用户输入...)<br></code></pre></td></tr></table></figure><blockquote><p>参考</p><p><a href="https://zhuanlan.zhihu.com/p/624091268">https://zhuanlan.zhihu.com/p/624091268</a></p><p><a href="https://zhuanlan.zhihu.com/p/537461426">MIT6.S081 Ubuntu22.04 WSL2实验环境配置 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/fuxy3/article/details/104732541">glib-2.40 gthread-2.0 is required to compile QEMU and ERROR</a></p></blockquote><h2 id="配置vscode"><a class="markdownIt-Anchor" href="#配置vscode"></a> 配置VsCode</h2><ul><li><p>远程免密登录</p><ul><li><a href="https://www.cnblogs.com/safe-rabbit/p/16254860.html">VsCode配置ssh免密远程登录 - 安全兔 - 博客园 (cnblogs.com)</a></li><li><a href="https://sanbuphy.github.io/p/%E4%BC%98%E9%9B%85%E7%9A%84%E8%B0%83%E8%AF%95%E5%9C%A8vscode%E4%B8%8A%E5%AE%8C%E7%BE%8E%E8%B0%83%E8%AF%95xv6%E5%AE%8C%E7%BB%93/">优雅的调试—在vscode上完美调试xv6(完结) (sanbuphy.github.io)</a></li><li><a href="https://jyywiki.cn/">jyywiki.cn</a></li></ul></li><li><pre class="highlight"><code class="json">#launch.json<span class="hljs-punctuation">&#123;</span>    <span class="hljs-comment">// 使用 IntelliSense 了解相关属性。 </span>    <span class="hljs-comment">// 悬停以查看现有属性的描述。</span>    <span class="hljs-comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>        <span class="hljs-punctuation">&#123;</span>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;debug xv6&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppdbg&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/kernel/kernel&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;miDebuggerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/gdb-multiarch&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//使用的gdb路径</span>            <span class="hljs-attr">&quot;miDebuggerServerAddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;localhost:26000&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//连接gebsever的ip和端口</span>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;MIMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xv6build&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;setupCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>                <span class="hljs-punctuation">&#123;</span>                    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pretty printing&quot;</span><span class="hljs-punctuation">,</span>                    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span><span class="hljs-punctuation">,</span>                    <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>                <span class="hljs-punctuation">&#125;</span>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>            <span class="hljs-comment">// &quot;logging&quot;: &#123;</span>            <span class="hljs-comment">//     &quot;engineLogging&quot;: true,</span>            <span class="hljs-comment">//     &quot;programOutput&quot;: true,</span>            <span class="hljs-comment">// &#125;</span>        <span class="hljs-punctuation">&#125;</span>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span># tasks.json<span class="hljs-comment">// tasks.json</span><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>        <span class="hljs-punctuation">&#123;</span>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xv6build&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;isBackground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;make qemu-gdb&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-attr">&quot;problemMatcher&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>                <span class="hljs-punctuation">&#123;</span>                    <span class="hljs-attr">&quot;pattern&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>                        <span class="hljs-punctuation">&#123;</span>                            <span class="hljs-attr">&quot;regexp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.&quot;</span><span class="hljs-punctuation">,</span>                            <span class="hljs-attr">&quot;file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>                            <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>                            <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span>                        <span class="hljs-punctuation">&#125;</span>                    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>                    <span class="hljs-attr">&quot;background&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>                        <span class="hljs-attr">&quot;beginsPattern&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.*Now run &#x27;gdb&#x27; in another window.&quot;</span><span class="hljs-punctuation">,</span>                        <span class="hljs-comment">// 要对应编译成功后,一句echo的内容. 此处对应 Makefile Line:170</span>                        <span class="hljs-attr">&quot;endsPattern&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.&quot;</span>                    <span class="hljs-punctuation">&#125;</span>                <span class="hljs-punctuation">&#125;</span>            <span class="hljs-punctuation">]</span>        <span class="hljs-punctuation">&#125;</span>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-comment">// .gdbinit.tmpl-riscv</span>set confirm offset architecture riscv<span class="hljs-punctuation">:</span>rv64#target remote <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-punctuation">:</span><span class="hljs-number">1234</span>symbol-file kernel/kernelset disassemble-next-line autoset riscv use-compressed-breakpoints yes&lt;!--code￼<span class="hljs-number">1</span>--&gt;</code></pre></li></ul><h2 id="pingpong"><a class="markdownIt-Anchor" href="#pingpong"></a> pingpong</h2><blockquote><p>注意：不用的管道需要关闭</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/types.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;user/user.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 1</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span>&#123;<br>    <span class="hljs-comment">//p1是父写给子，p2是子写给父</span><br>    <span class="hljs-type">int</span> p1[<span class="hljs-number">2</span>], p2[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">char</span> buf[MAXSIZE];<br>    pipe(p1);<br>    pipe(p2);<br>    <span class="hljs-type">int</span> pid = fork();<br><br>    <span class="hljs-keyword">if</span>(pid &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// close the pipe port and prevent others from operating</span><br>        <span class="hljs-comment">// 0 indicates read and 1 indicates write</span><br>        close(p1[<span class="hljs-number">0</span>]);<br>        close(p2[<span class="hljs-number">1</span>]);<br>        <br>        write(p1[<span class="hljs-number">1</span>], <span class="hljs-string">&quot; &quot;</span>, MAXSIZE);<br>        read(p2[<span class="hljs-number">0</span>], buf, MAXSIZE);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d: received pong\n&quot;</span>, getpid());<br><br>        close(p1[<span class="hljs-number">1</span>]);<br>        close(p2[<span class="hljs-number">0</span>]);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        close(p1[<span class="hljs-number">1</span>]);<br>        close(p2[<span class="hljs-number">0</span>]);<br><br>        read(p1[<span class="hljs-number">0</span>], buf, MAXSIZE);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d: received ping\n&quot;</span>, getpid());<br>        write(p2[<span class="hljs-number">1</span>], <span class="hljs-string">&quot; &quot;</span>, MAXSIZE);<br><br>        close(p1[<span class="hljs-number">0</span>]);<br>        close(p2[<span class="hljs-number">1</span>]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="primes"><a class="markdownIt-Anchor" href="#primes"></a> primes</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/types.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;user/user.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NUM 36</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">child</span><span class="hljs-params">(<span class="hljs-type">int</span> *p)</span>;<br><span class="hljs-comment">//the parent thread is for pl and input the number</span><br><span class="hljs-comment">//the child thread is for selecting and printing, its child is for recursion</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span>&#123;<br>    <span class="hljs-type">int</span> pl[<span class="hljs-number">2</span>];<br>    pipe(pl);<br><br>    <span class="hljs-keyword">if</span>(fork() &gt; <span class="hljs-number">0</span>)&#123;<br>        close(pl[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; NUM; i++)<br>        &#123;<br>            write(pl[<span class="hljs-number">1</span>], &amp;i, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<span class="hljs-comment">//想管道写入数据，只有该数据被读后，才会写入下一个，这样就可以实现每个子进程只获取当前数字</span><br>        &#125;<br>        close(pl[<span class="hljs-number">1</span>]);<br>        wait(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        child(pl);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">child</span><span class="hljs-params">(<span class="hljs-type">int</span>* pl)</span>&#123;<br>    <span class="hljs-type">int</span> pr[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">int</span> n;<br><br>    close(pl[<span class="hljs-number">1</span>]);<br>    <span class="hljs-comment">//这里读取最开始的35个数字，若是读完了，那么就结束了</span><br>    <span class="hljs-type">int</span> read_result = read(pl[<span class="hljs-number">0</span>], &amp;n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<span class="hljs-comment">//这里子进程只维护一开始的35个数字，后面的质数输出是靠孙进程来实现</span><br>    <span class="hljs-keyword">if</span>(!read_result)<span class="hljs-comment">//结束条件，没有数字了</span><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>    pipe(pr);<br>    <span class="hljs-keyword">if</span> (fork() &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        close(pr[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;prime %d\n&quot;</span>, n);<br>        <span class="hljs-type">int</span> prime = n;<br>        <span class="hljs-comment">//子进程从父进程读取数字</span><br>        <span class="hljs-keyword">while</span> (read(pl[<span class="hljs-number">0</span>], &amp;n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)))<br>        &#123;<br>            <span class="hljs-keyword">if</span> (n % prime)<br>            &#123;<br>                <span class="hljs-comment">//子进程写给孙进程的数字</span><br>                write(pr[<span class="hljs-number">1</span>], &amp;n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<span class="hljs-comment">//子进程向孙进程写入数据</span><br>            &#125;<br>        &#125;<br>        close(pr[<span class="hljs-number">1</span>]);<br>        wait(<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        child(pr);<span class="hljs-comment">//再让更下一层的进程来处理之后的质数输出</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="find"><a class="markdownIt-Anchor" href="#find"></a> find</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/types.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;user/user.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/fs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/stat.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/fcntl.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">char</span> *path, <span class="hljs-type">char</span> *target_file)</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">3</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERROR: You need pass in only 2 arguments\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-type">char</span> *target_path = argv[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">char</span> *target_file = argv[<span class="hljs-number">2</span>];<br>    find(target_path, target_file);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">char</span> *path, <span class="hljs-type">char</span> *target_file)</span><br>&#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">512</span>], *p;<br>    <span class="hljs-type">int</span> fd;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> <span class="hljs-title">de</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span><br><br>    <span class="hljs-comment">//这里打开后给了句柄给fd，里面包含了所含&#x27;文件和目录&#x27;的名称</span><br>    <span class="hljs-keyword">if</span>((fd = open(path, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cannot open\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//这里fstat用于获取一个已经打开的文件或设备的状态信息，以便于之后的判断</span><br>    <span class="hljs-keyword">if</span>(fstat(fd, &amp;st) &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cannot stat&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//读取该fd(目录)包含的文件或目录的名称,若是一个文件，那就是读取自身的名称</span><br>    <span class="hljs-keyword">while</span>(read(fd,&amp;de,<span class="hljs-keyword">sizeof</span>(de)) == <span class="hljs-keyword">sizeof</span>(de))&#123;<br>        <span class="hljs-comment">//add the full path</span><br>        <span class="hljs-built_in">strcpy</span>(buf, path);<br>        p = buf + <span class="hljs-built_in">strlen</span>(buf);<br>        *p++ = <span class="hljs-string">&#x27;/&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(de.inum == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-comment">//移动名称，这个时候p已经指向了/后面，所以直接赋值</span><br>        memmove(p, de.name, DIRSIZ);<br>        <span class="hljs-comment">//最后的数值为0，就是截断标志</span><br>        p[DIRSIZ] = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span>(stat(buf,&amp;st) &lt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;connot stat&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">switch</span>(st.type)&#123;<br>            <span class="hljs-keyword">case</span> T_FILE:<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(de.name,target_file))&#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, buf);<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> T_DIR:<br>                <span class="hljs-comment">//排除了.与..目录</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(de.name, <span class="hljs-string">&quot;.&quot;</span>) &amp;&amp; <span class="hljs-built_in">strcmp</span>(de.name, <span class="hljs-string">&quot;..&quot;</span>)) &#123;<br>                    find(buf, target_file);<br>                &#125;<br>        &#125;<br>    &#125;<br>    close(fd);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="xargs"><a class="markdownIt-Anchor" href="#xargs"></a> xargs</h2><ul><li><p>这里需要知道<code>echo ab | xargs echo 12 34</code>是输出<code>12 34 ab</code>，即<code>xargs</code>把前面的输出加到了自己指引的命令<code>echo</code>的参数中</p></li><li><p>对于 <code>echo a\nb xargs echo hello</code> ，它会输出</p><ul><li><pre class="highlight"><code class="bash">hello ahello b<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>  - 这里<span class="hljs-string">&#x27;\n&#x27;</span>的作用就是重复再执行一遍xargs后的命令，不过前面的参数发生了改变。下面就体现在读到了<span class="hljs-string">&#x27;\n&#x27;</span>就直接结束<span class="hljs-keyword">while</span>循环，然后在下一次循环中输出<br><br>- 脚本如下<br><br>```c<br><span class="hljs-comment">#include &quot;kernel/types.h&quot;</span><br><span class="hljs-comment">#include &quot;user/user.h&quot;</span><br><span class="hljs-comment">#include &quot;kernel/param.h&quot;</span><br><span class="hljs-comment">#define MAXNUM 100</span><br><br>int main(int argc, char* argv[])&#123;<br>    char argument[MAXARG][MAXNUM];<br><span class="hljs-regexp">//</span>这里<span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)是判断<span class="hljs-string">&#x27;\n&#x27;</span>的情况，没有了就在下面使用read_result读不到了退出，然后再将之前的参数加载到xargs的参数后面，然后再执行一遍<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        memset(argument, <span class="hljs-number">0</span>, MAXARG * MAXNUM);<br>        int count = argc - <span class="hljs-number">1</span>;<br>        <span class="hljs-regexp">//</span>argv[<span class="hljs-number">0</span>]是xargs本身，需要剔除<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">1</span>; i &lt; argc; i++)<br>        &#123;<br>            strcpy(argument[i-<span class="hljs-number">1</span>], argv[i]);<br>        &#125;<br><br>        int xargc = <span class="hljs-number">0</span>;<br>        char buf;<br>        int read_sult;<br>        int flag = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-regexp">//</span>这里从标准输出符<span class="hljs-number">0</span>处读取前面命令的输出内容，这里一个一个字符地读，来区分不同的arg<br>        <span class="hljs-keyword">while</span> ((read_sult = read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">1</span>)) &gt; <span class="hljs-number">0</span> &amp;&amp; buf != <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(buf == <span class="hljs-string">&#x27; &#x27;</span> &amp;&amp; flag)&#123;<br>                count++;<br>                xargc = <span class="hljs-number">0</span>;<br>                flag = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(buf != <span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>                argument[count][xargc++] = buf;<br>                flag = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-regexp">//</span>读到了<span class="hljs-string">&#x27;\n&#x27;</span>,退出<span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span>(read_sult &lt;= <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <br>        <span class="hljs-regexp">//</span>这里xargs后面的第一个参数是一个命令<br>        char *command = argv[<span class="hljs-number">1</span>];<br>        char *xargs[MAXARG];<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; MAXARG - <span class="hljs-number">1</span>; i++)<br>        &#123;<br>            xargs[i] = argument[i];<br>        &#125;<br>        <span class="hljs-regexp">//</span><span class="hljs-number">0</span>截断<br>        xargs[MAXARG - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">if</span> (fork() &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            wait(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            exec(command, xargs);<br>            <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h1 id="lab2"><a class="markdownIt-Anchor" href="#lab2"></a> Lab2</h1><h2 id="trace"><a class="markdownIt-Anchor" href="#trace"></a> trace</h2><ul><li><p>梳理一下具体流程</p><ul><li><p>用户使用我们提供的系统调用接口 <strong>int trace(int)</strong>[user/user.h]</p></li><li><p>这个接口的实现由<strong>perl</strong>[user/usys.pl]脚本生成的汇编语言实现, 将<strong>SYS_trace</strong>的代号放入<strong>a7</strong>寄存器, 由<strong>ecall</strong>硬件支持由用户态转入内核态</p><ul><li><pre class="highlight"><code class="assembly">sub entry &#123;     my $name = shift;    print &quot;.global $name\n&quot;;    print &quot;$&#123;name&#125;:\n&quot;;    print &quot; li a7, SYS_$&#123;name&#125;\n&quot;; #     print &quot; ecall\n&quot;;    print &quot; ret\n&quot;;&#125;# compiler后, entry(&quot;trace&quot;)在usys.S里生成了如下的汇编代码trace: li a7, SYS_trace ecall ret # 这里就是将sys_trace的代码放在a7寄存器中# 然后用riscv提供的ecall指令从用户态切入到内核态!</code></pre></li></ul></li><li><p>控制转到系统调用的通用入口 <strong>void syscall(void)</strong>[kernel/syscall.c] 上. 它由<strong>a7</strong>寄存器读出需要被调用的系统调用号, 从 <em>static uint64 (*syscalls[])(void)</em> 这个函数指针数组跳转到那个具体的系统调用函数实现上. 将返回值放在<strong>a0</strong>寄存器里。</p></li><li><p>这里通过 <em>static uint64 (*syscalls[])(void)</em> 就已经执行系统调用函数了。根据num来查找执行的函数，执行到trace函数时，调用 <strong>sys_trace</strong>[kernel/sysproc.c]，通过 argint 获取参数，然后给当前进程中的 mask 赋值，以便 syscall 来使用。</p></li><li><p>执行完系统调用函数后，又回到 syscall 函数。然后从第二步的<strong>ecall</strong>里退出来了, 汇编指令<strong>ret</strong>使得用户侧系统调用接口返回，这样 trace 函数的执行完毕。</p></li><li><p>但是对于 trace 函数而言结束了，却留下了进程中的 mask 信息，这样当调用系统调用函数时，syscall都会检测 mask，如果匹配，则打印该系统调用函数的相关信息。</p></li></ul></li><li><p>总而言之，系统调用函数都是依靠syscall来实现的，但是trace是先在进程中设置了 mask 信息，这样每次依靠 syscall 来执行系统调用函数时，都会匹配 mask 信息来令 syscall 做出相关响应。</p></li></ul><h2 id="sysinfo"><a class="markdownIt-Anchor" href="#sysinfo"></a> sysinfo</h2><ul><li>这个的操作也是和trace一样</li><li>需要注意的就是</li></ul><h1 id="lab3"><a class="markdownIt-Anchor" href="#lab3"></a> Lab3</h1><h2 id="概念理解"><a class="markdownIt-Anchor" href="#概念理解"></a> 概念理解</h2><p>​每一个进程都拥有只属于自己的页表，当进程切换时，页表也会改变。</p><ul><li>三级页表都是通过64bit寄存器来存储，其中前10bit的下图没有写，是因为它是保留位，以后有作用的话再用上。中间44bit就是PPN，也就是物理内存地址，指向了真实的物理内存。最后的10bit是标志位，标识该页的属性。</li><li>44bit指向了真实的物理内存地址，但是物理地址在硬件上是56bit的，这就需要这44bit再加上12bit的0(因为物理内存以页表形式进行划分，一个页表大小为4096bit，即2^12，所以后面为全0，标识从物理页的起点开始算起)来组成最终完整的物理内存地址，然后进行索引。</li><li>这里虚拟内存地址为39位，前27位存储着3级页表的索引，后面12位则是最后在物理地址的偏移。通过前面27位的索引找到真实物理页地址，在加上偏移就是物理地址了。</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401252249152.png" alt="image-20240125224918027" /></p><ul><li>切换进程，TLB也需要切换</li></ul>]]></content>
    
    
    <categories>
      
      <category>OS相关</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Win64 Kernel 实验</title>
    <link href="/posts/7394324b.html"/>
    <url>/posts/7394324b.html</url>
    
    <content type="html"><![CDATA[<h1 id="ia-32e模式"><a class="markdownIt-Anchor" href="#ia-32e模式"></a> IA-32e模式</h1><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h2><h1 id="smep-smap"><a class="markdownIt-Anchor" href="#smep-smap"></a> SMEP &amp; SMAP</h1><h2 id="visual-studio配置"><a class="markdownIt-Anchor" href="#visual-studio配置"></a> Visual Studio配置</h2><ul><li>x64asm.asm<ul><li>属性-&gt;配置属性-&gt;常规-&gt;{从生成项中排除:<code>否</code> ^ 项类型:<code>自定义生成工具</code>}</li><li>属性-&gt;配置属性-&gt;自定义生成工具-&gt;{命令行:<code>ml64 /c %(filename).asm</code> ^ 输出:<code>%(filename).obj;%(Outputs)</code>}</li><li>确保asm可以和C文件进行混合编译</li></ul></li><li>项目配置<ul><li>属性-&gt;配置属性-&gt;链接器-&gt;常规-&gt;{启动增量链接:<code>否(/INCREMENTAL:NO)</code>}</li><li>属性-&gt;配置属性-&gt;C/C+±&gt;代码生成-&gt;{运行库:<code>多线程(/MT)</code>}</li><li>属性-&gt;配置属性-&gt;链接器-&gt;高级-&gt;{随机基址:<code>否</code> ^ 固定基址:<code>是</code> ^ 基址:<code>0x0000000100000000</code>}</li><li>固定基址是符合代码需要，正常来说并不需要</li></ul></li><li>解决方案生成<ul><li>x64生成解决方案</li></ul></li></ul><h2 id="smep"><a class="markdownIt-Anchor" href="#smep"></a> SMEP</h2><h3 id="code-2"><a class="markdownIt-Anchor" href="#code-2"></a> Code</h3><h4 id="x64asasm"><a class="markdownIt-Anchor" href="#x64asasm"></a> x64as.asm</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;x64asm.asm<br>option casemap:none<br><br>EXTERN x:qword<br><br>.DATA<br><br>.CODE<br><br>IntEntryPROC<br>iretq<br>IntEntryENDP<br><br>goPROC<br>int 21h<br>ret<br>goENDP<br><br>END<br></code></pre></td></tr></table></figure><h4 id="testc"><a class="markdownIt-Anchor" href="#testc"></a> test.c</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//test.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">//对于cpp文件，则是extern &quot;C&quot;…… 这里注意区分c与cpp的不同</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">IntEntry</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">go</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">extern</span> ULONG64 x;<br><br>ULONG64 x;<br><span class="hljs-comment">//构造中断门(IDT),使程序可以通过int 21h 进入IntEntry函数</span><br><span class="hljs-comment">//eq idtr+210 0000ee00`00101000</span><br><span class="hljs-comment">//eq idtr+218 1</span><br><span class="hljs-comment">//修改SMEP，Cr4的第20位清零</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">if</span> ((ULONG64)IntEntry != <span class="hljs-number">0x0000000100001000</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong IntEntry at %p \n&quot;</span>, IntEntry);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><br>go();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p \n&quot;</span>, x);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="smap"><a class="markdownIt-Anchor" href="#smap"></a> SMAP</h2><h3 id="code-3"><a class="markdownIt-Anchor" href="#code-3"></a> Code</h3><h4 id="x64asasm-2"><a class="markdownIt-Anchor" href="#x64asasm-2"></a> x64as.asm</h4><ul><li><p>代码修改1</p><ul><li>自己把Cr4的第21位(SMAP)清零</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">IntEntryPROC<br>mov rax, qword ptr [0fffff8034b290fd0h];gdt[4]<br>mov x, rax<br>iretq<br>IntEntryENDP<br></code></pre></td></tr></table></figure></li><li><p>代码修改2</p><ul><li>使用 <code>stac</code> 将 <code>SMAP</code> 清零，但是只是运行时生效</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">IntEntryPROC<br>mov rax, qword ptr [0fffff8048528e000h]<br>stac;如果找不到这条指令，可以emit对应的字节码<br>mov x, rax<br>iretq<br>IntEntryENDP<br></code></pre></td></tr></table></figure></li></ul><h2 id="代码功能"><a class="markdownIt-Anchor" href="#代码功能"></a> 代码功能</h2><ul><li>对于<code>SMEP</code>与<code>SMAP</code>的存在检验，<code>test.c</code>主要就是构造函数执行的主窗口，<code>x64asm.asm</code>中则是对于相关函数进行实现</li><li>对于<code>x64asm.asm</code>文件<ul><li><code>go</code>函数主要实现通过中断门进入到内核，这里需要提前在<code>Windbg</code>中进行中断门构造</li><li><code>IntEntry</code>则在不同的验证代码中具体实现对于内核地址数据的访问与写入</li></ul></li></ul><h1 id="9-9-9-9-12分页"><a class="markdownIt-Anchor" href="#9-9-9-9-12分页"></a> 9-9-9-9-12分页</h1><h2 id="visual-studio配置-2"><a class="markdownIt-Anchor" href="#visual-studio配置-2"></a> Visual Studio配置</h2><ul><li>x64asm.asm<ul><li>属性-&gt;配置属性-&gt;常规-&gt;{从生成项中排除:<code>否</code> ^ 项类型:<code>自定义生成工具</code>}</li><li>属性-&gt;配置属性-&gt;自定义生成工具-&gt;{命令行:<code>ml64 /c %(filename).asm</code> ^ 输出:<code>%(filename).obj;%(Outputs)</code>}</li><li>确保asm可以和C文件进行混合编译</li></ul></li><li>项目配置<ul><li>删除项目中Driver Files中的文件</li><li>属性-&gt;配置属性-&gt;C/C+±&gt;常规-&gt;{将警告视为错误:<code>否</code>}</li><li>属性-&gt;配置属性-&gt;链接器-&gt;常规-&gt;{启动增量链接:<code>否(/INCREMENTAL:NO)</code>}</li><li>属性-&gt;配置属性-&gt;lnf2Cat-&gt;{Run lnf2Cat:<code>是</code>}</li><li>属性-&gt;配置属性-&gt;Driver Signing-&gt;{Sign Mode:<code>Off</code>}</li></ul></li><li>解决方案生成<ul><li>x64生成解决方案</li></ul></li></ul><h2 id="coda"><a class="markdownIt-Anchor" href="#coda"></a> Coda</h2><h3 id="entryc"><a class="markdownIt-Anchor" href="#entryc"></a> entry.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//entry.c-&gt;驱动的主函数和入口</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ntddk.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;common.h&quot;</span></span><br><br><span class="hljs-comment">//定义全局变量,这里需要定义asm与scan.c用到的变量</span><br>ULONG64 g_NT_BASE;<br>ULONG64 g_PTE_BASE;<br>ULONG64 g_PDE_BASE;<br>ULONG64 g_PPE_BASE;<br>ULONG64 g_PXE_BASE;<br>ULONG64 g_IDT;<br>ULONG64 g_Cr4;<br><br>VOID <span class="hljs-title function_">DriverUnload</span><span class="hljs-params">(PDRIVER_OBJECT driver)</span><br>&#123;<br>    DbgPrintEx(<span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Driver is unloading...\n----------------------------------------------\n&quot;</span>);<br>&#125;<br><br>NTSTATUS <span class="hljs-title function_">DriverEntry</span><span class="hljs-params">(PDRIVER_OBJECT  driver, PUNICODE_STRING RegistryPath)</span><br>&#123;<br>    DbgPrintEx(<span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;----------------------------------------------\nDriver is loading  ...\n&quot;</span>);<br><br>    <span class="hljs-comment">//通过遍历模块匹配设置g_NT_BASE(nt模块的基址)的数据</span><br>    GetNtBaseAddress(driver);<br>    <span class="hljs-comment">//通过Nt模块首地址计算页表基址</span><br>    GetPageAddress(g_NT_BASE);<br><br>    driver-&gt;DriverUnload = DriverUnload;<br>    <span class="hljs-keyword">return</span> STATUS_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="commomh"><a class="markdownIt-Anchor" href="#commomh"></a> commom.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//common.h-&gt;相关结构体的定义和函数的声明(包含asm文件的引用)</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> COMMON_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COMMON_H</span><br><br><span class="hljs-comment">//这里是用来遍历内核模块，从而找到NT模块的基地址</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">LDR_DATA_TABLE_ENTRY</span> &#123;</span><br>    LIST_ENTRY InLoadOrderLinks;               <span class="hljs-comment">//链表存储，两个成员Flink(后)与Blink(前),指向一个LDR_DATA_TABLE_ENTRY结构</span><br>    LIST_ENTRY InMemoryOrderLinks;<br>    LIST_ENTRY InInitializationOrderLinks;<br>    PVOID DllBase;                             <span class="hljs-comment">//基址</span><br>    PVOID EntryPoint;<br>    ULONG SizeOfImage;<br>    UNICODE_STRING FullDllName;                <span class="hljs-comment">//完整模块名，以\??\格式(0环格式)开始</span><br>    UNICODE_STRING BaseDllName;                <span class="hljs-comment">//存放着驱动模块名</span><br>    ULONG Flags;<br>    USHORT LoadCount;<br>    USHORT TlsIndex;<br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>        LIST_ENTRY HashLinks;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>            PVOID SectionPointer;<br>            ULONG CheckSum;<br>        &#125;;<br>    &#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>            ULONG TimeDateStamp;<br>        &#125;;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>            PVOID LoadedImports;<br>        &#125;;<br>    &#125;;<br>&#125;LDR_DATA_TABLE_ENTRY, * PLDR_DATA_TABLE_ENTRY;<br><br><span class="hljs-comment">//设置自定义函数，在scan.c中实现</span><br><span class="hljs-comment">//根据页表规则计算地址</span><br>PULONG64 <span class="hljs-title function_">GetPteAddress</span><span class="hljs-params">(PVOID addr)</span>;<br>PULONG64 <span class="hljs-title function_">GetPdeAddress</span><span class="hljs-params">(PVOID addr)</span>;<br>PULONG64 <span class="hljs-title function_">GetPpeAddress</span><span class="hljs-params">(PVOID addr)</span>;<br>PULONG64 <span class="hljs-title function_">GetPxeAddress</span><span class="hljs-params">(PVOID addr)</span>;<br><br><span class="hljs-comment">//根据页表分级获得地址</span><br>VOID <span class="hljs-title function_">GetPageAddress</span><span class="hljs-params">(ULONG64 g_NT_BASE)</span>;<br><span class="hljs-comment">//获得Nt模块的基址地址</span><br>VOID <span class="hljs-title function_">GetNtBaseAddress</span><span class="hljs-params">(PDRIVER_OBJECT driver)</span>;<br><span class="hljs-comment">//线性地址转化为物理地址</span><br>VOID <span class="hljs-title function_">Address_translation</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">//引用entry.c文件中的变量与函数</span><br><span class="hljs-keyword">extern</span> ULONG64 g_NT_BASE;<br><span class="hljs-keyword">extern</span> ULONG64 g_PTE_BASE;<br><span class="hljs-keyword">extern</span> ULONG64 g_PDE_BASE;<br><span class="hljs-keyword">extern</span> ULONG64 g_PPE_BASE;<br><span class="hljs-keyword">extern</span> ULONG64 g_PXE_BASE;<br><br><span class="hljs-comment">//引用asm文件中的变量与函数</span><br><span class="hljs-keyword">extern</span> ULONG64 g_Cr4;<br><span class="hljs-keyword">extern</span> ULONG64 g_IDT;<br><span class="hljs-keyword">extern</span> VOID <span class="hljs-title function_">Asm_Read_Cr4</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">extern</span> VOID <span class="hljs-title function_">Asm_Read_IDT</span><span class="hljs-params">()</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// COMMON_H</span></span><br><span class="hljs-comment">//#-&gt;这是一个预处理器指令，没有定义就创建宏，定义了就跳过，防止重复包含</span><br></code></pre></td></tr></table></figure><h3 id="scanc"><a class="markdownIt-Anchor" href="#scanc"></a> scan.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//scan.c-&gt;实现函数的定义</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ntddk.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;common.h&quot;</span></span><br><br><span class="hljs-comment">//根据线性地址得到物理地址</span><br>PULONG64 <span class="hljs-title function_">GetPxeAddress</span><span class="hljs-params">(PVOID addr)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> (PULONG64)(((((ULONG64)addr &amp; <span class="hljs-number">0xffffffffffff</span>) &gt;&gt; <span class="hljs-number">39</span>) &lt;&lt; <span class="hljs-number">3</span>) + g_PXE_BASE);<br>&#125;<br>PULONG64 <span class="hljs-title function_">GetPpeAddress</span><span class="hljs-params">(PVOID addr)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> (PULONG64)(((((ULONG64)addr &amp; <span class="hljs-number">0xffffffffffff</span>) &gt;&gt; <span class="hljs-number">30</span>) &lt;&lt; <span class="hljs-number">3</span>) + g_PPE_BASE);<br>&#125;<br>PULONG64 <span class="hljs-title function_">GetPdeAddress</span><span class="hljs-params">(PVOID addr)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> (PULONG64)(((((ULONG64)addr &amp; <span class="hljs-number">0xffffffffffff</span>) &gt;&gt; <span class="hljs-number">21</span>) &lt;&lt; <span class="hljs-number">3</span>) + g_PDE_BASE);<br>&#125;<br>PULONG64 <span class="hljs-title function_">GetPteAddress</span><span class="hljs-params">(PVOID addr)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> (PULONG64)(((((ULONG64)addr &amp; <span class="hljs-number">0xffffffffffff</span>) &gt;&gt; <span class="hljs-number">12</span>) &lt;&lt; <span class="hljs-number">3</span>) + g_PTE_BASE);<br>&#125;<br><br><br><span class="hljs-comment">//获取内核模块NT的基址与IDTR的基址</span><br>VOID <span class="hljs-title function_">GetNtBaseAddress</span><span class="hljs-params">(PDRIVER_OBJECT driver)</span> &#123;<br>    PLDR_DATA_TABLE_ENTRY pLDR_Head = <span class="hljs-literal">NULL</span>;<br>    PLDR_DATA_TABLE_ENTRY pLDR_Tail = <span class="hljs-literal">NULL</span>;<br>    UNICODE_STRING ModuleName = &#123; <span class="hljs-number">0</span> &#125;;<br>    RtlInitUnicodeString(&amp;ModuleName, <span class="hljs-string">L&quot;ntoskrnl.exe&quot;</span>);<br><br>    pLDR_Head = (PLDR_DATA_TABLE_ENTRY)driver-&gt;DriverSection;<br>    pLDR_Tail = pLDR_Head;<br><br>    <span class="hljs-keyword">do</span>&#123;<br>        <span class="hljs-keyword">if</span> (RtlCompareUnicodeString(&amp;pLDR_Tail-&gt;BaseDllName, &amp;ModuleName, TRUE) == <span class="hljs-number">0</span>) &#123;<br>            DbgPrintEx(<span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;NtModuleBase = %p \n&quot;</span>, pLDR_Tail-&gt;DllBase);<br>            g_NT_BASE = (ULONG64)pLDR_Tail-&gt;DllBase;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        pLDR_Tail = (PLDR_DATA_TABLE_ENTRY)pLDR_Tail-&gt;InLoadOrderLinks.Flink;<br>    &#125; <span class="hljs-keyword">while</span> (pLDR_Head != pLDR_Tail);<br><br>    <span class="hljs-comment">//DbgPrintEx(77, 0, &quot;NtModuleBase = %p \n&quot;, g_IDTR);</span><br>&#125;<br><br><span class="hljs-comment">//获取PTE等页表基址</span><br>VOID <span class="hljs-title function_">GetPageAddress</span><span class="hljs-params">(ULONG64 g_NT_BASE)</span> &#123;<br>    g_PTE_BASE = *(PULONG64)(g_NT_BASE + <span class="hljs-number">0xC8BC</span>);<br>    <span class="hljs-comment">//这里的0xC8BC是使用WinDbg搜索的PTE距离NT_BASE的偏移</span><br>    g_PDE_BASE = (ULONG64)GetPteAddress((PVOID)g_PTE_BASE);<br>    g_PPE_BASE = (ULONG64)GetPteAddress((PVOID)g_PDE_BASE);<br>    g_PXE_BASE = (ULONG64)GetPteAddress((PVOID)g_PPE_BASE);<br><br>    DbgPrintEx(<span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Pte Base Address = %p\n&quot;</span>, (PVOID)g_PTE_BASE);<br>    DbgPrintEx(<span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Pde Base Address = %p\n&quot;</span>, (PVOID)g_PDE_BASE);<br>    DbgPrintEx(<span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Ppe Base Address = %p\n&quot;</span>, (PVOID)g_PPE_BASE);<br>    DbgPrintEx(<span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Pxe Base Address = %p\n&quot;</span>, (PVOID)g_PXE_BASE);<br><br>    <span class="hljs-comment">//为g_Cr4与g_IDT赋值</span><br>    Asm_Read_Cr4();<br>    Asm_Read_IDT();<br>    <span class="hljs-comment">//调整g_IDT为在WinDbg中的显示地址</span><br>    g_IDT = ((g_IDT) &gt;&gt; <span class="hljs-number">16</span>) | <span class="hljs-number">0xffff000000000000</span>;<br>    <span class="hljs-comment">//获取某一个线性地址所在的页面的页表地址(线性地址)</span><br>    ULONG64 terget_address = g_IDT;<br>    DbgPrintEx(<span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;g_IDT: %p\n&quot;</span>, (PVOID)g_IDT);<br>    DbgPrintEx(<span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;g_Cr4: %p\n&quot;</span>, (PVOID)g_Cr4);<br>    DbgPrintEx(<span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;PTE: %p\n&quot;</span>, GetPteAddress((PVOID)terget_address));<br>    DbgPrintEx(<span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;PDE: %p\n&quot;</span>, GetPdeAddress((PVOID)terget_address));<br>    DbgPrintEx(<span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;PPE: %p\n&quot;</span>, GetPpeAddress((PVOID)terget_address));<br>    DbgPrintEx(<span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;PXE: %p\n&quot;</span>, GetPxeAddress((PVOID)terget_address));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="x64asmasm"><a class="markdownIt-Anchor" href="#x64asmasm"></a> x64asm.asm</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;x64asm.asm-&gt;实现64位c的混合汇编<br>option casemap:none<br><br>;结构体的定义,举个例子<br>IDTDescriptor STRUC  2<br>baseqword 0 <br>limitqword  0<br>IDTDescriptor ENDS<br><br>;这里的参数是引用的entry.c中的参数，所以在c代码中需要定义<br>EXTERN g_Cr4:qword<br>EXTERN g_IDT:qword<br><br>.DATA<br><br>.CODE<br><br>;获得Cr4的线性地址<br>Asm_Read_Cr4 PROC <br>mov rax,cr4<br>mov [g_Cr4],rax<br>ret<br>Asm_Read_Cr4 ENDP<br><br>;获取IDT的基址<br>Asm_Read_IDT PROC<br>sidt [g_IDT]<br>ret<br>Asm_Read_IDT ENDP<br><br>END<br></code></pre></td></tr></table></figure><h2 id="代码功能-2"><a class="markdownIt-Anchor" href="#代码功能-2"></a> 代码功能</h2><ul><li>对于9-9-9-9-12分页模式，这里在<code>entry.c</code>中进行相关模块的引用与注释介绍，在<code>scan.c</code>与<code>x64asm.asm</code>中实现相关函数的具体功能，在<code>commom.h</code>中实现相关结构体与变量的引用</li><li>这里简单讲解一下<code>scan.c</code>中实现的函数<ul><li>类<code>GetPteAddress</code>函数的功能就是根据基于页表基址的直接物理搜索的规则来进行公式的陈列。这里的<code>pte</code>就是在基址上左移12位–去掉后12位的物理属性，之后左移3位–乘以每个表项8位的长度，这样就得到了线性地址转换而来的它所属的<code>pte</code>地址(线性地址)</li><li><code>GetNtBaseAddress</code>则是获取了Nt模块的基址。这里对于本驱动中存储的<code>PLDR_DATA_TABLE_ENTRY pLDR_Head</code>链进行遍历，这个双向链表挂载着所有的驱动，由此经过驱动名称的比对找到相应的驱动，从而获得驱动的开始地址</li><li><code>GetPageAddress</code>则是根据Nt模块基址与相应公式，查找<code>pte</code>等表的<code>基址</code>(windbg中可以使用<code>!pte 0</code>查看)与计算线性地址的所属的页表地址。由于win10机制，每次开机的pte等基址会发生改变，所以需要对win10中Nt模块的源代码进行逆向，查找具体的偏移地址来查找pte等的基址。<ul><li>对于基址的查找都是使用<code>GetPteAddress</code>函数，这里可以理解为<strong>执行 PTE 所在物理页面的 PTE 是 PDE</strong>：就是说页表基址也是被一个PDT所指向的，所以可以根据页表地址来逆推出其他的基址。</li><li>这里同时根据某一个线性地址，实现了去查找它所属的pte,pde,ppe,pxe的页表开始地址</li><li>这里都是线性地址范畴，同时需要理解pte,pde,ppe,pxe的基址与地址的概念，它们都是一张张表构成的，基址指第一张表的开始地址，而地址指每一张表的开始地址</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>OS相关</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>VM保护攻防</title>
    <link href="/posts/6b79a6f5.html"/>
    <url>/posts/6b79a6f5.html</url>
    
    <content type="html"><![CDATA[<h1 id="vm保护攻防"><a class="markdownIt-Anchor" href="#vm保护攻防"></a> VM保护攻防</h1>]]></content>
    
    
    <categories>
      
      <category>逆向笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Win64_Kernel简述</title>
    <link href="/posts/9fe68f2a.html"/>
    <url>/posts/9fe68f2a.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>详细参考</p><ul><li><a href="https://lzyddf.blog.csdn.net/?type=blog">Windows x64内核学习笔记</a></li><li><a href="https://space.bilibili.com/37877654/channel/seriesdetail?sid=1467288">x64内核研究</a></li></ul></blockquote><h1 id="ia-32e模式"><a class="markdownIt-Anchor" href="#ia-32e模式"></a> IA-32e模式</h1><h2 id="前瞻"><a class="markdownIt-Anchor" href="#前瞻"></a> 前瞻</h2><p><strong>描述</strong>：</p><ul><li><p>在64位下，有两种<code>CPU</code>模式，一种是<code>IA-32e</code>模式，是<code>IA-32</code>模式的扩展，另一个是<code>Legacy</code>模式。<code>IA-32e</code>模式是指内核64位，用户64或32位均可，它强制平坦段，不支持任务切换；而<code>Legacy</code>模式指内核32位，用户32位支持非平坦段、任务切换、虚拟8086、实模式等。</p></li><li><p>在<code>IA-32e</code>模式下，代码段和数据段仍使用64位描述符，强制平坦(<code>FS</code>，<code>GS</code>除外)；<code>TSS</code>段描述符扩展到<code>128</code>位，<code>TSS</code>段不用来任务切换，主要保存一堆<code>rsp</code>备用指针；中断门描述符扩展到<code>128</code>位</p></li><li><p><strong>IA-32e</strong>是IA-32模式的扩展，它是一种状态，其内核为64位，用户可以是32位，也可以是64位</p></li><li><p>当在64位CPU中安装32位操作系统时，内核和用户都是32位的，这种状态叫做<strong>Legacy模式</strong></p></li></ul><p><strong>IA-32e模式的几个特性</strong>：</p><ul><li>强制平坦段：段基址不可随意设置，即不再兼容16位模式了。</li><li>不支持任务切换：取消了TSS任务切换</li><li>取消了虚拟8086模式和实模式切换</li></ul><h2 id="模式检测"><a class="markdownIt-Anchor" href="#模式检测"></a> 模式检测</h2><p><strong>描述</strong>：</p><ul><li>如果IA32_EFER MSR(下标为0xC0000080)寄存器的值第八位为1，说明当前系统处于IA-32e模式。</li></ul><h2 id="强制平坦段"><a class="markdownIt-Anchor" href="#强制平坦段"></a> 强制平坦段</h2><p><strong>描述</strong>：</p><ul><li><p>在x64模式下，段描述符已经不再描述段的基址和界限(除了FS和GS)，因此把这种机制叫做强制平坦段。</p></li><li><p>对于x64模式的gdt表来说，段描述符比x86系统少了很多，这是因为x64将侧重点放在了页保护而不是段保护。</p></li></ul><h2 id="任务切换"><a class="markdownIt-Anchor" href="#任务切换"></a> 任务切换</h2><p><strong>描述</strong>：</p><ul><li><p>在IA-32e模式下，TSS段描述符扩展到128位，用于满足寻址要求(普通段寄存器不再需要基址和界限)</p></li><li><p>TSS段描述符不用来进行任务切换，而是主要保存一堆RSP的备用指针(当3环和0环发生任务切换时)</p></li></ul><h2 id="中断门描述符"><a class="markdownIt-Anchor" href="#中断门描述符"></a> 中断门描述符</h2><p><strong>描述</strong>：</p><ul><li>在x64模式中，中断门描述符也拓展到了128位，这样才能满足寻址要求</li></ul><h2 id="fs-gs"><a class="markdownIt-Anchor" href="#fs-gs"></a> FS / GS</h2><p><strong>描述</strong>：</p><ul><li><p>在x64系统中，当处于0环时，FS不再指向KPCR，而是由GS指向KPCR，在3环时GS指向TEB</p></li><li><p>并且x64不再支持调用门、陷阱门、任务门，一律只支持中断门。</p></li><li><p>为什么要这么做呢？</p><ul><li>因为如果通过其他门进去后再去关中断，那么执行关中断的指令时，如果产生了外部中断，由于此时FS寄存器和GS寄存器还没被正确设置，因此可能会产生错误，而调用中断门时，系统会自动将EFLAGS中的IF位清零，即关闭外部中断。</li></ul></li><li><p>既然x64已经将段寄存器强制平坦了，FS和GS的基址该去哪里找呢？</p><ul><li>三个MSR寄存器。</li><li><code>IA32_FS_BASE</code>(下标0xC0000100)</li><li><code>IA32_GS_BASE</code>(下标0xC0000101)</li><li><code>IA32_KERNEL_GS_BASE</code>(下标0xC0000102)</li></ul></li></ul><h3 id="模式切换"><a class="markdownIt-Anchor" href="#模式切换"></a> 模式切换</h3><p><strong>中断</strong>：</p><ul><li>只使用一张IDT表，内核可以根据栈上的CS判断先前模式。</li></ul><p><strong>系统调用</strong>：</p><ul><li>只使用一张SSDT表</li><li>64位程序通过<code>syscall</code>进入内核</li><li>32位程序在<code>ring3转入x64模式</code>再进入内核</li></ul><h1 id="smep-smap"><a class="markdownIt-Anchor" href="#smep-smap"></a> SMEP &amp; SMAP</h1><ul><li><p><strong>SMEP</strong>：位于Cr4的第20位，作用是让处于内核权限的CPU无法执行用户代码</p></li><li><p><strong>SMAP</strong>：位于Cr4的第21位，作用是让处于内核权限的CPU无法读写用户代码</p><ul><li>STAC指令相当于Set AC，用于设置AC标志位，能暂时解除系统的一些保护，包括SMAP保护</li></ul></li><li><p>注意：</p><ul><li>即使解除这两个保护，也只能访问一部分0环内存，因为还存在内核页表隔离机制</li></ul></li></ul><h1 id="分页"><a class="markdownIt-Anchor" href="#分页"></a> 分页</h1><h2 id="9-9-9-9-12分页"><a class="markdownIt-Anchor" href="#9-9-9-9-12分页"></a> 9-9-9-9-12分页</h2><p><strong>描述</strong>：</p><ul><li><p>随着计算机技术的发展，64位系统逐渐占据主流地位，那么也就表示CPU的最大寻址范围为64位。但实际上，CPU只使用了其中的<strong>48位</strong>用于寻址，并使用<strong>9-9-9-9-12分页模式</strong>。即便如此，在未来较长一段时间里，48位寻址范围也足够大部分人的日常使用了</p></li><li><p>9-9-9-9-12分页表示物理地址拥有四级页表，在Intel开发手册中，将这四级页表分别称为<code>PML4E、PDPTE、PDE、PTE</code>，但微软的命名方式略有不同，将这四级页表分别称为 <code>PXE、PPE、PDE、PTE</code>，WinDbg中也是如此</p></li><li><p>对于地址 <code>21BABF52910</code>而言，先按照9-9-9-9-12分级，之后按照每一页占8个字节在<code>Cr3</code>的基础上寻找，这里最后3个字节的数据为物理页的属性，搜索的时候也是需要置零再进行相加搜索</p></li></ul><h2 id="页表基址"><a class="markdownIt-Anchor" href="#页表基址"></a> 页表基址</h2><h3 id="前瞻-2"><a class="markdownIt-Anchor" href="#前瞻-2"></a> 前瞻</h3><ul><li>操作系统会将当前进程的物理页映射在某个线性地址中，以供程序读取自己的页表内容</li><li>在x86系统中，页表基址是固定的，位于<code>0xC0000000</code>，将这个线性地址进行解析，访问其物理页的内容，会发现从这个地址开始，里面保存的数据为当前程序的所有物理页地址</li><li>而在x64系统中，页表基址不再是固定的值，而是每次系统启动后随机生成的</li><li>可以在WinDbg中查看0地址对应的线性地址来确定当前的页表基址，这里可以看到 <code>PXE、PPE、PDE、PTE</code> 的页表基址(只有后48位才是有效地址)<ul><li>其中，每个物理页占8个字节，例如，第一个物理页地址位于线性地址0xFFFF800000000000，第二个物理页地址位于线性地址0xFFFF800000000008，每个物理页中包含1024个字节的数据</li></ul></li></ul><h3 id="定位基址"><a class="markdownIt-Anchor" href="#定位基址"></a> 定位基址</h3><ul><li>关于定位随机化页表基址，这里包含两种方法[<a href="https://bbs.kanxue.com/thread-254276.htm">原创]逆向TesSafe.sys有感：鹅厂是如何定位随机化的PTE_BASE-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></li><li>同时周壑老师的定位方法就是首先在WinDbg中定位内核模块的地址，然后在内核模块中搜索与当前<code>页表基址</code>相同的值出现的位置，接着，在IDA中定位到数据所在的位置，可以看到是某行代码引用了这个值的硬编码，在WinDbg中查看这段代码，能够识别到<code>CcUnpinFileDataEx</code>函数(<strong>这个函数不重要，只要是引用了页表基址的api都可以利用</strong>)<ul><li>那么，由于系统每次启动时基址是不固定的，因此这些值也不可能是固定的硬编码，肯定是有“人”对这些值进行了修改，在需要使用时，可以通过固定的偏移量提取硬编码，从而得到页表基址，但要注意不同版本的内核文件的偏移量可能是不同的</li><li>这里的本质就是通过NT模块+固定偏移来进行定位</li></ul></li></ul><h3 id="线性地址定位"><a class="markdownIt-Anchor" href="#线性地址定位"></a> 线性地址定位</h3><h4 id="pde-to-pxe首地址定位"><a class="markdownIt-Anchor" href="#pde-to-pxe首地址定位"></a> PDE to PXE首地址定位</h4><p>​这里知道了页表基址(线性地址，也是存储着PTI的表的地址)，由此可以知道 <code>PDE PPE PXE</code> 的基址(例如存储着PDT的表的地址)</p><ul><li><p><strong>执行 PTE 所在物理页面的 PTE 是 PDE</strong>：这里的意思就是页表基址也是被一个PDT所指向的，所以可以根据页表地址来逆推出其他的基址。</p></li><li><p><strong>通俗解释</strong>：<strong>页表基址本身也是一个线性地址</strong>，也需要有人来管理，因此将页表基址本身当做一个线性地址，向右移动12位能够得到PDE基址对应的PTI，再乘以8(每个物理页地址占8个字节)就能够得到PDE基址在页表基址中的偏移量，然后将这个偏移量再加上页表基址就能得到PDE基址所在的线性地址。同理，也能够通过PDE基址得到PPE基址和PXE基址的线性地址</p></li><li><p><strong>计算公式</strong>：</p><ul><li><p><code>PDE_BASE</code> = ((addr &amp; 0xffffffffffff) &gt;&gt; 12) &lt;&lt; 3 + PTE_BASE----<code>addr = PTE_BASE</code></p></li><li><p><code>PPE_BASE</code> = ((addr &amp; 0xffffffffffff) &gt;&gt; 12) &lt;&lt; 3 + PTE_BASE----<code>addr = PDE_BASE</code></p></li><li><p><code>PXE_BASE</code> = ((addr &amp; 0xffffffffffff) &gt;&gt; 12) &lt;&lt; 3 + PTE_BASE----<code>addr = PPE_BASE</code></p></li></ul></li></ul><h4 id="物理地址定位"><a class="markdownIt-Anchor" href="#物理地址定位"></a> 物理地址定位</h4><p>​这里知道了 <code>PXE、PPE、PDE、PTE</code> 的基址，来定位当前地址所在的 <code>PXE、PPE、PDE、PTE</code> 地址</p><ul><li><p><strong>计算公式</strong>：</p><ul><li><p>PTE = PTE_BASE + ((Linear address &amp; 0xffffffffffff) &gt;&gt; 12) &lt;&lt; 3</p></li><li><p>PDE = PDE_BASE + ((Linear address &amp; 0xffffffffffff) &gt;&gt; 12) &lt;&lt; 3</p></li><li><p>PPE = PPE_BASE + ((Linear address &amp; 0xffffffffffff) &gt;&gt; 30) &lt;&lt; 3</p></li><li><p>PXE = PXE_BASE + ((Linear address &amp; 0xffffffffffff) &gt;&gt; 39) &lt;&lt; 3</p></li></ul></li></ul><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h2><h1 id="kpti"><a class="markdownIt-Anchor" href="#kpti"></a> KPTI</h1><ul><li><strong>KPTI</strong>(Kernel page-table isolation)，即<strong>内核页表隔离机制</strong>。</li><li>通过在windbg中构造提权中断门以及关闭Cr4.SMEP/Cr4.SMAP，可以实现Supervisor执行用户层代码和访问数据，也可以映射内核KVASCODE段的数据(UserMode.Cr3/KernelMode.Cr3均有映射)</li><li>但是由于内核页表隔离机制的存在，内核的.text段并没有映射给UserMode.Cr3，而只映射给了KernelMode.Cr3</li><li>通过构造中断门进入自定义的中断服务例程时，其Cr3为UserMode.Cr3，而非KernelMode.Cr3。而通过Kernel.Cr3对页表映射解析时发现PXE.XD=1，即对KernelMode而言，该页面禁止执行(除非Cr4.SMEP=0&amp;&amp;XD=0)。Supervisor执行User物理页时需要满足Cr4.SMEP=0&amp;&amp;XD=0</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310051624205.png" alt="image-20231005162409174" /></p><blockquote><p>注意：这里可能因为Windows的版本问题，导致Cr3在用户态和内核态读取的数值一样(新版的Windows可能不开KPTI保护)</p><p>参考：</p><p><a href="https://blog.csdn.net/weixin_43890959/article/details/125477733">x64(win10) KPTI 内核页表隔离机制</a></p><p><a href="https://lzyddf.blog.csdn.net/article/details/123228503?spm=1001.2014.3001.5502">Windows x64内核学习笔记(五)—— KPTI(未完待续)</a></p></blockquote><h1 id="lfencecfg"><a class="markdownIt-Anchor" href="#lfencecfg"></a> LFENCE&amp;CFG</h1><h2 id="lfence"><a class="markdownIt-Anchor" href="#lfence"></a> LFENCE</h2><p><strong>描述</strong>：</p><ul><li>在内核文件中，能够经常看到在某行jcc指令的下方存在一条lfence指令，它的功能是禁止CPU对后面的指令预测执行。虽然禁止预测执行产生了性能上的部分损耗，但是提高了系统整体的安全性</li></ul><h2 id="cfg"><a class="markdownIt-Anchor" href="#cfg"></a> CFG</h2><p><strong>描述</strong>：</p><ul><li><strong>控制流防护</strong>(Control Flow Guard，CFG)是微软在Windows10和Windows8.1Update3中默认启用的一种安全防护机制，它主要是用于在发生间接跳转时，检查目标地址的合法性。</li></ul><h3 id="_guard_dispatch_icall"><a class="markdownIt-Anchor" href="#_guard_dispatch_icall"></a> _guard_dispatch_icall</h3><p><strong>描述</strong>：</p><ul><li><p>_guard_dispatch_icall是<strong>CFG机制的派遣函数</strong></p></li><li><p>在内核中，许多函数都需要进行间接调用，出于安全性考虑，避免目标地址被控制，因此不会直接CALL目标地址，而是先通过_guard_dispatch_icall检查地址合法性，并由其进行调用，如果地址合法，它的作用相当于「CALL RAX」</p></li></ul><h1 id="patch-guard"><a class="markdownIt-Anchor" href="#patch-guard"></a> Patch Guard</h1><h2 id="patch-guard-2"><a class="markdownIt-Anchor" href="#patch-guard-2"></a> Patch Guard</h2><p><strong>描述</strong>：</p><ul><li>Patch Guard(简称PG)是Windows x64系统中用于<strong>保护内核代码完整性和安全性的保护机制</strong>，能够防止任何不受信任的代码或驱动程序修改内核代码，从而防止系统破坏和恶意软件的传播。Patch Guard在系统启动时进行验证，并在系统运行过程中定期执行检查以确保内核代码的完整性。如果发现任何不正确的修改，Patch Guard会使系统蓝屏并重启系统以确保安全性，蓝屏代码为0x109。</li></ul><p><strong>原理</strong>：</p><ul><li>读取内核中的数据，并与系统初始化时的值进行比较。</li></ul><h2 id="context结构体"><a class="markdownIt-Anchor" href="#context结构体"></a> Context结构体</h2><p><strong>描述</strong>：</p><ul><li>PG(内核补丁保护Patch Guard))检测<strong>通常</strong>基于 context 结构体。context 结构体是一个内存数据结构，包含了系统内核的重要信息，包括内核代码的状态、配置和数据。Patch Guard 使用这个 context 结构体来验证内核代码的完整性。在系统启动时，PG 会创建并存储 context 结构体，并在系统运行过程中定期检查这个结构体是否被修改。如果发现任何不正确的修改，Patch Guard 将会重启系统以确保安全性。</li></ul><h3 id="context基本规则"><a class="markdownIt-Anchor" href="#context基本规则"></a> Context基本规则</h3><p>(注意：随着微软更新，以下规则在不同版本的系统中不一定通用)：</p><ol><li>context大部分时间处于加密状态</li><li>context的数据源来自系统初始化时的最初数据</li><li>context的地址作为系统线程，随着DPC等调度被传递</li><li>context的执行周期约为2min，但是每次检测的目标区块是随机的</li><li>context采用接力的方式调度，具体流程包括自解密、检测逻辑、复制自身到新的context、加密新的context、销毁旧的context</li><li>context检测逻辑的调用源有随机性，在PG初始化时决定</li></ol><h3 id="context内容"><a class="markdownIt-Anchor" href="#context内容"></a> Context内容</h3><ol><li>一小段自解密代码</li><li>要用到的系统api指针</li><li>重要的api代码的copy</li><li>INITKDBG节的copy</li><li>要检测的目标地址、大小、checksum、构成的结构体数组</li><li>…</li></ol><h3 id="context结构体包含信息"><a class="markdownIt-Anchor" href="#context结构体包含信息"></a> Context结构体包含信息</h3><ul><li>内核代码的版本信息：用于验证系统内核代码是否是最新版本，以确保安全性</li><li>内核代码的配置信息：用于验证系统内核代码的配置是否正确，以确保系统可以正常运行</li><li>内核代码的数据信息：包括系统内核代码中使用的全局变量、缓存、内存页面等，用于验证内核代码的数据完整性</li><li>内核代码的状态信息：包括系统内核代码的执行状态、挂起的线程和中断处理程序等，用于验证内核代码的状态完整性</li></ul><h3 id="context结构体包含代码"><a class="markdownIt-Anchor" href="#context结构体包含代码"></a> context结构体包含代码：</h3><ul><li>初始化代码：在系统启动时，初始化代码将创建并存储 context 结构体</li><li>检查代码：定期检查代码将检查 context 结构体是否被修改，以确保内核代码的完整性</li><li>重启代码：如果发现任何不正确的修改，重启代码将重启系统以确保安全性</li><li>恢复代码：如果重启系统，恢复代码将恢复系统的正常运行</li></ul><p>​Context 结构体在<strong>大部分时间处于加密状态</strong>，这个过程是通过使用内核级的加密技术实现的，主要使用密钥来对 context 结构体进行加密，并在解密时使用同一密钥。这样，即使恶意代码试图访问或修改 context 结构体，其内容仍然是加密的，因此不可读取。内核级的加密技术在内核空间中实现，因此它需要特殊的权限才能访问。这样，可以保护 - context 结构体不被恶意代码访问</p><h2 id="攻击手法"><a class="markdownIt-Anchor" href="#攻击手法"></a> 攻击手法</h2><ul><li><p><strong>静态补丁</strong>：如直接将函数入口patch为ret，这种方法是最稳定的，唯一的缺点就是要重启才能生效。</p></li><li><p><strong>VT实现读/执行分离</strong>：这种方法是通过禁止执行关键的代码段来避免检测。这种方法可以通过使用虚拟化技术来实现，但不是所有系统都支持。</p></li><li><p><strong>定位所有的context调用源，针对性patch</strong>：这种方法是通过修改代码的特定部分来避免检测。这种方法需要对系统的代码有较深的了解，否则可能导致严重的后果。</p></li><li><p><strong>基于加密算法分析，攻击context的内容</strong>：这种方法是通过对context内容进行解密，并修改检测代码来避免检测。此方法需要深入了解加密算法和检测代码，并可能需要使用特殊工具。</p><ul><li><p>搜索内存，粗筛context</p></li><li><p>基于加密算法特性，定位context</p></li><li><p>解密context，patch检测逻辑，加密写回context</p></li></ul></li><li><p><strong>设置context页面不可执行，接管页面异常处理</strong>：这种方法是通过禁止对context页面的访问来避免检测。此方法需要在页面异常处理过程中进行操作，以防止检测逻辑的执行。</p><ul><li>搜索内存，粗筛context</li><li>hook patch fault，接管执行保护异常</li><li>在异常处理中定位context，阻止检测逻辑</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>OS相关</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Win内核实验配置</title>
    <link href="/posts/618af193.html"/>
    <url>/posts/618af193.html</url>
    
    <content type="html"><![CDATA[<h1 id="win10虚拟机配置"><a class="markdownIt-Anchor" href="#win10虚拟机配置"></a> Win10虚拟机配置</h1><h2 id="设置只有管理员账户"><a class="markdownIt-Anchor" href="#设置只有管理员账户"></a> 设置只有管理员账户</h2><p><a href="https://zhuanlan.zhihu.com/p/558548390">Windows启用Administrator账户并删除其它用户 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/a18059272055/article/details/118602560">Windows10启用Administrator并设置任意密码（包括空密码）</a></p><h1 id="驱动环境配置"><a class="markdownIt-Anchor" href="#驱动环境配置"></a> 驱动环境配置</h1><ul><li>主要在于使用vs2019，SDK与WDK的对应关系。建议完全按照第一个视频的配置，可以参考第二个视频来进行检验<ul><li><a href="https://www.bilibili.com/video/BV1md4y1w7h3/?spm_id_from=333.337.search-card.all.click&amp;vd_source=17ac9da9453dbd6d64b9616668574c5f">【内核基础篇】Windows驱动开发环境搭建 2022年最新 超详细哦~_哔哩哔哩_bilibili</a></li><li><a href="https://www.bilibili.com/video/BV1Uw41127Vd/?spm_id_from=333.788&amp;vd_source=17ac9da9453dbd6d64b9616668574c5f">驱动环境搭建</a></li></ul></li></ul><h2 id="vs驱动配置问题汇总"><a class="markdownIt-Anchor" href="#vs驱动配置问题汇总"></a> VS驱动配置问题汇总</h2><ol><li><p><code>LNK129:&quot;&quot;/NXCOMPAT:NO&quot;与&quot;/DRIVER&quot; </code>规范不兼容；链接时不使用 <code>&quot;/NXCOMPAT:NO&quot;</code></p><ul><li>项目→属性→链接器→高级→数据执行保护(DEP)→<strong>是</strong></li></ul></li><li><p>c文件不可以使用 <code>extern “C”</code> 来引用汇编，只可以使用 <code>extern</code></p><ul><li><a href="https://www.cnblogs.com/mayingkun/p/3849042.html">vs2008+WDK7600驱动开发环境配置</a></li></ul></li></ol><h1 id="双机调试"><a class="markdownIt-Anchor" href="#双机调试"></a> 双机调试</h1><ul><li>这里分为winxp和win10操作系统<ul><li>winxp：<a href="https://www.cnblogs.com/wingsummer/p/15304804.html">双机调试winxp环境搭建</a></li><li>win10：<a href="https://www.bilibili.com/video/BV1Q84y1D7PW/?spm_id_from=333.788&amp;vd_source=17ac9da9453dbd6d64b9616668574c5f">双机调试win10环境搭建</a></li></ul></li></ul><h1 id="代码书写配置"><a class="markdownIt-Anchor" href="#代码书写配置"></a> 代码书写配置</h1><h2 id="跨平台运行"><a class="markdownIt-Anchor" href="#跨平台运行"></a> 跨平台运行</h2><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401272130141.png" alt="image-20240127213002094" /></p><p>这里的运行库一定要选多线程或是多线程调试，这是静态编译，不然环境问题会让你崩溃的</p><h2 id="64位混合编译"><a class="markdownIt-Anchor" href="#64位混合编译"></a> 64位混合编译</h2><ul><li>这里64位程序不支持内联汇编，所以需要设置vs进行混合编译</li></ul><p><a href="https://lzyddf.blog.csdn.net/article/details/123176096?spm=1001.2014.3001.5502">Win64 内核实验 SMEP&amp;SMAP</a></p>]]></content>
    
    
    <categories>
      
      <category>OS相关</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Win32_Kernel简述</title>
    <link href="/posts/705b8369.html"/>
    <url>/posts/705b8369.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>详细参考：</p><ul><li><a href="https://lzyddf.blog.csdn.net/?type=blog">Windows x32相关笔记</a></li><li><a href="https://www.cnblogs.com/wingsummer/p/15420700.html">羽夏看 Win 系统内核</a></li><li><a href="https://space.bilibili.com/37877654/channel/seriesdetail?sid=1467296">Windows 内核实验</a></li><li><a href="https://bbs.kanxue.com/homepage-867232.htm">Windows 内核学习笔记</a></li><li><a href="https://catecat.gitee.io/tags/WinXP%E5%86%85%E6%A0%B8/">WinXP内核</a></li></ul></blockquote><h1 id="调试"><a class="markdownIt-Anchor" href="#调试"></a> 调试</h1><h2 id="visual-studio"><a class="markdownIt-Anchor" href="#visual-studio"></a> visual studio</h2><ul><li>针对主机的 <code>visual studio 2022</code>, 虚拟机中的 <code>VC6</code> 大部分适合</li><li>使用主机的调试的时候记得选择 <code>release</code>, 同时关闭 <code>ASLR</code> ，防止地址随机化</li></ul><table><thead><tr><th>任务</th><th>快捷键</th></tr></thead><tbody><tr><td>开始调试</td><td>F5</td></tr><tr><td>停止编译</td><td>Ctrl + F5</td></tr><tr><td>设定断点</td><td>F9</td></tr><tr><td>逐过程调试(可以跳过函数)</td><td>F10</td></tr><tr><td>逐语句调试</td><td>F11</td></tr><tr><td>跳到光标处</td><td>Ctrl + F10</td></tr><tr><td>跳出本循环</td><td>Shift + F11</td></tr><tr><td>生成项目</td><td>Ctrl + B</td></tr><tr><td>注释</td><td>Ctrl + /</td></tr></tbody></table><h2 id="windbg"><a class="markdownIt-Anchor" href="#windbg"></a> Windbg</h2><h3 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h3><table><thead><tr><th>任务</th><th style="text-align:left">快捷键</th></tr></thead><tbody><tr><td>停止长调用</td><td style="text-align:left">Ctrl + Pause / Ctrl + 虚拟键盘(ctrl + win + o)中的ScrLK</td></tr><tr><td>查看寄存器</td><td style="text-align:left">r eax/gdtr    r–将通用的一些寄存器显示出来</td></tr><tr><td>查看内存</td><td style="text-align:left">dq/dd/dw/db [地址:b1b3ddb0] 如果是物理地址的话，就是 !dd [地址]</td></tr><tr><td>查看反编译</td><td style="text-align:left">u–将某一地址之后的内容反编译显示</td></tr><tr><td>修改内存数据</td><td style="text-align:left">eq ……(与上面同)</td></tr><tr><td>单步执行</td><td style="text-align:left">t–step into    p–step over</td></tr><tr><td>继续执行</td><td style="text-align:left">g</td></tr><tr><td>某一地址下断点</td><td style="text-align:left">bp 0040103d</td></tr><tr><td>断点操作</td><td style="text-align:left">bl–列出断点   bc ID–清除断点，这个ID首先需要bl查看</td></tr><tr><td>进程信息</td><td style="text-align:left">!process 0 0 显示进程列表</td></tr></tbody></table><h3 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h3><ul><li>windbg中可能会有残留数据存在，所以在使用时注意之前的残留，例如<code>!process 0 0</code>会有之气那的进程残存。这里其 <code>HandleCount</code> 为0则代表无效</li></ul><h1 id="保护模式"><a class="markdownIt-Anchor" href="#保护模式"></a> 保护模式</h1><h2 id="关于段"><a class="markdownIt-Anchor" href="#关于段"></a> 关于段</h2><h3 id="段寄存器"><a class="markdownIt-Anchor" href="#段寄存器"></a> 段寄存器</h3><ul><li>96位，<strong>ES、CS、SS、DS、FS、GS、LDTR、TR</strong></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023819.png" alt="image-20230912195711665" /></p><h3 id="段选择子"><a class="markdownIt-Anchor" href="#段选择子"></a> 段选择子</h3><ul><li>16位</li><li>Index：处理器将索引值乘以8在加上GDT或者LDT的基地址，就是要加载的段描述符。</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023767.png" alt="image-20230912195749416" /></p><h3 id="gdt"><a class="markdownIt-Anchor" href="#gdt"></a> GDT</h3><h4 id="相关知识点"><a class="markdownIt-Anchor" href="#相关知识点"></a> 相关知识点</h4><ul><li><p><code>GDT</code>为全局描述符表, 段描述符的大小为64位, <code>GDTR</code> 为存储其位置的寄存器(48位)</p></li><li><p>段选择子16位，段寄存器96位</p></li><li><p>段寄存器</p></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023827.png" alt="image-20230918091401476" /></p><ul><li>段描述符</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023843.png" alt="image-20230912180656323" /></p><ul><li>区分：<ul><li>红色–<code>base</code></li><li>绿色–<code>seagment limit</code></li><li>蓝色–<code>Type</code><ul><li>S=1时，第4位为1为代码段，反之为数据段</li><li>C=1时，代表一致代码段，反之为非一致代码段</li></ul></li><li>黑色9–<code>P DPL S</code><ul><li>P=1描述符有效</li><li>S=1为代码段或者数据段</li></ul></li><li>黑色c–<code>G D/B 0 AVL</code></li></ul></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023814.png" alt="image-20230912181129051" /></p><ul><li>参考：<a href="https://www.cnblogs.com/wingsummer/p/15312627.html">段描述符与段选择子</a></li></ul><h4 id="相关指令"><a class="markdownIt-Anchor" href="#相关指令"></a> 相关指令</h4><ul><li><code>r gdtr </code>指令表示读取GDT表的地址</li><li><code>r gdtl</code> 指令表示读取GDT的大小</li><li><code>dp gtdr l40</code> 指令查看gdt表中大小为40个int(32位)的空间</li></ul><h3 id="代码段之间跳转"><a class="markdownIt-Anchor" href="#代码段之间跳转"></a> 代码段之间跳转</h3><ul><li><p>段间跳转，有2种情况，即要跳转的段是一致代码段还是非一致代码段，<strong>它们不同做的权限检查就不同</strong>。同时修改<code>CS</code>与<code>EIP</code>的指令如下：<code>JMP FAR</code>/<code>CALL FAR</code>/<code>RETF</code>/<code>INT</code>/<code>IRETED</code></p></li><li><p>段间跳转只使用 <code>JMP FAR</code>, 即长跳转</p></li><li><p>跳转规则：</p><ul><li>对于一致代码段，也称为共享段：<ul><li>特权级高的程序不允许访问特权级低的数据：核心态不允许访问用户态的数据</li><li>特权级低的程序可以访问到特权级高的数据，但特权级不会改变：用户态还是用户态</li><li>要求：<code>CPL</code>&gt;=<code>DPL</code></li></ul></li><li>对于非一致代码段：<ul><li>只允许同级访问</li><li>绝对禁止不同级别的访问：核心态不是用户态，用户态也不是核心态</li><li>要求：<code>CPL</code>==<code>DPL</code>且<code>RPL</code>&lt;=<code>DPL</code></li></ul></li></ul></li><li><p>跳转步骤：</p><ol><li>段选择子拆分–记住最后3位为<code>TI RPL</code>, 所以每次选择需要<code>i * 0x8</code></li><li>查表得到段描述符</li><li>权限检查–<code>CPL DPL RPL</code></li><li>加载段描述符–加载到 <code>CS</code> 段寄存器(96位)中</li><li>代码执行–<code>CPU</code>将<code>CS.Base + Offset</code>的值写入<code>EIP</code>然后跳转到将要执行的<code>CS:EIP</code>处的代码，段间跳转结束</li></ol></li><li><p>在跳转过程中, <code>CPL</code>不会发生改变，提权只能通过调用门</p></li></ul><h2 id="关于门"><a class="markdownIt-Anchor" href="#关于门"></a> 关于门</h2><h3 id="idt"><a class="markdownIt-Anchor" href="#idt"></a> IDT</h3><h4 id="相关知识点-2"><a class="markdownIt-Anchor" href="#相关知识点-2"></a> 相关知识点</h4><ul><li><code>IDT</code>为中断描述符表, <code>IDTR</code> 为存储其位置的寄存器，与<code>GDT</code>类似</li><li><code>IDT表</code>包含3种门描述符：任务门描述符、中断门描述符、陷阱门描述符</li></ul><h4 id="相关指令-2"><a class="markdownIt-Anchor" href="#相关指令-2"></a> 相关指令</h4><ul><li><code>r gdtr </code>指令表示读取GDT表的地址</li><li><code>r gdtl</code> 指令表示读取GDT的大小</li><li><code>dp gtdr l40</code> 指令查看gdt表中大小为40个int(32位)的空间</li></ul><h3 id="调用门"><a class="markdownIt-Anchor" href="#调用门"></a> 调用门</h3><ul><li>存储在GDT表中</li><li>长调用:<strong>CALL CS:EIP</strong>, 其中 <code>EIP</code> 废弃，<code>CS</code>为指向<code>调用门</code>的段选择子<ul><li>长调用不提权, 调用者CS入栈(相较于短调用所增加的)</li><li>长调用提权， 调用者SS, 调用者ESP, 调用者CS入栈</li></ul></li><li>指令格式：<code>CALL CS:EIP (EIP是废弃的)</code></li><li>执行流程：<ul><li>根据<code>CS</code>的值查<code>GDT表</code>，找到对应的段描述符且该描述符是一个调用门</li><li>在调用门描述符中存储另一个代码段的段选择子，将其加载到<code>CS</code>中(这里CS就发生了变化)</li><li>选择子指向的段的<code>Base</code>(Srgment Selector指向的代码段的base) + <code>偏移地址</code>(Offset in Segment)就是真正要执行的地址<ul><li>这里注意 <code>Segment Selector</code> 的值，当这里指向 <code>00cf9b00 0000ffff</code>(在它为0008,这里为代码段描述符，与下方的调用门格式不同) 时会显示报错，而指向 <code>00cf9a00 0000ffff</code>(存放在自己定义的地址) 则可以正常访问内核的内存</li><li>这里找出了问题所在，<code>0008</code> 位置的访问一直出现问题，把这个位置的数据放在别的地方就可以正常运行，由此里的访问需要重新指定位置(可能是我电脑的原因，maybe)</li></ul></li></ul></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023810.png" alt="image-20230912200012728" /></p><ul><li><code>CS</code> 的值可以根据地址直接得出</li></ul><h3 id="中断门"><a class="markdownIt-Anchor" href="#中断门"></a> 中断门</h3><ul><li><p>指令格式：<code>INT N (N为中断门索引号)</code></p></li><li><p>执行步骤：</p><ol><li>在没有权限切换时，会向堆栈顺次压入<code>EFLAG</code>、<code>CS</code>和<code>EIP</code>；如果有权限切换，会向堆栈顺次压入<code>SS</code>、<code>ESP</code>、<code>EFLAG</code>、<code>CS</code>和<code>EIP</code></li><li><code>CPU</code> 会索引到 <code>IDT</code> 表。后面的 <code>N</code> 表示查 <code>IDT表</code> 项的下标。对比调用门，中断门没有了 <code>RPL</code>，故 <code>CPU</code> 只会校验 <code>CPL</code></li><li>在中断门中,不能通过 <code>RETF</code> 返回，而应该通过 <code>IRET</code>/<code>IRETD</code> 指令返回</li></ol><ul><li>这里也要注意真正执行地址也是 <code>Base</code> + <code>偏移地址</code>, 所以这里也会索引到 <code>GDT</code>的一个一致代码段</li></ul></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023237.png" alt="image-20230912200532795" /></p><ul><li>补充：<ul><li>图中的 <code>D</code> 为1表示为32位</li></ul></li></ul><h3 id="陷阱们"><a class="markdownIt-Anchor" href="#陷阱们"></a> 陷阱们</h3><ul><li>陷阱门执行流程一模一样。与中断门的区别，中断门执行时，将 <code>IF位</code> 清零,使得可以屏蔽中断(关中断) 但陷阱门不会</li><li>关于中断(这里指可屏蔽中断)<ul><li><code>CLI</code> 禁止中断发生，关中断，使中断标志(IF) = 0</li><li><code>STI</code> 允许中断发生，开中断，使中断标志(IF) = 1</li><li>关闭中断指不允许其他操作引起中断，使处理器被其余程序所调用</li></ul></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023254.png" alt="image-20230912202407828" /></p><h3 id="任务门"><a class="markdownIt-Anchor" href="#任务门"></a> 任务门</h3><ul><li>任务段(TSS)</li></ul><p>​这里需要首先知道TSS段描述符的概念，它是一个系统段描述符，TSS主要作用就是换掉一堆的寄存器，这里也是权限切换时 <code>ESP</code> 与 <code>SS</code> 的来源</p><ul><li><p>描述</p><ul><li>任务门存在于<strong>IDT表</strong></li><li>任务门中包含<strong>TSS段选择子</strong></li><li>可以通过访问任务门达到<strong>切换TSS</strong>的目的</li></ul></li><li><p>执行流程</p><ol><li><p>通过<code>INT N</code> (N为IDT表索引号)的指令进行触发任务门</p></li><li><p>查<code>IDT</code>表，找到对应的任务门描述符</p></li><li><p>通过任务门描述符，则根据任务门描述符中<code>TSS段选择子</code>查找<code>GDT表</code>，找到<code>TSS段描述符</code></p></li><li><p>将TSS段描述符中的值加载到<code>TR</code>寄存器</p></li><li><p>TR段寄存器通过Base和Limit找到<code>TSS</code></p></li><li><p>使用TSS中的值修改寄存器</p></li><li><p><code>IRETD</code>返回</p></li></ol></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023261.png" alt="image-20230913092034031" /></p><h2 id="关于页"><a class="markdownIt-Anchor" href="#关于页"></a> 关于页</h2><h3 id="地址"><a class="markdownIt-Anchor" href="#地址"></a> 地址</h3><ul><li>地址分为有效地址，线性地址，物理地址<ul><li><code>0x12345678</code> 有效地址</li><li><code>ds.Base + 0x12345678</code> 线性地址</li></ul></li></ul><h3 id="cr3"><a class="markdownIt-Anchor" href="#cr3"></a> Cr3</h3><ul><li>控制寄存器<ul><li>每个进程都有一个Cr3(准确的说是都有一个Cr3的值，Cr3本身是个寄存器，一个核，只有一套寄存器)</li><li>Cr3指向一个物理页，一共4096字节</li></ul></li><li>通过Cr3来找物理地址<ul><li>找第一层和第二层的时候要将<strong>索引 * 4</strong> (每个地址占4个字节)----三次<code>!dd</code>找到位置</li><li>每找到一层都要将地址后三位(3个字节) <strong>属性位</strong> 清零再继续找下一层</li></ul></li></ul><p>​在所有的寄存器中，只有Cr3存储的是<strong>物理地址</strong>，其它寄存器存的都是<strong>线性地址</strong>, Cr3所存储的物理地址指向了一个<strong>页目录表(PDT)</strong>, 在Windows中，一个页的大小通常为<strong>4KB</strong>，即一个页可以存储<strong>1024个</strong>页目录表项(PDE)</p><h3 id="10-10-12"><a class="markdownIt-Anchor" href="#10-10-12"></a> 10-10-12</h3><ol><li>一个物理页的大小为<strong>4096字节</strong>，即<strong>2的12次方</strong>，若要遍历整个物理页，则需要12个比特位</li><li>一个页表有1024个页表项，1024等于2的十次方，即需要10个比特位</li><li>页目录表项同理，也需要10个比特位</li></ol><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023346.png" alt="image-20230913092144120" /></p><h3 id="pdt与ptt"><a class="markdownIt-Anchor" href="#pdt与ptt"></a> PDT与PTT</h3><h4 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h4><p>​<strong>页目录表(PDT)</strong> 的每一项元素称为 <strong>页目录表项(PDE)</strong>, 每个页目录表项指向一个 页表(PTT), 每个页表的大小为 <strong>4KB</strong>，即一个页表可以存储 <strong>1024个</strong> 页表项(PTE) ----4096(4KB)/4(每个页表项32位)</p><p>​页表(PTT) 的每一个元素称为 页表项(PTE), 页表项(PTE) 所指向的才是真正的物理页</p><ul><li>特征<ul><li>PTE可以指向一个物理页，也可以不指向物理页</li><li>多个PTE可以指向一个物理页</li><li>一个PTE只能指向一个物理页</li></ul></li></ul><h4 id="物理页属性"><a class="markdownIt-Anchor" href="#物理页属性"></a> 物理页属性</h4><p>​物理页属性 = <code>PDE属性</code> &amp; <code>PTE属性</code></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023317.png" alt="image-20230913094214169" /></p><ul><li><p>P 位</p><ul><li>表示<code>PDE</code>或者<code>PTE</code>是否有效，如果有效为<code>1</code>，反之为<code>0</code></li></ul></li><li><p>R/W 位</p><ul><li>如果<code>R/W = 0</code>，表示是只读的，反之为可读可写</li></ul></li><li><p>U/S 位</p><ul><li>如果<code>U/S = 0</code>，则为特权用户(super user)，即非3环权限。反之，则为普通用户，即为3环权限</li></ul></li><li><p>PS位</p><ul><li>这个位只对<code>PDE</code>有意义。如果<code>PS == 1</code>，则<code>PDE</code>直接指向物理页，不再指向<code>PTE</code>，低22位是页内偏移。它的大小为<code>4MB</code>，俗称“大页”</li></ul></li><li><p><code>PWT</code>全称为<code>Page Write Through</code>，<code>PWT = 1</code>时，写<code>Cache</code>的时候也要将数据写入内存中。</p></li><li><p><code>PCD</code>全称为<code>Page Cache Disable</code>，<code>PCD = 1</code>时，禁止某个页写入缓存，直接写内存。比如，做页表用的页，已经存储在<code>TLB</code>中了，可能不需要再缓存了。</p></li></ul><h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h4><ol><li>页表被映射到了从<code>0xC0000000~0xC03FFFFF</code>的<strong>4M</strong>地址空间</li><li>在这1024个表中有一张特殊的表：<strong>页目录表</strong></li><li>页目录被映射到了0xC0300000开始处的<strong>4K</strong>地址空间</li></ol><ul><li><p>访问页目录表的公式：<code>0xC0300000 + PDI * 4</code></p></li><li><p>这里线性地址 <code>0xc0300000</code> 解析出来指向 <code>PDT</code> 表的第一项，所以我们使用 <code>0xc0300000 + k*4</code> 就可以获得第 <code>k+1</code> 项 <code>PDE</code> 的地址</p></li><li><p>访问页表的公式：<code>0xC0000000 + PDI * 4096 + PTI * 4</code></p></li><li><p>而线性地址 <code>0xc0000000</code> 解析出来指向第一个 <code>PDE</code> 指向的 <code>PTT</code> 表的第一项，所以我们使用<code>0xc0000000 + i*0x1000 + j*4</code> 就可以得到第 <code>i+1</code> 项 <code>PDE</code> 指向的 <code>PTT</code> 表中的第 <code>j+1</code>项 <code>PTE</code> 的地址</p></li></ul><h4 id="关注"><a class="markdownIt-Anchor" href="#关注"></a> 关注</h4><ul><li>修改一个高2G线性地址的<code>PDE</code>/<code>PTE</code>属性，实现<code>Ring3</code>可读<ul><li>这里还要更改别的地方的选项<a href="https://lzyddf.blog.csdn.net/article/details/102627239">博客</a>, 需要看情况修改PDE与PTE的 <code>U/S</code> 位为1，赋予3环的读取权限, 否则不能读取成功</li><li>对于羽夏的教程，这里大页更改也是更改 <code>U/S</code> 位，而不是它写的直接更改一个怪异的物理页</li></ul></li></ul><h3 id="2-9-9-12pae分页"><a class="markdownIt-Anchor" href="#2-9-9-12pae分页"></a> 2-9-9-12(PAE分页)</h3><ul><li><p>这里的 <code>windbg</code> 记得使用 <code>!dq</code> 来查看地址</p></li><li><p>每个<code>PDE</code>和<code>PTE</code>被扩展为8个字节，物理地址描述的位数扩展为<code>24位</code>，故可以描述更多的物理页，但个数减半，变成了512个</p></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023341.png" alt="image-20230915101737336" /></p><h3 id="pdpttpdtptt"><a class="markdownIt-Anchor" href="#pdpttpdtptt"></a> PDPTT,PDT,PTT</h3><h4 id="pdpte"><a class="markdownIt-Anchor" href="#pdpte"></a> PDPTE</h4><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023713.png" alt="image-20230915105429306" /></p><ul><li><code>PDPTE</code> 的12-35位存储了页目录表基址的高24位，低12位(在图上显示)补零, 共36位，即页目录基址。</li></ul><h4 id="pde"><a class="markdownIt-Anchor" href="#pde"></a> PDE</h4><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023783.png" alt="image-20230915105902929" /></p><ul><li><p>第7位 <code>PS</code> = 1 时，PDE直接指向大页，21-35(15位)指向大页的物理地址，这样36位的物理地址中低21位为0，即页的大小为2MB，且都是2MB对齐；当 <code>PS</code> = 0 时，21-35是页表基址，低12位补0，共36位。</p></li><li><p>解释一下G位，G=1表示这是全局页，是多个进程共享的，这种页是通过 CreateFileMapping 申请的, G=1，即为全局页，进程(CR3)切换时，TLB中的记录不会被刷新; 与之对应的，G=0就是进程独享的物理页，这种页是通过 VirtualAlloc 分配的。</p></li></ul><h4 id="pte"><a class="markdownIt-Anchor" href="#pte"></a> PTE</h4><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023762.png" alt="image-20230915111153273" /></p><ul><li>PTE中12-35是物理页基址, 24位, 低12位补0。</li><li>物理页基址 + 12位的页内偏移指向具体数据</li></ul><h4 id="xd标志位"><a class="markdownIt-Anchor" href="#xd标志位"></a> XD标志位</h4><ul><li>AMD中称为NX，即 No Excetion</li><li>PDE/PTE结构</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023858.png" alt="image-20230915111442369" /></p><ul><li>段的属性有可读、可写和可执行; 页的属性有可读、可写</li><li>当RET执行返回的时候，如果把堆栈里面的数据指向一段提前准备好的数据(把数据当作代码来执行，漏洞都是依赖这点，比如SQL注入也是)，那么就会产生任意代码执行的后果。 所以，Intel就在这方面做了硬件保护，设置了一个不可执行位 – XD/NX位。</li><li>当XD=1时，软件产生了溢出也没有关系，即使EIP蹦到了危险的“数据区”，也是不可以执行的在PAE分页模式下，PDE与PTE的最高位为XD/NX位.</li></ul><h3 id="plb"><a class="markdownIt-Anchor" href="#plb"></a> PLB</h3><table><thead><tr><th>LA(线性地址)</th><th>PA(物理地址)</th><th>ATTR(属性)</th><th>LRU(统计)</th></tr></thead><tbody><tr><td>0x81010111</td><td>……</td><td>……</td><td>1</td></tr></tbody></table><p>对于<code>TLB</code>，给出如下说明：<br />  1. ATTR(属性)：如果是<code>2-9-9-12</code>分页，属性是<code>PDPE</code>、<code>PDE</code>、<code>PTE</code>三个属性共同决定的。如果是<code>10-10-12</code>分页就是<code>PDE</code>和<code>PTE</code>共同决定。<br />  2. 不同的<code>CPU</code>这个表的大小不一样。<br />  3. 只要<code>Cr3</code>变了，<code>TLB</code>立马刷新，一核一套<code>TLB</code></p><h3 id="控制寄存器"><a class="markdownIt-Anchor" href="#控制寄存器"></a> 控制寄存器</h3><p>​Cr0、Cr1、Cr2、Cr3，<code>Cr1</code>被保留了，<code>Cr3</code>用于页目录表基址</p><h4 id="cr0"><a class="markdownIt-Anchor" href="#cr0"></a> Cr0</h4><p>​<code>Cr0</code>是一个十分重要的寄存器，可以说它是总开关的集合体</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023094.png" alt="image-20230917155626976" /></p><h4 id="cr2"><a class="markdownIt-Anchor" href="#cr2"></a> Cr2</h4><p>​当CPU访问某个无效页面时，会产生缺页异常，此时，CPU会将引起异常的线性地址存放在CR2中</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023097.png" alt="image-20230917155703341" /></p><h4 id="cr4"><a class="markdownIt-Anchor" href="#cr4"></a> Cr4</h4><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023236.png" alt="image-20230917155724613" /></p><ul><li><code>PAE</code>用于确认是哪个分页，<code>PAE = 1</code>，是<code>2-9-9-12</code>分页，<code>PAE = 0</code>是<code>10-10-12</code>分页</li><li><code>PSE</code>是大页是否开启的总开关，如果置0，就算<code>PDE</code>中设置了大页你也得是普通的页</li></ul><h1 id="系统调用"><a class="markdownIt-Anchor" href="#系统调用"></a> 系统调用</h1><h2 id="前瞻"><a class="markdownIt-Anchor" href="#前瞻"></a> 前瞻</h2><p>​几个重要的dll</p><ul><li><code>Kernel32.dll</code>: 最核心的功能模块，比如管理内存、进程和线程相关的函数等</li><li><code>User32.dll</code>: 是Windows用户界面相关应用程序接口,如创建窗口和发送消息等</li><li><code>GDI32.dll</code>: 全称是Graphical Device Interface(图形设备接口)，包含用于画图和显示文本的函数。比如要显示一个程序窗口，就调用了其中的函数来画这个窗口</li><li><code>Ntdll.dll</code>: 大多数API都会通过这个DLL进入内核(0环)</li></ul><h2 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h2><h3 id="3环进0环"><a class="markdownIt-Anchor" href="#3环进0环"></a> 3环进0环</h3><ul><li>API通过<code>中断门</code>进0环<ul><li>固定中断号为0x2E</li><li>CS/EIP由门描述符提供，ESP/SS由TSS提供</li><li>进入0环后执行的内核函数：<code>NT!KiSystemService</code></li></ul></li><li>API通过<code>sysenter</code>指令进0环<ul><li>CS/ESP/EIP 由MSR寄存器提供(SS是算出来的)</li><li>进入0环后执行的内核函数：<code>NT!KiFastCallEntry</code></li></ul></li></ul><h3 id="保存现场"><a class="markdownIt-Anchor" href="#保存现场"></a> 保存现场</h3><h4 id="tarp-frame"><a class="markdownIt-Anchor" href="#tarp-frame"></a> Tarp Frame</h4><ul><li>无论是通过中断门进入0环，还是通过快速调用进入0环，进入0环前(3环)的所有寄存器都会存到这个结构体中</li><li>这个结构体本身处于0环，由windows操作系统进行维护</li><li>当程序通过中断门从3环进入0环时，ESP指向 <code>TrapFrame+0x64 </code> 的位置<ul><li>在<strong>KiSystemService</strong>函数开始执行时，3环的<code>SS</code>、<code>ESP</code>、<code>EFLAGS</code>、<code>CS</code>、<code>EIP</code>就已经被 CPU 存储到 Trap Frame 结构体</li></ul></li><li>当程序通过快速调用从3环进入0环时，ESP指向 <code>TrapFrame+0x78</code> 的位置<ul><li>这里需要该函数进行压栈处理</li></ul></li></ul><h3 id="系统服务表"><a class="markdownIt-Anchor" href="#系统服务表"></a> 系统服务表</h3><ul><li><p>系统服务表：<code>System Service Table</code></p></li><li><p>系统服务表共有<strong>两张</strong>，第一张表后紧接第二张表</p></li><li><p>系统服务表里的函数都是来自<strong>内核文件</strong>导出的函数</p></li><li><p>它并不包含内核文件导出的所有函数，而是<strong>3环最常用的</strong>内核函数</p></li><li><p>系统服务表位于 <code>_KTHREAD +00xE0</code></p></li></ul><h3 id="ssdt"><a class="markdownIt-Anchor" href="#ssdt"></a> SSDT</h3><ul><li><p>全称：<strong>System Services Descriptor Table</strong>(系统服务描述符表)</p></li><li><p>SSDT的<strong>每个成员</strong>叫做<strong>系统服务表</strong></p></li><li><p>SSDT的<strong>第一个成员是导出的</strong>，声明一下即可使用</p></li><li><p>SSDT的<strong>第二个成员是未导出的</strong>，需要通过其它方式查找</p></li><li><p>在Windows中，SSDT的<strong>第三个成员和第四个成员未被使用</strong></p></li></ul><h1 id="进程与线程"><a class="markdownIt-Anchor" href="#进程与线程"></a> 进程与线程</h1><h2 id="前瞻-2"><a class="markdownIt-Anchor" href="#前瞻-2"></a> 前瞻</h2><p>​关注几个结构体</p><ul><li><p>进程</p><ul><li>EPROCESS<ul><li><code>Pcb</code> _KPROCESS</li><li><code>Peb</code> Ptr32 _PEB</li></ul></li></ul></li><li><p>线程</p><ul><li>ETHREAD<ul><li><code>Tcb</code> _KTHREAD</li><li><code>Teb</code> Ptr32 Void</li></ul></li></ul></li><li><p>CPU</p><ul><li>KCPR<ul><li><code>NtTib</code>    _NT_TIB</li><li><code>PrcbData</code> _KPRCB</li></ul></li></ul></li></ul><h2 id="重点"><a class="markdownIt-Anchor" href="#重点"></a> 重点</h2><h3 id="线程切换"><a class="markdownIt-Anchor" href="#线程切换"></a> 线程切换</h3><ul><li>主动切换<ul><li>Windows中绝大部分API都调用了<strong>SwapContext</strong>这个函数，也就是说，只要调用了该函数，就会导致线程切换</li><li>线程切换时会比较是否属于同一个进程，如果不是，便切换Cr3，Cr3换了，进程也就切换了</li><li><strong>KiSwapThread</strong> -&gt; <strong>KiSwapContext</strong> -&gt; <strong>SwapContext</strong></li></ul></li><li>时钟切换<ul><li>当前线程的CPU时间片到期</li><li><strong>KiDispatchInterrupt</strong> -&gt; <strong>KiQuantumEnd</strong> -&gt; <strong>SwapContext</strong></li><li>存在备用线程(<code>KPCR.PrcbData.NextThread</code>)</li><li><strong>KiDispatchInterrupt</strong> -&gt; <strong>SwapContext</strong></li></ul></li><li>异常处理<ul><li>如果一个线程<strong>不调用API</strong>，并且在代码中<strong>屏蔽中断</strong>(调用CLI指令)，并且<strong>不会出现异常</strong>，那么当前线程将永久占有CPU</li><li>单核CPU占用率100%，2核CPU占用率50%</li><li>Windows<strong>并非</strong>是“抢占式”操作系统，所谓的“抢“”必须是当前线程允许其它线程“抢”，否则是“抢”不到的</li></ul></li></ul><h1 id="apc相关"><a class="markdownIt-Anchor" href="#apc相关"></a> APC相关</h1><h2 id="前瞻-3"><a class="markdownIt-Anchor" href="#前瞻-3"></a> 前瞻</h2><ol><li>线程是不能被“<strong>杀掉</strong>”、“<strong>挂起</strong>”、“<strong>恢复</strong>”的，线程在执行的时候自己占据着CPU，别人不能控制它</li><li>举个极端的例子：如果<strong>不调用API</strong>，<strong>屏蔽中断</strong>，<strong>并保证代码不出现异常</strong>，线程将<strong>永久</strong>占用CPU</li><li>所以说线程如果想“死”，一定是自己执行代码把自己杀死，不存在“他杀”的情况</li></ol><p>​即这里想改变一个线程的行为，可以给他提供一个函数，让它自己去调用：<strong>APC(Asyncroneus Procedure Call，异步过程调用)</strong></p><h2 id="重点-2"><a class="markdownIt-Anchor" href="#重点-2"></a> 重点</h2><h3 id="结构体相关"><a class="markdownIt-Anchor" href="#结构体相关"></a> 结构体相关</h3><ul><li><code>ApcState</code> _KAPC_STATE: 在 KTHREAD 中存在的一个结构体，其中有元素指向 KAPC 结构体</li></ul><h3 id="挂入过程"><a class="markdownIt-Anchor" href="#挂入过程"></a> 挂入过程</h3><ul><li>用户层调用：QueueUserAPC(kernel32.dll)–&gt;NtQueueApcThread(ntosker.exe)–&gt;内核层</li><li>很多内核函数调用：KeInitializeApc(分配空间 初始化KAPC结构体)–&gt;KeInsertQueueApc–&gt;KiInsertQueueApc(将KAPC插入指定APC队列)</li></ul><h3 id="执行过程"><a class="markdownIt-Anchor" href="#执行过程"></a> 执行过程</h3><p>内核APC执行过程，执行点：线程切换</p><ol><li><code>SwapContext</code> 判断是否有内核APC</li><li><code>KiSwapThread</code></li><li><code>KiDeliverApc</code> 执行内核APC函数</li></ol><p>用户APC执行过程</p><ul><li>执行用户APC时的堆栈操作处理用户APC要比内核APC复杂的多，因为，用户APC函数要在用户空间执行的，这里涉及到大量换栈的操作：</li></ul><ol><li>当线程从用户层进入内核层时，要保留原来的运行环境，比如各种寄存器，栈的位置等等(<code>_Trap_Frame</code>)，然后切换成内核的堆栈，如果正常返回，恢复堆栈环境即可。</li><li>但如果有用户APC要执行的话，就意味着线程要提前返回到用户空间去执行，而且返回的位置不是线程进入内核时的位置，而是返回到其他的位置，每处理一个用户APC都会涉及到：内核–&gt;用户空间–&gt;再回到内核空间</li></ol><h3 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结</h3><ol><li>内核APC在线程切换时执行，不需要换栈，比较简单，一个循环执行完毕</li><li>用户APC在系统调用、中断或异常返回3环前会进行判断，如果有要执行的用户APC，再执行</li><li>用户APC执行前会先执行内核APC</li></ol><h1 id="异常"><a class="markdownIt-Anchor" href="#异常"></a> 异常</h1><h2 id="x86"><a class="markdownIt-Anchor" href="#x86"></a> x86</h2><p><a href="http://betacat.github.io/2011/10/19/SEH-x86/">资料</a></p><ul><li>CPU异常与模拟异常----3环</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023222.png" alt="image-20231001144040446" /></p><ul><li><code>KiDispatchException</code><ul><li>对于0环异常，直接处理</li><li>对于3环异常，修改返回3环的 EIP ，使其指向 KiUsertExceptionDispatcher</li></ul></li><li>3环返回 <code>KiUsertExceptionDispatcher</code> 函数，然后它又调用 RtlDispatchExceptin，这个函数就是查找异常处理程序在哪里</li><li><code>RtlDispatchExceptin</code><ul><li>首先查找 <code>VEH</code></li><li>若是没有，则查找 <code>SEH</code><ul><li>SEH是线程相关的，实际上是一个链表，指向异常处理函数在哪里</li><li>这里展示经过编译器扩展的SEH，这里自己先在栈中构建一个结构体，然后使 <code>prev</code> 指向之前的结构体，然后让 <code>FS:[0]</code> 指向自己；</li><li><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023309.png" alt="image-20231001145115314" /></li><li>之后这里 <code>scopetable</code> 的作用就是指向构建 <code>excrpt()</code> 所需要的处理函数。这里也适合 <code>finally</code> 区别在于它的过滤函数为空，然后在后面会执行一个局部展开，来调用位于 <code>scopetable_entry </code>异常处理程序地址的 <code>finally</code> 代码来执行</li><li><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023504.png" alt="image-20231001145312210" /></li><li>这里总体流程就是先把自己构建的结构体加入到 SEH 链中，然后使用只在最开始构造的 <code>handler</code> 来对不同的try异常进行分发处理，它根据 <code>trylevel</code> 来寻找不同的 <code>scopetable</code> 来寻找过滤函数和异常处理函数来处理异常，若是没有找到(这里就是过滤函数的返回值，返回0表示不处理这个异常)，则根据 <code>scopetable_entry</code> 结构体中的 <code>previous TryLevel</code> 寻找它的上层处理函数，直到可以处理，或者找到了 <code>-1</code> 表示最高层也不能处理结束，交给编译器处理</li><li><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023571.png" alt="image-20231001144903487" /></li></ul></li></ul></li></ul><h2 id="x64"><a class="markdownIt-Anchor" href="#x64"></a> x64</h2><p><a href="https://www.pediy.com/kssd/pediy12/142371.html">资料</a></p><h1 id="驱动开发"><a class="markdownIt-Anchor" href="#驱动开发"></a> 驱动开发</h1><h2 id="内核编程"><a class="markdownIt-Anchor" href="#内核编程"></a> 内核编程</h2><h3 id="内核函数"><a class="markdownIt-Anchor" href="#内核函数"></a> 内核函数</h3><ul><li>在应用层编程的时候，我们通过MSDN来了解函数的详细信息，在内核编程的时候，要使用WDK自己的帮助文档</li><li>WDK查到的函数就一定在导出表里：<ul><li>文档化函数：函数在导出表里，有文档说明，有头文件</li><li>未文档化函数：导出表里有，没有文档说明，没有头文件，定义<strong>函数指针</strong>去使用(<code>*pFN = GetProcessAddress(&quot;xyz&quot;)</code>)</li><li>未导出函数：不在导出表，无文档说明，没有头文件，可以找到该函数的地址，然后使用<strong>函数指针</strong>去使用(<code>*pFN = 0x89765786</code>)<ul><li>WDK说明文档中只包含了内核模块导出的函数，对于未导出的函数，则不能直接使用。如果要使用未导出的函数，只要定义一个<strong>函数指针</strong>，并且为函数指针提供正确的函数地址就可以使用了。有两种办法都可以获取为导出的函数地址：<ul><li>特征码搜索</li><li>解析内核PDB文件(使用<code>uf 函数名称</code>或<code>u 地址</code>)</li></ul></li></ul></li></ul></li><li>内核函数前缀</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023822.png" alt="f6z1tYC8iWxBM4v" /></p><h2 id="内核空间与内核模块"><a class="markdownIt-Anchor" href="#内核空间与内核模块"></a> 内核空间与内核模块</h2><ul><li>内核空间中，每个进程低2G各不相同，高2G相同，在高2G中做任何事情影响的是所有进程</li><li>在高2G中，并不是只有一个内核模块为所有进程提供服务，而是由许多个模块组成，<strong>每个模块在高2G中都有属于自己独立的内存地址和大小</strong></li><li>若想了解每个内核模块的具体信息，可以通过 <code>_DRIVER_OBJECT</code> 这个结构体，它存储了当前内核模块的具体信息</li><li>任意加载一个驱动，便可通过 <code>_LDR_DATA_TABLE_ENTRY</code> 这个结构体中的双向链表得到所有内核模块的信息</li></ul><h1 id="事件等待"><a class="markdownIt-Anchor" href="#事件等待"></a> 事件等待</h1><h2 id="临界区和自旋锁"><a class="markdownIt-Anchor" href="#临界区和自旋锁"></a> 临界区和自旋锁</h2><ul><li>临界区<ul><li>通过 <code>sleep()</code> 实现</li></ul></li><li>自旋锁<ul><li>通过使当前CPU <code>空转</code> 实现</li></ul></li></ul><h2 id="等待与唤醒"><a class="markdownIt-Anchor" href="#等待与唤醒"></a> 等待与唤醒</h2><ol><li>可等待对象正常情况下都是以 <code>_DISPATCHER_HEADER</code> 结构体开头的，但是有一些特殊的结构体并不是以 <code>_DISPATCHER_HEADER</code> 开头的(如 _FILE_OBJECT)，但是windows又希望把它们也变成所谓的可等待对象，因此在它们内部嵌入一个 <code>_DISPATCHER_HEADER</code> 这样的结构体</li><li>只要是包含 <code>_DISPATCHER_HEADER</code> 结构体的对象，都可以看作是可等待对象，都可以使用 <code>WaitForSingleObject</code> 和 <code>WaitForMultipleObjects</code> 这两个函数进入等待状态</li></ol><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023751.png" alt="image-20231003151136267" /></p><ul><li>等待中的线程，一定在等待链表中(<code>KiWaitListHead</code>)，同时也一定在这张网上(<code>KTHREAD +5C的位置不为空</code>)</li><li>线程通过调用<code>WaitForSingleObject/WaitForMultipleObjects</code>函数将自己挂到这张网上</li><li>线程什么时候会再次执行取决于其他线程何时调用相关函数，等待对象不同调用的函数也不同</li></ul><h2 id="waitfoesingleobject函数"><a class="markdownIt-Anchor" href="#waitfoesingleobject函数"></a> WaitFoeSingleObject函数</h2><ol><li><p>不同的等待对象，用不同的方法来修改 <code>_DISPATCHER_HEADER-&gt;SignalState</code></p></li><li><p>如果可等待对象是 <code>EVENT</code>，其他线程通常使用 <code>SetEvent</code> 来设置 <code>SignalState = 1</code>，并且，将正在等待该对象的其他线程唤醒，也就是从等待链表<code>(KiWaitListHead</code>)中摘出来，此时线程临时复活</p></li><li><p><code>SetEvent</code> 函数并不会将线程从等待网上摘下来，是否要下来，由当前线程自己来决定。此时线程会在<code>WaitForSingleObject </code>或者 <code>WaitForMultipleObjects </code> 恢复执行(在哪切换就在哪开始执行)，如果符合唤醒条件，就将自己从 <strong>等待网</strong> 上摘下来，此时的线程才是真正的唤醒</p></li><li><p>若使用 <code>SetEvent</code> 这种函数直接将线程从等待网上摘下来，将会非常麻烦，因为可能有非常多的线程在等待一个对象，无法判断该将谁摘下(一个也线程可能等待着多个对象)</p><ul><li>比如：线程A和线程B同时在等待着一个对象，这时如果有线程C调用了SetEvent(将等待对象的信号量置1)，线程A和线程B会被临时唤醒(从KiWaitLkistHead摘下)，并行进入关键循环，假设线程A先运行，线程A会设置等待对象的信号量&lt;=0，然后将自己从等待网上摘下来，此时线程A彻底复活。线程B再去判断等待对象是否有信号量时，已经没有信号量了，这时线程B会将自己重新挂入等待链表中</li></ul></li><li><p>不同对象调用API修改信号个数只在细节上有差异，本质上都是一样的</p><ul><li>这里区分<strong>事件的type属性的不同，信号量，互斥体</strong>。对于这几种不同的对象，其具体的修改策略也是不同的，但是本质上大同小异，都是修改 SignalState</li></ul></li></ol><ul><li>关于强制唤醒<ul><li>在APC专题中，当插入一个用户APC时(<strong>Alertable=1</strong>)，当前线程是可以被唤醒的，但并不是真正的唤醒。因为如果当前的线程在等待网上，执行完用户APC后，线程仍然要进入等待状态</li></ul></li></ul><h1 id="句柄表"><a class="markdownIt-Anchor" href="#句柄表"></a> 句柄表</h1><h2 id="句柄表-2"><a class="markdownIt-Anchor" href="#句柄表-2"></a> 句柄表</h2><h3 id="描述-2"><a class="markdownIt-Anchor" href="#描述-2"></a> 描述</h3><ol><li>当一个进程创建或者打开一个内核对象时，将获得一个句柄，通过这个句柄可以访问对应的内核对象</li><li>句柄表存储在<strong>零环</strong>，一个进程使用了几个句柄，在该进程的句柄表中就会存储几个句柄</li><li>所有的句柄所对应的内核对象，都包含在 <code>_OBJECT_HEADER</code> 中，真正的内核对象保存在 <code>_OBJECT_HEADER +0x018 body</code> 的位置</li></ol><h3 id="注意-2"><a class="markdownIt-Anchor" href="#注意-2"></a> 注意</h3><ol><li><strong>窗口、字体、笔刷</strong>等句柄与本章所学句柄是两码事</li><li>创建句柄不等同于打开句柄，当创建的时候，操作系统会在零环为内核对象分配一个结构体(例如<code>CreateEvent</code>)，如果自己或他人打开了这个内核对象(例如<code>OpenProcess</code>)，那么将不会再次为这个内核对象分配一个结构体，而是返回一个句柄的索引值</li><li>若同一个内核对象被引用了100次，那么在句柄表中就会存储100个内核对象的地址</li><li>句柄的值并非如上图所显示的只占4个字节，而是<strong>占8个字节</strong>，但是句柄表的值仍然按照<strong>4个字节</strong>进行计算</li></ol><p><strong>句柄索引定位对应句柄的计算公式</strong>：<code>handle = index / 4 * 8</code></p><h2 id="全局句柄表"><a class="markdownIt-Anchor" href="#全局句柄表"></a> 全局句柄表</h2><ol><li><p>进程的句柄表是私有的，每个进程都有一个自己的句柄表</p></li><li><p>除此之外，系统还有一个全局句柄表：<code>PsdCidTable</code>，为 <code>_HANDLE_TABLE</code> 结构，所有的进程和线程无论无论是否打开，都在这个表中</p></li><li><p>每个进程和线程都有一个唯一的编号：<code>PID和CID</code> 这两个值其实就是全局句柄表中的索引</p></li><li><p>进程和线程的查询,主要是以下三个函数,按照给定的PID或CID从PspCidTable从查找相应的进线程对象：</p><ul><li><p>PsLookupProcessThreadByCid()</p></li><li><p>PsLookupProcessByProcessId()</p></li><li><p>PsLookupThreadByThreadId()</p></li></ul></li></ol><h1 id="软件调试"><a class="markdownIt-Anchor" href="#软件调试"></a> 软件调试</h1><h2 id="调试相关"><a class="markdownIt-Anchor" href="#调试相关"></a> 调试相关</h2><h3 id="调试对象"><a class="markdownIt-Anchor" href="#调试对象"></a> 调试对象</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023788.png" alt="image-20231003200338832" /></p><ol><li>调试器与被调试进程通过 <code>DEBUG_OBJECT</code> 结构体建立联系</li><li><code>DEBUG_OBJECT</code> 中有一个链表成员，用于记录所有<strong>调试事件</strong></li><li>当被调试进程产生调试事件时，调试器从链表中取出调试事件进行处理</li></ol><ul><li>调试事件有不同种类，只有几个最关键的种类才会被记录到链表中，例如被调试进程进行文件读写、申请内存、释放内存等行为时不会产生调试事件，即不是所有的调试事件都会被记录到链表中</li></ul><h3 id="调试事件的采集"><a class="markdownIt-Anchor" href="#调试事件的采集"></a> 调试事件的采集</h3><ol><li>调试事件有多种，真正需要关注的只有<strong>7种</strong></li><li>Windows通过在被调试进程的<strong>必经之路</strong>上调用调试事件采集函数，向 <code>DEBUG_PORT</code> 中挂入调试事件</li><li>不同事件的必经之路所使用的调试事件采集函数不同，但最终都通过 <code>DbgkSendApiMessage</code> 向链表中写入调试事件信息(封装好的调试事件结构体)<ul><li><code>DbgkSendApiMessage</code> 有两个参数，第一个参数为调试事件类型，第二个参数为是否挂起其它线程，有时需要，比如0xCC，有时不需要，比如模块加载</li></ul></li></ol><h3 id="调试事件的处理"><a class="markdownIt-Anchor" href="#调试事件的处理"></a> 调试事件的处理</h3><ol><li>调试器在创建进程时，除了能得到进程创建、创建线程、模块加载等调试事件之外，还会收到一个<code>异常事件</code></li><li>异常来源于调试器创建进程时触发的<code>系统断点</code>，目的是给调试器一个中断的机会</li><li>调试器在附加进程时，能够得到一份<code>模拟的</code>进程创建时产生的相关调试事件信息</li><li>这些虚假的调试事件信息可靠性较低，程序在执行过程中可能已经处理过部分信息</li></ol><h3 id="异常的处理"><a class="markdownIt-Anchor" href="#异常的处理"></a> 异常的处理</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023040.png" alt="image-20231003201011971" /></p><ul><li><p>这里注意<strong>未处理异常: 最后一道防线</strong></p></li><li><p><code>UnhandledExceptionFilter</code> 执行流程：</p><ol><li><p>通过<code>NtQueryInformationProcess</code>查询当前进程是否正在被调试，如果是，返回<code>EXCEPTION_CONTINUE_SEARCH</code>，此时会进入第二轮分发</p></li><li><p>如果没有被调试：</p><ul><li>查询是否通过<code>SetUnhandledExceptionFilter</code>注册处理函数，如果有就调用</li></ul><p>如果没有通过<code>SetUnhandledExceptionFilter</code>注册处理函数，弹出窗口，让用户选择终止程序还是启动即时调试器。</p><ul><li>如果用户没有启用即时调试器，那么该函数返回<code>EXCEPTION_EXECUTE_HANDLER</code></li></ul></li></ol></li><li><p>这里若是原程序通过 <code>SetUnhandledExceptionFilter</code> 来注册处理函数的话，使用调试器不会关注这个处理，所以会导致执行结果与原程序不相符的情况发生</p></li></ul><h2 id="断点"><a class="markdownIt-Anchor" href="#断点"></a> 断点</h2><h3 id="调试的本质"><a class="markdownIt-Anchor" href="#调试的本质"></a> 调试的本质</h3><p><strong>描述</strong>：</p><ol><li>调试的本质是<strong>触发异常</strong>与<strong>调试器接管异常的过程</strong></li><li>不论是软件断点，硬件断点还是 <code>INT 3</code> 断点，本质都是触发异常</li></ol><h3 id="软件断点"><a class="markdownIt-Anchor" href="#软件断点"></a> 软件断点</h3><p><strong>描述</strong>：</p><ul><li>当使用调试器在任意代码位置设置断点时，本质上是将当前代码位置的字节码改为<strong>0xCC</strong>，对应的汇编指令为<strong>INT 3</strong>，调试器为了界面的美观，不会直接在反汇编界面将修改后的数据显示出来</li></ul><p><strong>执行流程</strong>：</p><ul><li><p>被调试进程：</p><ol><li>CPU检测到INT 3指令</li><li>查IDT表找到对应的中断处理函数</li><li>CommonDispatchException</li><li>KiDispatchException</li><li>DbgkForwardException收集并发送调试事件</li><li>最终调用<code>DbgkpSendApiMessage(x, x)</code><ul><li>第一个参数：消息类型</li><li>第二个参数：是否挂起其它线程</li></ul></li></ol></li><li><p>调试器进程：</p><ol><li>循环判断</li><li>取出调试事件</li><li>列出信息：寄存器、内存</li><li>用户处理</li></ol></li></ul><h3 id="内存断点"><a class="markdownIt-Anchor" href="#内存断点"></a> 内存断点</h3><p><strong>描述</strong>：</p><ul><li>当需要在某块内存被访问时产生中断，可以使用内存断点。</li><li>内存断点能够分为两种类型：<ul><li>内存访问：内存被读写时产生中断</li><li>内存写入：内存被写入时产生中断</li></ul></li><li>通过 <code>VirtualProtectEx</code> 来实现<ul><li>内存访问：将指定内存的属性修改为 <code>PAGE_NOACCESS</code>(修改后，PTE的P位等于0)</li><li>内存写入：将指定内存的属性修改为 <code>PAGE_EXECUTE_READ</code>(修改后，PTE的P位等于1，R/W位等于0)</li></ul></li></ul><p><strong>内存断点的执行流程</strong>：</p><ul><li><p>被调试进程：</p><ol><li>CPU访问错误的内存地址，触发页异常</li><li>查IDT表找到对应的中断处理函数(nt!_KiTrap0E)</li><li>CommonDispatchException</li><li>KiDispatchException</li><li>DbgkForwardException收集并发送调试事件</li><li>最终调用<code>DbgkpSendApiMessage(x, x)</code><ul><li>第一个参数：消息类型，共有7种类型</li><li>第二个参数：是否挂起其它线程</li></ul></li></ol></li><li><p>调试器进程：</p><ol><li>循环判断</li><li>取出调试事件</li><li>列出信息：寄存器、内存</li><li>用户处理</li></ol></li></ul><h3 id="硬件断点"><a class="markdownIt-Anchor" href="#硬件断点"></a> 硬件断点</h3><p><strong>描述</strong>：</p><ol><li>与软件断点与内存断点不同，<strong>硬件断点</strong>不依赖被调试程序，而是依赖于CPU中的<strong>调试寄存器</strong></li><li>调试寄存器有<strong>8个</strong>，分别为 <strong>Dr0~Dr7</strong></li><li>用户最多能够设置4个硬件断点，这是由于只有<strong>Dr0~Dr3</strong>用于存储线性地址</li><li>其中，Dr4和Dr5是保留的</li></ol><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310032023053.png" alt="image-20231003202224792" /></p><p><strong>设置硬件断点</strong>：</p><ul><li><strong>Dr0~Dr3</strong> 用于设置硬件断点，由于只有4个断点寄存器，所以最多只能设置4个硬件调试断点。</li><li><strong>Dr7</strong> 是最重要的寄存器：<ul><li><strong>L0/G0 ~ L3/G3</strong>：控制Dr0~Dr3是否有效，局部还是全局；每次异常后，Lx都被清零,Gx不清零。</li><li><strong>断点长度(LENx)</strong>：00(1字节)、01(2字节)、11(4字节)</li><li><strong>断点类型(R/Wx)</strong>：00(执行断点)、01(写入断点)、11(访问断点)</li></ul></li></ul><p><strong>触发硬件断点</strong>：</p><ul><li><p>被调试进程：</p><ol><li>CPU执行时检测当前线性地址与调试寄存器(Dr0~Dr3)中的线性地址相等</li><li>查IDT表找到对应的中断处理函数(nt!_KiTrap01)</li><li>CommonDispatchException</li><li>KiDispatchException</li><li>DbgkForwardException收集并发送调试事件</li><li>最终调用<code>DbgkpSendApiMessage(x, x)</code><ul><li>第一个参数：消息类型，共有7种类型</li><li>第二个参数：是否挂起其它线程</li></ul></li></ol></li><li><p>调试器进程：</p><ol><li>循环判断</li><li>取出调试事件</li><li>列出信息：寄存器、内存</li><li>用户处理</li></ol></li></ul><p><strong>处理硬件断点</strong>：</p><ul><li>硬件调试断点产生的异常是 <code>STATUS_SINGLE_STEP</code>(单步异常)</li><li>检测Dr6寄存器的B0~B3：判断哪个寄存器触发的异常</li></ul><h3 id="单步步入"><a class="markdownIt-Anchor" href="#单步步入"></a> 单步步入</h3><p><strong>描述</strong>：</p><ol><li><strong>单步步入</strong>的实现依赖于<strong>单步异常</strong></li><li>当我们需要观察每一行代码(包括函数内部的代码)执行之后寄存器与内存的变化，通常会采用单步步入</li><li>当使用单步步入时，可采用在下一行代码的首字节设置INT 3断点的方式实现</li><li>CPU为我们提供了一种更为方便的方法，即使用<strong>陷阱标志位(TF位)</strong></li></ol><p><strong>设置单步异常</strong></p><ul><li>将TF位置1</li></ul><p><strong>处理单步异常</strong></p><ul><li>单步产生的异常与硬件断点产生的异常一致，都是 <code>STATUS_SINGLE_STEP</code>(单步异常)</li></ul><h3 id="单步步过"><a class="markdownIt-Anchor" href="#单步步过"></a> 单步步过</h3><p><strong>描述</strong>：</p><ul><li>当遇到CALL指令时，若无需进入函数内部进行调试，可以使用单步步过。</li><li>与单步步入不同的是，单步步过的实现依赖于软件断点或硬件断点。</li></ul><p><strong>实现思路</strong>：</p><ol><li>判断当前指令是否为CALL指令</li><li>若不是CALL指令，设置TF为1触发单步异常</li><li>若是CALL指令，判断OPCODE是E8还是FF15</li><li>若<code>OPCODE</code>是E8，在当前地址之后的第5个字节设置软件断点(E8指令占5个字节)</li><li>若<code>OPCODE</code>是FF15，在当前地址之后的第6个字节设置软件断点(FF15指令占6个字节)</li></ol><ul><li>这里识别出 <code>CALL</code> 指令后，通常需要根据反汇编引擎来识别下一条指令的地址(call指令明面上的下一条)，然后在该地址设置硬件断点或者是软件断点</li></ul>]]></content>
    
    
    <categories>
      
      <category>OS相关</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一些记录2</title>
    <link href="/posts/1ea6e51b.html"/>
    <url>/posts/1ea6e51b.html</url>
    
    <content type="html"><![CDATA[<h1 id="minil"><a class="markdownIt-Anchor" href="#minil"></a> MiniL</h1><h2 id="easypass"><a class="markdownIt-Anchor" href="#easypass"></a> EasyPass</h2><h3 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h3><ul><li><a href="https://dua0g.top/archives/385">llvm的讲解</a></li><li><a href="https://bbs.kanxue.com/thread-273119.htm">llvm实战分析</a></li><li>LLVM PASS就是去处理IR文件，通过opt利用写好的so库优化已有的IR，形成新的IR。总体而言，PASS就是对IR进行额外处理，通过自己编写的函数来统计信息或者插入处理，这里对于源文件没有任何影响，只是在优化的过程中产生结果罢了。</li></ul><h3 id="运行与编译"><a class="markdownIt-Anchor" href="#运行与编译"></a> 运行与编译</h3><ul><li><p>按照 <code>Usage.md</code> 所言使用 PASS 对 IR 进行优化处理</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307141010620.png" alt="image-20230714101016577" /></p><p>没有什么信息，那么就通过编译 IR 为汇编文件分析</p></li><li><p>使用 <code>clang-10 -o main main.bc</code> 将LLVM bitcode 进一步编译为汇编(ELF文件)</p></li></ul><h4 id="静态分析"><a class="markdownIt-Anchor" href="#静态分析"></a> 静态分析</h4><ul><li><p>首先对于 <code>EasyPass。so</code> 文件进行分析，根据 LLVM PASS 的性质，找到虚表中的 <code>runOnFunction</code> 函数(通过定位虚表，找到最后一个函数即是目标函数)</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307141028472.png" alt="image-20230714102834441" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307141028952.png" alt="image-20230714102855930" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307141029342.png" alt="image-20230714102914323" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307141030271.png" alt="image-20230714103011250" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307141031753.png" alt="image-20230714103110707" /></p></li><li><p>分析 <code>runOnFunction</code> 函数，发现函数很大，反编译不成功，看汇编发现前面很多调用过了固定返回1的函数，则nop掉再进行反汇编分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x2673</span>,<span class="hljs-number">0x6C9B</span>):<br>    patch_byte(i,<span class="hljs-number">0x90</span>)<br></code></pre></td></tr></table></figure></li><li><p>首先是通过 <code>getName</code> 获得16个 <code>llvm::Value</code> 的类型的输入，这里根据 a2 是llvm中的 Value 对象，在llvm中 <code>Function</code> 是 Value 的⼀个⼦类，则a2 就是 LLVM 中的 <code>Function &amp;F</code> 的参数 F，即这里先通过 getName 获取函数名称，转为C语⾔字符串之后存⼊ <code>unk_41B0</code> 数组中</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307141049081.png" alt="image-20230714104929056" /></p></li><li><p>之后进入一个函数进行加密处理，这里采用虚拟机形式，通过异或处理进行加密处理—分析加密函数，发现是前半截异或后半截，后半截异或0xff</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307141048916.png" alt="image-20230714104824893" /></p></li><li><p>当该 FunctionPass 遍历了26个函数之后(<code>通过调试可以发现遍历的函数就是main.bc编译成ELF中主函数的26个函数</code>)开始进行密钥比较。经过26轮加密后进⾏密⽂⽐较</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307141052465.png" alt="image-20230714105245439" /></p></li></ul><h4 id="动态调试"><a class="markdownIt-Anchor" href="#动态调试"></a> 动态调试</h4><ul><li><p>配置好 LLVM 的环境(可以使用 <code>'opt-10 -load ……'</code>进行操作)</p></li><li><p>之后需要将<code>.so</code>文件进行链接，否则找不到此动态链接库(首先使用 <code>find / -type f -name EasyPass.so 2&gt;/dev/null</code> 查找 <code>.so</code> 文件所在目录，之后使用 <code>sudo ln -s /home/re/CTF/EasyPass.so /usr/lib</code> 对动态链接库进行链接)</p></li><li><p>之后配置 IDA 进行动态调试</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307141149719.png" alt="image-20230714114944674" /></p></li></ul><h3 id="exp"><a class="markdownIt-Anchor" href="#exp"></a> exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>str0 = [<span class="hljs-number">0x01</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x4D</span>,<br>        <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>        <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x75</span>,<br>        <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x61</span>,<br>        <span class="hljs-number">0x74</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x66</span>,<br>        <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x67</span>]<br><br>text1 = [BitVec(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>, <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">124</span> - <span class="hljs-number">97</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">97</span>, <span class="hljs-number">123</span>):<br>    str0[i] = text1[i - <span class="hljs-number">97</span>]<br>str0[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>names = [<span class="hljs-string">&quot;aaCCzCzzMMaMCMa&quot;</span>,<br>         <span class="hljs-string">&quot;bbMMyMyyZZbZMZb&quot;</span>,<br>         <span class="hljs-string">&quot;ccCCxCxxJJcJCJc&quot;</span>,<br>         <span class="hljs-string">&quot;ddQQwQwwMMdMQMd&quot;</span>,<br>         <span class="hljs-string">&quot;eeYYvYvvKKeKYKe&quot;</span>,<br>         <span class="hljs-string">&quot;ffHHuHuuCCfCHCf&quot;</span>,<br>         <span class="hljs-string">&quot;ggDDtDttKKgKDKg&quot;</span>,<br>         <span class="hljs-string">&quot;hhDDsDssOOhODOh&quot;</span>,<br>         <span class="hljs-string">&quot;iiCCrCrrIIiICIi&quot;</span>,<br>         <span class="hljs-string">&quot;jjOOqOqqDDjDODj&quot;</span>,<br>         <span class="hljs-string">&quot;kkSSpSppEEkESEk&quot;</span>,<br>         <span class="hljs-string">&quot;llXXoXooTTlTXTl&quot;</span>,<br>         <span class="hljs-string">&quot;mmLLnLnnVVmVLVm&quot;</span>,<br>         <span class="hljs-string">&quot;nnII_I__HHnHIHn&quot;</span>,<br>         <span class="hljs-string">&quot;ooOO_O__CCoCOCo&quot;</span>,<br>         <span class="hljs-string">&quot;ppFF_F__NNpNFNp&quot;</span>,<br>         <span class="hljs-string">&quot;qqDD_D__BBqBDBq&quot;</span>,<br>         <span class="hljs-string">&quot;rrTT_T__BBrBTBr&quot;</span>,<br>         <span class="hljs-string">&quot;ssJJ_J__CCsCJCs&quot;</span>,<br>         <span class="hljs-string">&quot;ttGG_G__XXtXGXt&quot;</span>,<br>         <span class="hljs-string">&quot;uuDD_D__OOuODOu&quot;</span>,<br>         <span class="hljs-string">&quot;vvUU_U__JJvJUJv&quot;</span>,<br>         <span class="hljs-string">&quot;wwOO_O__SSwSOSw&quot;</span>,<br>         <span class="hljs-string">&quot;xxRR_R__SSxSRSx&quot;</span>,<br>         <span class="hljs-string">&quot;yyEE_E__KKyKEKy&quot;</span>,<br>         <span class="hljs-string">&quot;zzJJ_J__TTzTJTz&quot;</span>,<br>         ]<br><span class="hljs-keyword">for</span> str1 <span class="hljs-keyword">in</span> names:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(str1) + <span class="hljs-number">1</span>):<br>        str0[i] = <span class="hljs-built_in">ord</span>(str1[i - <span class="hljs-number">1</span>])<br>    str0[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>):<br>        v4 = str0[str0[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>]<br>        v3 = str0[str0[<span class="hljs-number">0</span>]]<br>        v2 = str0[str0[<span class="hljs-number">0</span>] + <span class="hljs-number">2</span>]<br>        str0[<span class="hljs-number">0</span>] += <span class="hljs-number">3</span><br>        str0[v2] = (~(str0[v4] &amp; str0[v3])) &amp; <span class="hljs-number">0xff</span><br>s = Solver()<br>cipher = [<span class="hljs-number">0x64</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x00</span>,<br>          <span class="hljs-number">0x16</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xA9</span>,<br>          <span class="hljs-number">0x92</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xCA</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">97</span>, <span class="hljs-number">123</span>):<br>    s.add(cipher[i - <span class="hljs-number">97</span>] == str0[i])<br><span class="hljs-built_in">print</span>(s.check())<br>m = s.model()<br><br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> m.decls():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;d.name()&#125;</span> = <span class="hljs-subst">&#123;m[d]&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># final = &#123;20: 109,</span><br><span class="hljs-comment">#          18: 108,</span><br><span class="hljs-comment">#          13: 112,</span><br><span class="hljs-comment">#          17: 76,</span><br><span class="hljs-comment">#          10: 115,</span><br><span class="hljs-comment">#          21: 95,</span><br><span class="hljs-comment">#          15: 101,</span><br><span class="hljs-comment">#          23: 52,</span><br><span class="hljs-comment">#          7: 79,</span><br><span class="hljs-comment">#          5: 48,</span><br><span class="hljs-comment">#          6: 111,</span><br><span class="hljs-comment">#          8: 111,</span><br><span class="hljs-comment">#          0: 81,</span><br><span class="hljs-comment">#          2: 81,</span><br><span class="hljs-comment">#          12: 109,</span><br><span class="hljs-comment">#          3: 95,</span><br><span class="hljs-comment">#          16: 95,</span><br><span class="hljs-comment">#          14: 108,</span><br><span class="hljs-comment">#          22: 80,</span><br><span class="hljs-comment">#          9: 95,</span><br><span class="hljs-comment">#          11: 105,</span><br><span class="hljs-comment">#          1: 119,</span><br><span class="hljs-comment">#          25: 53,</span><br><span class="hljs-comment">#          19: 86,</span><br><span class="hljs-comment">#          24: 115,</span><br><span class="hljs-comment">#          4: 115,</span><br><span class="hljs-comment">#          &#125;</span><br></code></pre></td></tr></table></figure><h2 id="maze_aot"><a class="markdownIt-Anchor" href="#maze_aot"></a> maze_aot</h2><h3 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h3><ul><li><p>分析文件，首先就是 <code>Input a 64-bit hex number to solve the maze:</code> ，就是以十六进制输入64位的整数，然后到了 <code>maze_walk()</code> 函数，这里都是跳转</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307152321226.png" alt="image-20230715232115144" /></p></li><li><p>之后查看其中 <code>maze_stop</code> 函数与 <code>maze_final</code> 函数，发现需要经过64个跳转(对应输入的64-bit)，这里存在着<code>steps &amp; 1</code> 和 <code>steps = steps &gt;&gt; 1</code>，即把输入转化为一串二进制数，从后往前根据末尾是否为 1 决定是否跳跃。</p></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307152321978.png" alt="image-20230715232149948" /></p><ul><li>在其中一个跳转中，存在一个 <code>maze_final</code> 函数，这个函数就是最后结束的条件，到达这个函数所在的地方就是得到flag的条件</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307152322144.png" alt="image-20230715232201123" /></p><h3 id="exp-2"><a class="markdownIt-Anchor" href="#exp-2"></a> exp</h3><p>​这里首先需要知道该程序的控制流，</p><h3 id="法1"><a class="markdownIt-Anchor" href="#法1"></a> 法1</h3><p>​使用 IDAPython 脚本时需要知道其中函数的意义，这里弄懂<a href="%5Bhttps://zhuanlan.zhihu.com/p/21330930">基本快和控制流的概念</a>。简单而言，函数中的基本块就是以跳转分类，只有一个入口和一个出口的可供程序顺序执行的语句序列，</p><ul><li>首先使用 <code>idapython</code> 提取改题目中的数据结构</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idaapi<br><br>function_address = <span class="hljs-number">0x1500</span><br>function = idaapi.get_func(function_address) <span class="hljs-comment"># 由给定的函数地址获取函数对象</span><br>graph = <span class="hljs-built_in">dict</span>() <span class="hljs-comment"># 创建一个空的字典，用于存储函数的控制流程图，用于之后存储基本快之间的连接关系</span><br>cfg = idaapi.FlowChart(function) <span class="hljs-comment"># 接受一个函数对象作为参数，并返回一个表示控制流程图的对象，该对象包含函数的基本块和它们之间的控制流转移关系</span><br>exclusive_nodes = <span class="hljs-built_in">list</span>()<span class="hljs-comment"># 空列表，用于存储跳转目标地址小于等于5的节点，这些节点可能是特殊的或特定情况下的跳转块</span><br>first = <span class="hljs-literal">None</span><br>jmp_dict = <span class="hljs-built_in">dict</span>() <span class="hljs-comment"># 空字典，用于存储跳转指令的信息。在后续的分析过程中，可能会将跳转指令的类型和目标地址存储在这个字典中</span><br><br><span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> cfg: <span class="hljs-comment"># 遍历所有的基本块</span><br>    graph[block.start_ea] = <span class="hljs-built_in">list</span>() <span class="hljs-comment"># 为每个基本块的起始地址创建一个空的列表，用于存储与之相连的后继节点---&gt;&#123;&#x27;0x1500&#x27;: [], &#x27;0x1501&#x27;: []…………&#125;</span><br>    start_address = block.start_ea<br>    end_address = block.end_ea<br>    <span class="hljs-keyword">if</span> first <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Starting&quot;</span>)<br>        first = start_address<br>    <br>    <span class="hljs-keyword">if</span> end_address - start_address &lt;= <span class="hljs-number">5</span>: <span class="hljs-comment"># 这里专门找jnz jmp类型的程序，获取其中只有 jmp 的基本块</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;found jmp block&quot;</span>)<br>        exclusive_nodes.append(start_address) <span class="hljs-comment"># 存储跳转目标地址小于等于5的节点 </span><br>        <span class="hljs-keyword">for</span> succ <span class="hljs-keyword">in</span> block.succs():  <span class="hljs-comment">#遍历当前基本块的后继节点。通过这个循环，可以获取基本块之间的连接关系，并将其存储在graph字典中</span><br>            graph[block.start_ea].append(succ.start_ea)<br>        <span class="hljs-keyword">continue</span><br>        <br>    ea = <span class="hljs-number">0</span>   <span class="hljs-comment"># 迭代计算指令地址</span><br>    flag = <span class="hljs-number">0</span> <span class="hljs-comment"># 记录跳转指令类型</span><br>    tgt = <span class="hljs-number">0</span>  <span class="hljs-comment"># 记录跳转目标地址</span><br>    <span class="hljs-keyword">while</span> (end_address - ea) != start_address: <span class="hljs-comment"># 循环直到迭代到当前基本块的起始地址</span><br>        <span class="hljs-keyword">if</span> idc.GetDisasm(end_address - ea).startswith(<span class="hljs-string">&quot;jnz&quot;</span>):<span class="hljs-comment"># 检查当前指令是否以&quot;jnz&quot;开头</span><br>            <span class="hljs-comment"># print(int(idc.GetDisasm(end_address - ea)[-4::],16))</span><br>            flag = <span class="hljs-number">1</span> <span class="hljs-comment"># 设置flag为1，表示跳转指令为&quot;jnz&quot;</span><br>            tgt = <span class="hljs-built_in">int</span>(idc.GetDisasm(end_address - ea)[-<span class="hljs-number">4</span>::],<span class="hljs-number">16</span>) <span class="hljs-comment"># 将跳转目标地址解析为十六进制整数并赋值给tgt</span><br>        <span class="hljs-keyword">elif</span> idc.GetDisasm(end_address - ea).startswith(<span class="hljs-string">&quot;jz&quot;</span>):<br>            flag = <span class="hljs-number">2</span><br>            tgt = <span class="hljs-built_in">int</span>(idc.GetDisasm(end_address - ea)[-<span class="hljs-number">4</span>::], <span class="hljs-number">16</span>)<br>        ea += <span class="hljs-number">1</span> <span class="hljs-comment"># 迭代下一个指令</span><br>    <span class="hljs-keyword">if</span> flag != <span class="hljs-number">0</span>: <span class="hljs-comment"># 检查flag是否不为0，即是否存在跳转指令</span><br>        jmp_dict[block.start_ea] = (flag,tgt) <span class="hljs-comment"># 将跳转指令的信息添加到jmp_dict字典中，即表明了跳转类型与跳转地址</span><br>    <span class="hljs-keyword">for</span> succ <span class="hljs-keyword">in</span> block.succs():<br>        graph[block.start_ea].append(succ.start_ea) <span class="hljs-comment"># 将当前基本块的起始地址与后继节点的起始地址连接起来</span><br><br><span class="hljs-built_in">print</span>(jmp_dict)<br></code></pre></td></tr></table></figure><ul><li>之后使用 <code>DFS</code> 来计算路径，将这两部分代码合在一起执行IDAPython语句即可得到最后路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">BFS</span>(<span class="hljs-params">grap, star</span>):                    <span class="hljs-comment"># BFS算法</span><br>    queue = []                          <span class="hljs-comment"># 定义一个队列</span><br>    seen = <span class="hljs-built_in">set</span>()                        <span class="hljs-comment"># 建立一个集合，集合就是用来判断该元素是不是已经出现过</span><br>    queue.append(star)                  <span class="hljs-comment"># 将任一个节点放入</span><br>    seen.add(star)                      <span class="hljs-comment"># 同上</span><br>    parent = &#123;star:<span class="hljs-literal">None</span>&#125;                <span class="hljs-comment"># 存放parent元素</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">len</span>(queue) &gt; <span class="hljs-number">0</span>):             <span class="hljs-comment"># 当队列里还有东西时</span><br>        ver = queue.pop(<span class="hljs-number">0</span>)              <span class="hljs-comment"># 取出队头元素</span><br>        notes = grap[ver]               <span class="hljs-comment"># 查看grep里面的key,对应的邻接点</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> notes:                 <span class="hljs-comment"># 遍历邻接点</span><br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> seen:           <span class="hljs-comment"># 如果该邻接点还没出现过</span><br>                queue.append(i)         <span class="hljs-comment"># 存入queue</span><br>                seen.add(i)             <span class="hljs-comment"># 存入集合</span><br>                parent[i] = ver         <span class="hljs-comment">#将元素对应的parent元素存入字典中</span><br>    <span class="hljs-keyword">return</span> parent<br><br><span class="hljs-comment"># path = bfs(graph, first, end)</span><br>parent = BFS(graph,first)<br><br>a = end<br>p=[]<br><span class="hljs-keyword">while</span> a != <span class="hljs-literal">None</span>:<br>    <span class="hljs-comment"># print(a)</span><br>    p.append(a)<br>    a = parent[a]<br>path = p<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;路径: <span class="hljs-subst">&#123;path&#125;</span>&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(path) - <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> path[i] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> exclusive_nodes <span class="hljs-keyword">and</span> path[i] != <span class="hljs-number">5376</span>:<br>        <span class="hljs-built_in">next</span> = path[i + <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> (jmp_dict[path[i]][<span class="hljs-number">1</span>] == <span class="hljs-built_in">next</span> <span class="hljs-keyword">and</span> jmp_dict[path[i]][<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1&#x27;</span>, end=<span class="hljs-string">&quot;&quot;</span>)<br>        <span class="hljs-keyword">elif</span> (jmp_dict[path[i]][<span class="hljs-number">1</span>] != <span class="hljs-built_in">next</span> <span class="hljs-keyword">and</span> jmp_dict[path[i]][<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> (jmp_dict[path[i]][<span class="hljs-number">1</span>] == <span class="hljs-built_in">next</span> <span class="hljs-keyword">and</span> jmp_dict[path[i]][<span class="hljs-number">0</span>] == <span class="hljs-number">2</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> (jmp_dict[path[i]][<span class="hljs-number">1</span>] != <span class="hljs-built_in">next</span> <span class="hljs-keyword">and</span> jmp_dict[path[i]][<span class="hljs-number">0</span>] == <span class="hljs-number">2</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ERR&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="法2"><a class="markdownIt-Anchor" href="#法2"></a> 法2</h3><p>从汇编代码中抽象出控制流块的前后关系，然后用最短路径算法求解。这里由于<code>maze_walk</code>中的指令比较单一，直接用capstone反汇编引擎恢复控制流：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">from</span> elftools.elf.elffile <span class="hljs-keyword">import</span> ELFFile<br><span class="hljs-keyword">from</span> elftools.construct <span class="hljs-keyword">import</span> Container<br><span class="hljs-keyword">from</span> capstone <span class="hljs-keyword">import</span> Cs, CS_ARCH_X86, CS_MODE_64<br><span class="hljs-keyword">from</span> networkx <span class="hljs-keyword">import</span> DiGraph, shortest_path<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ARC4<br><br><span class="hljs-comment"># 从符号获取字节数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getdata</span>(<span class="hljs-params">elf: ELFFile, entry: Container</span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    addr, size = entry.st_value, entry.st_size<br>    <span class="hljs-keyword">for</span> section <span class="hljs-keyword">in</span> elf.iter_sections():<br>        start = section.header.sh_addr<br>        end = start + section.header.sh_size<br>        <span class="hljs-keyword">if</span> start &lt;= addr &lt;= end:<br>            <span class="hljs-keyword">assert</span> addr + size &lt;= end<br>            <span class="hljs-keyword">return</span> section.data()[addr-start:addr-start+size]<br>    <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;cannot find data from 0x%x to 0x%x&#x27;</span> % (addr, addr + size))<br><br>elf = ELFFile(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;maze&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>))<br>symtab = elf.get_section_by_name(<span class="hljs-string">&#x27;.symtab&#x27;</span>)<br><br><span class="hljs-comment"># 获取函数的偏移和数据</span><br>maze_walk = symtab.get_symbol_by_name(<span class="hljs-string">&#x27;maze_walk&#x27;</span>)[<span class="hljs-number">0</span>].entry<br>code = getdata(elf, maze_walk)<br>maze_walk_addr = maze_walk.st_value<br>maze_step_addr = symtab.get_symbol_by_name(<span class="hljs-string">&#x27;maze_step&#x27;</span>)[<span class="hljs-number">0</span>].entry.st_value<br>maze_final_addr = symtab.get_symbol_by_name(<span class="hljs-string">&#x27;maze_final&#x27;</span>)[<span class="hljs-number">0</span>].entry.st_value<br><br><span class="hljs-comment"># 获取加密的flag数据</span><br>flag_enc = getdata(elf, symtab.get_symbol_by_name(<span class="hljs-string">&#x27;maze_flag&#x27;</span>)[<span class="hljs-number">0</span>].entry)<br>flag_enc = flag_enc[:-<span class="hljs-number">1</span>] <span class="hljs-comment"># 最后一个字节为结束字符</span><br><br><span class="hljs-comment"># 使用capstone将字节数据转换为汇编</span><br>cs = Cs(CS_ARCH_X86, CS_MODE_64)<br><br><span class="hljs-comment"># 把控制流块提取出来</span><br>blocks, current = [], <span class="hljs-literal">None</span><br>final_block_addr = <span class="hljs-literal">None</span> <span class="hljs-comment"># 最终块的地址</span><br><span class="hljs-keyword">for</span> addr, _, op, opr <span class="hljs-keyword">in</span> cs.disasm_lite(code, maze_walk_addr):<br>    <span class="hljs-comment"># insn = op + (&#x27; &#x27; + opr if opr else &#x27;&#x27;)</span><br>    <span class="hljs-comment"># print(&#x27;%04x %s&#x27; % (addr, insn))</span><br><br>    <span class="hljs-keyword">if</span> op == <span class="hljs-string">&#x27;nop&#x27;</span>: <span class="hljs-keyword">continue</span> <span class="hljs-comment"># 存在nop是因为指令对齐，过滤即可</span><br>    <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;call&#x27;</span>: <span class="hljs-comment"># 可能调用maze_step和maze_final</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(opr, <span class="hljs-number">0</span>) == maze_step_addr:<br>            current = []<br>            blocks.append(current)<br>            current.append((addr, op, opr))<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">int</span>(opr, <span class="hljs-number">0</span>) == maze_final_addr:<br>            final_block_addr = addr<br>        <span class="hljs-keyword">else</span>: <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;unknown function %s&#x27;</span> % opr)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> current <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>: <span class="hljs-comment"># 其他指令直接插入当前块</span><br>            current.append((addr, op, opr))<br><br><span class="hljs-comment"># patterns = set() # 先统计基本块模式的种类</span><br><span class="hljs-comment"># for block in blocks:</span><br><span class="hljs-comment">#     pattern = &#x27; &#x27;.join(op for _, op, _ in block)</span><br><span class="hljs-comment">#     patterns.add(pattern)</span><br><span class="hljs-comment">#     for addr, op, opr in block:</span><br><span class="hljs-comment">#         if opr: op += &#x27; &#x27; + opr</span><br><span class="hljs-comment">#         print(&#x27;%04x %s&#x27; % (addr, op))</span><br><span class="hljs-comment">#     print()</span><br><span class="hljs-comment"># print(patterns) # &gt; &#123;&#x27;call test je&#x27;, &#x27;call test jne&#x27;, &#x27;call test jne jmp&#x27;, &#x27;call test je jmp&#x27;&#125;</span><br><br>graph = [] <span class="hljs-comment"># 地址，0分支，1分支</span><br>blocks.append((final_block_addr, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br><span class="hljs-keyword">for</span> i, block <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(blocks[:-<span class="hljs-number">1</span>]):<br>    pattern = <span class="hljs-string">&#x27; &#x27;</span>.join(op <span class="hljs-keyword">for</span> _, op, _ <span class="hljs-keyword">in</span> block)<br>    <span class="hljs-keyword">if</span> pattern == <span class="hljs-string">&#x27;call test je&#x27;</span>:<br>        graph.append((block[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], <span class="hljs-built_in">int</span>(block[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>], <span class="hljs-number">0</span>), blocks[i + <span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]))<br>    <span class="hljs-keyword">elif</span> pattern == <span class="hljs-string">&#x27;call test jne&#x27;</span>:<br>        graph.append((block[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], blocks[i + <span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], <span class="hljs-built_in">int</span>(block[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>], <span class="hljs-number">0</span>)))<br>    <span class="hljs-keyword">elif</span> pattern == <span class="hljs-string">&#x27;call test jne jmp&#x27;</span>:<br>        graph.append((block[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], <span class="hljs-built_in">int</span>(block[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>], <span class="hljs-number">0</span>), <span class="hljs-built_in">int</span>(block[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>], <span class="hljs-number">0</span>)))<br>    <span class="hljs-keyword">elif</span> pattern == <span class="hljs-string">&#x27;call test je jmp&#x27;</span>:<br>        graph.append((block[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], <span class="hljs-built_in">int</span>(block[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>], <span class="hljs-number">0</span>), <span class="hljs-built_in">int</span>(block[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>], <span class="hljs-number">0</span>)))<br>    <span class="hljs-keyword">else</span>: <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;unknown pattern %r&#x27;</span> % pattern)<br><br><span class="hljs-comment"># 转换成有向图</span><br>addr2idx = &#123;node[<span class="hljs-number">0</span>]: i <span class="hljs-keyword">for</span> i, node <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(graph)&#125;<br>addr2idx[final_block_addr] = <span class="hljs-built_in">len</span>(addr2idx) <span class="hljs-comment"># 最终块</span><br>graph = <span class="hljs-built_in">list</span>((addr2idx[node[<span class="hljs-number">1</span>]], addr2idx[node[<span class="hljs-number">2</span>]]) <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> graph)<br><span class="hljs-comment"># -&gt; [(1, 5), (8, 2), (11, 3), ...]</span><br><br><span class="hljs-comment"># 求最短路径可以直接调库</span><br>G = DiGraph()<br><span class="hljs-keyword">for</span> i, node <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(graph):<br>    G.add_edge(i, node[<span class="hljs-number">0</span>])<br>    G.add_edge(i, node[<span class="hljs-number">1</span>])<br>path = shortest_path(G, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(graph))<br><br>key, current = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(path) == <span class="hljs-number">65</span><br><span class="hljs-keyword">for</span> i, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(path[<span class="hljs-number">1</span>:]):<br>    key |= graph[current].index(v) &lt;&lt; i<br>    current = v<br>key = key.to_bytes(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;little&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;miniLctf&#123;%s&#125;&#x27;</span> % ARC4.new(key).decrypt(flag_enc).decode())<br></code></pre></td></tr></table></figure><h3 id="法3"><a class="markdownIt-Anchor" href="#法3"></a> 法3</h3><p>注意到程序控制流复杂但逻辑简单，而且没有太多层函数调用，我们可以利用<a href="https://github.com/angr/angr">angr</a>符号执行框架来进行求解(为了避免路径爆炸，实现了一个自定义的<code>ExplorationTechnique</code>)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><span class="hljs-keyword">from</span> angr <span class="hljs-keyword">import</span> Project, SimState, SimulationManager, ExplorationTechnique<br><span class="hljs-keyword">from</span> angr.sim_options <span class="hljs-keyword">import</span> ZERO_FILL_UNCONSTRAINED_REGISTERS<br><span class="hljs-keyword">from</span> cle.backends.symbol <span class="hljs-keyword">import</span> Symbol<br><span class="hljs-keyword">from</span> claripy <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MazeWalker</span>(<span class="hljs-title class_ inherited__">ExplorationTechnique</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;遍历方法：跳过已访问的代码，类似于BFS&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, maze_range: <span class="hljs-built_in">tuple</span>[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>], nstep_addr: <span class="hljs-built_in">int</span>, final_addr: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        self._<span class="hljs-built_in">range</span> = maze_range<br>        self._nstep_addr = nstep_addr<br>        self._final_addr = final_addr<br>        self._depth: <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>] = &#123;&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup</span>(<span class="hljs-params">self, simgr: SimulationManager</span>) -&gt; <span class="hljs-literal">None</span>:<br>        simgr.stashes[<span class="hljs-string">&#x27;visited&#x27;</span>] = []<br>        simgr.stashes[<span class="hljs-string">&#x27;found&#x27;</span>] = []<br>        self._depth[simgr.active[<span class="hljs-number">0</span>].addr] = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">current_pos</span>(<span class="hljs-params">self, state: SimState</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-string">&#x27;&#x27;&#x27;返回`current`变量的值&#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">return</span> state.solver.<span class="hljs-built_in">eval</span>(state.mem[self._nstep_addr].unsigned.resolved, cast_to=<span class="hljs-built_in">int</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inside_maze</span>(<span class="hljs-params">self, state: SimState</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-string">&#x27;&#x27;&#x27;是否在`maze_walk`函数中&#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">return</span> self._<span class="hljs-built_in">range</span>[<span class="hljs-number">0</span>] &lt;= state.addr &lt; self._<span class="hljs-built_in">range</span>[<span class="hljs-number">1</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">step</span>(<span class="hljs-params">self, simgr: SimulationManager, stash: <span class="hljs-built_in">str</span>=<span class="hljs-string">&#x27;active&#x27;</span>, **kwargs: <span class="hljs-type">Any</span></span>) -&gt; SimulationManager:<br>        <span class="hljs-string">&#x27;&#x27;&#x27;在`step`方法中作额外的处理&#x27;&#x27;&#x27;</span><br>        simgr.step(stash=stash, **kwargs)<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">state_spiltter</span>(<span class="hljs-params">states: <span class="hljs-built_in">list</span>[SimState]</span>) -&gt; <span class="hljs-built_in">tuple</span>[<span class="hljs-built_in">list</span>[SimState], <span class="hljs-built_in">list</span>[SimState]]:<br>            keep, split = [], []<br>            <span class="hljs-keyword">for</span> state <span class="hljs-keyword">in</span> states:<br>                <span class="hljs-keyword">if</span> self.inside_maze(state): <span class="hljs-comment"># 只处理函数内部</span><br>                    addr = state.addr<br>                    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">isinstance</span>(addr, <span class="hljs-built_in">int</span>)<br>                    current = self.current_pos(state)<br>                    <span class="hljs-keyword">if</span> addr <span class="hljs-keyword">in</span> self._depth <span class="hljs-keyword">and</span> self._depth[addr] &lt; current:<br>                        split.append(state) <span class="hljs-comment"># 丢弃已经访问过的部分</span><br>                    <span class="hljs-keyword">else</span>:<br>                        self._depth[addr] = current<br>                        keep.append(state)<br>                <span class="hljs-keyword">else</span>:<br>                    keep.append(state)<br>            <span class="hljs-keyword">return</span> keep, split<br>        simgr.split(state_spiltter, from_stash=<span class="hljs-string">&#x27;active&#x27;</span>, to_stash=<span class="hljs-string">&#x27;visited&#x27;</span>)<br>        simgr.move(<span class="hljs-string">&#x27;active&#x27;</span>, <span class="hljs-string">&#x27;found&#x27;</span>, <span class="hljs-keyword">lambda</span> state: state.addr == self._final_addr)<br>        <span class="hljs-keyword">return</span> simgr<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">complete</span>(<span class="hljs-params">self, simgr: SimulationManager</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(simgr.found)<br><br>proj = Project(<span class="hljs-string">&#x27;maze&#x27;</span>, auto_load_libs=<span class="hljs-literal">False</span>, main_opts=&#123;<span class="hljs-string">&#x27;base_addr&#x27;</span>: <span class="hljs-number">0</span>&#125;)<br>key: Symbol = proj.loader.find_symbol(<span class="hljs-string">&#x27;key&#x27;</span>)<br>steps: Symbol = proj.loader.find_symbol(<span class="hljs-string">&#x27;steps&#x27;</span>)<br>current: Symbol = proj.loader.find_symbol(<span class="hljs-string">&#x27;current&#x27;</span>)<br>maze_walk: Symbol = proj.loader.find_symbol(<span class="hljs-string">&#x27;maze_walk&#x27;</span>)<br>maze_final: Symbol = proj.loader.find_symbol(<span class="hljs-string">&#x27;maze_final&#x27;</span>)<br><br>state: SimState = proj.factory.call_state(maze_walk.rebased_addr, prototype=<span class="hljs-string">&#x27;void f()&#x27;</span>)<br>state.options.add(ZERO_FILL_UNCONSTRAINED_REGISTERS)<br>key_value = BVS(<span class="hljs-string">&#x27;key&#x27;</span>, <span class="hljs-number">64</span>)<br>state.memory.store(steps.rebased_addr, key_value)<br>state.memory.store(key.rebased_addr, key_value)<br><br><span class="hljs-comment"># 使用我们自己的`ExplorationTechnique`</span><br>tech = MazeWalker(<br>    (maze_walk.rebased_addr, maze_walk.rebased_addr + maze_walk.size),<br>    current.rebased_addr,<br>    maze_final.rebased_addr<br>)<br>simgr = proj.factory.simgr(state)<br>simgr.use_technique(tech)<br><br><span class="hljs-comment"># 运行直到产生 `found` stash</span><br>simgr.run()<br>simgr.remove_technique(tech)<br><br><span class="hljs-comment"># 继续运行直到输出flag</span><br><span class="hljs-built_in">print</span>(<br>    proj.factory<br>    .simgr(simgr.found[<span class="hljs-number">0</span>])<br>    .run()<br>    .deadended[<span class="hljs-number">0</span>]<br>    .posix.dumps(<span class="hljs-number">1</span>)<br>)<br></code></pre></td></tr></table></figure><h3 id="生成"><a class="markdownIt-Anchor" href="#生成"></a> 生成</h3><p>从<a href="assets/maze.zip">这里</a>查看生成二进制文件的源代码。控制流的生成使用了<a href="https://github.com/numba/llvmlite">llvmlite</a>库，在Linux下运行<code>./maze.py</code>即可生成<code>maze</code>可执行文件，在windows下运行时也可以生成<code>maze.exe</code>，但是它没有生成<code>maze.pdb</code>导致最终二进制没有符号信息。</p><h3 id="类似"><a class="markdownIt-Anchor" href="#类似"></a> 类似</h3><p><a href="https://zzzzsky.com/2021/12/09/networkx%E8%A7%A3%E5%86%B3CTF_RE%E5%9B%BE%E9%97%AE%E9%A2%98/">networkx解决CTF_RE图问题</a></p><h2 id="magical_syscall"><a class="markdownIt-Anchor" href="#magical_syscall"></a> magical_syscall</h2><h3 id="几个要点"><a class="markdownIt-Anchor" href="#几个要点"></a> 几个要点</h3><h4 id="_init_array"><a class="markdownIt-Anchor" href="#_init_array"></a> _init_array</h4><p>_init_array是程序的初始化列表，其中注册的函数会在main函数开始之前被调用。</p><h4 id="两个简单的反调试"><a class="markdownIt-Anchor" href="#两个简单的反调试"></a> 两个简单的反调试</h4><p>在初始化列表里注册了两个反调试函数。</p><p>一个是通过检查<code>/proc/self/status</code>文件中<code>TracePid</code>内容，判断是否被调试：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">nsigned __int64 <span class="hljs-title function_">sub_128C</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> *i; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">size_t</span> v1; <span class="hljs-comment">// rax</span><br>  FILE *stream; <span class="hljs-comment">// [rsp+10h] [rbp-120h]</span><br>  <span class="hljs-type">char</span> v4[<span class="hljs-number">264</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-110h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v5; <span class="hljs-comment">// [rsp+128h] [rbp-8h]</span><br><br>  v5 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  stream = fopen(<span class="hljs-string">&quot;/proc/self/status&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>  <span class="hljs-keyword">for</span> ( i = fgets(v4, <span class="hljs-number">256</span>, stream); i; i = fgets(v4, <span class="hljs-number">256</span>, stream) )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strstr</span>(v4, <span class="hljs-string">&quot;TracerPid&quot;</span>) )<br>    &#123;<br>      v1 = <span class="hljs-built_in">strlen</span>(v4);<br>      <span class="hljs-keyword">if</span> ( atoi(&amp;v4[v1 - <span class="hljs-number">3</span>]) )<br>      &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;debugger detected, exit...&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> v5 - __readfsqword(<span class="hljs-number">0x28</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><p>另一个是自定义了signal handler，并在程序运行10s后alarm，即当程序运行超过10s后会直接退出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub_1253</span><span class="hljs-params">()</span><br>&#123;<br>  signal(<span class="hljs-number">14</span>, handler);<br>  signal(<span class="hljs-number">5</span>, (<span class="hljs-type">__sighandler_t</span>)sub_1236);<br>  <span class="hljs-keyword">return</span> alarm(<span class="hljs-number">0xA</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><p>由于这不是这道题的重点，所以没有在这为难大家，只是让大家了解一下。至于绕过只要给exit扬了就行。alarm信号在IDA调试时也可以直接忽略。</p><h4 id="ptrace"><a class="markdownIt-Anchor" href="#ptrace"></a> Ptrace</h4><p>​ptrace是linux的一个系统调用，一个进程可以通过ptrace查看甚至控制另一个进程的内部状态。大名鼎鼎的调试器gdb就是基于ptrace实现的，这里推荐一篇<a href="https://xz.aliyun.com/t/6882">文章</a></p><p>ptrace函数是C标准库对ptrace syscall的封装，函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ptrace.h&gt;</span>       </span><br><span class="hljs-type">long</span> <span class="hljs-title function_">ptrace</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> __ptrace_request request, <span class="hljs-type">pid_t</span> pid, <span class="hljs-type">void</span> *addr, <span class="hljs-type">void</span> *data)</span>;<br></code></pre></td></tr></table></figure><ul><li>request：要进行的ptrace操作</li><li>pid：要操作的进程号</li><li>addr：要监控/修改的内存地址</li><li>data：要读取/写入的数据变量</li></ul><p>常见的request操作可以看<a href="https://man7.org/linux/man-pages/man2/ptrace.2.html">这</a></p><p>详细解释</p><ul><li><p>ptrace系统调⽤提供了⼀个进程(<code>tracer</code>)可以控制另⼀个进程(<code>tracer</code>)运⾏的⽅法，并且 <code>tracer</code> 可以监控和修改 <code>tracer</code> 的内存和寄存器，主要⽤作实现断点调试和系统调⽤追踪。</p></li><li><p>当⽗进程使⽤ <code>ptrace</code> 函数并传递 <code>PTRACE_SYSCALL</code> 参数来监控⼦进程时，它会暂停⼦进程的执行并等待下⼀个系统调⽤。</p></li><li><p>具体来说，当子进程调⽤⼀个系统调⽤并引发⼀个中断时，⽗进程会收到⼀个 <code>SIGTRAP</code> 信号，并可以通过 <code>waitpid</code> 函数等待⼦进程进⼊暂停状态。此时，⽗进程可以使⽤ <code>ptrace</code> 函数再次传 递 <code>PTRACE_SYSCALL</code> 参数来恢复⼦进程的执⾏，并让子进程继续进⾏系统调用。</p></li><li><p>在这种情况下，父进程不会修改子进程的寄存器或内存值，只是简单地等待并恢复子进程的执行。这 个过程可以反复进行，直到子进程结束或父进程选择终止跟踪操作。</p></li></ul><h4 id="fork"><a class="markdownIt-Anchor" href="#fork"></a> fork</h4><ul><li><p>fork是linux的一个系统调用，用来根据当前进程创建子进程。</p></li><li><p>fork函数是C标准库对fork syscall的封装。值得关注的是函数的返回值。返回值小于0说明创建子进程失败，在子进程中，返回值为0，而在父进程中，返回值为子进程的进程号(pid)。在实际编程中常用if分支通过返回值来区分父子进程，执行不同的代码。</p></li></ul><h4 id="user_regs_struct"><a class="markdownIt-Anchor" href="#user_regs_struct"></a> user_regs_struct</h4><p>这是一个定义了一系列寄存器的结构体，本身是专门为gdb写的，想看详细内容的话可以在C源文件里写一句<code>#include &lt;sys/user.h&gt;</code>，然后戳进去看就行了。</p><p>这个东西在进行ptrace操作(读写内存、寄存器)时很有用，可以在IDA里导入这个结构体方便分析。</p><ul><li><p>导入结构体前</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307181650024.png" alt="image-20230718165027981" /></p></li><li><p>导入后</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307181651189.png" alt="image-20230718165100151" /></p></li></ul><h4 id="通过ptrace自定义syscall"><a class="markdownIt-Anchor" href="#通过ptrace自定义syscall"></a> 通过ptrace自定义syscall</h4><p>syscall的过程是代码从用户态进入内核态的过程。如果我们把用户态换成子进程，内核态换成父进程，通过ptrace进行父进程对子进程内存空间的读写，模拟内核执行代码时的数据处理，就能实现自定义syscall。这是理解这道题运行逻辑的核心。</p><p><a href="https://filippo.io/linux-syscall-table/">常见的系统调用号</a></p><p>对应Syscall的过程可以参考<a href="https://blog.csdn.net/yanbw/article/details/123076039">syscall过程</a></p><h3 id="程序运行逻辑"><a class="markdownIt-Anchor" href="#程序运行逻辑"></a> 程序运行逻辑</h3><p>下面按顺序梳理一下整个程序的运行逻辑</p><p>首先fork出子进程，子进程执行tracee函数，父进程执行tracer函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sub_1D8B</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  v1 = fork();<br>  <span class="hljs-keyword">if</span> ( v1 &lt; <span class="hljs-number">0</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;failed to creat subprocess&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( v1 )<br>    tracer(v1);<br>  <span class="hljs-keyword">return</span> tracee();<br>&#125;<br></code></pre></td></tr></table></figure><p>子进程进入tracee函数，先ptrace TRACEME告诉操作系统自己要被父进程追踪，然后发送SIGCONT信号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sub_1386</span><span class="hljs-params">()</span><br>&#123;<br>  ptrace(PTRACE_TRACEME, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-keyword">return</span> raise(SIGCONT);<br>&#125;<br></code></pre></td></tr></table></figure><p>父进程进入tracer函数，先通过waitpid函数等待子进程SIGCONT信号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">waitpid(a1, &amp;stat_loc, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)stat_loc != <span class="hljs-number">127</span> ) <span class="hljs-comment">// !WIFSTOPPED(status) 如果子进程不是正常退出的，则进入if分支</span><br>&#123;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;debugger detected, exit...&quot;</span>);<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>ptrace(PTRACE_SETOPTIONS, a1, <span class="hljs-number">0LL</span>, PTRACE_O_EXITKILL); <span class="hljs-comment">// 如果子进程处于退出状态，则kill掉父进程</span><br></code></pre></td></tr></table></figure><p>下面就是父进程中一个非常大的while循环，里面定义了一系列syscall，if判断的条件则是上面介绍的user_regs_struct里的<code>orig_rax</code>，即自定义syscall的系统调用号。</p><p>还有一个要点就是在while循环的开头和结尾都有这一句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">ptrace(PTRACE_SYSCALL, a1, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>);<br></code></pre></td></tr></table></figure><p>用处是使子进程在每次syscall开始和结束时停下，把控制权交给父进程进行相应操作。</p><p>到这有一点要明确，父进程会一直在while循环里呆着，永远也不会执行到main函数，而只有子进程真正去执行main函数代码。父进程最终会走到以下两个分支之一得以退出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( arg1 == <span class="hljs-number">8888</span> )                         <span class="hljs-comment">// FAIL</span><br>  <span class="hljs-keyword">break</span>; <br><span class="hljs-keyword">if</span> ( arg1 == <span class="hljs-number">9999</span> )                         <span class="hljs-comment">// SUCCESS</span><br>&#123;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;congratulations&quot;</span>);<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>即程序最后check成功或失败的判断。</p><p>子进程执行的main函数非常简洁：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall __noreturn <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>&#123;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;input your flag:&quot;</span>);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    syscall(<br>      (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)dword_40AC[pc + <span class="hljs-number">468</span>],<br>      (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)dword_40AC[pc + <span class="hljs-number">1</span> + <span class="hljs-number">468</span>],<br>      (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)dword_40AC[pc + <span class="hljs-number">2</span> + <span class="hljs-number">468</span>],<br>      (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)dword_40AC[pc + <span class="hljs-number">3</span> + <span class="hljs-number">468</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>打印提示信息后，只有一个死循环，里面不断去执行syscall，正是这里执行的syscall会被父进程拦截并进行相应操作，syscall的参数即分别为系统调用号和所需参数。有些自定义的syscall并不需要3个参数，但由于这里并不会修改这些值，所以传几个多余的参数不会有任何影响。</p><h3 id="vm逆向"><a class="markdownIt-Anchor" href="#vm逆向"></a> VM逆向</h3><p>有经验的逆向壬应该一眼vm了，以上内容不关心靠猜也能七七八八。</p><p>这道题中vm的突破点应该在变量的识别。首先pc应该很容易看出来，毕竟每个syscall之后都会把它加上2或3或4，即那条指令的长度。其次是导入user_regs_struct之后就可以比较清晰的看懂几个参数了。</p><p>然后通过几个syscall对比来看应该也能看出来一些特殊的指令。</p><p>比如完全对称的push和pop：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( arg1 == <span class="hljs-number">3904</span> )                         <span class="hljs-comment">// PUSH</span><br>    &#123;<br>      dword_40B4 = ptrace(PTRACE_PEEKDATA, a1, &amp;dword_40B4, <span class="hljs-number">0LL</span>);<br>      dword_40AC[++dword_40A4 + <span class="hljs-number">4</span>] = dword_40B4;<br>      ++pc;<br>      ptrace(PTRACE_POKEDATA, a1, &amp;pc, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)pc);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( arg1 == <span class="hljs-number">3905</span> )                         <span class="hljs-comment">// POP</span><br>    &#123;<br>      dword_40B4 = dword_40AC[dword_40A4-- + <span class="hljs-number">4</span>];<br>      ++pc;<br>      ptrace(PTRACE_POKEDATA, a1, &amp;pc, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)pc);<br>    &#125;<br></code></pre></td></tr></table></figure><p>互相有联系的CMP、JE、JNE：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( arg1 == <span class="hljs-number">3906</span> )                         <span class="hljs-comment">// CMP</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( arg2 )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( arg2 == <span class="hljs-number">1</span> )<br>          flag_zf = dword_40A8 == dword_40B4;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        flag_zf = dword_40B0 == arg3;<br>      &#125;<br>      pc += <span class="hljs-number">3</span>;<br>      ptrace(PTRACE_POKEDATA, a1, &amp;pc, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)pc);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( arg1 == <span class="hljs-number">3907</span> )                         <span class="hljs-comment">// JE</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( flag_zf )<br>      &#123;<br>        pc = arg2;<br>        ptrace(PTRACE_POKEDATA, a1, &amp;pc, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)arg2);<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        pc += <span class="hljs-number">2</span>;<br>        ptrace(PTRACE_POKEDATA, a1, &amp;pc, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)pc);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( arg1 == <span class="hljs-number">3908</span> )                         <span class="hljs-comment">// JNE</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( flag_zf )<br>      &#123;<br>        pc += <span class="hljs-number">2</span>;<br>        ptrace(PTRACE_POKEDATA, a1, &amp;pc, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)pc);<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        pc = arg2;<br>        ptrace(PTRACE_POKEDATA, a1, &amp;pc, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)arg2);<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>然后基本就能看出来像<code>dword_40B0</code>这样的是一些通用寄存器(ax、bx、cx…)</p><p>再往下就是一些计算类的指令，比如INC、MOD、XOR、RESET(置零)应该也不难看出</p><p>难度较大的应该是ADD、MOV指令，因为这俩实际做的事取决于参数，会对不同的寄存器/内存地址进行ADD、MOV操作，这里就需要认真对参数进行分析，搞清楚具体的指令的含义。</p><p>整个VM实际实现了一个RC4加密，然后和密文比较的过程，出题时写的伪汇编看<a href="https://github.com/XDSEC/miniLCTF_2023/blob/main/Challenges/magical_syscall/src/assembly.txt">这里</a></p><p>另一个点在于XCHG指令，即实现两个值的交换，但这里因为并没有使用临时变量存储其中一个变量原先的值，所以是个假的交换，相当于<code>a = b; b = a;</code>这样的操作，这也是RC4的魔改点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( arg1 == <span class="hljs-number">3912</span> )                         <span class="hljs-comment">// XCHG</span><br>&#123;<br>  *((_DWORD *)&amp;mem + (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)dword_40B0) = *((_DWORD *)&amp;mem + (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)dword_40AC[<span class="hljs-number">0</span>]);<br>  *((_DWORD *)&amp;mem + (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)dword_40AC[<span class="hljs-number">0</span>]) = *((_DWORD *)&amp;mem + (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)dword_40B0);<br>  ++pc;<br>  ptrace(PTRACE_POKEDATA, a1, &amp;pc, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)pc);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="exp-3"><a class="markdownIt-Anchor" href="#exp-3"></a> exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_init</span>(<span class="hljs-params">s, key, key_len</span>):<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + s[i] + key[i%key_len])%<span class="hljs-number">256</span><br>        <span class="hljs-comment"># tmp = s[i]</span><br>        s[i] = s[j]<br>        s[j] = s[i]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_generate_keystream</span>(<span class="hljs-params">s, length</span>):<br>    i = <span class="hljs-number">0</span><br>    j = <span class="hljs-number">0</span><br>    key_stream = []<br>    <span class="hljs-keyword">while</span> length:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>    <span class="hljs-comment"># 可以保证每256次循环后s盒中的每个元素至少被交换一次</span><br>        j = (j + s[i]) % <span class="hljs-number">256</span><br>        <span class="hljs-comment"># tmp = s[i]</span><br>        s[i] = s[j]<br>        s[j] = s[i]<br>        key_stream.append(s[(s[i] + s[j]) % <span class="hljs-number">256</span>])<br>        length -= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> key_stream<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    key = [<span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;MiniLCTF2023&quot;</span>]        <span class="hljs-comment"># 准备一些变量</span><br>    key_len = <span class="hljs-built_in">len</span>(key)<br>    <span class="hljs-comment"># enc = [ord(i) for i in &quot;llac$ys_laci9am_ht1w_en1hc@m_l@utr1v_a&quot;]</span><br>    enc = [<span class="hljs-number">147</span>, <span class="hljs-number">163</span>, <span class="hljs-number">203</span>, <span class="hljs-number">201</span>, <span class="hljs-number">214</span>, <span class="hljs-number">211</span>, <span class="hljs-number">240</span>, <span class="hljs-number">213</span>, <span class="hljs-number">177</span>, <span class="hljs-number">26</span>, <span class="hljs-number">84</span>, <span class="hljs-number">155</span>, <span class="hljs-number">80</span>, <span class="hljs-number">203</span>, <span class="hljs-number">176</span>, <span class="hljs-number">178</span>, <span class="hljs-number">235</span>, <span class="hljs-number">15</span>, <span class="hljs-number">178</span>, <span class="hljs-number">141</span>, <span class="hljs-number">47</span>, <span class="hljs-number">230</span>, <span class="hljs-number">21</span>, <span class="hljs-number">203</span>, <span class="hljs-number">181</span>, <span class="hljs-number">61</span>, <span class="hljs-number">215</span>, <span class="hljs-number">156</span>, <span class="hljs-number">197</span>, <span class="hljs-number">129</span>, <span class="hljs-number">63</span>, <span class="hljs-number">145</span>, <span class="hljs-number">144</span>, <span class="hljs-number">241</span>, <span class="hljs-number">155</span>, <span class="hljs-number">171</span>, <span class="hljs-number">47</span>, <span class="hljs-number">242</span>]<br>    enc_len = <span class="hljs-built_in">len</span>(enc)<br>    cipher = [<span class="hljs-number">0</span>] * enc_len<br><br>    s = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)]    <span class="hljs-comment"># 初始化s盒</span><br>    rc4_init(s, key, key_len)      <span class="hljs-comment"># 使用key打乱s盒</span><br>    key_stream = rc4_generate_keystream(s[:], enc_len) <span class="hljs-comment"># 生成密钥流</span><br>    <span class="hljs-comment"># print(key_stream)</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(enc_len):     <span class="hljs-comment"># 逐字节异或加密</span><br>        cipher[i] = enc[i] ^ key_stream[i]<br>    cipher = cipher[::-<span class="hljs-number">1</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cipher))<br>    <span class="hljs-comment"># print(cipher)</span><br>    <span class="hljs-comment"># print(len(cipher))</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h1 id="巅峰极客"><a class="markdownIt-Anchor" href="#巅峰极客"></a> 巅峰极客</h1><h2 id="g0re"><a class="markdownIt-Anchor" href="#g0re"></a> g0Re</h2><h3 id="upx脱壳"><a class="markdownIt-Anchor" href="#upx脱壳"></a> UPX脱壳</h3><p>​可以用 DIE 检测出来是 go程序 和 UPX 壳，但是工具脱不了，只有手动脱壳，<a href="https://xz.aliyun.com/t/6881">参考</a>获得 <code>dumpfile</code> 文件</p><h3 id="go逆向"><a class="markdownIt-Anchor" href="#go逆向"></a> go逆向</h3><p>​首先分析go中的最后flag比对处，根据动调可以发现这里将一个 <code>base64</code> 加密的结果和字符串<code>wvgitbygwbk2b46d</code>进行相加之后再异或。之后根据 IDA 的插件感觉加密方式为 <code>AES</code> 加密，上面的字符串就是密钥。</p><p>​这里进行动调，首先锁定之后出现的那个 base64 的可疑字符，记住其地址，加硬件断点，之后直接动调(动调记得把其余的线程暂停suspended，否则程序会跳转到很奇怪的地方去)。观察硬件断点的变化。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307212201006.png" alt="image-20230721220157932" /></p><p>​这里发现可能就是变表的base64加密，之后提取改变的base64表。之后得到了这个 <code>main_sub_12da08()</code> 函数在进行base64加密的操作。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307212202817.png" alt="image-20230721220252766" /></p><p>​然后又有动调分析了 <code>main_io_read()</code> 函数是得到了密钥， <code>runtime_stringtoslicebyte()</code> 函数知识将输入加到了密钥后面，则动调分析比对之前仅剩的 <code>main_sub_53d398()</code> 函数，发现其中有一个 <code>crypto_aes_NewCipher()</code> 函数，肯定了 <code>AES</code> 加密的猜想，之后再动调分析。 这里动调没有找到输入点，这里对于go的逆向还是有点菜，再接再厉。</p><h3 id="exp-4"><a class="markdownIt-Anchor" href="#exp-4"></a> exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> base64<br>key = <span class="hljs-string">&#x27;wvgitbygwbk2b46d&#x27;</span><br>enc = [<span class="hljs-number">0xE6</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0xD9</span>,<br>  <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xC0</span>,<br>  <span class="hljs-number">0x96</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xA5</span>,<br>  <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xC9</span>,<br>  <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xED</span>,<br>  <span class="hljs-number">0x92</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xA5</span>,<br>  <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xA7</span>]<br><br>enc1 = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>  enc[i] = (enc[i] - <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) ^ <span class="hljs-number">0x1A</span><br>enc = <span class="hljs-built_in">bytes</span>(enc).decode()<br>new_table = <span class="hljs-string">&quot;456789&#125;#IJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123ABCDEFGH&quot;</span><br>old_table = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br>aes_enc = base64.b64decode(enc.translate(<span class="hljs-built_in">str</span>.maketrans(new_table, old_table)))<br>aes = AES.new(<span class="hljs-string">b&#x27;wvgitbygwbk2b46d&#x27;</span>, AES.MODE_ECB) <span class="hljs-comment">#创建一个aes对象</span><br>flag = aes.decrypt(aes_enc) <span class="hljs-comment"># 解密密文</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="m1_read"><a class="markdownIt-Anchor" href="#m1_read"></a> m1_read</h2><h3 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h3><p>​这是一个关于 m1读卡器 的问题，其中包含 <code>DFA分析白盒AES算法</code> 的知识，具体参考：<a href="https://www.qinless.com/1647">DFA</a></p><h3 id="整体分析"><a class="markdownIt-Anchor" href="#整体分析"></a> 整体分析</h3><p>​这里是MFC写的读卡程序，发现那些按钮的主要处理函数似乎都会调用 <code>sub_140004A00</code>，跟进去看发现应该是对程序输入的数据进行统一处理的函数。其中调用了函数 <code>sub_140004BF0</code>，细看一下可以发现前面应该是AES白盒加密算法(可以对比N1CTF2021 hello这题)，后面对数据异或0x66。</p><h3 id="qiling模拟执行"><a class="markdownIt-Anchor" href="#qiling模拟执行"></a> Qiling模拟执行</h3><p>​这里我们的目的就是模拟执行函数 <code>sub_140004BF0</code> 来插入缺陷数据和获取错误密文，这里由分析，需要 16 组错误的密文才能恢复原始密钥。</p><h4 id="参数传入"><a class="markdownIt-Anchor" href="#参数传入"></a> 参数传入</h4><p>​这里的 <code>rcx</code> 存储着输入的地址，即传入的第一个参数的地址(没有读卡器，从别的 WP 中获取的信息)。这里模拟执行该函数，需要在函数起始地址修改寄存器的值，使其指向在内存中分配并初始化的<code>输入</code>。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307242131745.png" alt="image-20230724213132695" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">hook_args</span>(<span class="hljs-params">ql: Qiling</span>):<br>    ql.mem.write(<span class="hljs-number">0x500000000</span>, <span class="hljs-string">b&quot;\x01&quot;</span> * <span class="hljs-number">16</span>) <span class="hljs-comment"># 在虚拟内存地址0x500000000(不干扰程序的内存空间)处写入一个16字节的字节序列，这是在向指定地址写⼊需要加密的内容</span><br>    ql.arch.regs.write(<span class="hljs-string">&quot;rcx&quot;</span>, <span class="hljs-number">0x500000000</span>) <span class="hljs-comment"># 将模拟器的rcx寄存器设置为 0x500000000</span><br>    ql.mem.write(<span class="hljs-number">0x500000000</span> + <span class="hljs-number">0x10</span>, <span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">16</span>)<br>    ql.arch.regs.write(<span class="hljs-string">&quot;rdx&quot;</span>, <span class="hljs-number">0x500000000</span> + <span class="hljs-number">0x10</span>)<br>    ql.mem.write(<span class="hljs-number">0x500000000</span> + <span class="hljs-number">0x20</span>, <span class="hljs-string">b&quot;\x00&quot;</span> * <span class="hljs-number">16</span>)<br>    ql.arch.regs.write(<span class="hljs-string">&quot;rbx&quot;</span>, <span class="hljs-number">0x500000000</span> + <span class="hljs-number">0x20</span>)<br>    <span class="hljs-keyword">return</span><br><br>start_addr = <span class="hljs-number">0x140004BF0</span><br>ql.hook_address(hook_args, start_addr)<br></code></pre></td></tr></table></figure><h4 id="定位插入缺陷数据的位置"><a class="markdownIt-Anchor" href="#定位插入缺陷数据的位置"></a> 定位插入缺陷数据的位置</h4><p>​首先确认 AES 最后两次列混合的位置，这里分为了前9轮和第10轮两种，那么最后两次列混合就在第8轮与第9轮之间，这里可知第九轮为<code>v4 == 0x9000</code> ，则需要在第八轮后，即 <code>v4 == 0x8000 ---- r12 == 8000h </code> 的位置之后插入缺陷数据。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307242013258.png" alt="image-20230724201323127" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307242015656.png" alt="image-20230724201532610" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">index = <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hook_code</span>(<span class="hljs-params">ql: Qiling</span>):<br>    <span class="hljs-keyword">if</span> ql.arch.regs.read(<span class="hljs-string">&quot;r12&quot;</span>) == <span class="hljs-number">0x8000</span>:<br>        <span class="hljs-keyword">global</span> index <span class="hljs-comment"># 定义为全局变量</span><br>        ql.mem.write(<span class="hljs-number">0x500000000</span> + index, <span class="hljs-string">b&quot;\x00&quot;</span>)<span class="hljs-comment"># 这里的 b&quot;\x00&quot; 就是插入的残缺数据</span><br>        index += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>​这里 <code>ql.mem.write(0x500000000 + index, b&quot;\x00&quot;)</code> 与后面的16次循环都是为了插入缺陷数据而服务的，但是还需要一个正确的第10轮之后的密钥，所以不再加上这个语句和16个循环再单独执行一遍。</p><h4 id="获取密文"><a class="markdownIt-Anchor" href="#获取密文"></a> 获取密文</h4><p>​函数在 <code>ecx的地址处</code> 进行更改，所以最后也在ecx处获取错误密文即可。(先不关注最后的 xor 0x66)</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307242217734.png" alt="image-20230724221758695" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307242218611.png" alt="image-20230724221820579" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">hook_enc</span>(<span class="hljs-params">ql: Qiling</span>):<br><span class="hljs-built_in">print</span>(ql.mem.read(<span class="hljs-number">0x500000000</span>, <span class="hljs-number">16</span>).<span class="hljs-built_in">hex</span>())<br><span class="hljs-keyword">return</span><br><br>enc_after = <span class="hljs-number">0x1400053CA</span><br>ql.hook_address(hook_enc, enc_after)<br></code></pre></td></tr></table></figure><h4 id="获取所有错误密文"><a class="markdownIt-Anchor" href="#获取所有错误密文"></a> 获取所有错误密文</h4><p>​这里经过验证，错误密文与原先密文相比，只有4个字节不同，则此方法可行。那么就来只需要逐字节来插入缺陷数据即可得到所有的错误密文。这里通过更改 <code>index</code> 的值来逐字节插入缺陷数据。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> qiling <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> qiling.const <span class="hljs-keyword">import</span> QL_VERBOSE<br><br><span class="hljs-keyword">index</span> = <span class="hljs-number">0</span><br>ql = Qiling(<br>    [&quot;E:\\reverse\\source\\frame\\qiling\\examples\\rootfs\\x8664_windows\\m1_read.exe&quot;],<br>    r&quot;E:\\reverse\\source\\frame\\qiling\\examples\\rootfs\\x8664_windows&quot;,<br>    <span class="hljs-keyword">verbose</span>=QL_VERBOSE.<span class="hljs-keyword">OFF</span>,<br>)<br><br><br>def hook_args(ql: Qiling):<br>    ql.mem.<span class="hljs-keyword">write</span>(<span class="hljs-number">0x500000000</span>, b&quot;\x01&quot; * <span class="hljs-number">16</span>)<br>    ql.arch.regs.<span class="hljs-keyword">write</span>(&quot;rcx&quot;, <span class="hljs-number">0x500000000</span>)<br>    ql.mem.<span class="hljs-keyword">write</span>(<span class="hljs-number">0x500000000</span> + <span class="hljs-number">0x10</span>, b&quot;\x00&quot; * <span class="hljs-number">16</span>)<br>    ql.arch.regs.<span class="hljs-keyword">write</span>(&quot;rdx&quot;, <span class="hljs-number">0x500000000</span> + <span class="hljs-number">0x10</span>)<br>    ql.mem.<span class="hljs-keyword">write</span>(<span class="hljs-number">0x500000000</span> + <span class="hljs-number">0x20</span>, b&quot;\x00&quot; * <span class="hljs-number">16</span>)<br>    ql.arch.regs.<span class="hljs-keyword">write</span>(&quot;rbx&quot;, <span class="hljs-number">0x500000000</span> + <span class="hljs-number">0x20</span>)<br>    <span class="hljs-keyword">return</span><br><br><br>def hook_code(ql: Qiling):<br>    <span class="hljs-keyword">if</span> ql.arch.regs.<span class="hljs-keyword">read</span>(&quot;r12&quot;) == <span class="hljs-number">0x8000</span>:<br>        <span class="hljs-keyword">global</span> <span class="hljs-keyword">index</span><br>        ql.mem.<span class="hljs-keyword">write</span>(<span class="hljs-number">0x500000000</span> + <span class="hljs-keyword">index</span>, b&quot;\x00&quot;)<br>        <span class="hljs-keyword">index</span> += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span><br><br><br>def hook_enc(ql: Qiling):<br>    print(ql.mem.<span class="hljs-keyword">read</span>(<span class="hljs-number">0x500000000</span>, <span class="hljs-number">16</span>).hex())<br>    <span class="hljs-keyword">return</span><br><br><br><span class="hljs-keyword">if</span> __name__ == &quot;__main__&quot;:<br>    index_addr = <span class="hljs-number">0x1400052C5</span><br>    start_addr = <span class="hljs-number">0x140004BF0</span><br>    end_addr = <span class="hljs-number">0x14000542D</span><br>    enc_after = <span class="hljs-number">0x1400053CA</span><br>    ql.hook_address(hook_args, start_addr)<br>    ql.hook_address(hook_code, index_addr)<br>    ql.hook_address(hook_enc, enc_after)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">16</span>):<br>        ql.run(<span class="hljs-keyword">begin</span>=start_addr, end=end_addr)<br></code></pre></td></tr></table></figure><h4 id="获取正确第10轮密文"><a class="markdownIt-Anchor" href="#获取正确第10轮密文"></a> 获取正确第10轮密文</h4><p>​将 <code>ql.mem.write(0x500000000 + index, b&quot;\x00&quot;)</code> 与 <code>16轮循环</code> 从获取错误密钥的代码中去掉即可。</p><h4 id="获得原始密钥"><a class="markdownIt-Anchor" href="#获得原始密钥"></a> 获得原始密钥</h4><p>​得到16个错误密文，再加上一个正确的密文，就可以获得第10轮的密钥。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> phoenixAES<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;tracefile&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> t:<br>    t.write(<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    e14d5d0ee27715df08b4152ba23da8e0</span><br><span class="hljs-string">    d24d5d0ee27715ac08b4bf2ba272a8e0</span><br><span class="hljs-string">    e14d5d73e27708df0878152b843da8e0</span><br><span class="hljs-string">    e14dd50ee23415df7fb4152ba23da890</span><br><span class="hljs-string">    e16f5d0e537715df08b415e7a23dc6e0</span><br><span class="hljs-string">    e11a5d0e057715df08b4151ba23d99e0</span><br><span class="hljs-string">    574d5d0ee277157508b4df2ba234a8e0</span><br><span class="hljs-string">    e14d5d49e27785df0840152bff3da8e0</span><br><span class="hljs-string">    e14db80ee2d215dfceb4152ba23da868</span><br><span class="hljs-string">    e14dc60ee2bf15dfc4b4152ba23da8bf</span><br><span class="hljs-string">    e1425d0e5e7715df08b415b6a23d4ce0</span><br><span class="hljs-string">    5d4d5d0ee277159608b42f2ba297a8e0</span><br><span class="hljs-string">    e14d5d6ce2773ddf089d152ba93da8e0</span><br><span class="hljs-string">    e14d5dcde2772adf084b152bba3da8e0</span><br><span class="hljs-string">    e14df40ee27115df96b4152ba23da881</span><br><span class="hljs-string">    e11b5d0e337715df08b41544a23df3e0</span><br><span class="hljs-string">    fa4d5d0ee27715af08b42e2ba2c2a8e0</span><br><span class="hljs-string">    &quot;&quot;&quot;</span>.encode(<br>            <span class="hljs-string">&quot;utf8&quot;</span><br>        )<br>    )<br>phoenixAES.crack_file(<span class="hljs-string">&quot;tracefile&quot;</span>, verbose=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>​之后使用 <code>Stark</code> 项目就可以得到原始密钥</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307242234920.png" alt="image-20230724223417776" /></p><h4 id="获得flag"><a class="markdownIt-Anchor" href="#获得flag"></a> 获得flag</h4><p>​之后由 <code>out.bin</code> 文件中提取出密文，然后使用AES算法进行解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>enc = <span class="hljs-built_in">bytearray</span>(<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;0B 98 7E F5 D9 4D D6 79 59 2C 4D 2F AD D4 EB 89&quot;</span>))<br>enc = <span class="hljs-built_in">bytes</span>([enc[i] ^ <span class="hljs-number">0x66</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)])<br>key = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;00000000000000000000000000000000&quot;</span>)<br>aes = AES.new(key=key, mode=AES.MODE_ECB)<br><span class="hljs-built_in">print</span>(aes.decrypt(enc))<br></code></pre></td></tr></table></figure><h3 id="直接解密"><a class="markdownIt-Anchor" href="#直接解密"></a> 直接解密</h3><p>​分析出了 ARS白盒加密算法，<code>比对N1CTF2021 hello</code> <a href="https://github.com/Nu1LCTF/n1ctf-2021/tree/84a3fff50ee0ef2f1fece112c75104600cc86a5d/Re/hello">参考解法</a>即Chow方案，然后对数据进行 xor 0x66操作。这里 hello 可以参考最开始的 DFA 的文章一起分析。</p><p>​首先从tbox解出key:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> CryptoAttacks.Block.whitebox_aes_sage <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> CryptoAttacks.Utils <span class="hljs-keyword">import</span> *<br><br>T = [<span class="hljs-number">0x7C</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x39</span>, ... , <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>]<br><br>TTyboxFinal = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(T), <span class="hljs-number">256</span>):<br>    TTyboxFinal.append(T[i:i+<span class="hljs-number">256</span>])<br><br>key_recovered = recover_key_unprotected_wbaes_from_TTyboxFinal(TTyboxFinal)<br>key = matrix_to_array(key_recovered)<br><span class="hljs-built_in">print</span>(key)<br><span class="hljs-comment"># print(&#x27;&#x27;.join(list(map(chr,key))))</span><br></code></pre></td></tr></table></figure><p>​得到key为：b’\x00’*16，之后就是正常aes进行解密。</p><blockquote><p>库的地址为:<a href="https://github.com/GrosQuildu/CryptoAttacks%EF%BC%8C%E4%BD%86%E6%98%AF%E5%AE%89%E8%A3%85%E5%B9%B6%E4%B8%8D%E6%88%90%E5%8A%9F%EF%BC%8C%E5%85%B6%E4%B8%ADwhitebox_aes.sage%E5%A4%9A%E6%96%B9%E6%8A%A5%E9%94%99%EF%BC%8C%E5%8F%AF%E8%83%BD%E9%9C%80%E8%A6%81%E5%9C%A8sage%E7%8E%AF%E5%A2%83%E4%B8%AD%E5%AE%9E%E7%8E%B0(maybe)">https://github.com/GrosQuildu/CryptoAttacks，但是安装并不成功，其中whitebox_aes.sage多方报错，可能需要在sage环境中实现(maybe)</a></p></blockquote><h3 id="frida模拟执行"><a class="markdownIt-Anchor" href="#frida模拟执行"></a> frida模拟执行</h3><blockquote><p>frida -p &lt;PID或者进程名称&gt; -l hook_example.js</p></blockquote><h4 id="得到161个密文"><a class="markdownIt-Anchor" href="#得到161个密文"></a> 得到16+1个密文</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> baseAddr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(<span class="hljs-string">&quot;m1_read.exe&quot;</span>);<span class="hljs-comment">//使用frida的&quot;Module.findBaseAddress&quot;来查找目标程序</span><br><span class="hljs-keyword">var</span> whiteAES = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(baseAddr.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x4BF0</span>), <span class="hljs-string">&#x27;pointer&#x27;</span>, [<span class="hljs-string">&#x27;pointer&#x27;</span>, <span class="hljs-string">&#x27;pointer&#x27;</span>])<span class="hljs-comment">// 创建一个NativeFunction对象，用于调用位于&quot;m1_read.exe&quot;程序基址加上0x4BF0偏移的函数。接收两个参数，均为指针，并返回一个指针。这里实际上是在将&quot;m1_read.exe&quot;中的函数whiteAES绑定到JavaScript中，以便我们可以在后面的代码中调用它。</span><br><span class="hljs-keyword">var</span> count = <span class="hljs-number">9</span>;<br><span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(baseAddr.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x4C2C</span>), &#123;<br>    <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<span class="hljs-comment">//进入目标函数时</span><br>        count++;<br>        <span class="hljs-keyword">if</span> (count == <span class="hljs-number">9</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-property">rdi</span>.<span class="hljs-title function_">add</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">16</span>)).<span class="hljs-title function_">writeU8</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">256</span>))<br>        &#125;<br>    &#125;,<span class="hljs-comment">//在这里，count递增，并且如果count等于9，则在rdi寄存器指向的内存地址上随机写入一个字节(0-255的随机值)</span><br>    <span class="hljs-attr">onLeave</span>: <span class="hljs-function">(<span class="hljs-params">retval</span>) =&gt;</span> &#123;<br><br>    &#125;<br>&#125;)<br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; <span class="hljs-number">33</span>; index++) &#123;<br>    <span class="hljs-keyword">var</span> l = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">allocAnsiString</span>(<span class="hljs-string">&quot;1234567890abcdef&quot;</span>);<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">alloc</span>(<span class="hljs-number">16</span>);<br>    <span class="hljs-title function_">whiteAES</span>(l, b);<span class="hljs-comment">//这行代码调用之前绑定的whiteAES函数，传入l和b作为参数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-title function_">readByteArray</span>(<span class="hljs-number">16</span>));<span class="hljs-comment">//最后，它将读取并打印由b指向的16字节内存区域的内容</span><br>    count = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​这里进行异或处理，恢复正常AES的结果(从结果中随意挑选了17个)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">str_table = [<span class="hljs-string">&quot;ca 42 9f dc 6b fa 9b 5e 54 0c 8f 14 b0 3b ae 88&quot;</span>,<br>             <span class="hljs-string">&quot;ca 42 9f 36 6b fa ee 5e 54 c8 8f 14 c9 3b ae 88&quot;</span>,<br>             <span class="hljs-string">&quot;ca 42 2a dc 6b 53 9b 5e f2 0c 8f 14 b0 3b ae 05&quot;</span>,<br>             <span class="hljs-string">&quot;ca 42 9f b4 6b fa 7d 5e 54 fd 8f 14 fe 3b ae 88&quot;</span>,<br>             <span class="hljs-string">&quot;fd 42 9f dc 6b fa 9b 72 54 0c a8 14 b0 48 ae 88&quot;</span>,<br>             <span class="hljs-string">&quot;ca 42 9f 70 6b fa ba 5e 54 21 8f 14 3f 3b ae 88&quot;</span>,<br>             <span class="hljs-string">&quot;ca 42 0c dc 6b d7 9b 5e 2a 0c 8f 14 b0 3b ae 6b&quot;</span>,<br>             <span class="hljs-string">&quot;ca 42 9f dc 6b fa 9b 5e 54 0c 8f 14 b0 3b ae 88&quot;</span>,<br>             <span class="hljs-string">&quot;ca 42 39 dc 6b a0 9b 5e ec 0c 8f 14 b0 3b ae c0&quot;</span>,<br>             <span class="hljs-string">&quot;2b 42 9f dc 6b fa 9b f5 54 0c 80 14 b0 af ae 88&quot;</span>,<br>             <span class="hljs-string">&quot;ca 42 9f dc 6b fa 9b 5e 54 0c 8f 14 b0 3b ae 88&quot;</span>,<br>             <span class="hljs-string">&quot;c1 42 9f dc 6b fa 9b 95 54 0c 0e 14 b0 34 ae 88&quot;</span>,<br>             <span class="hljs-string">&quot;ca 42 ec dc 6b 77 9b 5e f7 0c 8f 14 b0 3b ae 51&quot;</span>,<br>             <span class="hljs-string">&quot;ca 5e 9f dc 52 fa 9b 5e 54 0c 8f 99 b0 3b df 88&quot;</span>,<br>             <span class="hljs-string">&quot;ca 02 9f dc c0 fa 9b 5e 54 0c 8f 92 b0 3b f1 88&quot;</span>,<br>             <span class="hljs-string">&quot;ca 42 9f dc 6b fa 9b 5e 54 0c 8f 14 b0 3b ae 88&quot;</span>,<br>             <span class="hljs-string">&quot;ca 42 9f b4 6b fa 7d 5e 54 fd 8f 14 fe 3b ae 88&quot;</span>]<br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> str_table:<br>    val = <span class="hljs-built_in">bytearray</span>(<span class="hljs-built_in">bytes</span>.fromhex(s))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        val[i] ^= <span class="hljs-number">0x66</span><br>    <span class="hljs-built_in">print</span>(val.<span class="hljs-built_in">hex</span>())<br></code></pre></td></tr></table></figure><h4 id="获得正确第10轮密文"><a class="markdownIt-Anchor" href="#获得正确第10轮密文"></a> 获得正确第10轮密文</h4><p>​同上，把相应的数据填入上面的代码中</p><h4 id="获得flag-2"><a class="markdownIt-Anchor" href="#获得flag-2"></a> 获得flag</h4><p>​之后使用 <code>Stark</code> 项目就可以得到原始密钥，然后使用上述代码获得flag</p><h1 id="das7月"><a class="markdownIt-Anchor" href="#das7月"></a> DAS7月</h1><h2 id="helloworld"><a class="markdownIt-Anchor" href="#helloworld"></a> helloworld</h2><p>​根据字符串信息可得知程序基于oatpp框架开发，程序无符号，所以尝试编译一份demo，可参考<a href="https://blog.51cto.com/u_13999641/5101994">文章</a>生成demo，编译完成后使用bindiff恢复符号(这里我bindiff的插件恢复报错，直接IDA import symbols / comments，然后函数名很诡异，感觉是有的字符识别不出来)。</p><p>​知识点：在 oatpp 框架中，HTTP 响应的处理通常发生在控制器(Controller)或请求处理器(Request Handler)中。具体来说，当 oatpp 接收到一个 HTTP 请求时，它会根据路由配置找到相应的控制器或请求处理器，并由它们来处理请求并生成相应的 HTTP 响应。在这个过程中，响应的创建和处理通常在控制器或请求处理器中完成。具体的处理代码可能涉及到 oatpp 框架提供的一系列类和方法，如 <code>oatpp::web::protocol::http::outgoing::ResponseFactory</code> 和其他相关类。</p><p>​就是指的下面这个</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 自定义请求处理程序</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Handler</span> : <span class="hljs-keyword">public</span> oatpp::web::server::HttpRequestHandler<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 处理传入的请求，并返回响应</span><br>    <span class="hljs-function">std::shared_ptr&lt;OutgoingResponse&gt; <span class="hljs-title">handle</span><span class="hljs-params">(<span class="hljs-type">const</span> std::shared_ptr&lt;IncomingRequest&gt;&amp; request)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        <span class="hljs-built_in">O_UNUSED</span>(request);<br><br>        <span class="hljs-keyword">return</span> ResponseFactory::<span class="hljs-built_in">createResponse</span>(Status::CODE_200, <span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>​然后查找此函数的交叉引用，发现 <code>sub_40617E</code> 是关键函数，分析此函数。这里 <code>v16</code> 与 <code>v17</code> (截图的上面memcpy) 都被赋值进行操作，所以猜测需要还原 <code>v15</code></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307252202050.png" alt="image-20230725220207925" /></p><p>​之后根据对 <code>v16</code> 的判断作为决定条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>v16 = [<span class="hljs-number">0</span>]*<span class="hljs-number">40</span><br>v16[<span class="hljs-number">0</span>] = <span class="hljs-number">33211</span><br>v16[<span class="hljs-number">1</span>] = <span class="hljs-number">36113</span><br>v16[<span class="hljs-number">2</span>] = <span class="hljs-number">28786</span><br>v16[<span class="hljs-number">3</span>] = <span class="hljs-number">44634</span><br>v16[<span class="hljs-number">4</span>] = <span class="hljs-number">30174</span><br>v16[<span class="hljs-number">5</span>] = <span class="hljs-number">39163</span><br>v16[<span class="hljs-number">6</span>] = <span class="hljs-number">34923</span><br>v16[<span class="hljs-number">7</span>] = <span class="hljs-number">44333</span><br>v16[<span class="hljs-number">8</span>] = <span class="hljs-number">33574</span><br>v16[<span class="hljs-number">9</span>] = <span class="hljs-number">23555</span><br>v16[<span class="hljs-number">10</span>] = <span class="hljs-number">35015</span><br>v16[<span class="hljs-number">11</span>] = <span class="hljs-number">42724</span><br>v16[<span class="hljs-number">12</span>] = <span class="hljs-number">34160</span><br>v16[<span class="hljs-number">13</span>] = <span class="hljs-number">49166</span><br>v16[<span class="hljs-number">14</span>] = <span class="hljs-number">35770</span><br>v16[<span class="hljs-number">15</span>] = <span class="hljs-number">45984</span><br>v16[<span class="hljs-number">16</span>] = <span class="hljs-number">39754</span><br>v16[<span class="hljs-number">17</span>] = <span class="hljs-number">51672</span><br>v16[<span class="hljs-number">18</span>] = <span class="hljs-number">38323</span><br>v16[<span class="hljs-number">19</span>] = <span class="hljs-number">27511</span><br>v16[<span class="hljs-number">20</span>] = <span class="hljs-number">31334</span><br>v16[<span class="hljs-number">21</span>] = <span class="hljs-number">34214</span><br>v16[<span class="hljs-number">22</span>] = <span class="hljs-number">28014</span><br>v16[<span class="hljs-number">23</span>] = <span class="hljs-number">41090</span><br>v16[<span class="hljs-number">24</span>] = <span class="hljs-number">29258</span><br>v16[<span class="hljs-number">25</span>] = <span class="hljs-number">37905</span><br>v16[<span class="hljs-number">26</span>] = <span class="hljs-number">33777</span><br>v16[<span class="hljs-number">27</span>] = <span class="hljs-number">39812</span><br>v16[<span class="hljs-number">28</span>] = <span class="hljs-number">29442</span><br>v16[<span class="hljs-number">29</span>] = <span class="hljs-number">22225</span><br>v16[<span class="hljs-number">30</span>] = <span class="hljs-number">30853</span><br>v16[<span class="hljs-number">31</span>] = <span class="hljs-number">35330</span><br>v16[<span class="hljs-number">32</span>] = <span class="hljs-number">30393</span><br>v16[<span class="hljs-number">33</span>] = <span class="hljs-number">41247</span><br>v16[<span class="hljs-number">34</span>] = <span class="hljs-number">30439</span><br>v16[<span class="hljs-number">35</span>] = <span class="hljs-number">39434</span><br>v16[<span class="hljs-number">36</span>] = <span class="hljs-number">31587</span><br>v16[<span class="hljs-number">37</span>] = <span class="hljs-number">46815</span><br>v16[<span class="hljs-number">38</span>] = <span class="hljs-number">35205</span><br>v16[<span class="hljs-number">39</span>] = <span class="hljs-number">20689</span><br><br>v17 = [<span class="hljs-number">0x00000017</span>, <span class="hljs-number">0x0000000D</span>, <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x00000030</span>, <span class="hljs-number">0x00000029</span>, <span class="hljs-number">0x00000029</span>, <span class="hljs-number">0x0000002A</span>, <span class="hljs-number">0x00000021</span>, <span class="hljs-number">0x0000001E</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000045</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x0000000D</span>, <span class="hljs-number">0x0000002D</span>, <span class="hljs-number">0x00000029</span>, <span class="hljs-number">0x00000040</span>, <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000050</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x0000002A</span>, <span class="hljs-number">0x00000038</span>, <span class="hljs-number">0x00000013</span>, <span class="hljs-number">0x0000003E</span>, <span class="hljs-number">0x00000046</span>, <span class="hljs-number">0x00000017</span>, <span class="hljs-number">0x0000003F</span>, <span class="hljs-number">0x0000001E</span>, <span class="hljs-number">0x00000044</span>, <span class="hljs-number">0x00000011</span>, <span class="hljs-number">0x00000038</span>, <span class="hljs-number">0x0000005C</span>, <span class="hljs-number">0x0000000C</span>, <span class="hljs-number">0x00000010</span>, <span class="hljs-number">0x00000040</span>, <span class="hljs-number">0x0000001F</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000011</span>, <span class="hljs-number">0x00000047</span>, <span class="hljs-number">0x0000003A</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000040</span>, <span class="hljs-number">0x00000053</span>, <span class="hljs-number">0x00000047</span>, <span class="hljs-number">0x00000034</span>, <span class="hljs-number">0x00000063</span>, <span class="hljs-number">0x00000059</span>, <span class="hljs-number">0x0000004C</span>, <span class="hljs-number">0x00000044</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000063</span>, <span class="hljs-number">0x00000010</span>, <span class="hljs-number">0x00000010</span>, <span class="hljs-number">0x00000034</span>, <span class="hljs-number">0x0000002B</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x0000002C</span>, <span class="hljs-number">0x00000032</span>, <span class="hljs-number">0x00000020</span>, <span class="hljs-number">0x00000032</span>, <span class="hljs-number">0x0000001F</span>, <span class="hljs-number">0x00000014</span>, <span class="hljs-number">0x0000003F</span>, <span class="hljs-number">0x00000002</span>, <span class="hljs-number">0x00000063</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000039</span>, <span class="hljs-number">0x0000004F</span>, <span class="hljs-number">0x0000002B</span>, <span class="hljs-number">0x00000047</span>, <span class="hljs-number">0x00000013</span>, <span class="hljs-number">0x00000050</span>, <span class="hljs-number">0x0000005C</span>, <span class="hljs-number">0x0000005D</span>, <span class="hljs-number">0x0000003A</span>, <span class="hljs-number">0x00000054</span>, <span class="hljs-number">0x0000004A</span>, <span class="hljs-number">0x00000051</span>, <span class="hljs-number">0x0000002D</span>, <span class="hljs-number">0x00000037</span>, <span class="hljs-number">0x00000015</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000063</span>, <span class="hljs-number">0x0000001E</span>, <span class="hljs-number">0x0000001C</span>, <span class="hljs-number">0x00000038</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x0000000C</span>, <span class="hljs-number">0x0000004D</span>, <span class="hljs-number">0x0000005C</span>, <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x00000025</span>, <span class="hljs-number">0x00000043</span>, <span class="hljs-number">0x0000003C</span>, <span class="hljs-number">0x00000036</span>, <span class="hljs-number">0x00000033</span>, <span class="hljs-number">0x0000004F</span>, <span class="hljs-number">0x00000026</span>, <span class="hljs-number">0x00000057</span>, <span class="hljs-number">0x00000030</span>, <span class="hljs-number">0x00000010</span>]<br>v15 = [Int(<span class="hljs-string">&quot;v15[%d]&quot;</span> % i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>)]<span class="hljs-comment"># 创建了&quot;v15[i]&quot;这种参数</span><br>s = Solver()<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            v16[<span class="hljs-number">10</span> * k + m] -= v15[<span class="hljs-number">10</span> * k + n] * v17[<span class="hljs-number">10</span> * n + m]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        s.add(v16[<span class="hljs-number">10</span>*i+j] == <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">if</span> s.check() == z3.sat:<br>    m = s.model()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(m[v15[i]].as_long()), end=<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-comment"># 从m中取出标号为”v15[i]“的值，然后转化为字符串</span><br></code></pre></td></tr></table></figure><h1 id="n1ctf-2023"><a class="markdownIt-Anchor" href="#n1ctf-2023"></a> N1CTF 2023</h1><h2 id="n1lua"><a class="markdownIt-Anchor" href="#n1lua"></a> N1Lua</h2><ul><li>首先使用 <code>AssetStudio</code> 把 <code>n1llua_Data目录</code>下的 <code>resources.assets文件</code> 进行解密(有报错直接点击确定即可), 之后得到 <code>main.lua文件</code>, 之后使用 <code>java -jar unluac_2023_09_20.jar --rawstring .\main.lua &gt; src.lua </code> 将<code>编译后的main.lua反编译为lua程序</code></li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>相关资料及题型</title>
    <link href="/posts/436bbb1a.html"/>
    <url>/posts/436bbb1a.html</url>
    
    <content type="html"><![CDATA[<h1 id="软件保护技术"><a class="markdownIt-Anchor" href="#软件保护技术"></a> 软件保护技术</h1><h2 id="vm虚拟机"><a class="markdownIt-Anchor" href="#vm虚拟机"></a> VM虚拟机</h2><h3 id="理论研究"><a class="markdownIt-Anchor" href="#理论研究"></a> 理论研究</h3><p><a href="https://equinox-shame.github.io/2022/07/04/VM%EF%BC%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BF%9D%E6%8A%A4%E6%8A%80%E6%9C%AF/">理论</a></p><h3 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h3><h4 id="gwctf-2019babyvm"><a class="markdownIt-Anchor" href="#gwctf-2019babyvm"></a> [GWCTF 2019]babyvm</h4><h5 id="重点"><a class="markdownIt-Anchor" href="#重点"></a> 重点</h5><ul><li><p>关注这里的vm初始化操作，将传递进来的局部变量进行处理，前4个有效位置为寄存器，后面的通过 <code>0xF1</code> 等字节表示需要进行的 <code>sub</code> 函数操作。注意这里的 <code>a1</code> 存储的都是地址坐标，具体实现需要到程序段索引。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202305072226346.png" alt="image-20230507222653297" /></p></li><li><p>之后就是模拟执行 <code>opcode</code> ，找到程序的逻辑，之后反推</p></li></ul><h5 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h5><p>​这里使用angr不能得到正确答案，因为在主函数中有一个虚假的判断，而按照 <code>opcode</code> 模拟逻辑得到的是两段过程，其中第一段符合最后的 <code>check</code> 判定，从而 <code>angr</code> 识别这个判断为正确答案，即最后输出这个错误的答案</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202305072257567.png" alt="image-20230507225731537" /></p><h4 id="nctf-2018wcyvm"><a class="markdownIt-Anchor" href="#nctf-2018wcyvm"></a> [NCTF 2018]wcyvm</h4><h5 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h5><ul><li><p>直接分析可以得到逻辑，这里 <code>v4</code> 表示的就是寄存器，而 <code>v5</code> 就是表示的存储  <code>opcode</code> 的地方，可以按其逻辑进行操作</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202305072237892.png" alt="image-20230507223733797" /></p></li><li><p>也可以直接使用 <code>angr</code> 碰碰运气，直接硬推出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br>p=angr.Project(<span class="hljs-string">&quot;./WcyVM&quot;</span>)         <span class="hljs-comment">#加载文件</span><br>state=p.factory.entry_state()          <span class="hljs-comment">#创造状态state， entry_state构造一个从函数入口点执行的状态</span><br>sm=p.factory.simgr(state)              <span class="hljs-comment">#模拟管理器</span><br>good=<span class="hljs-number">0x401366</span>                         <span class="hljs-comment">#想要的地址</span><br>sm.explore(find=good,avoid=<span class="hljs-number">0x401372</span>)<br><span class="hljs-keyword">if</span> sm.found:                           <span class="hljs-comment">#如果found分类不为空</span><br>    find_state=sm.found[<span class="hljs-number">0</span>]             <span class="hljs-comment">#found里的状态给find_state</span><br>    <span class="hljs-built_in">print</span>(find_state.posix.dumps(<span class="hljs-number">0</span>))    <span class="hljs-comment">#获取输入</span><br></code></pre></td></tr></table></figure><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202305072240623.png" alt="image-20230507224004604" /></p></li></ul><h4 id="其余"><a class="markdownIt-Anchor" href="#其余"></a> 其余</h4><ul><li>[UNCTF] EasyVM <a href="https://equinox-shame.github.io/2022/07/22/UNCTF%20-%202019%20EasyVm/">EasyVM</a></li><li>[DASCTF]E4sy_Mix <a href="https://equinox-shame.github.io/2022/07/29/DASCTF%202022.07%20E4sy_Mix%20%E5%A4%8D%E7%8E%B0/">E4sy_Mix</a></li><li>[D3CTF]d3sky <a href="https://equinox-shame.github.io/2023/05/06/d3sky%20%E5%A4%8D%E7%8E%B0/">d3sky</a> <a href="https://ppppz.net/2023/08/03/D3CTF2023-REVERSE/">d3sky–PZ</a></li></ul><h2 id="maze"><a class="markdownIt-Anchor" href="#maze"></a> Maze</h2><h3 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h3><p>​直接py代码进行查找<a href="https://blog.csdn.net/qq_41890466/article/details/116900574">python求迷宫最短路径-小黄怪-的博客-CSDN博客</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on Tue Apr 27 13:48:14 2021</span><br><span class="hljs-string"></span><br><span class="hljs-string">@author: Administrator</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment">###无递归、类求迷宫最短路径算法</span><br><span class="hljs-comment">#import random</span><br>pre_route=<span class="hljs-built_in">list</span>()    <span class="hljs-comment">#宽度搜索得到的节点</span><br>q=<span class="hljs-built_in">list</span>()    <span class="hljs-comment">#队列结构控制循环次数</span><br>xx=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>]   <span class="hljs-comment">#右移、下移、左移、上移</span><br>yy=[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]<br>visited=<span class="hljs-built_in">list</span>()  <span class="hljs-comment">#记录节点是否已遍历</span><br>father=<span class="hljs-built_in">list</span>()   <span class="hljs-comment">#每一个pre_route节点的父节点</span><br>route=<span class="hljs-built_in">list</span>()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bfs</span>(<span class="hljs-params">l,x,y,m,n</span>):<br>    visited=[[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(l[<span class="hljs-number">0</span>]))]<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(l))]<br>    visited[x][y]=<span class="hljs-number">1</span> <span class="hljs-comment">#入口节点设置为已遍历</span><br>    q.append([x,y])<br>    <span class="hljs-keyword">while</span> q:    <span class="hljs-comment">#队列为空则结束循环</span><br>        now=q[<span class="hljs-number">0</span>]<br>        q.pop(<span class="hljs-number">0</span>)    <span class="hljs-comment">#移除队列头结点</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            point=[now[<span class="hljs-number">0</span>]+xx[i],now[<span class="hljs-number">1</span>]+yy[i]]   <span class="hljs-comment">#当前节点</span><br>            <span class="hljs-keyword">if</span> point[<span class="hljs-number">0</span>]&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> point[<span class="hljs-number">1</span>]&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> point[<span class="hljs-number">0</span>]&gt;=<span class="hljs-built_in">len</span>(l) <span class="hljs-keyword">or</span> point[<span class="hljs-number">1</span>]&gt;=<span class="hljs-built_in">len</span>(l[<span class="hljs-number">0</span>]) <span class="hljs-keyword">or</span> visited[point[<span class="hljs-number">0</span>]][point[<span class="hljs-number">1</span>]]==<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> l[point[<span class="hljs-number">0</span>]][point[<span class="hljs-number">1</span>]]==<span class="hljs-string">&#x27;1&#x27;</span>:<br>                <span class="hljs-keyword">continue</span><br>            father.append(now)<br>            visited[point[<span class="hljs-number">0</span>]][point[<span class="hljs-number">1</span>]]=<span class="hljs-number">1</span><br>            q.append(point)<br>            pre_route.append(point)<br>            <span class="hljs-keyword">if</span> point[<span class="hljs-number">0</span>]==m <span class="hljs-keyword">and</span> point[<span class="hljs-number">1</span>]==n:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;success&quot;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;false&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_route</span>(<span class="hljs-params">father,pre_route</span>):    <span class="hljs-comment">#输出最短迷宫路径</span><br>    route=[pre_route[-<span class="hljs-number">1</span>],father[-<span class="hljs-number">1</span>]]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(pre_route)-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> pre_route[i]==route[-<span class="hljs-number">1</span>]:<br>            route.append(father[i])<br>    route.reverse()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;迷宫最短路径为：\n&quot;</span>,route)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;步长：&quot;</span>,<span class="hljs-built_in">len</span>(route)-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> route<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">prn_map</span>(<span class="hljs-params">route,l,m,n</span>):   <span class="hljs-comment">#打印包含路径的迷宫图</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(l)):<br>        l[i]=<span class="hljs-built_in">list</span>(l[i])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(route)):<br>        l[route[i][<span class="hljs-number">0</span>]][route[i][<span class="hljs-number">1</span>]]=<span class="hljs-string">&#x27;2&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(l)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(l[<span class="hljs-number">0</span>])):<br>            <span class="hljs-keyword">if</span> l[i][j]==<span class="hljs-string">&#x27;1&#x27;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;  &#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> l[i][j]==<span class="hljs-string">&#x27;0&#x27;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;██&#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;░░&#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">if</span> i==m <span class="hljs-keyword">and</span> j==n:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;☀&#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-built_in">print</span>()<br><br>l=[<span class="hljs-string">&#x27;01010101001011001001010110010110100100001000101010&#x27;</span>,<br>   <span class="hljs-string">&#x27;00001000100000101010010000100000001001100110100101&#x27;</span>,<br>   <span class="hljs-string">&#x27;01111011010010001000001101001011100011000000010000&#x27;</span>,<br>   <span class="hljs-string">&#x27;01000000001010100011010000101000001010101011001011&#x27;</span>,<br>   <span class="hljs-string">&#x27;00011111000000101000010010100010100000101100000000&#x27;</span>,<br>   <span class="hljs-string">&#x27;11001000110101000010101100011010011010101011110111&#x27;</span>,<br>   <span class="hljs-string">&#x27;00011011010101001001001010000001000101001110000000&#x27;</span>,<br>   <span class="hljs-string">&#x27;10100000101000100110101010111110011000010000111010&#x27;</span>,<br>   <span class="hljs-string">&#x27;00111000001010100001100010000001000101001100001001&#x27;</span>,<br>   <span class="hljs-string">&#x27;11000110100001110010001001010101010101010001101000&#x27;</span>,<br>   <span class="hljs-string">&#x27;00010000100100000101001010101110100010101010000101&#x27;</span>,<br>   <span class="hljs-string">&#x27;11100100101001001000010000010101010100100100010100&#x27;</span>,<br>   <span class="hljs-string">&#x27;00000010000000101011001111010001100000101010100011&#x27;</span>,<br>   <span class="hljs-string">&#x27;10101010011100001000011000010110011110110100001000&#x27;</span>,<br>   <span class="hljs-string">&#x27;10101010100001101010100101000010100000111011101001&#x27;</span>,<br>   <span class="hljs-string">&#x27;10000000101100010000101100101101001011100000000100&#x27;</span>,<br>   <span class="hljs-string">&#x27;10101001000000010100100001000100000100011110101001&#x27;</span>,<br>   <span class="hljs-string">&#x27;00101001010101101001010100011010101101110000110101&#x27;</span>,<br>   <span class="hljs-string">&#x27;11001010000100001100000010100101000001000111000010&#x27;</span>,<br>   <span class="hljs-string">&#x27;00001000110000110101101000000100101001001000011101&#x27;</span>,<br>   <span class="hljs-string">&#x27;10100101000101000000001110110010110101101010100001&#x27;</span>,<br>   <span class="hljs-string">&#x27;00101000010000110101010000100010001001000100010101&#x27;</span>,<br>   <span class="hljs-string">&#x27;10100001000110010001000010101001010101011111010010&#x27;</span>,<br>   <span class="hljs-string">&#x27;00000100101000000110010100101001000001000000000010&#x27;</span>,<br>   <span class="hljs-string">&#x27;11010000001001110111001001000011101001011011101000&#x27;</span>,<br>   <span class="hljs-string">&#x27;00000110100010001000100000001000011101000000110011&#x27;</span>,<br>   <span class="hljs-string">&#x27;10101000101000100010001111100010101001010000001000&#x27;</span>,<br>   <span class="hljs-string">&#x27;10000010100101001010110000000100101010001011101000&#x27;</span>,<br>   <span class="hljs-string">&#x27;00111100001000010000000110111000000001000000001011&#x27;</span>,<br>   <span class="hljs-string">&#x27;10000001100111010111010001000110111010101101111000&#x27;</span>]<br><br><span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    x=<span class="hljs-number">0</span>;y=<span class="hljs-number">0</span><br>    m=<span class="hljs-number">25</span>;n=<span class="hljs-number">40</span><br>    <span class="hljs-keyword">if</span> bfs(l,x,y,m,n)==<span class="hljs-number">1</span>:<br>        route=get_route(father,pre_route)<br>        prn_map(route,l,m,n)<br></code></pre></td></tr></table></figure><h3 id="题目-2"><a class="markdownIt-Anchor" href="#题目-2"></a> 题目</h3><h4 id="领航杯maze"><a class="markdownIt-Anchor" href="#领航杯maze"></a> [领航杯]maze</h4><p>​具体内容看本地wp</p><h2 id="smc"><a class="markdownIt-Anchor" href="#smc"></a> SMC</h2><p><a href="https://mp.weixin.qq.com/s/b32h0PUgXKBATMWbPvdVgQ">SMC技术浅析</a></p><h2 id="花指令"><a class="markdownIt-Anchor" href="#花指令"></a> 花指令</h2><p><a href="https://nnnewb.github.io/blog/p/learning-packer-07/">花指令入门</a></p><p><a href="https://www.cnblogs.com/ioriwellings/p/17062430.html">花指令</a></p><p><a href="https://www.anquanke.com/post/id/236490#h2-11">花指令总结</a></p><h2 id="天堂之门"><a class="markdownIt-Anchor" href="#天堂之门"></a> 天堂之门</h2><p><a href="https://bbs.kanxue.com/thread-270153.htm">天堂之门(Heaven’s Gate)C语言实现</a></p><p><a href="https://taardisaa.github.io/2021/09/25/Heaven'sGate/">天堂之门分析</a></p><h2 id="软件加壳"><a class="markdownIt-Anchor" href="#软件加壳"></a> 软件加壳</h2><h2 id="控制流平坦化"><a class="markdownIt-Anchor" href="#控制流平坦化"></a> 控制流平坦化</h2><blockquote><p>IDA中D-810插件</p></blockquote><h2 id="mov-ofuscator"><a class="markdownIt-Anchor" href="#mov-ofuscator"></a> mov-ofuscator</h2><h2 id="other"><a class="markdownIt-Anchor" href="#other"></a> Other</h2><ul><li>资源文件操作 <a href="https://www.jb51.net/program/3073594li.htm">vs教程</a></li></ul><h1 id="编程语言相关"><a class="markdownIt-Anchor" href="#编程语言相关"></a> 编程语言相关</h1><h2 id="python"><a class="markdownIt-Anchor" href="#python"></a> Python</h2><h3 id="pyc"><a class="markdownIt-Anchor" href="#pyc"></a> pyc</h3><p><strong>视频</strong></p><ul><li><a href="https://www.bilibili.com/video/BV1JL4y1p7Tt/?spm_id_from=333.999.0.0&amp;vd_source=832f0671898da1eb3db5433b29bbb9c0">【Python逆向】浅谈CTF-Python逆向</a></li><li>对视频的博客讲解<a href="https://forum.butian.net/share/1618">浅谈ctf中的python逆向</a></li></ul><p><strong>方法</strong></p><ul><li>对于 python 版本较低的 pyc 文件，可以使用 uncompyle6/pycdc 进行反编译成 py 文件</li><li>对于 python 版本较高的 pyc 文件，则需要使用 pydas 反编译成字节码，通过阅读字节码来理清逻辑</li><li>对于某些exe的反编译需要注意 python版本，不然核心逻辑的文件夹 <code>PYZ-00.pyz_extracted</code> 可能为空</li></ul><h2 id="c"><a class="markdownIt-Anchor" href="#c"></a> C#</h2><p>一般就是使用 <code>dyspy\ILspy</code>(也可以用来unity逆向) 进行逆向，需要学会调试机巧，知道其具体逻辑，明白文件含义。</p><ul><li><p>例题 <code>[FlareOn1]Bob Doge</code>， <code>[FlareOn5]Ultimate Minesweeper</code>，<a href="https://blog.csdn.net/qq_45771413/article/details/115859063">FlareOn5 Ultimate Minesweeper</a></p></li><li><p>还有什么AOT混淆</p></li></ul><h3 id="unity游戏"><a class="markdownIt-Anchor" href="#unity游戏"></a> Unity游戏</h3><ul><li>相关信息一般放在<code>assets\\bin\\Data\\Managed\\Assembly-CSharp.dll</code>里，可以直接IDA查看</li><li>例题： <code>[MRCTF2020]PixelShooter</code></li></ul><h2 id="lua"><a class="markdownIt-Anchor" href="#lua"></a> Lua</h2><p><a href="https://bbs.kanxue.com/thread-275620.htm">lua逆向学习</a></p><h1 id="操作系统特性"><a class="markdownIt-Anchor" href="#操作系统特性"></a> 操作系统特性</h1><h2 id="windows"><a class="markdownIt-Anchor" href="#windows"></a> Windows</h2><h3 id="pe结构"><a class="markdownIt-Anchor" href="#pe结构"></a> PE结构</h3><p><strong>博客</strong></p><p><a href="https://www.cnblogs.com/VxerLee/p/15498560.html">PE头详细分析</a></p><p><a href="https://www.cnblogs.com/VxerLee/p/15518129.html">PE节表详细分析</a></p><p><a href="https://gh0st.cn/Binary-Learning/PE%E5%9F%BA%E7%A1%80.html">PE基础</a></p><h3 id="异常处理"><a class="markdownIt-Anchor" href="#异常处理"></a> 异常处理</h3><h4 id="seh"><a class="markdownIt-Anchor" href="#seh"></a> SEH</h4><p><a href="http://betacat.github.io/2011/10/19/SEH-x86/">SEH x86</a></p><p><a href="http://betacat.github.io/2011/11/04/SEH-x64/">SEH x64</a></p><p><a href="https://www.yunzh1jun.com/2022/05/27/WindowsSEH/">SEH 学习笔记</a></p><h3 id="反调试"><a class="markdownIt-Anchor" href="#反调试"></a> 反调试</h3><p><a href="https://www.yunzh1jun.com/2022/05/19/anti_dbg/">反调试总结</a></p><p><a href="https://ctf-wiki.org/reverse/platform/windows/anti-debug/ntglobalflag/">Wiki知识点</a></p><p><a href="https://bbs.kanxue.com/thread-225740.htm">反调试技术总结</a></p><h3 id="hook"><a class="markdownIt-Anchor" href="#hook"></a> hook</h3><h4 id="inline-hook"><a class="markdownIt-Anchor" href="#inline-hook"></a> inline hook</h4><p><a href="https://bbs.kanxue.com/thread-252074.htm">稳定多线程中的inline hook-编程技术-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://bbs.kanxue.com/thread-271098.htm">万字长文！inlinehook看这一篇足够了！-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://www.cnblogs.com/PeaZomboss/p/17131778.html">Windows下x86和x64平台的Inline Hook介绍 - PeacoorZomboss - 博客园 (cnblogs.com)</a></p><ul><li>这里注意hook的函数与原函数函数类型必须保持一致</li></ul><h1 id="工具及配置"><a class="markdownIt-Anchor" href="#工具及配置"></a> 工具及配置</h1><h2 id="angr"><a class="markdownIt-Anchor" href="#angr"></a> <strong>Angr</strong></h2><h3 id="配置与学习"><a class="markdownIt-Anchor" href="#配置与学习"></a> 配置与学习</h3><p><strong>安装</strong></p><ul><li>Windows中pip直接下载(建议使用python虚拟环境下载)</li><li>Linux中使用包处理详细配置</li></ul><p><strong>博客</strong></p><ul><li><a href="https://blog.gentlecp.com/article/61784.html">基础篇</a> ， <a href="https://blog.gentlecp.com/article/3571.html">提高篇</a> ， <a href="https://blog.gentlecp.com/article/26999.html">进阶篇</a></li></ul><p><strong>视频</strong></p><ul><li><a href="https://space.bilibili.com/386563875/video">视频讲解</a></li></ul><h2 id="sagemath"><a class="markdownIt-Anchor" href="#sagemath"></a> Sagemath</h2><p><strong>下载</strong></p><p><a href="https://www.jianshu.com/p/8f37af3d3ae5">wsl2安装和使用 sagemath</a></p><p><a href="https://blog.csdn.net/amphetham/article/details/117166099">/usr/bin/env: “python”: 没有那个文件或目录——解决办法</a></p><h2 id="ollydbg"><a class="markdownIt-Anchor" href="#ollydbg"></a> OllyDbg</h2><p><strong>安装</strong></p><ul><li><a href="https://www.52pojie.cn/thread-239996-1-1.html">OllyDBG v2.01 汉化版 + 集成插件</a></li></ul><p><strong>添加右键菜单</strong></p><blockquote><p>这里可以直接使用软件进行添加</p></blockquote><p><a href="https://blog.csdn.net/qq_44705203/article/details/119966938">参考博客</a></p><ul><li>Icon的数值为完整路径</li><li>command的数值为完整路径和&quot;%1&quot;(与一开始自定义项中的默认不同，那个为定义的名称)</li></ul><h2 id="java环境配置"><a class="markdownIt-Anchor" href="#java环境配置"></a> java环境配置</h2><p><a href="https://blog.csdn.net/xhmico/article/details/122390181">java 环境配置(详细教程)</a></p><ul><li>博客中的java_Home改成JAVA_HOME</li><li>CLASSPATH可以不配置，这是jdk历史遗留问题</li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一些记录</title>
    <link href="/posts/a87d0386.html"/>
    <url>/posts/a87d0386.html</url>
    
    <content type="html"><![CDATA[<h1 id="hdctf2023"><a class="markdownIt-Anchor" href="#hdctf2023"></a> HDCTF2023</h1><h2 id="double_game"><a class="markdownIt-Anchor" href="#double_game"></a> double_game</h2><h3 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h3><ul><li><p>打开ida，发现是一个非常典型的上线器，shellcode loader。我们需要做的是找到其中的shellcode。这是 WP 说的，但是没有理解 shellcode loader 的含义，目前我的认识就是它加载 shellcode，然后顺利执行 shellcode</p><p>一个介绍的文章 <a href="https://paper.seebug.org/1413/">如何实现一款 shellcodeLoader</a></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304242327238.png" alt="image-20230424232717199" /></p></li><li><p>这个地方加载了 <code>sub_</code>，这里就是 shellcode</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304242328475.png" alt="image-20230424232802405" /></p></li><li><p>查看后发现 IDA 将这里反编译成了一个函数，但是逻辑还是有点困难，那么就将这个 shellcode的内容复制下来，整合为一个文件，然后再使用ida打开文件分析</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304242329993.png" alt="image-20230424232945959" /></p></li><li><p>这里是 <code>u</code> + <code>p</code> 后的结果，重新生成函数后就很好认了</p></li></ul><h3 id="exp"><a class="markdownIt-Anchor" href="#exp"></a> exp</h3><ul><li>以二进制写入文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><br>list_dec = [<span class="hljs-number">0x55</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xE8</span>,<br>  <span class="hljs-number">0x52</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x44</span>,<br>  <span class="hljs-number">0x24</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x54</span>,<br>  <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>,<br>  <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>,<br>  <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x44</span>,<br>  <span class="hljs-number">0x24</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x2F</span>,<br>  <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>,<br>  <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>,<br>  <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x44</span>,<br>  <span class="hljs-number">0x24</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x43</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8D</span>,<br>  <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x01</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xEB</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x66</span>,<br>  <span class="hljs-number">0x66</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xC8</span>,<br>  <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x02</span>,<br>  <span class="hljs-number">0x01</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x58</span>,<br>  <span class="hljs-number">0x83</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x24</span>,<br>  <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x83</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x8B</span>,<br>  <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x8D</span>,<br>  <span class="hljs-number">0x54</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x0F</span>,<br>  <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x8B</span>,<br>  <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x83</span>,<br>  <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x1F</span>,<br>  <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8D</span>,<br>  <span class="hljs-number">0x50</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>,<br>  <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x58</span>,<br>  <span class="hljs-number">0x04</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>,<br>  <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x8D</span>, <br>  <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x88</span>,<br>  <span class="hljs-number">0x10</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x1C</span>,<br>  <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xD0</span>,<br>  <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x1F</span>,<br>  <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x44</span>,<br>  <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xC3</span>]<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;hexBin.bin&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> list_dec:<br>        a = struct.pack(<span class="hljs-string">&#x27;B&#x27;</span>, x)<span class="hljs-comment"># struct.pack将要变成字节的数据打包然后以字节的形式写入到二进制文件，字节的形式是b&#x27;\x01&#x27;</span><br>        fp.write(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;done&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>得到flag</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = [<span class="hljs-number">0x48</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x51</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x7b</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x6a</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x6c</span>,<span class="hljs-number">0x60</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x5f</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x5b</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0x53</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x6c</span>,<span class="hljs-number">0x60</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x7c</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0x5f</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x7d</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>  tmp = i % <span class="hljs-number">5</span><br>  <span class="hljs-keyword">if</span> tmp == <span class="hljs-number">1</span>:<br>    enc[i] ^= <span class="hljs-number">0x23</span><br>  <span class="hljs-keyword">elif</span> tmp == <span class="hljs-number">2</span>:<br>    enc[i] -= <span class="hljs-number">2</span><br>  <span class="hljs-keyword">elif</span> tmp == <span class="hljs-number">3</span>:<br>    enc[i] += <span class="hljs-number">3</span><br>  <span class="hljs-keyword">elif</span> tmp == <span class="hljs-number">4</span>:<br>    enc[i] += <span class="hljs-number">4</span><br>  <span class="hljs-keyword">elif</span> tmp == <span class="hljs-number">5</span>:<br>    enc[i] += <span class="hljs-number">25</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>  flag += <span class="hljs-built_in">chr</span>(enc[i])<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="enc"><a class="markdownIt-Anchor" href="#enc"></a> enc</h2><h3 id="分析1"><a class="markdownIt-Anchor" href="#分析1"></a> 分析1</h3><ul><li>先是一个 TEA 找到密钥，这里注意格式与往常不太一样，这里要注意和普遍脚本之间的区别。最后得到了密钥 <code>0x3</code></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304251425960.png" alt="image-20230425142555881" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304251426260.png" alt="image-20230425142607216" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt1</span>(<span class="hljs-params">v, k</span>):<br>    v0, v1 = c_uint32(v[<span class="hljs-number">0</span>]), c_uint32(v[<span class="hljs-number">1</span>])<br>    delta = <span class="hljs-number">0x61C88647</span><br>    k0, k1, k2, k3 = k[<span class="hljs-number">0</span>], k[<span class="hljs-number">1</span>], k[<span class="hljs-number">2</span>], k[<span class="hljs-number">3</span>]<br>    <br>    total = c_uint32(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        total.value -= delta<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        v1.value -= ((v0.value &lt;&lt; <span class="hljs-number">4</span>) + k2) ^ (v0.value + total.value) ^ ((v0.value &gt;&gt; <span class="hljs-number">5</span>) + k3)<br>        v0.value -= ((v1.value &lt;&lt; <span class="hljs-number">4</span>) + k0) ^ (v1.value + total.value) ^ ((v1.value &gt;&gt; <span class="hljs-number">5</span>) + k1)<br>        total.value += delta<br>    <span class="hljs-keyword">return</span> v0.value, v1.value<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt2</span>(<span class="hljs-params">v, k</span>):<br>    v0, v1 = c_uint32(v[<span class="hljs-number">0</span>]), c_uint32(v[<span class="hljs-number">1</span>])<br>    delta = <span class="hljs-number">0x9e3779b9</span><br>    k0, k1, k2, k3 = k[<span class="hljs-number">0</span>], k[<span class="hljs-number">1</span>], k[<span class="hljs-number">2</span>], k[<span class="hljs-number">3</span>]<br>    <br>    total = c_uint32(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        total.value -= <span class="hljs-number">0x61C88647</span><br>        <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        v1.value -= ((v0.value &lt;&lt; <span class="hljs-number">4</span>) + k2) ^ (v0.value + total.value) ^ ((v0.value &gt;&gt; <span class="hljs-number">5</span>) + k3)<br>        v0.value -= ((v1.value &lt;&lt; <span class="hljs-number">4</span>) + k0) ^ (v1.value + total.value) ^ ((v1.value &gt;&gt; <span class="hljs-number">5</span>) + k1)<br>        total.value -= delta<br>    <span class="hljs-keyword">return</span> v0.value, v1.value<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 待加密的明文，两个32位整型，即64bit的明文数据</span><br>    value = [<span class="hljs-number">0x60FCDEF7</span>, <span class="hljs-number">0x236DBEC</span>]<br>    <span class="hljs-comment"># 四个key，每个是32bit，即密钥长度为128bit</span><br>    key = [<span class="hljs-number">0x12</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x78</span>]<br>    res = decrypt1(value, key)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(res[<span class="hljs-number">0</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">1</span>]))<br>    <br>    <span class="hljs-comment"># 这里是decrypto1 和 decrypto2 的区别</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    如下测试可以发现，加与减的最后4个字节是一样的，这里通过c_uint32的类型锁定了字节的数量</span><br><span class="hljs-string">    也就是高位会被舍去，所以这个的结果是一样的</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    a = c_uint32(<span class="hljs-number">0xc6ef3720</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(a.value + <span class="hljs-number">0x61C88647</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(a.value - <span class="hljs-number">0x9e3779b9</span>))<br></code></pre></td></tr></table></figure><p>这里注意两种方式，一个是 WP 提供的，最后发现就是一个高位舍去的差别，但是开阔了视野</p><h3 id="分析2"><a class="markdownIt-Anchor" href="#分析2"></a> 分析2</h3><ul><li>这里就是 SMC，其中 0x3 就是异或的值。这里将 <code>.hdctf</code> 段进行了 SMC 处理，可以脚本，也可以动调(自己的动调结果有点不太好看)</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304251429980.png" alt="image-20230425142922951" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304251429571.png" alt="image-20230425142926548" /></p><ul><li>这里脚本写出来的就是一个 RC4 加密</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304251434725.png" alt="image-20230425143442690" /></p><ul><li>脚本一直跑不通，然后CyberChef直接就出来了，只能说自己整理得脚本还是不如工具</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304251454112.png" alt="image-20230425145423070" /></p><h2 id="basketball"><a class="markdownIt-Anchor" href="#basketball"></a> Basketball</h2><ul><li>这里主要考虑如何将一堆RGB值变成一张图片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># 打开文件并读取内容</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;array.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    content = f.read()<br><br><span class="hljs-comment"># 将文件内容转换为一维数组</span><br>data = np.fromstring(content, dtype=np.uint8, sep=<span class="hljs-string">&#x27; &#x27;</span>)<br><br><span class="hljs-comment"># 将一维数组转换为[561][637][3]的三维数组</span><br>data = data.reshape((<span class="hljs-number">561</span>, <span class="hljs-number">637</span>, <span class="hljs-number">3</span>))<br><br><span class="hljs-comment"># 创建一个空白的图像宽637高561</span><br>img = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (<span class="hljs-number">637</span>, <span class="hljs-number">561</span>))<br><br><span class="hljs-comment"># 将三维数组中的RGB值写入图像中</span><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">561</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">637</span>):<br>        r, g, b = data[y][x]<br>        img.putpixel((x, y), (r, g, b))<br><br><span class="hljs-comment"># 保存图像</span><br>img.save(<span class="hljs-string">&#x27;message.png&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="suctf2023"><a class="markdownIt-Anchor" href="#suctf2023"></a> SUCTF2023</h1><h2 id="easyre"><a class="markdownIt-Anchor" href="#easyre"></a> easyRE</h2><ul><li>给了一个exe文件，直接反编译成pyc文件</li></ul><h3 id="分析-2"><a class="markdownIt-Anchor" href="#分析-2"></a> 分析</h3><p>观察 pyinstxtractor 解包时的信息，可知打包的 Python 版本为 Python 3.11所以uncompyle6用不了。对该 pyc 文件进行反编译也需要对应版本的 Python 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> dis<br><span class="hljs-keyword">import</span> marshal<br><br>PATH = <span class="hljs-string">&quot;./easyRE.exe_extracted/easyRE.pyc&quot;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(PATH, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    code = f.seek(<span class="hljs-number">16</span>)<br>    code = marshal.load(f)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;easyRE.pyc.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        dis.dis(code, file=f)<br><br></code></pre></td></tr></table></figure><p>这里也可以使用 pycdc直接生成字节码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br>r = random.Random(<span class="hljs-number">322376503</span>)<br><br>pt = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter your flag: &#x27;</span>).encode()<br>ct = <span class="hljs-string">b&#x27;\x8b\xcck\xd3\xed\x96\xffFb\x06r\x085\x82\xbc \xb2\xde)p\x88Q`\x1bf\x18\xb6QUSw\x10\xcd\xd9\x13A$\x86\xe5\xcd\xd9\xff&#x27;</span><br><br>buf = []<br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> pt:<br>    buf.append((r.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>) ^ b))<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">bytes</span>(buf) == ct:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Correct!&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>大致含义如上，之后就可以写出脚本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br>r = random.Random(<span class="hljs-number">322376503</span>)<br>ct = <span class="hljs-string">b&#x27;\x8b\xcck\xd3\xed\x96\xffFb\x06r\x085\x82\xbc \xb2\xde)p\x88Q`\x1bf\x18\xb6QUSw\x10\xcd\xd9\x13A$\x86\xe5\xcd\xd9\xff&#x27;</span><br>enc = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ct:<br>    enc.append(i)<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    flag += <span class="hljs-built_in">chr</span>(r.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>) ^ enc[i])<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="gotots"><a class="markdownIt-Anchor" href="#gotots"></a> gotots</h2><h3 id="分析-3"><a class="markdownIt-Anchor" href="#分析-3"></a> 分析</h3><p>​使用 IDA fREE 查看 GO 的程序(使用idagohelper会报错)</p><ul><li>利用错误显示 <code>Incorrect!</code> 找到主函数，然后下断点调试到输入的位置</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202305071453755.png" alt="image-20230507145353639" /></p><ul><li>经过查找，发现输入的位置是 <code>v13</code> 所在的位置，按 <code>D</code> 改变成数据查看。之后点击进去下一个读写断点(硬件断点)，并在hex窗口显示该地址数据(<code>G</code>)</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202305071457015.png" alt="image-20230507145721957" /></p><ul><li>后来在 <code>runtime_stringtoslicebyte</code> 这里触发了读写断点，猜测这里并不是具体的操作过程，之后经过动态调式，发现这个函数复制数据到另一个位置(由hex窗口数据看出)</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202305071458161.png" alt="image-20230507145852127" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202305071504488.png" alt="image-20230507150454442" /></p><ul><li>经过某一位置发现数值发生了改变，猜测这里就是主要加密位置，根据伪代码可以看出来只是一个简单的异或处理，之后可以发现下面的 <code>if</code> 语句就是判断的含义</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202305071506438.png" alt="image-20230507150654384" /></p><h3 id="exp-2"><a class="markdownIt-Anchor" href="#exp-2"></a> exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = [ <span class="hljs-number">0x35</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x82</span>,<br>  <span class="hljs-number">0x27</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x1E</span>,<br>  <span class="hljs-number">0x81</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x6B</span>,<br>  <span class="hljs-number">0x70</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x7D</span>]<br>key = [<span class="hljs-number">0x66</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xD2</span>,<br>  <span class="hljs-number">0x25</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x17</span>,<br>  <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x6D</span>,<br>  <span class="hljs-number">0x79</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x2F</span>]<br><br><span class="hljs-built_in">input</span> = [ <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>,<br>  <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>,<br>  <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>,<br>  <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x31</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(key[i] ^ enc[i] ^ <span class="hljs-built_in">input</span>[i]), end=<span class="hljs-string">&quot;&quot;</span>)<br>    <br></code></pre></td></tr></table></figure><h3 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充</h3><p>​由于 Go 是多线程的，所以调试的时候可能会出现进入其它未知地方情况的发生，这时可以禁止其余线程的运行</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202305071455904.png" alt="image-20230507145550874" /></p><ul><li>不禁止可能走偏，例如下面</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202305071501614.png" alt="image-20230507150105577" /></p><h1 id="安洵杯-2023"><a class="markdownIt-Anchor" href="#安洵杯-2023"></a> 安洵杯 2023</h1><h2 id="ez_cpp"><a class="markdownIt-Anchor" href="#ez_cpp"></a> ez_cpp</h2><ul><li><p>对于整个程序的分析可知，该程序使用对于输入字符串进行单个字符加密，之后与内置数据进行对比得出正确与否的结果</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307061640632.png" alt="image-20230706164056589" /></p></li><li><p>因此可以对于比较结果进行更改，利用python运行程序得到结果，从而实现对于单个字符的爆破处理</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307061644516.png" alt="image-20230706164407476" /></p></li><li><p>将每次对比的数值拿出来，从而判断字符的爆破进行到了哪一步</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br>table = string.ascii_letters+string.digits+<span class="hljs-string">&#x27;!-&#123;&#125;&#x27;</span><br>theflag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(theflag) &lt; <span class="hljs-number">32</span>:<br>    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> table:<br>        flag = (theflag+ch).ljust(<span class="hljs-number">32</span>, <span class="hljs-string">&#x27;#&#x27;</span>)<br>        exitcode = os.system(<span class="hljs-string">f&quot;echo <span class="hljs-subst">&#123;flag&#125;</span> | ez_cpp1.exe 1&gt;&amp;0&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;try: &quot;</span> + theflag + ch + <span class="hljs-string">&quot; exitcode:&quot;</span> + <span class="hljs-built_in">hex</span>(exitcode))<br>        <span class="hljs-keyword">if</span> exitcode &gt;= <span class="hljs-built_in">len</span>(theflag) + <span class="hljs-number">1</span>:<br>            theflag += ch<br>            <span class="hljs-built_in">print</span>(theflag, exitcode)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(theflag + <span class="hljs-string">&#x27;not found&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="ezr3"><a class="markdownIt-Anchor" href="#ezr3"></a> ezr3</h2><h3 id="脱壳"><a class="markdownIt-Anchor" href="#脱壳"></a> 脱壳</h3><ul><li><p>首先这是 arm64 elf 文件，运行在Android上，这里查看文件，发现魔改 UPX 壳，之后恢复并脱壳(共5处的HCK需要改成 UPX)</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307081737836.png" alt="img" /></p></li></ul><h3 id="逻辑查看"><a class="markdownIt-Anchor" href="#逻辑查看"></a> 逻辑查看</h3><ul><li><p>之后查看main函数逻辑，发现先运行 <code>V</code> 函数，之后再输入flag，查看V函数</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307081739723.png" alt="image-20230708173922681" /></p></li><li><p>这里查看auth数据，同时更改其为4字节一组的数组(上面的memStore也是这样)，之后可以发现此函数只是对内存数据进行了更改，动调可以获得数据，静态查看可以看出加密逻辑(我看不出来，建议还是动态调试拿数据)</p></li><li><p><strong>这里之后再看，发现v2与v3的数据相连，则</strong></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307082009042.png" alt="image-20230708200933003" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">v1 = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>        auth[i * <span class="hljs-number">6</span> + j] ^= memStore[v1 + <span class="hljs-number">12</span> * j]<br>    v1 += <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p>之后主程序是进行一系列对于flag格式的检测工作，之后来到了 <code>P</code> 函数，首先很难理解 v8(输入的flag) 相关的操作，则更改其数据类型，得到可理解的伪代码—这里官方WP是改为37，这是后文memset设置的长度，只要比这个长度大即可满足条件，使代码更容易阅读</p></li><li><p>这里的代码先是对每个数据进行移位处理，之后倒序异或处理；后来就是进行比较，就是将flag与memStore进行相乘来比较flag是否正确</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307081931420.png" alt="image-20230708193153346" /></p><p><strong>这里C中v8[-1]其实指向了v8最开始字符的前一个字符</strong></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307081932216.png" alt="image-20230708193218180" /></p></li></ul><h3 id="exp-3"><a class="markdownIt-Anchor" href="#exp-3"></a> exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python">auth32 = [<br>    <span class="hljs-number">0x0003BC69</span>, <span class="hljs-number">0x000D3FA0</span>, <span class="hljs-number">0x0003A94A</span>, <span class="hljs-number">0x00044AFF</span>, <span class="hljs-number">0x00045254</span>, <span class="hljs-number">0x0000CDD1</span>,<br>    <span class="hljs-number">0x00001815</span>, <span class="hljs-number">0x00003B08</span>, <span class="hljs-number">0x00070868</span>, <span class="hljs-number">0x000C6560</span>, <span class="hljs-number">0x00065662</span>, <span class="hljs-number">0x000855C8</span>,<br>    <span class="hljs-number">0x0000DCF6</span>, <span class="hljs-number">0x00004CE6</span>, <span class="hljs-number">0x0014EEC2</span>, <span class="hljs-number">0x0002CFD6</span>, <span class="hljs-number">0x00032766</span>, <span class="hljs-number">0x0014F6BA</span>,<br>    <span class="hljs-number">0x00025E69</span>, <span class="hljs-number">0x0006A9A3</span>, <span class="hljs-number">0x00121EBD</span>, <span class="hljs-number">0x0005991C</span>, <span class="hljs-number">0x00050016</span>, <span class="hljs-number">0x00004A3D</span>,<br>    <span class="hljs-number">0x00097485</span>, <span class="hljs-number">0x0008D0A0</span>, <span class="hljs-number">0x0003B916</span>, <span class="hljs-number">0x00054C58</span>, <span class="hljs-number">0x00096F94</span>, <span class="hljs-number">0x00010334</span>,<br>    <span class="hljs-number">0x000DAD22</span>, <span class="hljs-number">0x0004B234</span>, <span class="hljs-number">0x0002FE96</span>, <span class="hljs-number">0x000F33CC</span>, <span class="hljs-number">0x0012C1E8</span>, <span class="hljs-number">0x00148F9E</span><br>]<br>memStore = [<br>    <span class="hljs-number">0x00000D21</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x0000009D</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x0000094B</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x000003C9</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000C3F</span>,<br>    <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x000017E9</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x0000130E</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000088</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000486</span>, <span class="hljs-number">0x00000000</span>,<br>    <span class="hljs-number">0x0000202F</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00002230</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x000024B4</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x000008B1</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000A9F</span>,<br>    <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00001AD2</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x000023EB</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000C7E</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x0000042B</span>, <span class="hljs-number">0x00000000</span>,<br>    <span class="hljs-number">0x000005BF</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x0000113C</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000449</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00001751</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000ACE</span>,<br>    <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00001894</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x0000208A</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000E82</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x000006BD</span>, <span class="hljs-number">0x00000000</span>,<br>    <span class="hljs-number">0x00000CEE</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00002386</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x000013D4</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000111</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000D1C</span>,<br>    <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x0000238E</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00001759</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x0000012B</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x0000214D</span>, <span class="hljs-number">0x00000000</span><br>]<br>v2 = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>        auth32[i * <span class="hljs-number">6</span> + j] ^= memStore[v2 + <span class="hljs-number">12</span> * j]<br>    v2 += <span class="hljs-number">2</span><br>v2 = <span class="hljs-number">0</span><br>flag = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>        flag.append(auth32[i * <span class="hljs-number">6</span> + j] // memStore[v2 + j * <span class="hljs-number">12</span>])<br>    v2 += <span class="hljs-number">2</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    flag[<span class="hljs-built_in">len</span>(flag) - <span class="hljs-number">1</span> - i] ^= flag[i]<br>    flag[<span class="hljs-built_in">len</span>(flag) - <span class="hljs-number">1</span> - i] = (flag[<span class="hljs-built_in">len</span>(flag) - <span class="hljs-number">1</span> - i] &gt;&gt; <span class="hljs-number">4</span>) | (flag[<span class="hljs-built_in">len</span>(flag) - <span class="hljs-number">1</span> - i] &lt;&lt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xFF</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(flag))<br></code></pre></td></tr></table></figure><h2 id="3d_maze"><a class="markdownIt-Anchor" href="#3d_maze"></a> 3D_Maze</h2><h3 id="分析-4"><a class="markdownIt-Anchor" href="#分析-4"></a> 分析</h3><ul><li><p>有题目，可以知道是个三维迷宫题目，有前面的知识可以知道flag的长度为62。这里就是使用小写的<code>awsd</code>和大写的<code>AWSD</code>作为转移，小写是在一个平面上操作，而大写是在立体中进行不同面的变换</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307082138095.png" alt="image-20230708213820034" /></p></li><li><p>这里对于边界条件进行了限制，同时点出了迷宫的大小范围为 <code>6 x 10 x 10</code> 其中主义dword需要将数据转换为dword类型再比较(一开始可以清楚看到100)，后来更改了数据类型，结果也随之改变</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307082140410.png" alt="image-20230708214028372" /></p></li></ul><h3 id="exp-4"><a class="markdownIt-Anchor" href="#exp-4"></a> exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-comment"># 分割迷宫</span><br><span class="hljs-built_in">map</span> = [<span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000000</span>]<br>maplist=[<span class="hljs-built_in">map</span>[i*<span class="hljs-number">100</span>:i*<span class="hljs-number">100</span>+<span class="hljs-number">100</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>)]<br><span class="hljs-comment"># print(maplist)</span><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> maplist:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;==========================================&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-built_in">print</span>(t[i*<span class="hljs-number">10</span>:i*<span class="hljs-number">10</span>+<span class="hljs-number">10</span>])<br><br><span class="hljs-comment"># z=0</span><br><span class="hljs-comment"># ==1=======</span><br><span class="hljs-comment"># ==1====1==</span><br><span class="hljs-comment"># ==1=1111==</span><br><span class="hljs-comment"># ==1=1=====</span><br><span class="hljs-comment"># ==1=111111</span><br><span class="hljs-comment"># ==1=1=====</span><br><span class="hljs-comment"># ==11111111</span><br><span class="hljs-comment"># ==5=1=====</span><br><span class="hljs-comment"># ===*======</span><br><span class="hljs-comment"># ===1======</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># wddwwdddddD</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># z=1</span><br><span class="hljs-comment"># ==========</span><br><span class="hljs-comment"># =1111=====</span><br><span class="hljs-comment"># =1==111111</span><br><span class="hljs-comment"># =1========</span><br><span class="hljs-comment"># 11========</span><br><span class="hljs-comment"># ==========</span><br><span class="hljs-comment"># 11111=====</span><br><span class="hljs-comment"># ==========</span><br><span class="hljs-comment"># ==========</span><br><span class="hljs-comment"># ==========</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># dwwwdddsdddddD</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># z=2</span><br><span class="hljs-comment"># 1=========</span><br><span class="hljs-comment"># 1=========</span><br><span class="hljs-comment"># 1==1=1===1</span><br><span class="hljs-comment"># ==1=1=1=1=</span><br><span class="hljs-comment"># ==1====1==</span><br><span class="hljs-comment"># ===1===1==</span><br><span class="hljs-comment"># ====1==1==</span><br><span class="hljs-comment"># ==1=1==1==</span><br><span class="hljs-comment"># ===1===1==</span><br><span class="hljs-comment"># ==========</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># wwW</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># z=4</span><br><span class="hljs-comment"># ========11</span><br><span class="hljs-comment"># ========1=</span><br><span class="hljs-comment"># 111111111=</span><br><span class="hljs-comment"># ==========</span><br><span class="hljs-comment"># ==========</span><br><span class="hljs-comment"># ==========</span><br><span class="hljs-comment"># ==========</span><br><span class="hljs-comment"># ==========</span><br><span class="hljs-comment"># ==========</span><br><span class="hljs-comment"># ==========</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># assaaaaaaaaA</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># z=3</span><br><span class="hljs-comment"># ==1=======</span><br><span class="hljs-comment"># ==1=======</span><br><span class="hljs-comment"># ==1=11====</span><br><span class="hljs-comment"># ==11==1===</span><br><span class="hljs-comment"># ==11======</span><br><span class="hljs-comment"># ==11======</span><br><span class="hljs-comment"># ==11==1===</span><br><span class="hljs-comment"># ==1=11====</span><br><span class="hljs-comment"># ==1=======</span><br><span class="hljs-comment"># ==1=======</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># sssssssssS</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># z=5</span><br><span class="hljs-comment"># ===1======</span><br><span class="hljs-comment"># ===1======</span><br><span class="hljs-comment"># ===1======</span><br><span class="hljs-comment"># ===1======</span><br><span class="hljs-comment"># ===1======</span><br><span class="hljs-comment"># ==11======</span><br><span class="hljs-comment"># ==1=======</span><br><span class="hljs-comment"># 111=======</span><br><span class="hljs-comment"># ==========</span><br><span class="hljs-comment"># ==========</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># dddwwdwwwwwW</span><br><span class="hljs-comment"># w</span><br><br><span class="hljs-comment">#0 -&gt; 1 -&gt; 2 -&gt; 4 -&gt;3 -&gt;5 -&gt; 0</span><br><span class="hljs-comment"># wddwwdddddDdwwwdddsdddddDwwWassaaaaaaaaAsssssssssSddwwdwwwwwWw</span><br></code></pre></td></tr></table></figure><h1 id="dasctf2023二进制"><a class="markdownIt-Anchor" href="#dasctf2023二进制"></a> DASCTF2023二进制</h1><h2 id="babyre"><a class="markdownIt-Anchor" href="#babyre"></a> babyRe</h2><ul><li><p>查看关键函数，发现是一个线程注入的技术 注入的代码是从资源中解密出的shellcode，分析线程的shellcode，其中存在两个反调试</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307092154373.png" alt="image-20230709215416238" /></p></li><li><p>其中judge……函数中存在调试判断，这里对于调试进行处理后，动调卡在了 <code>argc!=2</code> 的判断上，所以动态得到shellcode的数据不不成功(自己绕过后还是因为参数不为2的原因调试失败)</p></li><li><p>之后重点关注杜宇“cod”数据的处理，由xor函数可以知道这是对于cod进行异或处理，则得到资源文件，之后进行异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;COD101.bin&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read()<br>key=[<span class="hljs-number">24</span>, <span class="hljs-number">87</span>, <span class="hljs-number">104</span>, <span class="hljs-number">100</span>]<br>arr = []<br><span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(f):<br>    arr.append(key[i%<span class="hljs-number">4</span>]^j)<br><span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;dump&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>).write(<span class="hljs-built_in">bytes</span>(arr))<br></code></pre></td></tr></table></figure></li><li><p>得到dump文件后，进行64位分析，将其中(call+5)与sub_1EE进行nop以及调整retn后，程序大致可以看出来了为魔改的RC4算法，由此结合后面的StartAddress来进行解密处理</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307092200561.png" alt="image-20230709220059494" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> size1 = <span class="hljs-number">0x100</span>;<br><br><span class="hljs-type">void</span> __stdcall  <span class="hljs-title function_">rc4</span><span class="hljs-params">(<span class="hljs-type">char</span>* data)</span><br>&#123;<br> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> sbox[<span class="hljs-number">257</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i, j, k;<br> <span class="hljs-type">int</span> tmp;<br> <span class="hljs-type">char</span> key[] = &#123; <span class="hljs-number">93</span> ,<span class="hljs-number">66</span>,<span class="hljs-number">98</span>,<span class="hljs-number">41</span>,<span class="hljs-number">3</span>,<span class="hljs-number">54</span>,<span class="hljs-number">71</span>,<span class="hljs-number">65</span>,<span class="hljs-number">21</span>,<span class="hljs-number">54</span> &#125;;<br> <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br> <span class="hljs-type">char</span>* p = data;<br><br> <span class="hljs-keyword">while</span> (*p)<br> &#123;<br>  len++;<br>  p++;<br> &#125;<br> <span class="hljs-comment">//printf(&quot;len:%d\n&quot;, len);</span><br> <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; size1; i++) &#123;<br>  sbox[i] = i;<br> &#125;<br><br> j = k = <span class="hljs-number">0</span>;<br> <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; size1; i++) &#123;<br>  tmp = sbox[i];<br>  j = (<span class="hljs-number">2</span> * j + tmp + key[k]) % size1;<br>  sbox[i] = sbox[j];<br>  sbox[j] = tmp;<br>  <span class="hljs-keyword">if</span> (++k &gt;= <span class="hljs-number">10</span>)<br>   k = <span class="hljs-number">0</span>;<br> &#125;<br> j = k = <span class="hljs-number">0</span>;<br> <span class="hljs-type">int</span> R;<br> <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>  j = (j + k) % size1;<br>  k = (k + sbox[j]) % size1;<br><br>  tmp = sbox[j];<br>  sbox[j] = sbox[k];<br>  sbox[k] = tmp;<br><br><br>  R = sbox[(sbox[j] + sbox[k] + k) % size1];<br>  data[i] -= (i % <span class="hljs-number">13</span>);<br>  data[i] ^= R ;<br>  <br> &#125;<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br> <span class="hljs-type">char</span> enc[]=&#123; <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xEC</span>, <br>  <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xDA</span>, <br>  <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xC6</span>, <br>  <span class="hljs-number">0x31</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x37</span>, <br>  <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x58</span>&#125;;<br> rc4(enc);<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,enc);<br>&#125; <br></code></pre></td></tr></table></figure></li></ul><h2 id="ez_exe"><a class="markdownIt-Anchor" href="#ez_exe"></a> ez_exe</h2><ul><li><p>这是一个Python打包而成的exe文件，利用python进行解出源码，之后运行程序，得到需要同样方法解密bin2</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307092218547.png" alt="image-20230709221810499" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ctypes<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> wintypes<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> Structure<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> _STARTUPINFO<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> _PROCESS_INFORMATION<br><br>StartupInfo = _STARTUPINFO()<br>ProcessInfo = _PROCESS_INFORMATION()<br><br>key1 = md5(<span class="hljs-string">b&#x27;bin1bin1bin1&#x27;</span>).hexdigest().encode()<br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;bin1&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br><br>arr = [key1[i % <span class="hljs-built_in">len</span>(key1)] ^ file[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(file))]<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;bin1&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(<span class="hljs-built_in">bytes</span>(arr))<br><br>time.sleep(<span class="hljs-number">0</span>)<br><br>bet = ctypes.windll.kernel32.CreateProcessA(<span class="hljs-string">b&#x27;bin1&#x27;</span>, ctypes.c_int(<span class="hljs-number">0</span>), ctypes.c_int(<span class="hljs-number">0</span>), ctypes.c_int(<span class="hljs-number">0</span>), ctypes.c_int(<span class="hljs-number">0</span>), ctypes.c_int(<span class="hljs-number">0</span>), ctypes.c_int(<span class="hljs-number">0</span>), ctypes.c_int(<span class="hljs-number">0</span>), byref(StartupInfo), byref(ProcessInfo))<br><br>ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ProcessInfo.hProcess), ctypes.c_int(-<span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;bin1&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(file)<br></code></pre></td></tr></table></figure></li></ul><h3 id="法1"><a class="markdownIt-Anchor" href="#法1"></a> 法1</h3><ul><li><p>之后查看源码的字节码，得到加密过程为根据密钥进行异或处理，然后再对bin2进行解密，得到bin_dump文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br>key1 = <span class="hljs-built_in">bytes</span>(md5(<span class="hljs-string">b&quot;bin2bin2bin2&quot;</span>).hexdigest().encode())<br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;bin2&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()<br>arr = [key1[i % <span class="hljs-built_in">len</span>(key1)] ^ file[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(file))]<br><span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;bin_dump&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>).write(<span class="hljs-built_in">bytes</span>(arr))<br></code></pre></td></tr></table></figure></li></ul><h3 id="法2"><a class="markdownIt-Anchor" href="#法2"></a> 法2</h3><ul><li><p>观察源码，这是先解密，之后再加密的操作，这里直接把<strong>pyc</strong>里的密钥<code>bin1</code>改成<code>bin2</code>，加密后的结果存储在<code>bin3</code>中，然后使用python3.11运行pyc文件</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307092300898.png" alt="image-20230709230022851" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307092300148.png" alt="image-20230709230031072" /></p></li><li><p>报错，但是可以用，之后就是正常解密后的bin2文件了</p></li></ul><h3 id="exp-5"><a class="markdownIt-Anchor" href="#exp-5"></a> exp</h3><ul><li><p>得到的bin_dump是一个32位exe文件，其中进行了<a href="https://blog.csdn.net/libinjlu/article/details/43030369">btea加密</a>，直接获取数据解密即可</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307092241730.png" alt="image-20230709224140685" /></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#include &lt;iostream&gt;</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><br>using namespace std;<br><br><span class="hljs-comment">#include &lt;stdint.h&gt;</span><br><br>//delta changed<br><span class="hljs-comment">#define DELTA 0x7937B99E</span><br><span class="hljs-comment">#define MX (((z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span><br><br>void btea(uint32_t* v, <span class="hljs-built_in">int</span> n, uint32_t const key[<span class="hljs-number">4</span>]) &#123;<br>uint32_t y, z, <span class="hljs-built_in">sum</span>;<br>unsigned p, rounds, e;<br><span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) &#123;          /* Coding Part */<br>rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br>z = v[n - <span class="hljs-number">1</span>];<br>do &#123;<br><span class="hljs-built_in">sum</span> += DELTA;<br>e = (<span class="hljs-built_in">sum</span> &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br><span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; p &lt; n - <span class="hljs-number">1</span>; p++) &#123;<br>y = v[p + <span class="hljs-number">1</span>];<br>z = v[p] += MX;<br>&#125;<br>y = v[<span class="hljs-number">0</span>];<br>z = v[n - <span class="hljs-number">1</span>] += MX;<br>&#125; <span class="hljs-keyword">while</span> (--rounds);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &lt; -<span class="hljs-number">1</span>) &#123;  /* Decoding Part */<br>n = -n;<br>//<span class="hljs-built_in">round</span> changed <br>rounds =  <span class="hljs-number">52</span> / n;<br><span class="hljs-built_in">sum</span> = rounds * DELTA;<br>y = v[<span class="hljs-number">0</span>];<br>do &#123;<br>e = (<span class="hljs-built_in">sum</span> &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br><span class="hljs-keyword">for</span> (p = n - <span class="hljs-number">1</span>; p &gt; <span class="hljs-number">0</span>; p--) &#123;<br>z = v[p - <span class="hljs-number">1</span>];<br>y = v[p] -= MX;<br>&#125;<br>z = v[n - <span class="hljs-number">1</span>];<br>y = v[<span class="hljs-number">0</span>] -= MX;<br>&#125; <span class="hljs-keyword">while</span> ((<span class="hljs-built_in">sum</span> -= DELTA) != <span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">int</span> main()<br>&#123;<br>uint32_t key[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>key[<span class="hljs-number">0</span>] = <span class="hljs-number">0x4B5F</span>;<br>key[<span class="hljs-number">1</span>] = <span class="hljs-number">0xDEAD</span>;<br>key[<span class="hljs-number">2</span>] = <span class="hljs-number">0x11ED</span>;<br>key[<span class="hljs-number">3</span>] = <span class="hljs-number">0xB3CC</span>;<br>uint32_t v5[<span class="hljs-number">11</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>v5[<span class="hljs-number">0</span>] = <span class="hljs-number">0xCC45699D</span>;<br>v5[<span class="hljs-number">1</span>] = <span class="hljs-number">0x683D5352</span>;<br>v5[<span class="hljs-number">2</span>] = <span class="hljs-number">0xB8BB71A0</span>;<br>v5[<span class="hljs-number">3</span>] = <span class="hljs-number">0xD3817AD</span>;<br>v5[<span class="hljs-number">4</span>] = <span class="hljs-number">0x7547E79E</span>;<br>v5[<span class="hljs-number">5</span>] = <span class="hljs-number">0x4BDD8C7C</span>;<br>v5[<span class="hljs-number">6</span>] = <span class="hljs-number">0x95E25A81</span>;<br>v5[<span class="hljs-number">7</span>] = <span class="hljs-number">0xC4525103</span>;<br>v5[<span class="hljs-number">8</span>] = <span class="hljs-number">0x7049B46F</span>;<br>v5[<span class="hljs-number">9</span>] = <span class="hljs-number">0x5417F77C</span>;<br>v5[<span class="hljs-number">10</span>] = <span class="hljs-number">0x65567138</span>;<br>btea(v5, -<span class="hljs-number">11</span>, key);<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">44</span>; i++)<br>&#123;<br>printf(<span class="hljs-string">&quot;%c&quot;</span>,*((char *)v5 +i) &amp; <span class="hljs-number">0xff</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="cap"><a class="markdownIt-Anchor" href="#cap"></a> cap</h2><ul><li><p>程序主逻辑：程序截图并进行处理保存为cap.bin(对于API的查找发现这里一起调用最终会实现屏幕图像截取的功能，这里最终会生成一个bmp文件)</p></li><li><p>首先查看cap.bin文件</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307101540001.png" alt="image-20230710154058936" /></p></li><li><p>之后动调程序，发现在程序中进行了异或处理，对于异或数值的观察中发现，这里异或的对象中出现了(0x42,0x4D—这是bmp文件的首部标识)，同时出现了nc_by_dasctf的可能异或密钥的字符</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307101552629.png" alt="image-20230710155205577" /></p></li><li><p>之后对于文件进行逐一字符查看，最后看出这是对于cap.bin文件的异或处理</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307101554841.png" alt="img" /></p></li><li><p>之后从密钥第二位开始，循环异或。注意这里需要使用最开始的cap.bin进行操作，因为每次运行re3.exe，就是进行截屏操作，所以需要使用最开始的cap.bin文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">key = <span class="hljs-string">&quot;enc_by_dasctf&quot;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;cap.bin&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    s = <span class="hljs-built_in">bytearray</span>(f.read())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>    s[i] ^= <span class="hljs-built_in">ord</span>(key[(i+<span class="hljs-number">1</span>) % <span class="hljs-built_in">len</span>(key)])<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.bmp&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(s)<br></code></pre></td></tr></table></figure><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307101559824.png" alt="image-20230710155936627" /></p></li></ul><h2 id="unsym"><a class="markdownIt-Anchor" href="#unsym"></a> unsym</h2><ul><li><p>go语言逆向，使用 <code>go_parser</code> 恢复符号表，之后在main_main中发现了65537，同时其中与大整数相关，猜测可能与RSA有关</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307101607362.png" alt="image-20230710160723312" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307101607433.png" alt="image-20230710160744386" /></p></li><li><p>之后查看程序的逻辑流程，发现通过RSA判断KEY的正确性，右边是KEY正确的路径</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307101613005.png" alt="image-20230710161319957" /></p></li><li><p>后来对文件message进行AES(CBC)加密，之后保存为encrypted.bin文件</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307101615358.png" alt="image-20230710161513312" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202307101615248.png" alt="image-20230710161538200" /></p></li><li><p>之后写脚本进行解密工作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>n = <span class="hljs-number">0x1d884d54d21694ccd120f145c8344b729b301e782c69a8f3073325b9c5</span><br>p = <span class="hljs-number">37636318457745167234140808130156739</span><br>q = <span class="hljs-number">21154904887215748949280410616478423</span><br>c = <span class="hljs-number">0xfad53ce897d2c26f8cad910417fbdd1f0f9a18f6c1748faca10299dc8</span><br>e = <span class="hljs-number">0x10001</span><br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>d = gmpy2.invert(e, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br><br>password = long_to_bytes(m)  <span class="hljs-comment"># 秘钥必须为 16 字节或者 16 字节的倍数的字节型数据</span><br>iv = long_to_bytes(m)  <span class="hljs-comment"># iv 偏移量，bytes 类型</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;encrypted.bin&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    en_text = f.read()<br>aes = AES.new(password, AES.MODE_CBC, iv)  <span class="hljs-comment"># CBC 模式下解密需要重新创建一个 aes 对象</span><br>de_text = aes.decrypt(en_text)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;decrypt.exe&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(de_text)<br></code></pre></td></tr></table></figure></li><li><p>运行decrypt.exe得到了flag</p></li></ul><h1 id="vnctf2023"><a class="markdownIt-Anchor" href="#vnctf2023"></a> VNCTF2023</h1><h1 id="西湖论剑2023"><a class="markdownIt-Anchor" href="#西湖论剑2023"></a> 西湖论剑2023</h1><h1 id="ciscn"><a class="markdownIt-Anchor" href="#ciscn"></a> CISCN</h1>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>操作系统</title>
    <link href="/posts/d04bd5bc.html"/>
    <url>/posts/d04bd5bc.html</url>
    
    <content type="html"><![CDATA[<h1 id="概论"><a class="markdownIt-Anchor" href="#概论"></a> 概论</h1><h2 id="问题相关"><a class="markdownIt-Anchor" href="#问题相关"></a> 问题相关</h2><ul><li>操作系统的定义、功能、特征及其含义  P1-2-3-5</li><li>操作系统的分类及其特点，实时、分时、网络、嵌入式等  P11</li><li>操作系统的接口有哪些  P15</li><li>操作系统的发展、功能及特点，并发、共享、异步(随机)、虚拟各有什么含义  P9</li><li>了解现在热门的操作系统、国产操作系统</li></ul><h3 id="操作系统"><a class="markdownIt-Anchor" href="#操作系统"></a> 操作系统</h3><ul><li>定义：操作系统是一组计算机程序的集合，主要用以控制和管理计算机的硬件和软件资源，合理地组织计算机的工作流程， 向应用程序和用户提供方便、快捷、友好的使用接口</li><li>特征：<ul><li>并发性–两个或多个事件在同一时间间隔内发生</li><li>共享性–共享计算机的硬件和软件资源，分为互斥共享方式和交替共享方式</li><li>随机性(异步性)–每道程序在何时运行，各个程序运行的顺序，以及每道程序所需的时间都是不确定的，也是不可预知的</li><li>虚拟性–将一个物理实体映射为一个或多个逻辑对象</li></ul></li><li>接口：<ul><li>程序接口：系统调用，API</li><li>操作接口：命令界面，图形界面，作业控制命令</li></ul></li></ul><h1 id="进程管理"><a class="markdownIt-Anchor" href="#进程管理"></a> 进程管理</h1><h2 id="问题相关-2"><a class="markdownIt-Anchor" href="#问题相关-2"></a> 问题相关</h2><ul><li>顺序执行、并发执行、并行执行  P31</li><li>进程的概念与特征，与程序的区别与联系，进程与线程的区别与联系，进程上下文  P33-70</li><li>三态模型、五态模型及七态模型的状态转化  P34-35-36</li><li>什么是进程控制块？包含哪些信息？有什么功能？  P36</li><li>同步与互斥概念，饥饿与死锁概念，临界区与临界资源概念，临界区调度原则与管理方法  P40-41-42</li><li>进程通信的机制及对应的工作原理(重点管道通信)  P52</li><li>进程调度模型及其对应的主要功能  P56</li><li>死锁产生的四个必要条件，预防、避免、检测及接触死锁对应的方法  P65</li></ul><h3 id="执行"><a class="markdownIt-Anchor" href="#执行"></a> 执行</h3><ul><li>顺序执行：<ul><li>一个具有独立功能的程序独占处理器直至最终结束的过程称为程序的顺序执行</li><li>顺序性，封闭性、可再现性</li></ul></li><li>并发执行：<ul><li>多个事件在同一时期内发生</li><li>本质是一个CPU在多个程序运行过程中的时分复用</li><li>间断性、开放性、不可再现性</li></ul></li></ul><h3 id="进程"><a class="markdownIt-Anchor" href="#进程"></a> 进程</h3><ul><li><p>引入目的：</p><ul><li>使多个程序并发运行，以改善资源利用率及提高系统的吞吐量</li></ul></li><li><p>定义：</p><ul><li>可并发运行的程序在某个数据集合上的一次运行过程，是操作系统资源分配、保护和调度的基本单位</li></ul></li><li><p>特征：</p><ul><li>结构性、动态性、独立性、并发性</li></ul></li><li><p>进程上下文</p><ul><li>进程的生命周期中，进程实体和支持执行进程的环境合称为进程上下文</li><li>用户级上下文、系统级上下文、寄存器上下文</li></ul></li></ul><h3 id="线程"><a class="markdownIt-Anchor" href="#线程"></a> 线程</h3><ul><li>引入目的：<ul><li>减少程序并发运行时所付出的时空开销</li></ul></li><li>定义：<ul><li>线程是操作系统进程中除处理器外的资源分配和保护的单位，它有一个独立的虚拟地址空间，用来容纳进程映像。</li><li>这是CPU调度的基本单位</li></ul></li></ul><h3 id="pcb"><a class="markdownIt-Anchor" href="#pcb"></a> PCB</h3><ul><li>进程控制块—为了描述和控制进程运行的数据结构<ul><li>记录了描述进程的当前状态以及控制进程运行的信息，主要包括进程标识信息、现场信息和控制信息。</li></ul></li></ul><h3 id="进程调度"><a class="markdownIt-Anchor" href="#进程调度"></a> 进程调度</h3><ul><li>高级调度(作业调度)</li><li>中级调度(平衡调度，内存调度)</li><li>低级调度(进程调度)</li></ul><h3 id="互斥与同步"><a class="markdownIt-Anchor" href="#互斥与同步"></a> 互斥与同步</h3><h4 id="竞争和协作"><a class="markdownIt-Anchor" href="#竞争和协作"></a> 竞争和协作</h4><ul><li>死锁：一组进程都陷入永远等待的状态</li><li>饥饿：被调度程序长期忽视</li><li>协作—同步：一个进程的执行依赖于其协作进程的消息或信号</li><li>竞争—互斥：互斥也是一种特殊的同步——以一定次序协调地使用共享资源</li></ul><h4 id="临界"><a class="markdownIt-Anchor" href="#临界"></a> 临界</h4><ul><li>临界资源：<ul><li>在某段时间内只能允许一个进程使用的资源</li><li>几个进程若共享同一临界资源，它们必须以互斥的方式使用这个临界资源</li></ul></li><li>临界区：<ul><li>进程中访问临界资源的代码段</li></ul></li></ul><h3 id="进程通信"><a class="markdownIt-Anchor" href="#进程通信"></a> 进程通信</h3><ul><li>消息传递通信<ul><li>直接通信</li><li>间接通信</li></ul></li><li>共享内存通信<ul><li>基于共享数据结构的通信方式—低效</li><li>基于共享存储区的通信方式—建立，管理，映射与断开</li></ul></li><li>管道通信<ul><li>实质为一个共享文件，物理上是由文件系统的高速缓冲区完成</li></ul></li></ul><h2 id="考试要点"><a class="markdownIt-Anchor" href="#考试要点"></a> 考试要点</h2><ol><li>信号量机制解决进程同步互斥问题：信号量(记录性数据结构)及其取值范围，P、V操作及含义，P、V操作解决同步互斥问题的方法流程  P45</li><li>调度算法：<code>非抢占式</code>(FCFS、SJF、HRRF)，<code>抢占式</code>(SRTF、HPF、RR、MFQ)，作业或者进程的执行顺序，计算周转时间及带权周转时间  P 58</li><li>死锁的避免：银行家算法及安全性测试算法  P67</li></ol><h3 id="信号量机制"><a class="markdownIt-Anchor" href="#信号量机制"></a> 信号量机制</h3><h4 id="含义"><a class="markdownIt-Anchor" href="#含义"></a> 含义</h4><ul><li><p>信号量s — 信号量表示系统资源的实体</p><ul><li>记录型数据结构，一个分量为信号量的值，一个分量是在信号量关联资源上阻塞的进程队列的队头指针。</li><li>三种操作进行修改：赋初值，P操作，V操作。</li><li>主要作用是封锁临界区、 进程同步和维护资源计数</li></ul></li><li><p>P、V操作— <strong>书P45</strong></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202305052356101.png" alt="image-20230505235624964" /></p><ul><li><p>P(s)：将信号量s减1……</p></li><li><p>V(s)：将信号量s加1……</p></li><li><p>补充定义— <strong>书P46</strong></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202305052356855.png" alt="image-20230505235642802" /></p></li></ul></li></ul><h4 id="方法流程"><a class="markdownIt-Anchor" href="#方法流程"></a> 方法流程</h4><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304301031289.png" alt="image-20230430103109210" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304301037878.png" alt="image-20230430103735854" /></p><ul><li>经典问题<ul><li>生产者-消费者问题</li><li>多生产者-多消费者问题</li><li>读者-写者问题</li><li>哲学家就餐问题</li><li>睡眠理发师问题</li></ul></li></ul><h3 id="调度算法"><a class="markdownIt-Anchor" href="#调度算法"></a> 调度算法</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304301124647.png" alt="image-20230430112422583" /></p><ul><li>周转时间和带权周转时间越小越好</li></ul><h4 id="非抢占式"><a class="markdownIt-Anchor" href="#非抢占式"></a> 非抢占式</h4><h5 id="fcfs"><a class="markdownIt-Anchor" href="#fcfs"></a> FCFS</h5><ul><li>先来先服务(First-Come First-Served)</li></ul><h5 id="sjf"><a class="markdownIt-Anchor" href="#sjf"></a> SJF</h5><ul><li>短作业优先(Shortest-Job-First)</li></ul><h5 id="hrrf"><a class="markdownIt-Anchor" href="#hrrf"></a> HRRF</h5><ul><li>高响应比优先(Highest Response Ratio First)</li><li>响应比 = 1 + (已等待时间 / 估计运行时间)</li></ul><h4 id="抢占式"><a class="markdownIt-Anchor" href="#抢占式"></a> 抢占式</h4><h5 id="srtf"><a class="markdownIt-Anchor" href="#srtf"></a> SRTF</h5><ul><li>最短剩余时间优先(Shortest Remaining Time First)</li></ul><h5 id="hpf"><a class="markdownIt-Anchor" href="#hpf"></a> HPF</h5><ul><li>优先权(Highest-Priority-First)</li><li>静态优先权和动态优先权</li></ul><h5 id="rr"><a class="markdownIt-Anchor" href="#rr"></a> RR</h5><ul><li>时间片轮转(Round-Ribon)</li></ul><h5 id="mfo"><a class="markdownIt-Anchor" href="#mfo"></a> MFO</h5><ul><li>多级反馈队列(Multilevel-Feed-Queue)</li></ul><h3 id="死锁"><a class="markdownIt-Anchor" href="#死锁"></a> 死锁</h3><h4 id="原因"><a class="markdownIt-Anchor" href="#原因"></a> 原因</h4><ul><li>并发进程对临界资源的竞争 和 并发进程推进顺序不当</li></ul><h4 id="发生的必要条件"><a class="markdownIt-Anchor" href="#发生的必要条件"></a> 发生的必要条件</h4><ul><li>互斥条件：资源的使用互斥的</li><li>请求与保持条件：一个进程得到资源并再请求资源时，若请求的资源不能得到，已得到的资源也不会释放</li><li>不剥夺条件：当进程得到资源后，只能由其自身主动释放，系统或其他进程正在占用的资源，形成永远等待</li><li>环路等待条件：系统中若干进程形成环路，每个进程都在等待相邻进程正在占用的资源，形成永远等待</li></ul><h4 id="检测与解除"><a class="markdownIt-Anchor" href="#检测与解除"></a> 检测与解除</h4><ul><li>重启，撤销，剥夺，回滚</li></ul><h4 id="死锁的避免"><a class="markdownIt-Anchor" href="#死锁的避免"></a> 死锁的避免</h4><ul><li>银行家算法<ul><li>Claim Possession Shortage Available</li></ul></li></ul><h1 id="内存管理"><a class="markdownIt-Anchor" href="#内存管理"></a> 内存管理</h1><h2 id="问题相关-3"><a class="markdownIt-Anchor" href="#问题相关-3"></a> 问题相关</h2><ul><li><p>内存管理四大功能  P96</p></li><li><p>地址的表示(逻辑地址空间、物理地址空间)  P98</p></li><li><p>重定位，静态重定位，动态重定位  P99</p></li><li><p>单一连续内存管理、固定分区管理、可变分区管理：  P102</p><p>内存的分配与回收，地址转换，优缺点分析，可变分区的内存分配算法</p></li><li><p>程序的局部性原理，虚拟存储的基本思想，虚拟存储器  P119</p></li><li><p>页式存储管理与请求页式管理的区别与联系？两种管理方式下页表机制和地址转换过程有何不同？</p></li><li><p>请求页式虚拟存储管理的页面分配策略、页面调入策略、页面置换策略  P124</p></li><li><p>段式管理的基本思想，其与页式管理有何区别，段式与段页式、请求段式管理、请求段页式管理的区别与联系</p></li><li><p>各种内存管理方式中的”碎片“问题如何解决</p></li></ul><h3 id="功能"><a class="markdownIt-Anchor" href="#功能"></a> 功能</h3><ul><li>内存的分配和回收</li><li>实现地址转换</li><li>内存的共享和保护</li><li>内存扩充</li></ul><h3 id="地址重定位"><a class="markdownIt-Anchor" href="#地址重定位"></a> 地址重定位</h3><ul><li>地址转换(地址重定位)：把程序和数据的逻辑地址转换为物理地址</li><li>静态重定位：<ul><li>在用户作业装入内存时由装入程序实现从逻辑地址到物理地址的转换，地址转换在作业执行前一次完成</li><li>缺点：必须为程序分配一段连续的存储空间</li></ul></li><li>动态重定位：<ul><li>在程序执行过程中，CPU在访问程序和数据之前才实现从逻辑地址到物理地址的转换</li><li>优点：内存的使用更加灵活，容易实现内存的动态扩充和共享</li></ul></li></ul><h3 id="覆盖和交换"><a class="markdownIt-Anchor" href="#覆盖和交换"></a> 覆盖和交换</h3><ul><li>覆盖技术<ul><li>让不同时运行的程序段先后共享同一块内存区域</li></ul></li><li>交换技术<ul><li>内存和外存的交换</li></ul></li></ul><h3 id="程序的局部性原理"><a class="markdownIt-Anchor" href="#程序的局部性原理"></a> 程序的局部性原理</h3><ul><li>时间局部性：<ul><li>程序中的某条指令一旦被执行，则不久之后该指令可能再次被执行；如果某数据被访问，则不久之后该数据可能再次被访问</li></ul></li><li>空间局部性：<ul><li>一旦程序访问了某个存储单元，则不久之后其附近的存储单元也将被访问</li></ul></li></ul><h3 id="虚拟存储器"><a class="markdownIt-Anchor" href="#虚拟存储器"></a> 虚拟存储器</h3><ul><li>定义：<ul><li>具有请求调入功能和置换功能，能够从逻辑上对内存空间进行扩展，允许用户的逻辑地址空间大于物理内存地址空间的存储器系统</li></ul></li></ul><h2 id="考试要点-2"><a class="markdownIt-Anchor" href="#考试要点-2"></a> 考试要点</h2><ol><li>地址转换：页式管理和请求页式虚拟存储管理中的逻辑地址转化为物理地址(页号、页内偏移量以及所占位数)，快表的地址转换过程，多级页表的地址转换过程</li><li>页面置换：置换算法(FIFO、OPT、LRU、Clock)，算法流程、缺页次数及缺页率计算—添加(前几次也是缺页，但是不统计)</li></ol><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202305061034871.png" alt="image-20230506103405823" /></p><h1 id="设备管理"><a class="markdownIt-Anchor" href="#设备管理"></a> 设备管理</h1><h2 id="问题相关-4"><a class="markdownIt-Anchor" href="#问题相关-4"></a> 问题相关</h2><ul><li>设备的不同分类方法  P151</li><li>设备管理四大功能  P153</li><li>设备控制方法(四种)，工作原理以及优缺点分析  P154</li><li>缓冲技术的作用、不同缓冲技术的工作机制  P159</li><li>输入输出软件的层次及相应的功能  P163</li><li>设备分配与回收时使用的数据结构、设备分配策略  P166</li><li>SPOOLing技术的功能和基本思想，如何实现共享打印机  P168</li></ul><h3 id="设备分类"><a class="markdownIt-Anchor" href="#设备分类"></a> 设备分类</h3><ul><li>按服务功能分类<ul><li>存储类设备</li><li>输入/输出类设备</li><li>通信类设备</li></ul></li><li>按每次信息交换的单位分类<ul><li>字符设备</li><li>块设备</li></ul></li><li>按使用特征分类(这里注意SPOOLing技术的特点)<ul><li>独占设备</li><li>共享设备</li><li>虚拟设备</li></ul></li></ul><h3 id="设备管理功能"><a class="markdownIt-Anchor" href="#设备管理功能"></a> 设备管理功能</h3><ul><li>设备的分配与回收</li><li>缓冲区管理</li><li>设备控制和中断处理</li><li>实现虚拟设备</li></ul><h3 id="设备控制方法"><a class="markdownIt-Anchor" href="#设备控制方法"></a> 设备控制方法</h3><p>​输入输出控制在计算机处理中具有重要的地位，随着计算机结构和软硬件技术的发展，产生了不同的控制方法。按照 I/O 控制器与 CPU 之间联系方式的不同，可把 I/O 设备的控制方式分为四类</p><ul><li>查询方式 - 程序循环查询方式<ul><li><strong>优点</strong>：控制简单</li><li><strong>缺点</strong>：但是 CPU 极大浪费</li></ul></li><li>中断方式 - 中断驱动方式<ul><li><strong>优点</strong>：消除了设备驱动程序不断地轮询<strong>控制器</strong>和<strong>状态寄存器</strong>的开销，提高 CPU 的利用率，提高整个系统资源的利用率及吞吐量</li></ul></li><li>DMA方式 - 直接内存访问方式<ul><li><strong>本质</strong>：通过 DMA控制器DMAC 控制从内存向设备输入输出</li><li><strong>特点</strong>：<ol><li>数据传输的基本单位是<strong>数据块</strong>，即每次传送至少一个数据块。</li><li>所传送的数据是从设备直接送入内存，或者直接读出内存的</li><li>在传输时CPU参与更少，仅在传送一个或多个数据块的开始和结束时，才需CPU干预，整块数据的传送是在控制器的控制下完成的</li></ol></li><li><strong>优点</strong>：进一步提高了 CPU 与 I/O 设备的并行操作程度</li></ul></li><li>通道方式<ul><li><strong>通道分类</strong>：字节多路通道，选择通道，成组多路通道</li><li><strong>优点</strong>：进一步减少 CPU 的干预</li></ul></li></ul><p>​主要差别在于中央处理器和外围设备并行工作的方式不同，并行工作的程度不同。</p><h3 id="缓冲技术"><a class="markdownIt-Anchor" href="#缓冲技术"></a> 缓冲技术</h3><ul><li><p>作用</p><ul><li>它能改善中央处理器与外围设备之间速度不匹配的矛盾，提高 CPU 和I/O 设备的并行性。</li><li>它能减少 I/O 对 CPU 的中断次数和放宽对 CPU 中断响应时间的要求。</li><li>缓冲技术还能协调逻辑记录大小与物理记录大小不一致的问题。</li></ul></li><li><p>分类</p><ul><li>根据缓冲性质<ul><li>硬件缓冲：以专用的寄存器作为缓冲器</li><li>软件缓冲：在内存中划出若干个单元作为缓冲区</li></ul></li><li>根据缓冲区个数的多少和结构<ul><li>单缓冲<ul><li>输入和输出实际上是串行工作</li></ul></li><li>双缓冲<ul><li>两个缓冲区交替使用</li></ul></li><li>多缓冲<ul><li>循环缓冲</li><li>缓冲池</li></ul></li></ul></li></ul></li></ul><h3 id="输入输出软件"><a class="markdownIt-Anchor" href="#输入输出软件"></a> 输入输出软件</h3><ul><li>层次结构(自底向上)<ul><li>中断处理程序</li><li>设备驱动程序</li><li>设备独立性程序</li><li>用户 I/O 软件</li></ul></li></ul><h3 id="设备分配与回收"><a class="markdownIt-Anchor" href="#设备分配与回收"></a> 设备分配与回收</h3><ul><li>设备分配策略—由设备本身属性分类而来<ul><li>独占方式</li><li>共享方式</li><li>虚拟方式</li></ul></li><li>SPOOLing 技术<ul><li>重点：<ul><li>在多道程序技术中，利用其中一道程序模拟脱机输入输出时的外围控制机功能，实现脱机输入输出技术</li><li>外围操作与CPU对数据的处理同时进行，这种在联机情况下实现的同时外围操作称为SPOOLing，或称为假脱机系统</li></ul></li><li><strong>特点</strong>：<ol><li>提高了I/O的速度，缓和了高速的处理器与低速输入输出设备之间的矛盾</li><li>将独占设备改造为共享设备，提高了设备的利用率</li><li>实现了虚拟设备功能，将物理的单个设备变换为多个对应的逻辑设备</li></ol></li><li>应用：<ul><li>共享打印机—守护进程和SPOOLing目录<ul><li>通过禁止用户直接使用打印机设备解决了打印机的独占问题</li></ul></li></ul></li></ul></li></ul><h1 id="文件系统"><a class="markdownIt-Anchor" href="#文件系统"></a> 文件系统</h1><h2 id="考试要点-3"><a class="markdownIt-Anchor" href="#考试要点-3"></a> 考试要点</h2><ol><li>文件的物理结构：根据文件的物理组织情况，计算所支持文件的大小；对于一个给定大小的文件，计算其占用物理盘块情况</li></ol><h2 id="问题相关-5"><a class="markdownIt-Anchor" href="#问题相关-5"></a> 问题相关</h2><ul><li>文件系统基本功能  P199</li><li>文件的逻辑结构和物理结构定义及分类  P201</li><li>记录式文件的组织方式有哪些，各有什么特点  P204</li><li>文件的存储方法、文件存储空间的分配及管理  P213</li><li>文件目录和目录文件的区别与联系    P217</li><li>目录的结构与检索  P217</li><li>文件系统调用的实现  P225</li><li>文件的共享  P230</li></ul><h3 id="基本功能"><a class="markdownIt-Anchor" href="#基本功能"></a> 基本功能</h3><ol><li>实现文件的“按名存取”功能</li><li>实现能够快速定位文件的目录结构；考虑如何组织目录文件</li><li>向用户提供一套使用方便、简单的操作命令</li><li>管理磁盘、磁带等组成的文件存储器</li><li>…………</li></ol><h3 id="文件分类"><a class="markdownIt-Anchor" href="#文件分类"></a> 文件分类</h3><ul><li>按照<strong>文件的逻辑结构</strong>的不同(对比文件<strong>按照外存物理块分配方式的不同</strong>分类—物理结构)<ul><li>流式文件(无结构)</li><li>纪录式文件(有结构)</li></ul></li><li>按照用途<ul><li>系统文件、库文件和用户文件</li></ul></li><li>按照性质<ul><li>普通文件</li><li>目录文件</li><li>特殊文件</li></ul></li></ul><h3 id="纪录式文件"><a class="markdownIt-Anchor" href="#纪录式文件"></a> 纪录式文件</h3><p>有结构的文件</p><h4 id="组织方式分类"><a class="markdownIt-Anchor" href="#组织方式分类"></a> 组织方式分类</h4><ul><li>顺序文件<ul><li>记录之间按某种顺序排列组织所形成的文件</li><li>存取方式：<ul><li>顺序存取</li><li>直接存取</li></ul></li><li><strong>优点</strong>：<ul><li>适合大量记录批量存取的场合</li><li>只有顺序文件才能被存储在磁带上</li></ul></li><li><strong>缺点</strong>：<ul><li>不适合交互系统中用户要求查找或修改单个记录的情况</li><li>增删记录比较困难</li></ul></li></ul></li><li>索引文件<ul><li>索引文件可以根据不同的关键字建立索引，形成包含多个索引表的索引文件</li><li><strong>优点</strong>：<ul><li>通过建立索引极大地提高了对文件的查找速度</li><li>对增加和删除记录也非常方便</li></ul></li><li><strong>缺点</strong>：存储开销变大，增删记录时还需要修改索引表</li></ul></li><li>索引顺序文件<ul><li>将顺序文件中的多个记录组合成一组，并对每一组记录建立一个索引，通过索引指针指向该记录组中的第一条记录</li><li><strong>优点</strong>：索引表占用空间小，同时查找效率比顺序文件又高，因此在文件记录比较多时采用索引顺序文件比较适合</li></ul></li></ul><h3 id="文件的物理结构"><a class="markdownIt-Anchor" href="#文件的物理结构"></a> 文件的物理结构</h3><p>​文件的物理结构不仅取决于存储介质的存储特性，还与采用的外存分配方式有关</p><ul><li>按照外存物理块分配方式的不同，文件的物理结构分类<ul><li>连续文件<ul><li><strong>优点</strong>：在顺序存取时速度较快，非常便于顺序访问</li></ul></li><li>链接文件<ul><li><strong>优点</strong>：<ul><li>能适应文件的动态增长</li><li>消除了磁盘的外部碎片</li><li>添加、删除和修改记录也更方便</li></ul></li><li>实现链接组织的方式<ul><li>隐式链接：每个物理块自身存放下一物理块的链接指针</li><li>显示链接：把用于链接文件的各物理块指针显式地放在内存 的一张表格中</li></ul></li></ul></li><li>索引文件<ul><li>索引表的索引形式<ul><li>无键索引表—适用于流式文件</li><li>有键索引表—适用于纪录式文件</li></ul></li><li><strong>优点</strong>:<ul><li>实现了离散分配</li><li>有利于直接存取</li></ul></li><li><strong>缺点</strong>：<ul><li>索引表增加了空间开销</li><li>索引表的查找增加了时间开销</li><li>不适合中小型文件，对于中小型文件会有空间的浪费</li></ul></li></ul></li><li>多级索引文件<ul><li>Unix中混合了四种寻址方式：直接寻址、一级索引寻址、二级索引寻址和三级索引寻址</li><li>解决以及索引文件存在的索引表过大占用物理块过多的问题</li></ul></li><li>直接文件<ul><li>利用哈希函数直接建立逻辑记录的关键字与其物理地址的对应关系的文件组织形式</li><li><strong>优点</strong>：<ul><li>记录在介质上不需要按序存放，因为它能根据关键字直接计算出物理地址，所以最适合直接存取</li><li>相对于索引文件，它不需索引，节省了索引存储空间和索引查找时间</li></ul></li></ul></li></ul></li></ul><h3 id="文件的存取方式"><a class="markdownIt-Anchor" href="#文件的存取方式"></a> 文件的存取方式</h3><ul><li>顺序存取</li><li>直接存取</li><li>按键存取</li></ul><h3 id="文件存储空间管理"><a class="markdownIt-Anchor" href="#文件存储空间管理"></a> 文件存储空间管理</h3><ul><li>磁盘空间的分配</li><li>磁盘空闲空间的有效管理<ul><li>空闲区表法</li><li>空闲块链表法</li><li>位示图法</li></ul></li></ul><h3 id="文件目录"><a class="markdownIt-Anchor" href="#文件目录"></a> 文件目录</h3><ul><li>任务<ul><li>对大量文件实施有效的管理</li><li>实现“按名存取”</li><li>提高对目录的检索速度</li><li>支持文件共享和文件重名</li></ul></li><li>FCB–用于描述和控制文件的数据结构<ul><li>有关文件存取控制的信息</li><li>有关文件结构的信息</li><li>有关文件使用的信息</li><li>有关文件管理的信息</li></ul></li><li>区别<ul><li>文件目录是文件控制块的有序集合，即一个文件控制块就是一个文件目录项。</li><li>文件目录以文件的形式保存在外存上的，这就形成了目录文件。</li></ul></li></ul><h3 id="文件的共享"><a class="markdownIt-Anchor" href="#文件的共享"></a> 文件的共享</h3><ul><li>静态共享<ul><li>硬链接<ul><li>基于索引节点的链接静态共享</li></ul></li><li>软连接<ul><li>符号链接静态共享</li></ul></li></ul></li><li>动态共享</li></ul>]]></content>
    
    
    <categories>
      
      <category>课程复习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>壳相关</title>
    <link href="/posts/6d13a265.html"/>
    <url>/posts/6d13a265.html</url>
    
    <content type="html"><![CDATA[<p><a href="https://ctf-wiki.org/reverse/windows/unpack/packer-introduction/">壳的介绍及脱壳技巧</a></p><h1 id="脱壳"><a class="markdownIt-Anchor" href="#脱壳"></a> 脱壳</h1><blockquote><p>以ESP定理为例</p></blockquote><ul><li><p>使用x32dbg脱壳时，一开始可能是 <code>jmp</code></p><ol><li><p><code>pushad</code> 可以在断点中找到，因为它是一次性断点，所以出现一次就过去了，可以在断点中找到，然后 <code>F4</code> 跳转</p></li><li><p>一直使用 <code>F9</code> 跳转可以找到 <code>pushad</code></p></li></ol></li><li><p>使用 <code>ESP定理</code> (在pushad之后ESP指向的内存中下硬件断点，之后 <code>F9</code> 跳转) 脱壳时，<code>popad</code> 后面跟着的可能不是主程序入口，这个时候需要查看上下文。一般情况下，<code>popad</code> 之后有一个大跳 (<code>jmp</code>)，跳转后 dump 即可</p><ol><li><code>jmp</code> 之后是 <code>call 函数</code> ，此为 VS 编译 OEP 的特征</li></ol></li><li><p>找到 <code>OEP</code> 之后，使用插件 <code>Scylla</code> 进行 <code>IAT Autosearch</code> 并 <code>Get Imports</code>，之后使用 dump 转储，得到 <code>dump.exe</code> 文件 (此文件可能不能运行，因为没有修复重定位表IAT)</p></li><li><p>然后依然在此插件中 (dbg不要关闭，否则定位不到OEP) 修复重定位表。点击 <code>Fix Dump</code>，得到的 <code>_SCY.exe</code> 文件即为可执行文件</p></li></ul><p>参考地址：<a href="https://www.52pojie.cn/thread-1534675-1-1.html">upx脱壳</a>，<a href="https://blog.csdn.net/weixin_46287316/article/details/109669066#">xdbg手动脱壳</a></p><h1 id="upx"><a class="markdownIt-Anchor" href="#upx"></a> UPX</h1><h2 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2><h2 id="去除-upx-特征"><a class="markdownIt-Anchor" href="#去除-upx-特征"></a> 去除 UPX 特征</h2><h3 id="区段名"><a class="markdownIt-Anchor" href="#区段名"></a> 区段名</h3><p>​<code>IMAGE_SECTION_HEADER SectionHeader</code> 字段</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304012357341.png" alt="image-20230401235746301" /></p><ul><li>upx 壳可以看到三个区段名<ul><li><code>UPX0</code> 和 <code>UPX1</code> 是加 UPX 壳后的两个区段名，<strong>可以被随意改成任何字符串</strong>，这样不会被 <code>./upx.exe -d [filename]</code> 识别<ul><li><code>UPX1</code> 区段包含了需要解压的数据块。</li></ul></li><li><code>UPX2</code> 是自身不含资源段程序加壳之后的结果，若是程序含有资源段，那么加壳之后是<code>.rsrc</code><ul><li><code>.rsrc</code> 是程序资源信息区段名，包含原资源段的完整头部、图标、Mainifst、版本等未被压缩的资源，还有UPX本身需要导入的信息等。</li></ul></li></ul></li></ul><h3 id="upx-header-字段"><a class="markdownIt-Anchor" href="#upx-header-字段"></a> <code>UPX Header</code> 字段</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304020917186.png" alt="image-20230402091703153" /></p><ul><li><code>3E 2E 30 32 00</code>- 版本</li><li><code>55 50 58 21</code> - UPX Tag</li><li><code>0D 09 08 07</code> - 版本代码、格式、压缩方式、压缩等级</li><li><code>0A 88 3F EF 02 D1 CF F7</code> - 压缩前和压缩后的hash</li><li><code>80 4A 0E 00</code> - 压缩前的长度</li><li><code>D5 40 04 00</code> - 压缩后的长度</li><li><code>81 B1 15 00</code> - 原文件长度</li><li><code>26 18 00 1C</code> - 压缩相关参数</li><li>UPX头是供 UPX 通过 <code>upx - d</code> 命令脱壳使用的，并不影响程序运行。全部抹零，则命令无效。</li></ul><h3 id="特征码"><a class="markdownIt-Anchor" href="#特征码"></a> 特征码</h3><ul><li>除了上面两个方面之外，exeinfo之类查壳程序还能识别出 UPX 壳，这是因为检测UPX是通过一些特征码来检测的。在 UPX 解压缩时，必然会使用一些汇编指令，这些指令的机器码就成为了用来检测 UPX 的特征码。修改特征码，达到保持汇编指令的含义不变，而使用别的指令。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">1. 特征码1:60 BE ?? ?? ?? 00 8D BE ?? ?? ?? FF<br><br>2. 特征码2:60 BE ?? ?? ?? ?? 8D BE ?? ?? ?? ?? 57 EB 0B 90 8A 06 46 88 07 47 01 DB 75 ?? 8B 1E 83 ?? ?? 11 DB 72 ?? B8 01 00 00 00 01 DB 75<br><br>3. 特征码3:55 FF 96 ?? ?? ?? ?? 09 C0 74 07 89 03 83 C3 04 EB ?? FF 96 ?? ?? ?? ?? 8B AE ?? ?? ?? ?? 8D BE 00 F0 FF FF BB 00 10 00 00 50 54 6A 04 53 57 FF D5 8D 87 ?? ?? 00 00 80 20 7F 80 60 28 7F 58 50 54 50 53 57 FF D5 58 61 8D 44 24 80 6A 00 39 C4 75 FA 83 EC 80<br></code></pre></td></tr></table></figure><ul><li>特征码1 / 特征码2</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304021005714.png" alt="image-20230402100545695" /></p><p>​特征码2也是 pushad 开头，是另外一种特征，这里没有显示</p><ul><li>特征码3</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304021014712.png" alt="image-20230402101429691" /></p><p>​特征码3 匹配到 popad 结尾</p><p>这里借鉴<a href="https://www.52pojie.cn/thread-326995-1-1.html">UPX防脱壳机脱壳、去除特征码、添加花指令小探 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><h3 id="移动pe头"><a class="markdownIt-Anchor" href="#移动pe头"></a> 移动PE头</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304020944416.png" alt="image-20230402094451392" /></p><ul><li>删除DOS存根，不影响程序运行，但是需要修改 PE入口地址，并且保证PE头的长度等于原来的DOS头加PE头的长度，不然之后的地址会出现问题。</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304020958802.png" alt="image-20230402095850765" /></p><ul><li>这里 DOS存根的大小是 0x40(x86文件)，删去之后修改 <code>PE头地址</code> 和 <code>可选PE头的大小</code>，之后<code>填充无用数据</code>(0x40大小) 使地址偏移不发生改变</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304021001269.png" alt="image-20230402100153227" /></p><ul><li>之后就识别不出来是 UPX 头了。(x86移动个PE头就识别不到了，x64的只移动PE头则不行)</li></ul><h1 id="themida"><a class="markdownIt-Anchor" href="#themida"></a> Themida</h1><ul><li>可以直接使用 <a href="https://github.com/ergrelet/unlicense">unlicense</a> 直接进行脱壳处理。运行几分钟之后会出现一个<code>unpacked_&lt;程序名&gt;.exe</code> 的文件</li><li>题目：<code>HZNUCTF TMD</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>逆向技巧</title>
    <link href="/posts/5d944f2a.html"/>
    <url>/posts/5d944f2a.html</url>
    
    <content type="html"><![CDATA[<h1 id="ida-pro"><a class="markdownIt-Anchor" href="#ida-pro"></a> IDA PRO</h1><p><a href="https://www.hex-rays.com/products/ida/support/freefiles/IDA_Pro_Shortcuts.pdf">快捷方式</a></p><h2 id="设置"><a class="markdownIt-Anchor" href="#设置"></a> 设置</h2><h3 id="graph-is-too-big"><a class="markdownIt-Anchor" href="#graph-is-too-big"></a> Graph is too big</h3><ul><li><p>显示错误</p></li><li><p>解决:更改<code>Options----Graph----Max number of nodes</code>,增大参数</p></li></ul><h3 id="graph界面显示地址"><a class="markdownIt-Anchor" href="#graph界面显示地址"></a> Graph界面显示地址</h3><ul><li><p>Graph界面无地址显示</p></li><li><p>更改<code>Options----Disassembly----Line prefixes(non-graph)(勾选)</code></p></li></ul><h3 id="窗口设置"><a class="markdownIt-Anchor" href="#窗口设置"></a> 窗口设置</h3><ul><li>设置汇编窗口和伪代码窗口关联-<code>synchronize with -&gt; IDA View-A Hex View-1</code></li></ul><h3 id="idapython"><a class="markdownIt-Anchor" href="#idapython"></a> IDAPython</h3><ol><li>在 <code>&quot;IDA\python\3&quot;</code> 目录下添加 <code>idc_bc695.py</code> 文件</li><li>之后在IDAPython脚本中手动添加 <code>from idc_bc695 import *</code> 防止api差异</li></ol><h2 id="静态调试"><a class="markdownIt-Anchor" href="#静态调试"></a> 静态调试</h2><h3 id="快捷方式"><a class="markdownIt-Anchor" href="#快捷方式"></a> 快捷方式</h3><ol><li><code>ctrl + e</code> 找到main函数</li><li><code>Shift + f12</code> 可以打开 string 窗口，一键找出所有的字符串，右击setup，对窗口的属性进行设置。同时附加时使用可以显示 strings</li><li><code>Shift + f7</code> 可以查看 Segments 窗口。查看不同的段</li><li><code>空格</code> 在Text View和Group View中来回切换</li><li><code>f5/Tab</code> 一键反汇编，Tab可以在汇编界面与伪代码界面来回切换</li><li><code>Ctrl + X</code> 交叉引用</li><li><code>Ctrl + Alt + K</code>(Keypatch快捷键) 进行patch</li><li><code>Alt + T</code> 在汇编界面中搜索汇编语言</li><li><code>Shift + E</code></li></ol><h3 id="更改"><a class="markdownIt-Anchor" href="#更改"></a> 更改</h3><ol><li><p><code>D</code> (DATA) 转换为原始数据</p><p><code>C</code> (CODE) 转换为汇编代码</p><p><code>P</code> 重新生成函数</p><p><code>a</code> 将数据转换为字符串，主要可以应对小端序存储</p></li><li><p><code>N</code> 更改变量的名称</p><p><code>Y</code> 更改变量的类型，比如把_int64 更正为BYTE*(或者char *)</p><p><code>U</code> undefine，取消定义函数、代码、数据的定义，转化为原始字节的形式</p><p><code>V</code> 简化函数的格式，有时候函数没有return时可以使用，查看更方便</p><p><code>M</code> 枚举所有相同的数据</p></li><li><p><code>;</code> 在反汇编后的界面中写下注释</p><p><code>/</code> 在反编译后伪代码的界面中写下注释</p></li><li><p><code>\</code> 在反编译后伪代码的界面中隐藏/显示变量和函数的类型描述</p><ul><li>有时候变量特别多的时候隐藏掉类型描述看起来会轻松很多</li><li>右键点击Hide casts----也可以隐藏类似*(DWORD)的类型描述</li></ul></li></ol><h2 id="动态调试"><a class="markdownIt-Anchor" href="#动态调试"></a> 动态调试</h2><h3 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h3><ol><li><code>F2</code> 增加断点</li><li><code>F7</code> 单步步入，遇到函数，将进入函数代码内部</li><li><code>F8</code> 单步步过，执行下一条指令，不进入函数代码内部</li><li><code>F4</code> 运行到光标处(断点处)</li><li><code>F9</code> 继续运行</li><li><code>Ctrl+F2</code> 终止一个正在运行的调试进程</li><li><code>Ctrl+F7</code> 运行至返回,直到遇到RETN(或断点)时才停止</li></ol><h3 id="附加"><a class="markdownIt-Anchor" href="#附加"></a> 附加</h3><ul><li>应对一些强壳，可以先启动 <code>.exe</code> 程序，之后使用IDA的附加功能<code>(Debugger-&gt;attach)</code>，附加进程，可以越过壳。</li><li>之后可以使用<code>Shift + f12</code> 和 <code>Shift + f7</code> 定位关键字符位置和段属性，将该程序的 Code 段使用 IDAPYTHON 转化为反汇编形式进行动调。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ida_ua <span class="hljs-keyword">import</span> *<br>cur_addr = <span class="hljs-number">0x401000</span> <span class="hljs-comment">#起始地址</span><br>end_addr = <span class="hljs-number">0x410000</span>   <span class="hljs-comment">#终止地址</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_insn</span>(<span class="hljs-params">start,end</span>):<br>adr = start<br>out_ins = insn_t()<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-keyword">if</span>(adr &gt;= end): <br><span class="hljs-keyword">break</span><br>create_insn(adr)<br>size = decode_insn(out_ins,adr)<br>adr += size<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;end!&quot;</span>)<br>make_insn(cur_addr,end_addr)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>可能 Code 段很大，编译很慢，可以结合手动按c反汇编结合查看</p></blockquote><h3 id="linux"><a class="markdownIt-Anchor" href="#linux"></a> Linux</h3><h4 id="ida动态调试elf"><a class="markdownIt-Anchor" href="#ida动态调试elf"></a> IDA动态调试ELF</h4><p><a href="https://blog.csdn.net/weixin_44959377/article/details/105866347">Kali虚拟机开启远程服务</a></p><p><a href="https://www.cnblogs.com/DorinXL/p/12732721.html">IDA调试ELF文件</a></p><p><a href="https://blog.csdn.net/abc_670/article/details/80066817">ida动态调试elf</a></p><p><a href="https://www.cnblogs.com/longyuan-z/p/7787860.html">使用GDB调试时attach ID不被允许 - longyuan-z - 博客园 (cnblogs.com)</a></p><ul><li>Linux开启远程连接服务，在虚拟机中打开IDA在Linux中的调试工具</li><li>首先需要将文件提权，否则不能运行，也就不能调试了</li><li>IDA连接虚拟机，开始动调</li><li>Linux进行附加时，需要先打开linux_server服务，然后另起端口打开运行的程序，之后就可以附加了。这里需要先使用 <code>sudo vim /etc/sysctl.d/10-ptrace.conf</code> 更改最后一行 <code>kernel.yama.ptrace_scope = 0</code>，重启系统后，普通用户就可以使用attach ID连接程序调试了。</li><li>注意wsl的 <code>Hosrname</code> 可以设置为 <code>127.0.0.1</code>，有时候设置成wsl的ip不太起效果</li></ul><h2 id="idapython-2"><a class="markdownIt-Anchor" href="#idapython-2"></a> IDAPYTHON</h2><p><a href="https://www.hex-rays.com/products/ida/support/idapython_docs/">IDAPYTHON文档</a></p><p>[IDApython - 比翼飞 - 博客园 (<a href="http://cnblogs.com">cnblogs.com</a>)](<a href="https://www.cnblogs.com/biyifei/p/17153109.html#:~:text=idc.get_reg_value">https://www.cnblogs.com/biyifei/p/17153109.html#:~:text=idc.get_reg_value</a> (string Register) %23 获取寄存器的值%2Cdbg必须处于运行状态 idc.set_reg_Value,(long Value%2C string Register) %23 通过寄存器名获得寄存器值。)</p><h3 id="导入模块"><a class="markdownIt-Anchor" href="#导入模块"></a> 导入模块</h3><ul><li><p><code>import ida_bytes</code>和<code>import idc_bc695</code>的效果一样，都是让idapython的脚本可以执行7.0之前的简单样式，但是要区分二者的不同：</p><ul><li><p>对于patch_byte，ida_bytes中是patch_byte，而idc_bc695中是PatchByte----注意区分</p></li><li><blockquote><p>不知道是否是导入了idc_bc695的py与pyc文件，现在的IDA7.7<strong>新旧函数</strong>都可以使用----<strong>不一定</strong></p></blockquote></li></ul></li></ul><h3 id="函数解释"><a class="markdownIt-Anchor" href="#函数解释"></a> 函数解释</h3><ul><li><p><code>Patch</code>：</p><ul><li><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>PatchByte(addr,value)</td><td>将value赋值到addr上，字节形式修改</td></tr><tr><td>PatchWord(addr,value)</td><td>将value赋值到addr上，双字形式修改</td></tr><tr><td>PatchDword(addr,value)</td><td>将value赋值到addr上，四字形式修改</td></tr><tr><td>PatchQword(addr,value)</td><td>将value赋值到addr上，八字形式修改</td></tr></tbody></table></li></ul></li><li><p><code>Byte</code>：</p><ul><li><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><strong>Byte(addr)</strong></td><td>以字节为单位获取地址处的值</td></tr><tr><td><strong>Word(addr)</strong></td><td>同上. 以2字节(字)的单位获取</td></tr><tr><td><strong>Dword(addr)</strong></td><td>4字节</td></tr><tr><td><strong>Qword(addr)</strong></td><td>8字节</td></tr></tbody></table></li></ul></li></ul><h3 id="花指令"><a class="markdownIt-Anchor" href="#花指令"></a> 花指令</h3><h4 id="模板一"><a class="markdownIt-Anchor" href="#模板一"></a> 模板一</h4><ul><li><code>jnz--jz</code> 跳转后加入<code>E8</code>问题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idautils<br><span class="hljs-keyword">import</span> idc<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_nop</span>(<span class="hljs-params">addr,endaddr</span>):<br>    <span class="hljs-keyword">while</span> addr &lt; endaddr:<br>        patch_byte(addr,<span class="hljs-number">0x90</span>)<br>        addr += <span class="hljs-number">1</span><br>pattern = <span class="hljs-string">&quot;33 C0 85 C0 74 03 75 00 E8&quot;</span><br>cur_addr = <span class="hljs-number">0x401000</span> <span class="hljs-comment">#开始地址</span><br>end_addr = <span class="hljs-number">0x405000</span> <span class="hljs-comment">#结束地址</span><br><span class="hljs-keyword">while</span> cur_addr &lt;= end_addr:<br>    cur_addr = idc.find_binary(cur_addr,SEARCH_DOWN,pattern)<span class="hljs-comment"># find_binary() 函数搜索 pattern，其中SEARCH_DOWN表示从cur_addr向高地址方向搜索</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;patch address: &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(cur_addr))) <span class="hljs-comment"># 打印信息</span><br>    <span class="hljs-keyword">if</span> cur_addr == idc.BADADDR:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        my_nop(cur_addr,cur_addr + <span class="hljs-number">9</span>)<br>    cur_addr = idc.next_head(cur_addr)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="模板二"><a class="markdownIt-Anchor" href="#模板二"></a> 模板二</h4><ul><li>去除 <code>jmp</code> 花指令</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#idapy去除花指令，特征值查看按键为D</span><br><span class="hljs-keyword">import</span> idc_bc695 <span class="hljs-keyword">as</span> idc<br>cur_addr = <span class="hljs-number">0x80487C4</span> <span class="hljs-comment">#开始地址</span><br>enc_addr = <span class="hljs-number">0x80488DF</span> <span class="hljs-comment">#结束地址</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cur_addr,end_addr):<br>    <span class="hljs-keyword">if</span> idc.Dword(i) == <span class="hljs-number">0x05ebb866</span>:<span class="hljs-comment">#请修改此处特征值</span><br>        <span class="hljs-keyword">if</span> idc.Dword(i+<span class="hljs-number">4</span>) == <span class="hljs-number">0xfa74c031</span>:<span class="hljs-comment">#请修改此处花指令特征值</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>                idc.PatchByte(i+j,<span class="hljs-number">0x90</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="操作-2"><a class="markdownIt-Anchor" href="#操作-2"></a> 操作</h3><h4 id="dump内存"><a class="markdownIt-Anchor" href="#dump内存"></a> dump内存</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idc_bc695 <span class="hljs-keyword">as</span> idc<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    cur_addr = <span class="hljs-number">0x140003040</span>; <span class="hljs-comment"># 起始地址</span><br>    size = <span class="hljs-number">0x34166</span>  <span class="hljs-comment"># 大小</span><br>    <span class="hljs-built_in">list</span> = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(size):<br>        byte_tmp = idc.Byte(begin + i)<br>        <span class="hljs-built_in">list</span>.append(byte_tmp)<br>        <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span>) % <span class="hljs-number">0x1000</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;All count:&#123;&#125;, collect current:&#123;&#125;, has finish&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(size), <span class="hljs-built_in">hex</span>(i + <span class="hljs-number">1</span>), <span class="hljs-built_in">float</span>(i + <span class="hljs-number">1</span>) / size))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;collect over&#x27;</span>)<br>    file = <span class="hljs-string">&quot;LOADER2.exe&quot;</span>  <span class="hljs-comment">#输出文件地址+名</span><br>    buf = <span class="hljs-built_in">bytearray</span>(<span class="hljs-built_in">list</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fw:<br>        fw.write(buf)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;write over&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="取数值"><a class="markdownIt-Anchor" href="#取数值"></a> 取数值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> idc_bc695 <span class="hljs-keyword">import</span> *<br>cur_addr = <span class="hljs-number">0x6020c0</span>  <span class="hljs-comment">#起始地址</span><br>end_addr = <span class="hljs-number">0x60213c</span>  <span class="hljs-comment">#终止地址</span><br><span class="hljs-built_in">len</span> = end_addr - cur_addr<br>arr1 = []<br>arr2 = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>):<br>    arr1.append(Byte(cur_addr + i)) <span class="hljs-comment">#单个字节获取</span><br>    arr2.append(Dword(cur_addr + <span class="hljs-number">4</span> * i))<span class="hljs-comment">#四个字节获取</span><br><span class="hljs-built_in">print</span>(arr1)<br><span class="hljs-built_in">print</span>(arr2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="插件及其使用"><a class="markdownIt-Anchor" href="#插件及其使用"></a> 插件及其使用</h2><h3 id="配置python及插件"><a class="markdownIt-Anchor" href="#配置python及插件"></a> 配置python及插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">.\idapyswitch.exe --force-path your path of python3.dll# 使用idapyswitch切换为自己的python程序<br><span class="hljs-meta prompt_"># </span><span class="language-bash">之后配置插件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置findcrypto3插件，下载yara</span><br>python.exe -m pip install yara-python<br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置patching插件</span><br>python.exe -m pip install keystone-engine<br></code></pre></td></tr></table></figure><h3 id="bindiff"><a class="markdownIt-Anchor" href="#bindiff"></a> bindiff</h3><ul><li>可以看出二进制文件中的差异，样例:GUDOCTF–L!S!</li></ul><h3 id="go_parser"><a class="markdownIt-Anchor" href="#go_parser"></a> go_parser</h3><ul><li>直接在 file/Script file里面运行<code>go_parser.py</code>即可解析</li></ul><h3 id="d-810"><a class="markdownIt-Anchor" href="#d-810"></a> D-810</h3><ul><li><p>将 <code>d810</code> 文件夹与 <code>D810.py</code> 文件一同放在 <code>plugins</code> 目录下</p></li><li><p>选择适当的规则，然后点击 <code>start</code>，之后就可以按 F5 自动反编译，解决OLLVM混淆。如果已经存在 F5缓存，可以将一段代码nop掉，之后撤销操作，再 F5 反编译即可</p></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401152139298.png" alt="image-20240115213925148" /></p><h1 id="gdb"><a class="markdownIt-Anchor" href="#gdb"></a> GDB</h1><p><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/gdb.html">gdb调试利器</a></p><p><a href="https://www.cnblogs.com/murkuo/p/15965270.html">pwngdb操作</a></p><blockquote><p>gdb的配置在于 ~/.gdbinit</p><p>设置 base = 0x4000000 可以固定每次分析的基址，之后的断点可以使用 base + 偏移来进行</p></blockquote><h2 id="相关操作"><a class="markdownIt-Anchor" href="#相关操作"></a> 相关操作</h2><h3 id="运行"><a class="markdownIt-Anchor" href="#运行"></a> 运行</h3><ul><li><code>run</code>：简记为 r ，其作用是运行程序，当遇到断点后，程序会在断点处停止运行，等待用户输入下一步的命令。</li><li><code>continue</code>：简写c，继续执行，到下一个断点处(或运行结束)</li><li><code>stepi &lt;n&gt;</code>：简写 <code>si &lt;n&gt;</code>，单步调试(n为多次执行)如果有函数调用，则进入函数；与命令n不同，n是不进入调用的函数的</li><li><code>nexti &lt;n&gt;</code>：简写 <code>ni &lt;n&gt;</code>，单步跟踪程序，当遇到函数调用时，也不进入此函数体；此命令同 step 的主要区别是，step 遇到用户自定义的函数，将步进到函数中去运行，而 next 则直接调用函数，不会进入到函数体内。</li><li><code>display</code>：简写 <code>disp</code>，这个可以设置每次gdb显示的调试信息，如 <code>display /4i $rip</code> 会让每次调试都显示出rip出来(i-&gt;instruction)</li><li><code>until</code>：当你厌倦了在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环体。</li><li>until+行号： 运行至某行，不仅仅用来跳出循环</li><li><code>finish</code>：运行程序，<strong>直到当前函数完成返回</strong>，并打印函数返回时的堆栈地址和返回值及参数值等信息。</li><li>quit：简记为 q ，退出gdb</li></ul><h3 id="设置断点"><a class="markdownIt-Anchor" href="#设置断点"></a> 设置断点</h3><ul><li><p><code>break n</code> :简写b n，在第n行处设置断点，例如：b *0x80345C</p><p>(可以带上代码路径和代码名称： b OAGUPDATE.cpp:578)</p></li><li><p>b fn1 if a＞b：条件断点设置</p></li><li><p><code>break *func</code>：在函数func()的入口处设置断点，如：break *cb_button</p></li><li><p>delete(del) 断点号n：删除第n个断点</p></li><li><p>disable 断点号n：暂停第n个断点</p></li><li><p>enable 断点号n：开启第n个断点</p></li><li><p><code>info b</code>(info breakpoints)：显示当前程序的断点设置情况</p></li><li><p>delete breakpoints：清除所有断点</p></li></ul><h3 id="查看源代码"><a class="markdownIt-Anchor" href="#查看源代码"></a> 查看源代码</h3><ul><li><code>list</code> ：简记为 l ，其作用就是列出程序的源代码，默认每次显示10行。</li><li>list 行号：将显示当前文件以“行号”为中心的前后10行代码，如：list 12</li><li>list 函数名：将显示“函数名”所在函数的源代码，如：list main</li></ul><h3 id="查看内存数据"><a class="markdownIt-Anchor" href="#查看内存数据"></a> 查看内存数据</h3><ul><li><p>格式：<code>x /nfu</code>----例如：<strong>x/s 0x80457F</strong>显示字符串</p></li><li><p>说明：</p><ul><li><p><code>x</code>：examine的缩写，检查</p></li><li><p><code>n</code>：表示要显示的内存单元的个数，比如：20</p></li><li><p><code>f</code>：表示显示方式</p><ul><li><table><thead><tr><th>显示方式</th><th>含义</th></tr></thead><tbody><tr><td>x</td><td>按十六进制格式显示变量</td></tr><tr><td>d</td><td>按十进制格式显示变量</td></tr><tr><td>u</td><td>按十进制格式显示无符号整型</td></tr><tr><td>o</td><td>按八进制格式显示变量</td></tr><tr><td>t</td><td>按二进制格式显示变量</td></tr><tr><td>a</td><td>按十六进制格式显示变量(显示指针)</td></tr><tr><td>i</td><td>指令地址格式</td></tr><tr><td>c</td><td>按字符格式显示变量</td></tr><tr><td>f</td><td>按浮点数格式显示变量</td></tr></tbody></table></li></ul></li><li><p><code>u</code>：表示一个地址单元长度</p><ul><li><table><thead><tr><th>显示方式</th><th>含义</th></tr></thead><tbody><tr><td>b</td><td>表示单字节</td></tr><tr><td>h</td><td>表示双字节</td></tr><tr><td>w</td><td>表示四字节</td></tr><tr><td>g</td><td>表示八字节</td></tr></tbody></table></li></ul></li></ul></li></ul><h3 id="打印表达式"><a class="markdownIt-Anchor" href="#打印表达式"></a> 打印表达式</h3><ul><li>print 表达式：简记为 p ，其中“表达式”可以是任何当前正在被测试程序的有效表达式，比如当前正在调试C语言的程序，那么“表达式”可以是任何C语言的有效表达式，包括数字，变量甚至是函数调用。例如：<code>p $rsp</code>就打印rsp寄存器存储的内容</li><li>print ++a：将把 a 中的值加1,并显示出来</li><li>print name：将显示字符串 name 的值</li><li>print gdb_test(a)：将以变量 a 作为参数调用 gdb_test() 函数</li><li>display 表达式：在单步运行时将非常有用，使用display命令设置一个表达式后，它将在每次单步进行指令后，紧接着输出被设置的表达式及值。如： display a</li><li>info function：查询函数</li><li><code>info register/reg</code>：显示所有寄存器信息</li></ul><h3 id="查询运行信息"><a class="markdownIt-Anchor" href="#查询运行信息"></a> 查询运行信息</h3><ul><li><code>where/bt</code>：当前运行的堆栈列表；</li><li>bt backtrace 显示当前调用堆栈</li><li>up/down 改变堆栈显示的深度</li><li>set args 参数:指定运行时的参数</li><li>show args：查看设置好的参数</li><li>info program： 来查看程序的是否在运行，进程号，被暂停的原因。</li></ul><h3 id="分割窗口"><a class="markdownIt-Anchor" href="#分割窗口"></a> 分割窗口</h3><ul><li>layout：用于分割窗口，可以一边查看代码，一边测试：</li><li>layout src：显示源代码窗口</li><li>layout asm：显示反汇编窗口</li><li>layout regs：显示源代码/反汇编和CPU寄存器窗口</li><li>layout split：显示源代码和反汇编窗口</li><li>Ctrl + L：刷新窗口</li></ul><h3 id="其他设置"><a class="markdownIt-Anchor" href="#其他设置"></a> 其他设置</h3><ul><li><p>查看反汇编 <code>disassemble(disass) main</code></p></li><li><p>之后以intel汇编查看  <code>set disassembly-flavor intel</code>。这里可以执行 <code>echo 'set disassembly-flavor intel' &gt; ~/.gdbinit</code> 来设置gdb配置。因为 gdb 的配置全在 <code>~/.gdbinit</code> 中，所以设置这个是必要的</p></li><li><p>可以使用 <code>gdb -x a.gdb a.elf</code> 来使用gdb脚本调试程序</p></li></ul><blockquote><p>交互模式下直接回车的作用是重复上一指令，对于单步调试非常方便</p></blockquote><h2 id="脚本"><a class="markdownIt-Anchor" href="#脚本"></a> 脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">x.gdb脚本</span><br>b *main  # gdb脚本都是顺序执行的，要进行操作需要commands来配合<br>commands # 这里commands和断点是相连的，断到上面的断点就会执行commands-end中指令<br>silent  # 这里是不显示一些噪音，将断点设置等信息掩盖<br>p $rip<br>continue<br>end<br>run rebort  # 重启gdb<br>q<br></code></pre></td></tr></table></figure><p>​脚本执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gdb -x my_gdb_script.gdb ./a.out<br></code></pre></td></tr></table></figure><h1 id="经验"><a class="markdownIt-Anchor" href="#经验"></a> 经验</h1><h2 id="ida使用相关"><a class="markdownIt-Anchor" href="#ida使用相关"></a> IDA使用相关</h2><ol><li><p><code>Windows</code> 体系下注意小端序，使用 <code>Shift + e</code> 提取的字符串是转化过后的字符串，不需要再次转化。注意汇编模块读取可能会把地址也读进来，注意区分数据和地址。</p></li><li><p><code>Patch</code> 函数的时候，可以直接使用汇编。然后另存为文件即可跳过函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov eax,0x1<br>retn x #这里的x需要根据函数末尾的返回来抄写，防止栈不平衡<br></code></pre></td></tr></table></figure></li><li><p>遇到 <code>(_BYTE *)&amp;qword_4058</code> 之类的，若是知道这是表示的数组，那么可以再汇编界面按 <code>D</code> 变成数据，之后 <code>F5</code> 重新生成伪代码，则可以看到数组变成 <code>byte_4058[]</code> 之类的数组形式</p></li><li><p>若是函数格式中有 <code>(_BYTE)</code> 等干扰分析时，可以：</p><ol><li>使用 <code>Y</code> 更改变量的类型，比如把_int64 更正为BYTE*(或者char *)</li><li>使用 <code>V</code> 简化函数的格式，有时候函数没有 return 时可以使用，这样看更方便</li></ol></li><li><p>IDA在识别花指令时，很可能在一个连续的函数中显示红色的 <code>sub_3D9 endp ; sp-analysis failed</code> 类似的信息，这个时候可以使用 <code>Edit -&gt; Function -&gt; Delete function</code> 删除函数定义，然后在正确的位置 <code>retn</code> 使用 <code>Edit -&gt; Function -&gt; Set function end</code> 设置函数结尾。之后 <code>F5</code> 反编译可以看到正常的函数</p></li><li><p>有时候 <code>U</code> + <code>P</code> 不能生成函数，可以先删除函数定义，选中函数块之后按 <code>P</code> 定义函数</p></li></ol><h2 id="识别相关"><a class="markdownIt-Anchor" href="#识别相关"></a> 识别相关</h2><ol><li>代码最好两边夹击，从前往后看对输入的操作，从后往前看得到最终结果的操作</li><li>看 main 函数之前先看一下 <code>init</code> 段，这里会在main函数之前执行，可能隐藏了核心代码</li><li>若是函数的识别发现<code>变量异常</code>，可以点进去函数，然后在局部变量上按 <code>y</code> 之后返回主函数，就可以看到识别出变量的函数了</li></ol><h2 id="exp书写相关"><a class="markdownIt-Anchor" href="#exp书写相关"></a> exp书写相关</h2><ol><li><p>在python中 <code>&amp;0xff</code> 就是一个整数的后八位，在逆向中，常常有 <code>unsigned __int8</code> 作为数据类型，这个时候得出的结果就是取后八位作为结果，如果在python中使用，需要使用 <code>&amp; </code> 操作。同样，16位，32位的操作也是这样。</p></li><li><p>对于算法进行解密运算时，时刻注意小端序的问题，因为解密的过程中可能就需要将上一步的结果逆序放入下一步中 (TEA类型的解密最为拧巴，往往需要调换多次位置)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = <span class="hljs-number">0x67616c66</span><br>tmp1 = <span class="hljs-built_in">hex</span>(enc)[<span class="hljs-number">2</span>:]<br><span class="hljs-comment"># 将enc以两个字节为单位进行逆序排列</span><br>res1 = <span class="hljs-string">&#x27;0x&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(tmp),<span class="hljs-number">2</span>):<br>    res1 += tmp[<span class="hljs-built_in">len</span>(tmp) - i - <span class="hljs-number">2</span>: <span class="hljs-built_in">len</span>(tmp) - i]<br><span class="hljs-built_in">print</span>(res1)<br><br><span class="hljs-comment"># 将enc以两个字节为单位进行逆序排列并转化为字符</span><br>res2 = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(tmp),<span class="hljs-number">2</span>):<br>    tmp2 = tmp[<span class="hljs-built_in">len</span>(tmp) - i - <span class="hljs-number">2</span>: <span class="hljs-built_in">len</span>(tmp) - i]<br>    res2 += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;0x&#x27;</span> + tmp2))<br><span class="hljs-built_in">print</span>(res2)<br></code></pre></td></tr></table></figure></li></ol><h2 id="数据处理"><a class="markdownIt-Anchor" href="#数据处理"></a> 数据处理</h2><ol><li>从IDA中获取数据时，如果在分析程序中发现数据的排列为 qword 等，建议不要以小端序转化，而是直接从IDA的 <code>IDA View-RIP</code> 界面复制，不用 <code>Ctrl + e</code> 提取数据。除此之外， qword 的转化可能会出现一些多余数据，记得识别。<ul><li>这里补充一点：若是在 <code>IDA View-RIP</code> 界面中的数据不是正规数据(这里指十六进制)，则采用 <code>Ctrl + e</code> 进行十六进制提取，再分别以4个字节为一组，然后倒转称为小端序的顺序进行解密操作。</li><li>总而言之<ol><li><p>可以首先使用 <code>Ctrl + e</code> 进行提取，然后手动进行倒转转换。</p></li><li><p>也可以使用 <code>D</code> 进行打乱，再分别使用 <code>D</code> 聚合成每4个字节为一组的形式</p></li><li><p>也可以使用插件 <code>lazyida</code>，在数据上 <code>右键</code> -&gt; <code>convert</code> -&gt; <code>Covern to …… DWORD list</code>(这里注意看前面的标识进行相依字节长度的转化) 就可以在下方output框看见正确的小端序数组。</p></li></ol></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>逆向笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BUU刷题记录</title>
    <link href="/posts/87126416.html"/>
    <url>/posts/87126416.html</url>
    
    <content type="html"><![CDATA[<h1 id="first_page"><a class="markdownIt-Anchor" href="#first_page"></a> First_Page</h1><h2 id="2019红帽杯easyre"><a class="markdownIt-Anchor" href="#2019红帽杯easyre"></a> [2019红帽杯]easyRE</h2><h3 id="具体流程"><a class="markdownIt-Anchor" href="#具体流程"></a> 具体流程</h3><ul><li><p>首先<code>Shift + F12</code>查看字符串，找到了base64编码的东西</p><ul><li><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303052153730.png" alt="image-20230305215330684" /></li><li>base64解了十次，得到了<a href="https://bbs.kanxue.com/thread-254172.htm">看雪CTF从入门到存活(六)主动防御</a>这个网站，然后没有一点信息，应该是被耍了。</li></ul></li><li><p>接着从主函数出发，找到关键函数<code>sub_4009C6</code></p><ul><li><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303052215011.png" alt="image-20230305221551966" /></p></li><li><p>分析前半段(如注释)，代码解出v18的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">v15 = <span class="hljs-string">&#x27;Iodl&gt;Qnb(ocy\x7F&#x27;</span><br>v16 = <span class="hljs-string">&#x27;y.i\x7F&#x27;</span><br>v17 = <span class="hljs-string">&#x27;d`3w&#125;wek9&#123;iy=~yL@EC&#x27;</span><br>v = v15 + v16 + v17<br>enc =[]<br>key = <span class="hljs-built_in">list</span>(v14)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(v)):<br>    enc.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(key[i]) ^ i))<br>tmp = <span class="hljs-string">&#x27;&#x27;</span>.join(enc)<br><span class="hljs-built_in">print</span>(tmp)<br><span class="hljs-comment"># tmp = Info:The first four chars are `flag`</span><br></code></pre></td></tr></table></figure></li><li><p>由得出的结果，知道这里没有flag，继续往下看</p></li><li><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303052254462.png" alt="image-20230305225421428" /></p></li><li><p>这里进行了十次base64加密，对应了上文中的base解密出来为网站的事情</p></li><li><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303052255104.png" alt="image-20230305225555059" /></p></li></ul></li><li><p>查看0ff_6CC090时(也就是base64加密数据的存放地址)，看到了新的数据off_6CC0A0，直接查看其引用，找到<code>sub_400D35</code>函数</p><ul><li><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303052259863.png" alt="image-20230305225937825" /></p></li><li><p>观察函数，猜测v1为数组，其的值应该是<code>flag</code>。这里由于 <strong>HIBYTE</strong> 函数的作用是获取高字节也就是数组的最后一位，在由上面的Info信息得到结果，而与 <strong>HIBYTE</strong> 相对应的还有 <strong>BYTE()</strong>、<strong>BYTE1()</strong>、**BYTE2()**第一个是获取数组的第一位，第二个就是获取第二位，依次类推。由此编写脚本得到flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">key = [<span class="hljs-number">0x40</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x2F</span>,<br>  <span class="hljs-number">0x24</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x6E</span>,<br>  <span class="hljs-number">0x72</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x5B</span>]<br>key2 = <span class="hljs-string">&#x27;flag&#x27;</span><br>key3 = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key2)):<br>    key3.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(key2[i]) ^ key[i]))<br><span class="hljs-built_in">print</span>(key3)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key)):<br>    key3.append(<span class="hljs-built_in">chr</span>(key[i]^<span class="hljs-built_in">ord</span>(key3[i%<span class="hljs-number">4</span>])))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(key3))<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h3><ul><li>判断IDA给出定义的真实含义，如上述的v1指代一个数组，确切而言指示这v1[0]</li><li>根据上下文判断伪代码对于语句的操作，如上述的字符串相加</li></ul><h2 id="youngter-drive"><a class="markdownIt-Anchor" href="#youngter-drive"></a> Youngter-drive</h2><blockquote><p>知识点：多线程处理</p></blockquote><p>参考：<a href="https://tokameine.top/2021/04/30/buuctf-youngter-drive/">BUUCTF Youngter-drive笔记与思考 (线程) – TokameinE</a></p><h3 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h3><h4 id="识别"><a class="markdownIt-Anchor" href="#识别"></a> 识别</h4><ul><li>查壳，UPX壳，直接脱</li><li>拖到IDA中，发现调用Windows的API<ul><li><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303101734236.png" alt="image-20230304094722528" /></li><li>这里<code>CreateThread</code>是创建一个线程，属于新知识点。这里创建了两个互斥的线程对象，一个线程处于休眠状态时，另一个线程开始运作，以实现并发操作。</li></ul></li></ul><h4 id="具体流程-2"><a class="markdownIt-Anchor" href="#具体流程-2"></a> 具体流程</h4><ul><li><p>结合给出的IDA分析与注释，这里分别追踪 <code>StartAddress</code> 和 <code>sub_41119F</code> 两个线程。</p></li><li><p><code>StartAddress</code></p><ul><li><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303101740626.png" alt="image-20230304094927047" /></li><li>这里执行<strong>sub_41112C</strong>操作，其中<strong>dword_418008</strong>的值为29—综合下文sub_411940可以判断出此值为flag的长度。继续追踪，找到sub_411940函数。</li><li><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303101740951.png" alt="image-20230304095634491" /></li><li>由分析，此时对于flag数组进行了替换操作，其操作从后往前(a2一开始为29，之后递减)。此操作含义就是在 <strong>off_418000中查询下标为flag[i]-38对应的值，赋值给flag[i]</strong>。</li></ul></li><li><p><code>sub_41119F</code></p><ul><li><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303102141867.png" alt="image-20230310214101827" /></p></li><li><p><code>WaitForSingleObject</code></p><ul><li>一种Windows API函数，当等待仍在挂起状态时，句柄被关闭，那么函数行为是未定义的。该句柄必须具有 SYNCHRONIZE 访问权限。</li><li>其用来检测 hHandle 事件的信号状态，在某一线程中调用该函数时，线程暂时挂起，如果在挂起的dwMilliseconds 毫秒内，线程所等待的对象变为有信号状态，则该函数立即返回；如果超时时间已经到达dwMilliseconds 毫秒，但hHandle所指向的对象还没有变成有信号状态，函数照样返回。</li></ul></li><li><p><code>ReleaseMutex</code></p><ul><li>一种线性指令，具有释放线程拥有的互斥体的控制权。</li></ul></li><li><p><code>Sleep</code></p><ul><li>此函数可使线程暂停自己的运行，直到dwMilliseconds过去为止。即该线程不想在某个时间段内被调度。</li></ul></li></ul></li><li><p><code>sub_411190</code></p><ul><li>判断最后更改后的Source数组是否与给定的数组相等</li><li><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303102152825.png" alt="image-20230310215237808" /></li></ul></li></ul><h4 id="综合分析"><a class="markdownIt-Anchor" href="#综合分析"></a> 综合分析</h4><ul><li>当第一个线程(<code>StartAddress</code>)执行到 <code>Sleep</code> 语句时，此线程暂停，转为另一个线程，然后经过<strong>dword_418008</strong>减1的操作后，第二个进程(<code>sub_41119F</code>)暂停，转为第一个线程，循环交替。而由于第二个进程只是进行了自减操作，所以可以判断出在 <strong>dword_418008</strong> 为奇数时执行第一个线程操作，并对flag进行了更改。</li></ul><h3 id="exp"><a class="markdownIt-Anchor" href="#exp"></a> exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;0abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br>text1=<span class="hljs-string">&#x27;TOiZiZtOrYaToUwPnToBsOaOapsyS&#x27;</span><br>text2=<span class="hljs-string">&#x27;QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&#x27;</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br>s=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(text1)):<br>    <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>):<br>        flag+=text1[i]<br>    <span class="hljs-keyword">else</span>:<br>        s=text2.index(text1[i])<br>        flag+=<span class="hljs-built_in">str</span>[s]<br><span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-comment"># 或者</span><br>key = <span class="hljs-string">&quot;QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&quot;</span><br>flagRe = <span class="hljs-string">&quot;TOiZiZtOrYaToUwPnToBsOaOapsySa&quot;</span><br>flag = []<br><br>i = <span class="hljs-number">0x1d</span><br><span class="hljs-keyword">while</span> i &gt; -<span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span> key.find(flagRe[i]):<br>        position = key.find(flagRe[i])<br>        <span class="hljs-keyword">if</span> position &lt;= <span class="hljs-number">26</span>:<br>            flag.append(<span class="hljs-built_in">chr</span>(position + <span class="hljs-number">96</span>))<br>        <span class="hljs-keyword">else</span>:<br>            flag.append(<span class="hljs-built_in">chr</span>(position + <span class="hljs-number">38</span>))<br>        i -= <span class="hljs-number">1</span><br>        <br>    flag.append(flagRe[i])<br>    i -= <span class="hljs-number">1</span><br><br>flag = <span class="hljs-built_in">reversed</span>(flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(flag))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(flag))<br></code></pre></td></tr></table></figure><h3 id="知识点多线程"><a class="markdownIt-Anchor" href="#知识点多线程"></a> 知识点：多线程</h3><ul><li><p>多线程：指一个程序中有多个顺序流在执行。其中 <code>CreateThread</code> 是创造一个线程，创造的线程要用句柄 <code>HANDLE</code> 来储存， <code>CloseHandle</code> 是关闭该线程。</p></li><li><p>API函数：</p>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake">CreateThread(<br>lpThreadAttributes<br>dwStackSize    <br>lpStartAddress<br>lpParameter<br>dwCreationFlags<br>lpThreadId<br>)<br></code></pre></td></tr></table></figure><ul><li><code>lpThreadAttributes</code>：NULL</li><li><code>dwStackSize</code>：栈空间大小，0表示1MB</li><li><code>lpStartAddress</code>：执行的线程函数地址</li><li><code>lpParameter</code>：传给线程函数的参数</li><li><code>dwCreationFlags</code>：控制线程的创建，0表示可以立即调用；如果为 <code>CREATE_SUSPENDED</code> ，则创建后无法调用，直到调用 <code>ResumeThread()</code></li><li><code>lpThreadId</code>：NULL</li><li><code>CreateMutexW</code>：实现进程互斥，IDA中实际作用</li></ul></li><li><p>一个程序在运行时占用整个进程，一个进程可以建立多个线程。这些线程能够并行 (同时进行代码处理)以加快程序的运行速度。其中线程分为 “对等线程”，“分离线程”，“主线程”。而当一个处理器在处理一个线程时遇到 <strong>慢速系统调用(sleep、read等)</strong> 等需要消耗较多时间的处理需求时，控制器便通过上下文切换传送到下一个对等进程，以加快程序的运行。</p></li></ul><h2 id="crackrtf"><a class="markdownIt-Anchor" href="#crackrtf"></a> CrackRTF</h2><h3 id="分析-2"><a class="markdownIt-Anchor" href="#分析-2"></a> 分析</h3><ul><li><p>识别，32位无壳，直接打开</p></li><li><p>找到 <strong>main</strong> 函数，分析 mian 函数，可以发现函数分为两个部分</p></li><li><p><code>password1</code></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303102341004.png" alt="image-20230310231125442" /></p><ul><li><p>这里 <strong>auti</strong> 函数的作用就是将输入的字符串转化为整型，然后这里限定其整型数值大于100000。然后其中 <strong>strcat</strong> 将 @DBApp 附加到输入的input后面，然后经过 <code>sub_40100A</code> 函数进行加密之后与if中的字符串相比较。</p></li><li><p>追踪 <code>sub_40100A</code> 函数</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303102340276.png" alt="image-20230310234029242" /></p></li><li><p><code>CryptCreateHash </code><a href="https://www.cnblogs.com/rnss/p/15328653.html">HASH指计算函数相关</a>–不过此API已被弃用</p><ul><li><p>此函数启动数据流的哈希。它创建并返回到调用应用程序，该句柄指向加密服务提供程序 (CSP) 哈希对象。 此句柄用于后续调用 <code>CryptHashData</code> 和 <code>CryptHashSessionKey</code> 以哈希会话键和其他数据流。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">CryptCreateHash</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HCRYPTPROV hProv,</span></span><br><span class="hljs-params"><span class="hljs-function">  ALG_ID     Algid,</span></span><br><span class="hljs-params"><span class="hljs-function">  HCRYPTKEY  hKey,</span></span><br><span class="hljs-params"><span class="hljs-function">  DWORD      dwFlags,</span></span><br><span class="hljs-params"><span class="hljs-function">  HCRYPTHASH *phHash</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>关键为第二个参数 <code>Algid</code>，标识要使用的哈希算法的 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/SecCrypto/alg-id">ALG_ID</a> 值，此参数的有效值因使用的 CSP 而异。而此时无符号数 0x8004 指哈希算法的类型为 SHA1 加密。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303102324419.png" alt="image-20230310232406385" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br>string=<span class="hljs-string">&#x27;@DBApp&#x27;</span><br>password1=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100000</span>,<span class="hljs-number">999999</span>):<br>    flag=<span class="hljs-built_in">str</span>(i)+string <span class="hljs-comment"># str(i)就是把整数i换成字符串类型</span><br>    x = hashlib.sha1(flag.encode())  <span class="hljs-comment"># 这里加密前需要转化为byte类型</span><br>    y = x.hexdigest()     <span class="hljs-comment"># hexdigest()使用十六进制表示</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;6e32d0943418c2c33385bc35a1470250dd8923a9&quot;</span> == y:<br>            password1 = flag<br>            <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(password1)<br><span class="hljs-comment"># password1 = 123321@DBApp</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><code>password2</code></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303102341829.png" alt="image-20230310231241758" /></p><ul><li><p>此处的 <code>password2</code> 的形式与 <code>password1</code> 形似，这里 <code>sub_401019</code> 就是指 MD5 加密，但此时没有爆破信息，无法爆破，这里查看 <code>sub_40100F</code></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303111034062.png" alt="image-20230311103417993" /></p></li><li><p>其中显示资源文件 <strong>AAA</strong> ，则使用 Resource Hacker 打开文件查看资源文件信息</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303111151820.png" alt="image-20230311115101765" /></p></li><li><p>函数解析</p><ul><li><p><code>FindResource</code></p><ul><li><p>该函数确定指定模块中指定类型和名称的资源所在位置。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">HRSRC <span class="hljs-title">FindResourceA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCSTR  lpName,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCSTR  lpType</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>HMODULE</strong>：处理包含资源的可执行文件的模块。NULL值则指定模块句柄指向操作系统通常情况下创建最近过程的相关位图文件。</p></li><li><p><strong>LPCSTR</strong>：指定资源名称</p></li><li><p><strong>LPCSTR</strong>：指定资源类型</p></li></ul></li><li><p><code>LoadResource</code></p><ul><li><p>检索可用于获取指向内存中指定资源的第一个字节的指针的句柄。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">HGLOBAL <span class="hljs-title">LoadResource</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HMODULE hModule,</span></span><br><span class="hljs-params"><span class="hljs-function">  HRSRC   hResInfo</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>hModule</strong>：其可执行文件包含资源的模块句柄。 如果 <em>hModule</em> 为 <strong>NULL</strong>，系统会从用于创建当前进程的模块加载资源。</p></li><li><p><strong>HRSRC</strong>：要加载的资源的句柄。</p></li></ul></li></ul></li><li><p>追踪 <code>sub_401005</code>，这里将 <code>lpString(password2)</code> 与 <code>a2(lpBuffer)</code> 进行了异或操作，对 a2 进行了修改，使之成为 .rtf 文件的格式。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303111045780.png" alt="image-20230311104503742" /></p></li></ul></li></ul><h3 id="exp-2"><a class="markdownIt-Anchor" href="#exp-2"></a> exp</h3><ul><li><p>根据最后的信息，password2需要由 .rtf 的文件格式和 AAA文件格式进行异或得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">rtf = <span class="hljs-string">&#x27;&#123;\\rtf1&#x27;</span><br>source = [<span class="hljs-number">0x05</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x01</span> ]<br>password2 = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(rtf)):<br>    password2 += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(rtf[i]) ^ source[i])<br><span class="hljs-built_in">print</span>(password2)<br></code></pre></td></tr></table></figure></li></ul><h2 id="actf新生赛2020usualcrypt"><a class="markdownIt-Anchor" href="#actf新生赛2020usualcrypt"></a> [ACTF新生赛2020]usualCrypt</h2><h3 id="分析-3"><a class="markdownIt-Anchor" href="#分析-3"></a> 分析</h3><ul><li><p>无壳，直接分析</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303120019578.png" alt="image-20230312001921502" /></p></li><li><p>可以看出是将输入的进行base64加密，之后与原字符串比较而得到答案</p></li><li><p>深入 <code>sub_401080</code> 函数，找到存储base64表的数组 <code>table_40E0A0</code> 之后查看引用，发现对表进行了更改</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303120021667.png" alt="image-20230312002136637" /></p></li><li><p>由分析，这里的 <code>byte_40E0A0</code> 与 <code>byte_40E0AA</code> 都是地址，都是对于一个base64表数组进行操作</p></li></ul><h4 id="exp-3"><a class="markdownIt-Anchor" href="#exp-3"></a> exp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> result; <br>  <span class="hljs-type">char</span> v1; <br><span class="hljs-type">char</span> k[<span class="hljs-number">66</span>] = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;<br><br><span class="hljs-type">char</span>* a0 = k;<br><span class="hljs-type">char</span>* aa = a0 + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">for</span> ( result = <span class="hljs-number">6</span>; result &lt; <span class="hljs-number">15</span>; ++result )<br>&#123;<br>v1 = aa[result];<br>    aa[result] = a0[result];<br>    a0[result] = v1;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,k);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br>table_old = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>table_new = <span class="hljs-string">&#x27;ABCDEFQRSTUVWXYPGHIJKLMNOZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br><span class="hljs-comment"># 这里获得table_new的时候出现问题，不能很好地理解byte_40E0A0和byte_40E0AA都是指针的作用，不过指向数组的不同位置而已</span><br><span class="hljs-comment"># 我错误地理解为两个数组进行位置的交换，从而导致了错误的答案</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(table_new))<br>key = <span class="hljs-string">&#x27;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&#x27;</span>.swapcase()<br><br><span class="hljs-built_in">print</span>(base64.b64decode(key.translate(<span class="hljs-built_in">str</span>.maketrans(table_new,table_old))))<br><br></code></pre></td></tr></table></figure><h1 id="sencond_page"><a class="markdownIt-Anchor" href="#sencond_page"></a> Sencond_Page</h1><h2 id="xxor"><a class="markdownIt-Anchor" href="#xxor"></a> xxor</h2><h3 id="分析-4"><a class="markdownIt-Anchor" href="#分析-4"></a> 分析</h3><ul><li><p>无壳，直接IDA分析</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303121437154.png" alt="image-20230312143746093" /></p><ul><li>得到伪代码，这里 <code>HIDWORD</code> 获取 <code>v6[j]</code> 的 下一个双字(这里是小端序存储，所以高位的就是下一位的)，则这里循环了3次，也将6个输入给整合了进去。之后经过 <code>sub_400686</code> 的加密，最后又赋值到 v7 上</li></ul></li><li><p><code>sub_400686</code></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303121716686.png" alt="image-20230312171608633" /></p><ul><li>这是 xtea 加密，不过进行了部分改变</li></ul></li><li><p>最后的对比函数 <code>sub_400770</code> ，可以使用 z3 找到 <code>v7</code> 的值</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303121720876.png" alt="image-20230312172048847" /></p></li></ul><h3 id="exp-4"><a class="markdownIt-Anchor" href="#exp-4"></a> exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>s = Solver()<br>a0,a1,a2,a3,a4,a5 = BitVecs(<span class="hljs-string">&quot;a1 a1[1] a1[2] a1[3] a1[4] a1[5]&quot;</span>, <span class="hljs-number">32</span>)<br>s.add(a2 - a3 == <span class="hljs-number">0x84A236FF</span>)<br>s.add(a3 + a4 == <span class="hljs-number">0xFA6CB703</span>)<br>s.add(a2 - a4 == <span class="hljs-number">0x42D731A8</span>)<br>s.add(a0 == <span class="hljs-number">0xDF48EF7E</span>)<br>s.add(a5 == <span class="hljs-number">0x84F30420</span>)<br>s.add(a1 == <span class="hljs-number">0x20CAACF4</span>)<br><br>check = s.check()<br>model = s.model()<br><span class="hljs-built_in">print</span>(model)<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decrypt</span> <span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">uint32_t</span>* k)</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">5</span>;i +=<span class="hljs-number">2</span>)&#123;<br><br>    <span class="hljs-type">uint32_t</span> v3 = v[i], v4 = v[i+<span class="hljs-number">1</span>];<br>    <span class="hljs-type">uint32_t</span> v5 = <span class="hljs-number">1166789954</span>*<span class="hljs-number">64</span>;<br>    <span class="hljs-type">uint32_t</span> *a2 = k;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i =<span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">64</span>; i++) &#123;<br>        v4 -= (v3 + v5 + <span class="hljs-number">20</span>) ^ ((v3 &lt;&lt; <span class="hljs-number">6</span>) + a2[<span class="hljs-number">2</span>]) ^ ((v3 &gt;&gt; <span class="hljs-number">9</span>) + a2[<span class="hljs-number">3</span>]) ^ <span class="hljs-number">0x10</span>;<br>        v3 -= (v4 + v5 + <span class="hljs-number">11</span>) ^ ((v4 &lt;&lt; <span class="hljs-number">6</span>) + a2[<span class="hljs-number">0</span>]) ^ ((v4 &gt;&gt; <span class="hljs-number">9</span>) + a2[<span class="hljs-number">1</span>]) ^ <span class="hljs-number">0x20</span>;<br>        v5 -= <span class="hljs-number">1166789954</span>;<br>    &#125;<br>    v[i]=v3; <br>    v[i+<span class="hljs-number">1</span>]=v4;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">3746099070</span>, <span class="hljs-number">550153460</span>, <span class="hljs-number">3774025685</span>, <span class="hljs-number">1548802262</span>, <span class="hljs-number">2652626477</span>, <span class="hljs-number">2230518816</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> k[<span class="hljs-number">4</span>]= &#123;<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-built_in">decrypt</span>(v,k);<br>    <span class="hljs-comment">// 注意windows小端序输出 </span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;<br>    <span class="hljs-type">char</span> a3 = v[i] &gt;&gt; <span class="hljs-number">16</span>;<br><span class="hljs-type">char</span> a2 = v[i] &gt;&gt; <span class="hljs-number">8</span>;<br><span class="hljs-type">char</span> a1 = v[i];<span class="hljs-comment">//舍弃高位，保留低位 </span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c%c%c&quot;</span>,a3,a2,a1);<br>    <span class="hljs-comment">//或者cout &lt;&lt; *((char*)&amp;v[i] + 2) &lt;&lt; *((char*)&amp;v[i] + 1) &lt;&lt;  * ((char*)&amp;v[i]);</span><br>    &#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="overlong"><a class="markdownIt-Anchor" href="#overlong"></a> OverLong</h2><h3 id="分析-5"><a class="markdownIt-Anchor" href="#分析-5"></a> 分析</h3><ul><li><p>无壳，直接分析</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303121932873.png" alt="image-20230312193202829" /></p><ul><li><p>这里 <code>MessageBoxA</code> 显示文本框</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">MessageBoxA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HWND   hWnd,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCSTR lpText,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCSTR lpCaption,</span></span><br><span class="hljs-params"><span class="hljs-function">  UINT   uType</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>LPCTSTR</code><ul><li>要显示的消息。 如果字符串由多个行组成，则可以使用回车符和/或每行之间的换行符分隔这些行。</li></ul></li><li><code>LPCTSTR</code><ul><li>对话框标题。 如果此参数为 <strong>NULL</strong>，则默认标题为 <strong>Error</strong>。</li></ul></li></ul></li></ul></li><li><p>由此可知，这里输出了 <code>Text</code> 的内容，也就是 <code>v6</code> 的内容，而 <code>v6</code> 使用 <code>sub_401160</code> 进行了更改</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303121935826.png" alt="image-20230312193553796" /></p><ul><li>查看函数，循环了28次，而又由于改变的数据 <code>unk_402008</code> 的数据长度不止为28位，同时根据运行程序得到了28字节的字符串，料想需要对于全部数据进行处理，则在动调中改变 28 的值, 最后得到答案。</li></ul><table style="border:none;text-align:center;width:auto;margin: 0 auto;">  <tbody>  <tr>  <td style="padding: 6px"><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303121938309.png" ></td><td><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303121944927.png" ></td>  </tr>      <tr><td><strong>未修改之前</strong></td><td><strong>修改之后</strong></td></tr>  </tbody></table></li></ul><h2 id="oruga"><a class="markdownIt-Anchor" href="#oruga"></a> oruga</h2><h3 id="分析-6"><a class="markdownIt-Anchor" href="#分析-6"></a> 分析</h3><ul><li><p>无壳，直接分析</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303121953195.png" alt="image-20230312195358159" /></p></li><li><p>前面是判断前缀是否相同，关键函数是 <code>sub_78A</code></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303122017480.png" alt="image-20230312201735441" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303122018150.png" alt="image-20230312201807123" /></p></li><li><p>函数逻辑分内外两层循环，外循环确定方向，内循环位移。与常见迷宫题目不同的是，这里的位移是一直移动，直到碰到非0字符(由内循环实现)。这里内循环依据 <code>v4</code> 的值一直进行操作，直到尽头，而外循环中的<code>v2 -= v4</code>实际上是为了解决内循环中多余的一次位移而进行的操作。WMJE分别代表上下左右。</p></li><li><p>由dump出的数据，可以判断出路径(可以先用常规方向键走，之后再替换)</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303122021310.png" alt="image-20230312202147279" /></p></li></ul><h2 id="easy-strcmp"><a class="markdownIt-Anchor" href="#easy-strcmp"></a> easy strcmp</h2><p>[buuoj-<a href="https://www.cnblogs.com/Hznuxxw/p/16989358.html">Zer0pts2020]easy strcmp</a></p><h3 id="分析-7"><a class="markdownIt-Anchor" href="#分析-7"></a> 分析</h3><ul><li><p>无壳，直接分析。但是直接看main函数没有看出来什么</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303130836500.png" alt="image-20230313083654457" /></p></li><li><p>查看 <code>init</code> 函数，这里有个 <code>funcs_889</code> 函数，跟入查看，调用了 <code>sub_795</code> 函数</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303130838948.png" alt="image-20230313083858918" /></p></li><li><p>这里出现了 <code>strcmp</code> ，怀疑之前的<code>strcmp</code> 有问题，查看其地址，发现是调用了 <code>off_201028</code> 地址函数，在这个函数中刚好看出调用了 <code>sub_6EA</code> 函数，深入查看。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303130843698.png" alt="image-20230313084354655" /></p></li><li><p>这里一个(char)为一组，之后减去一个字节对应长度的数值，最后得到 <code>main</code> 函数中比较的那个字符串。注意给的数据以小端序的形式存储，不过shift+e提取就是小端序。</p></li></ul><h3 id="exp-5"><a class="markdownIt-Anchor" href="#exp-5"></a> exp</h3><ul><li>这里字符串相加的大致实现是：将大数做成多个字节，将每个字节与对应的字符串相加(指相同字节位对齐相加，多者溢出)，这里溢出处理是关键。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = [<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x09</span>,<br>  <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x0B</span>,<br>  <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x3A</span>,<br>  <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>]<br>key = <span class="hljs-string">&#x27;zer0pts&#123;********CENSORED********&#125;&#x27;</span><br><br>f = <span class="hljs-number">0</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key)):<br>  <span class="hljs-keyword">if</span> f != <span class="hljs-number">0</span>:<br>    tmp = enc[i] + <span class="hljs-built_in">ord</span>(key[i]) + f<br>    f = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">else</span>:<br>    tmp = enc[i] + <span class="hljs-built_in">ord</span>(key[i])<br>  <span class="hljs-keyword">if</span> tmp &gt; <span class="hljs-number">0xff</span>:<br>    f = <span class="hljs-number">1</span><br>  tmp &amp;= <span class="hljs-number">0xff</span><br>  flag += <span class="hljs-built_in">chr</span>(tmp)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="level4"><a class="markdownIt-Anchor" href="#level4"></a> level4</h2><h3 id="分析-8"><a class="markdownIt-Anchor" href="#分析-8"></a> 分析</h3><ul><li><p>直接IDA，查看伪代码</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303130859803.png" alt="image-20230313085904775" /></p></li><li><p>这里查看 <code>type1</code> 和 <code>type2</code></p></li></ul><table style="border:none;text-align:center;width:auto;margin: 0 auto;">  <tbody>  <tr>  <td style="padding: 6px"><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303130859242.png" ></td><td><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303130900138.png" ></td>  </tr>      <tr><td><strong>type1</strong></td><td><strong>type2</strong></td></tr>  </tbody></table><ul><li><p>可以发现这里为二叉树的中序遍历和后续遍历。那么根据这两个遍历，可以知道前序遍历的结果，也就是 <code>type3</code> 为前序遍历。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303130907542.png" alt="image-20230313090751513" /></p></li><li><p>运行截图，可以得到中序和后序遍历的结果</p></li></ul><h3 id="exp-6"><a class="markdownIt-Anchor" href="#exp-6"></a> exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ToPreOrder</span>(<span class="hljs-params">Postorder,Inorder</span>):<br>    length = <span class="hljs-built_in">len</span>(Postorder)<br>    <span class="hljs-keyword">if</span> length == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    root = Postorder[length-<span class="hljs-number">1</span>] <span class="hljs-comment">#根节点　</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<span class="hljs-comment">#找到中序遍历中根节点的位序</span><br>        <span class="hljs-keyword">if</span> root == Inorder[i]:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(root,end=<span class="hljs-string">&quot;&quot;</span>)<br>    ToPreOrder(Postorder[<span class="hljs-number">0</span>:i],Inorder[<span class="hljs-number">0</span>:i]) <span class="hljs-comment">#递归，传入左子树的后序和中序遍历序列</span><br>    ToPreOrder(Postorder[i:length-<span class="hljs-number">1</span>],Inorder[i+<span class="hljs-number">1</span>:length])<span class="hljs-comment">#递归，传入右子树的后序和中序遍历序列</span><br>    <br>ToPreOrder(<span class="hljs-string">&quot;20f0Th&#123;2tsIS_icArE&#125;e7__w&quot;</span>,<span class="hljs-string">&quot;2f0t02T&#123;hcsiI_SwA__r7Ee&#125;&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="third_page"><a class="markdownIt-Anchor" href="#third_page"></a> Third_Page</h1><h2 id="2019红帽杯childre"><a class="markdownIt-Anchor" href="#2019红帽杯childre"></a> [2019红帽杯]childRE</h2><p>​<strong>Windows 内置函数的理解</strong></p><h3 id="分析-9"><a class="markdownIt-Anchor" href="#分析-9"></a> 分析</h3><ul><li>无壳，64位，直接IDA分析</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304072344923.png" alt="image-20230407234421853" /></p><ul><li>首先检测了输入长度，之后 <code>if语块</code> 没多关注，构造输入 <code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcde</code>，进行动调，查看v5发现将输入的顺序打乱为 <code>PQHRSIDTUJVWKEBXYLZaMFbcNdeOGCA</code></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304072346858.png" alt="image-20230407234656810" /></p><ul><li>之后从后往前看，发现 <code>a123456789Qwer</code>，<code>a46200860044218</code>，<code>a55565653255552</code> 有相应数据，直接爆破得到了 <code>outputString</code> 的最终值 <code>private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char *)</code></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304072348861.png" alt="image-20230407234800829" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">key = <span class="hljs-string">&quot;1234567890-=!@#$%^&amp;*()_+qwertyuiop[]QWERTYUIOP&#123;&#125;asdfghjkl;&#x27;,27h,&#x27;ASDFGHJKL:\&quot;ZXCVBNM&lt;&gt;?zxcvbnm,.&quot;</span><br>f1 = <span class="hljs-string">&#x27;(_@4620!08!6_0*0442!@186%%0@3=66!!974*3234=&amp;0^3&amp;1@=&amp;0908!6_0*&amp;&#x27;</span><br>f2 = <span class="hljs-string">&#x27;55565653255552225565565555243466334653663544426565555525555222&#x27;</span><br><br>message = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">62</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">127</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(key[j % <span class="hljs-number">23</span>]) == <span class="hljs-built_in">ord</span>(f1[i]) <span class="hljs-keyword">and</span> <span class="hljs-built_in">ord</span>(key[j//<span class="hljs-number">23</span>]) == <span class="hljs-built_in">ord</span>(f2[i]):<br>            message +=<span class="hljs-built_in">chr</span>(j)<br><span class="hljs-built_in">print</span>(message)<br></code></pre></td></tr></table></figure><ul><li>由上文在动调中，执行此函数之前，<code>v5</code> 和 <code>name</code> 占用同一块空间，都是 <code>PQHRSIDTUJVWKEBXYLZaMFbcNdeOGCA</code> ，可以发现 if语块负责打乱输入的字符顺序。之后执行此函数后，打乱的结果传递给了 <code>outputString</code>，可以推测出 <code>outputString  = private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char *)</code></li><li>综合目前的信息，可以知道函数 <code>UnDecorateSymbolName(v5, outputString, 0x100u, 0);</code> 获得一个打乱的输出 <code>v5</code>，经过函数的性质，转化为了 <code>private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char *)</code></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304081553288.png" alt="image-20230408155333208" /></p><h3 id="关键函数"><a class="markdownIt-Anchor" href="#关键函数"></a> 关键函数</h3><ul><li><p>现在问题就是明白 <code>UnDecorateSymbolName(v5, outputString, 0x100u, 0);</code> 函数的具体含义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">DWORD IMAGEAPI <span class="hljs-title">UnDecorateSymbolName</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  PCSTR name,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out] PSTR  outputString,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  DWORD maxStringLength,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  DWORD flags</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>[in] name</code> 修饰的 C++ 符号名称。 此名称可由名称的第一个字符标识，该名称始终是问号 (？)</li><li><code>[out] outputString</code> 指向接收未编码名称的字符串缓冲区的指针</li><li><code>[in] maxStringLength</code> <em>UnDecoratedName</em> 缓冲区的大小(以字符为单位)</li><li><code>[in] flags</code> 修饰名称如何取消编码的选项。 此参数为 0x0000 标识医用完全消除记录</li></ul></li></ul><p>*<em>private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char <em>)</em></em></p><ul><li>参考资料1</li></ul><blockquote><p>目前根据函数知道了第一个参数为输出地址，第二个参数是未修饰的名字，第三个参数为长度，第四个参数为0表示完全修饰</p></blockquote><ul><li>参考资料2</li></ul><blockquote><p><em>c++函数名的修饰更为复杂，提供的信息也更为丰富。</em><br /><em>无论 __cdecl，__fastcall还是__stdcall调用方式，函数修饰都是以一个“?”开始，后面紧跟函数的名字。再后面是参数表的开始标识和依照参数类型代号拼出的参数表。</em></p></blockquote><p><code>v5 = ?My_Aut0_PWN</code> - 函数修饰以“？”开始，后面跟随函数的名字</p><blockquote><p><em>对于C<ins>的类成员函数(其调用方式是thiscall)，函数的名字修饰与非成员的C</ins>函数稍有不同，首先就是在函数名字和参数表之间插入以“@”字符引导的类名。</em></p></blockquote><p><code>v5 = ?My_Aut0_PWN@ROPxx</code> - 类名是 <code>ROPxx</code></p><blockquote><p>其次是参数表的开始标识不同，</p><p><em>公有(public)成员函数的标识是“@@QAE”，</em></p><p><em>保护(protected)成员函数的标识是 “@@IAE”，</em></p><p><em>私有(private)成员函数的标识是“@@AAE”，</em></p><p><em>假设函数声明使用了constkeyword，则对应的标识应分别为“@@QBE”，“@@IBE”和“@@ABE”。</em></p></blockquote><p><code>v5 = ?My_Aut0_PWN@ROPxx@@AAE</code> - 私有成员(private)</p><blockquote><p><em>参数表的拼写代号如下：</em><br /><em>X–void</em><br /><em>D–char</em><br /><em>E–unsigned char</em><br /><em>F–short</em><br /><em>H–int</em><br /><em>I–unsigned int</em><br /><em>J–long</em><br /><em>K–unsigned long(DWORD)</em><br /><em>M–float</em><br /><em>N–double</em><br /><em>_N–bool</em><br /><em>U–struct</em><br /><em>…</em><br /><em>指针的方式有些特别。用PA表示指针，用PB表示const类型的指针。</em></p></blockquote><p><code>v5 = ?My_Aut0_PWN@R0Pxx@@AAEPAD</code> - 类名之后就是参数表，这个先加入函数返回值参数为 <code>char *</code></p><p><code>v5 = ?My_Aut0_PWN@R0Pxx@@AAEPADPAE</code> - 之后就是添加形参了，这里是 <code>unsigned char *</code></p><blockquote><p><em>参数表后以“@Z”标识整个名字的结束。假设该函数无参数，则以“Z”标识结束。</em></p></blockquote><p><code>v5 = ?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z</code> - 结尾标识</p><h3 id="exp-7"><a class="markdownIt-Anchor" href="#exp-7"></a> exp</h3><ul><li>得到了 <code>v5</code> 的值，可以根据前文字符的打乱顺序进行还原，之后进行md5加密</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br>m = <span class="hljs-string">&#x27;?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z&#x27;</span><br>enc1 = <span class="hljs-string">&#x27;PQHRSIDTUJVWKEBXYLZaMFbcNdeOGCA&#x27;</span><br>enc2 = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcde&#x27;</span><br>c = [<span class="hljs-string">&#x27;0&#x27;</span>] * <span class="hljs-number">31</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc2)):<br>    c[i] = m[enc1.find(enc2[i])]<br>k = <span class="hljs-string">&#x27;&#x27;</span>.join(c)<br>obj = hashlib.md5(k.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><span class="hljs-built_in">print</span>(obj.hexdigest())<br></code></pre></td></tr></table></figure><h2 id="swpu2019reverseme"><a class="markdownIt-Anchor" href="#swpu2019reverseme"></a> [SWPU2019]ReverseMe</h2><p>​<strong>内存访问断点的使用</strong></p><h3 id="分析-10"><a class="markdownIt-Anchor" href="#分析-10"></a> 分析</h3><ul><li>正常使用IDA分析</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304081909327.png" alt="image-20230408190950254" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304081910191.png" alt="image-20230408191010144" /></p><ul><li>从前后进行动调分析，最后得到 <code>sub_402350</code> 对输入的flag 进行操作，和 <code>v36</code> 等内置数据进行比较得到结果。这里 <code>sub_402350</code> 太过于复杂，搜索别人的学会了内存断点的方法。</li></ul><h3 id="内存断点"><a class="markdownIt-Anchor" href="#内存断点"></a> 内存断点</h3><h4 id="禁用aslr"><a class="markdownIt-Anchor" href="#禁用aslr"></a> 禁用ASLR</h4><blockquote><p>首先记得关闭ASLR，否则OD和IDA中基址就不太一样</p></blockquote><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304082000293.png" alt="image-20230408200039234" /></p><ul><li><p>微软从windows vista/windows server 2008(kernel version 6.0)开始采用ASLR技术，主要目的是为了防止缓冲区溢出。ASLR技术会使PE文件每次加载到内存的起始地址随机变化，并且进程的栈和堆的起始地址也会随机改变。这里只要PE头 DLL Charateristics 有 0x40 时，每次OD加载时的基址就不一样。去掉IMAGE_OPTIONAL_HEADER.DLLCharacteristics 的IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE 可以禁用随机基址。</p></li><li><p>使用 <code>Study PE</code> 直接固定基址，之后另存为文件即可</p></li></ul><h4 id="od调试"><a class="markdownIt-Anchor" href="#od调试"></a> OD调试</h4><ul><li>根据上下文，找到了调用 <code>sub_402350</code> 之前的位置，并在内存窗口看到打乱顺序的input(一开始输入了32个 ‘1’)</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304082006374.png" alt="image-20230408200623320" /></p><ul><li>在内存窗口(红框)下 <code>内存访问断点</code>，然后 <code>F9</code> 执行，找到了函数中对于 input 地址的更改。发现这里使用 <code>ecx</code> 对数据进行了异或处理，之后又赋值到 <code>[ebx + eax - 0x4]</code> 的位置。<code>PS:F9 抵达断点位置时，这个时候[ebi + eax] 已经对 ecx进行了赋值操作，所以一开始的数据需要在内存窗口往上翻才能找到</code></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304082028713.png" alt="image-20230408202843658" /></p><ul><li>之后在内存新地址下 <code>内存访问断点</code> 。发现这里将 <code>eax</code> 和 <code>edx</code> 逐个进行比较，这里 <code>eax</code> 来自 ecx，如下内存窗口。而 <code>edx</code> 就是下内存访问断点的地方，就是数据存储的区域。这里也验证了IDA中最后对比的过程。</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304082034829.png" alt="image-20230408203403780" /></p><h3 id="exp-8"><a class="markdownIt-Anchor" href="#exp-8"></a> exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">ipt = <span class="hljs-string">&#x27;11111111111111111111111111111111&#x27;</span> <span class="hljs-comment"># len is 32</span><br>v10 = <span class="hljs-built_in">list</span>(ipt)<br>v35 = <span class="hljs-string">&#x27;SWPU_2019_CTF&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ipt)):<br>    v10[i] = <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(v10[i]) ^ <span class="hljs-built_in">ord</span>(v35[i % <span class="hljs-built_in">len</span>(v35)]))<br><span class="hljs-built_in">print</span>(v10)<br><br>enc = [  <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x5A</span>,<br>  <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x16</span>,<br>  <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x6B</span>,<br>  <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x67</span>]<br><br>key = [<span class="hljs-number">0x86</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x19</span>,  <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xB0</span>,<br><span class="hljs-number">0x69</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x28</span><br>]<br>flag = [<span class="hljs-string">&#x27;0&#x27;</span>] * <span class="hljs-number">32</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    flag[i] = <span class="hljs-built_in">chr</span>(enc[i] ^ key[i] ^ <span class="hljs-built_in">ord</span>(v35[i % <span class="hljs-built_in">len</span>(v35)]))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(flag))<br></code></pre></td></tr></table></figure><h2 id="npuctf2020你好sao啊"><a class="markdownIt-Anchor" href="#npuctf2020你好sao啊"></a> [NPUCTF2020]你好sao啊</h2><ul><li><p>查壳，一个无壳的64位程序</p></li><li><p>查看内部信息，这里可以观察对于输入的s进行了RxEncode的函数操作，之后把这个结果s1与本身赋值的s2进行对比，相同就是正确的flag了</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202309302051129.png" alt="image-20230930205151048" /></p></li><li><p>查看 RxEncode 函数的内容，发现是一个base64加密的操作，只不过是表进行了更换</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202309302053251.png" alt="image-20230930205241620" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202309302053278.png" alt="image-20230930205354245" /></p></li><li><p>最后直接使用python逆推base64加密的过程即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> *<br><br>table = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234&#123;&#125;789+/=&quot;</span><br>raw = [<span class="hljs-number">0xFD370FEB59C9B9E</span>, <span class="hljs-number">0xDEAB7F029C4FD1B2</span>, <span class="hljs-number">0xFACD9D40E7636559</span>]<br>target = <span class="hljs-string">b&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-comment"># print(pack(&quot;Q&quot;, raw[i]))</span><br>    target += pack(<span class="hljs-string">&quot;Q&quot;</span>, raw[i])<br>    <br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(target), <span class="hljs-number">3</span>):<br>    v8 = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        v8 |= target[i + j] &lt;&lt; <span class="hljs-number">8</span> * (<span class="hljs-number">2</span> - j)<br><br>    v7 = v8<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        idx = (v7 &gt;&gt; <span class="hljs-number">6</span> * j) &amp; <span class="hljs-number">0b111111</span><br>        flag += table[idx]<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure></li></ul><h2 id="安洵杯-2019crackme"><a class="markdownIt-Anchor" href="#安洵杯-2019crackme"></a> [安洵杯 2019]crackMe</h2><h3 id="分析-11"><a class="markdownIt-Anchor" href="#分析-11"></a> 分析</h3><ul><li><p>首先查壳无壳，然后直接载入IDA</p></li><li><p>这里通过字符串搜索到 <code>please Input the flag:\n</code>，直接引用查看，发现来到了<code>main</code>函数。这里有一个内存访问异常，再结合MessageBoxW中的信息，感觉这里会有异常处理的存在。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310051057731.png" alt="image-20231005105703690" /></p></li><li><p>之后再函数列表中就发现了 <code>Handler</code> 函数，跟进发现这是使用 <code>SetUnhangledExceptionFilter</code> 来注册的未处理异常，这个调试器不会运行到这里处理，由此可知前面的内粗访问异常可以阻止调试器调试，因为得不到正确信息。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310051108003.png" alt="image-20231005110821954" /></p></li><li><p>之后查看 <code>sub_411172</code> 函数，发现其中关键的数字0xA3B1BAC6，经过查阅，发现这个是<code>SM4</code>加密，那么 <code>where_are_u_now?</code>就是密钥，同时 <code>unk_41A218</code> 的数据也被main函数的<code>sub_41100F</code>函数所引用</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310051111426.png" alt="image-20231005111144377" /></p></li><li><p>同时观察 <code>TopLevelExceptionFilter</code> 的内容，跟进发现首先对于最后的 <code>Str2</code>进行了更改，之后有对数据 <code>byte_41A180</code> 进行了处理传递给 <code>Str1</code> ，最后在 <code>sub_411136</code> 函数进行了正确性比对，由此可以看出<code>Str1</code>来自于自己的输入。又由于查看汇编，发现 <code>byte_41A180</code>与 <code>unk_41A1E4</code>是连续的，所以可以视为对于输入进行了操作。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310051117612.png" alt="image-20231005111717569" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310051117437.png" alt="image-20231005111730401" /></p></li><li><p>这里跟进 <code>sub_41126C</code> 函数会发现这是一个变种的base64加密，对于输入进行了转换处理</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310051120575.png" alt="image-20231005112029524" /></p></li><li><p>但是再尝试运行程序时，跳出的是 <code>hooked</code> 标识的信息，由此怀疑还有别的操作，查找字符串找到<code>hooked</code>，由此可以看出对于base64的表进行了处理。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202310051122180.png" alt="image-20231005112215145" /></p></li><li><p>综上，可以分析出：该程序首先通过hook改变了main函数中message的消息传递，并且改变了base64表，之后通过内存访问异常来引出handler来进行处理，在该函数中，首先经过一个函数进行SM4加密，之后传递加密后的字符串进行异常处理，之后就是一个变种的base64加密，与更改后的Str2进行对比，成功就是正确的flag</p></li></ul><h3 id="exp-9"><a class="markdownIt-Anchor" href="#exp-9"></a> exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> pysm4 <span class="hljs-keyword">import</span> encrypt, decrypt<br>base = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>diy_base = <span class="hljs-string">&#x27;yzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/abcdefghijklmnopqrstuvwx&#x27;</span><br><br>str2 = <span class="hljs-string">&#x27;U1ATIOpkOyWSvGm/YOYFR4!!&#x27;</span><br>sstr2 = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(str2)-<span class="hljs-number">2</span>):<br>sstr2 += base[diy_base.find(str2[i])]<br>sstr2 += <span class="hljs-string">&#x27;==&#x27;</span><br>dec_64 = base64.b64decode(sstr2)<br>cipher_num = <span class="hljs-string">&quot;0x&quot;</span> + dec_64.<span class="hljs-built_in">hex</span>()<br>cipher_num = <span class="hljs-built_in">int</span>(cipher_num,<span class="hljs-number">16</span>)<br>mk = <span class="hljs-number">0x77686572655f6172655f755f6e6f773f</span><br>clear_num = decrypt(cipher_num, mk)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag&#123;&#x27;</span>+<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">hex</span>(clear_num)[<span class="hljs-number">2</span>:]).decode()+<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库原理与应用</title>
    <link href="/posts/1b8dd184.html"/>
    <url>/posts/1b8dd184.html</url>
    
    <content type="html"><![CDATA[<h1 id="绪论"><a class="markdownIt-Anchor" href="#绪论"></a> 绪论</h1><h2 id="考试要点"><a class="markdownIt-Anchor" href="#考试要点"></a> 考试要点</h2><ul><li>数据库(DB)、数据库管理系统(DBMS)、数据库系统(DBS)、数据库应用系统(DBAS)</li><li>数据管理技术的三个发展阶段、数据库系统的优点</li><li>数据模型的分类、组成要素、E-R图、常用逻辑数据模型优缺点比较、关系模型(关系模式)</li><li>数据库系统的三级模式结构、两级映像和数据独立性(优点)</li></ul><h2 id="区分数据库相关含义"><a class="markdownIt-Anchor" href="#区分数据库相关含义"></a> 区分数据库相关含义</h2><h3 id="数据库"><a class="markdownIt-Anchor" href="#数据库"></a> 数据库</h3><p>​<strong>数据库(DB)</strong>：指在计算机的存储设备上合理存放相关联，有结构的数据集合。<code>数据库在硬件存放</code></p><ul><li><strong>有结构</strong>：数据库与文件系统相比最大的特点之一</li></ul><h3 id="数据库管理系统"><a class="markdownIt-Anchor" href="#数据库管理系统"></a> 数据库管理系统</h3><p>​<strong>数据库管理系统(DBMS)</strong>：是一个操作和管理数据库的大型软件(是一组软件)，它由一组计算机程序构成，位于用户于操作系统之间的一层数据管理系统(属于系统软件)。</p><h3 id="数据库系统"><a class="markdownIt-Anchor" href="#数据库系统"></a> 数据库系统</h3><p>​<strong>数据库系统(DBS)</strong>：用于实现有组织、动态地存储大量相关地结构化数据，便于用户使用数据库地计算机软件和硬件资源组成的系统。即数据库系统是指在<strong>计算机系统</strong>中引进<strong>数据库</strong>和<strong>数据库管理系统</strong>后地系统。</p><ul><li>数据库系统一般由<strong>硬件、软件、数据库和用户</strong>4部分组成。<ul><li>硬件、软件—计算机系统</li><li>用户(包括管理、开发和终端用户)—数据库管理系统<ul><li><strong>数据库管理员(DBA)</strong>：负责整个数据库系统的建设、管理、维护和协调工作。主要职责：<ol><li>参与数据库系统的设计于建设</li><li>对系统的运行实行监控</li><li>定义数据的安全性要求和完整性约束条件</li><li>负责数据库性能的改进和数据库的重组及重构工作</li></ol></li></ul></li></ul></li></ul><h3 id="数据库应用系统"><a class="markdownIt-Anchor" href="#数据库应用系统"></a> 数据库应用系统</h3><p>​<strong>数据库应用系统(DBAS)</strong>：指数据库系统及应用程序的组成。</p><h2 id="数据库系统的产生与发展"><a class="markdownIt-Anchor" href="#数据库系统的产生与发展"></a> 数据库系统的产生与发展</h2><h3 id="区分概念"><a class="markdownIt-Anchor" href="#区分概念"></a> 区分概念</h3><p>​<strong>数据管理</strong>：数据处理中心环节</p><h3 id="数据管理技术的产生与发展"><a class="markdownIt-Anchor" href="#数据管理技术的产生与发展"></a> 数据管理技术的产生与发展</h3><h4 id="人工管理阶段"><a class="markdownIt-Anchor" href="#人工管理阶段"></a> 人工管理阶段</h4><ul><li>程序和数据密不可分</li><li>数据不能共享</li><li>数据不具有独立性(<code>缺乏数据独立性</code>)</li></ul><h4 id="文件系统阶段"><a class="markdownIt-Anchor" href="#文件系统阶段"></a> 文件系统阶段</h4><ul><li>优点：<ul><li>程序与数据可以分别独立存放，数据可以组成数据文件，并且可以独立命名</li></ul></li><li>问题：<ul><li>数据冗余度大、共享性差、易产生数据不一致性</li><li>数据独立性差</li><li>用户负担重</li><li><code>数据无结构</code></li></ul></li></ul><h4 id="数据库系统阶段"><a class="markdownIt-Anchor" href="#数据库系统阶段"></a> 数据库系统阶段</h4><ul><li><code>数据结构化</code>：文件系统与数据库系统的根本区别之一</li><li><code>类别</code>：层次型数据库，网状数据库和关系型数据库</li></ul><h3 id="数据库系统的特点"><a class="markdownIt-Anchor" href="#数据库系统的特点"></a> 数据库系统的特点</h3><ol><li>数据结构化：文件系统与数据库系统的根本区别之一</li><li>数据冗余度小、共享性高、避免了数据的不一致性</li><li>具有较高的数据独立性</li><li>数据由DBMS统一管理和控制</li></ol><h2 id="数据模型"><a class="markdownIt-Anchor" href="#数据模型"></a> 数据模型</h2><h3 id="相关解释"><a class="markdownIt-Anchor" href="#相关解释"></a> 相关解释</h3><h4 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h4><p>​现有数据库系统均是基于某种数据模型的，<code>数据模型是数据库系统的核心和基础</code></p><h4 id="数据模型的分类"><a class="markdownIt-Anchor" href="#数据模型的分类"></a> 数据模型的分类</h4><ol><li>概念数据模型(概念模型)：是独立于计算机系统的数据模型，完全不涉及信息在计算机中的表示，是<strong>面向数据库用户的现实世界模型</strong>，主要用来描述现实世界的概念化结构。</li><li>逻辑数据模型(数据模型)：<strong>用户所看到的模型</strong>，是具体的DBMS所支持的数据模型，如<strong>层次数据模型，网状数据模型，关系模型和面向对象模型</strong>。</li><li>物理数据模型(物理模型)：对数据最底层的抽象，描述数据在系统内部的表示方法和存取方法，在磁盘或磁带上的存储方式和存取方式，是<strong>面向计算机系统的</strong>。</li></ol><h4 id="数据模型的组成要素"><a class="markdownIt-Anchor" href="#数据模型的组成要素"></a> 数据模型的组成要素</h4><ol><li>数据结构：支队实体模型和实体间联系的表达和实现。<code>它是数据模型最基本的组成部分，规定了数据模型的静态特性</code>—描述一个模型性质的最重要的方面。</li><li>数据操作：数据操作是指一组用于指定数据结构的任何有效实例执行的操作或推导规则。<code>数据操作规定了数据模型的动态特性</code></li><li>数据完整性约束：数据完整性给出数据及其联系应具有的制约和依赖规则。</li></ol><h3 id="实体联系数据模型"><a class="markdownIt-Anchor" href="#实体联系数据模型"></a> 实体——联系数据模型</h3><ul><li>信息，实体集联系和E-R图</li></ul><h3 id="常用结构数据模型"><a class="markdownIt-Anchor" href="#常用结构数据模型"></a> 常用(结构)数据模型</h3><h4 id="层次模型"><a class="markdownIt-Anchor" href="#层次模型"></a> 层次模型</h4><ul><li>满足条件：有且只有一个节点没有双亲节点(称为根节点)；根节点以外的其他节点有且只有一个双亲节点。</li><li>特点：<ul><li>记录之间得到联系通过指针来实现，常用的物理实现方法由邻接法和链接法。</li><li>由于采用指针实现记录间的联系，所以，<code>层次模型具有查询效率较高的优点</code></li></ul></li><li>缺点：<ul><li>层次数据模型缺乏直接表达现实世界中非层次型结构的复杂联系，如多对多的联系</li><li>层次顺序严格限制</li></ul></li><li>IMS是IBM公司推出的最有影响的一种典型的层次模型数据管理系统</li></ul><h4 id="网状模型"><a class="markdownIt-Anchor" href="#网状模型"></a> 网状模型</h4><ul><li>取消了层次模型的限制，不但允许一个以上的节点无双亲，而且一个节点允许有一个以上的双亲</li><li>比层次数据模型更具<code>普遍性</code>的结构，反映了实体集间普遍存在的更为复杂的联系，<code>层次结构实际上是网状结构的一个特例</code></li></ul><h4 id="关系模型"><a class="markdownIt-Anchor" href="#关系模型"></a> 关系模型</h4><h5 id="解释"><a class="markdownIt-Anchor" href="#解释"></a> 解释：</h5><ul><li>二维表(数据结构)称为关系，对二维框架的描述称为关系模型</li><li>表中的列称为<strong>属性或者字段</strong>，列中的<strong>值</strong>取自相应的域，<strong>域</strong>是属性所有可能取值的集合</li><li>表中的一行称为一个元组(Tuple)，元组用关键字(Key Word)标识</li></ul><h5 id="关系性质"><a class="markdownIt-Anchor" href="#关系性质"></a> 关系性质：</h5><ul><li>关系中的每一个属性是不可分解的，即所有域都应是原子数据的集合；没有完全相同的行和列，行、列的排列顺序是无关紧要的。</li></ul><h5 id="关系模式"><a class="markdownIt-Anchor" href="#关系模式"></a> 关系模式</h5><ul><li><p>关系模式是关系中信息内容结构的描述。它包括关系名，属性名，每个属性列的取值集合，数据完整性约束条件以及各属性间固有的数据依赖关系等。</p></li><li><p>关系模式的表示：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><mo stretchy="false">(</mo><mi>U</mi><mo separator="true">,</mo><mi>D</mi><mo separator="true">,</mo><mi>D</mi><mi>O</mi><mi>M</mi><mo separator="true">,</mo><mi>I</mi><mo separator="true">,</mo><mo>∑</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">R(U,D,DOM,I,\sum)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">∑</span><span class="mclose">)</span></span></span></span></span></p><ul><li>R：关系名</li><li>U：组成关系R的全部属性的集合</li><li>DOM：属性列到域的映射，即DOM；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo>→</mo><mi>D</mi></mrow><annotation encoding="application/x-tex">U \rightarrow D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span>，且每个属性<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，所有可能的取值集合构成<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D_i(i = 1,2,\ldots ,n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，并允许<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mi>i</mi></msub><mo>=</mo><msub><mi>D</mi><mi>j</mi></msub><mo separator="true">,</mo><mi>i</mi><mo mathvariant="normal">≠</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">D_i = D_j,i\neq j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span></li><li>I：一组完整性约束条件</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span></span></span></span>：属性集间的一组数据依赖</li><li>通常，在不涉及完整性约束及数据依赖的情况下，为了简化，可用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo stretchy="false">(</mo><mi>U</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">R(U)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mclose">)</span></span></span></span>表示关系模式，例如，学生关系模式可以表示为：S(学号，姓名，性别，年龄，学院)</li></ul></li></ul><h5 id="数据约束"><a class="markdownIt-Anchor" href="#数据约束"></a> 数据约束</h5><h2 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h2><ol><li><p>什么是数据独立性？ 数据库的体系结构如何保证数据独立性？</p><ul><li>数据独立性是指数据库中数据与应用程序的无关性，也指应用程序和数据结构之间相互独立，不受影响。在三层模式体系结构中数据独立性可定义为：数据库系统在某一层次模式上的改变不会使它的上一层模式也发生改变的能力。其包括数据逻辑独立性和数据物理独立性。其中逻辑独立性是指数据的全局逻辑结构与局部逻辑结构之间的相互独立性，表示一旦模式发生变化，无须改变外模式或应用程序的能力；物理独立性是指数据的存储结构与全局逻辑结构之间的相互独立性，表示不会因为内模式发生改变而导致概念模式发生改变的能力。</li><li>数据独立性是由DBMS在三级模式间提供的两层映像来保证的。两层映像分为外模式/模式映像和模式/内模式映像，实现了三个抽象级别的来实现和转换.当整个系统需要改变模式时，DBMS对于外模式/模式映像做出相应的改变，保证了数据逻辑独立性，而数据的存储结构发生改变时，DBMS对于模式/内模式映像做出相应改变，从而保证了物理独立性</li></ul></li><li><p>什么是外部模式？概念模式？内部模式？它们之间有何联系？这种分级结构的优点是什么？</p><ul><li>外部模式又称为子模式，介于模式与应用之间，是用户与数据库之间的接口，是数据库用户能够看见和使用的局部数据和特征的描述。</li><li>概念模式简称模式，是由数据库设计者综合所有用户数据，按照统一的观点构造的对数据库全局逻辑结构的描述。</li><li>内部模式称为存储模式，是对数据库中数据物理结构和存储方式的描述，是数据在数据库内部的表示方式。</li><li>一个数据库结构从逻辑上可以划分为三个层次：外部模式，概念模式，内部模式，称为数据库的三级模式结构。</li><li>数据库系统的三级模式是对数据进行三个级别的抽象。它把数据的具体组织留给DBMS去做，用户只要抽象地处理数据，而不必关心数据在机器中地具体表示方式和存储方式。数据库的三级结构是依靠映像来联系和相互转化的，正是这两层映像保证了数据库系统中数据具有较高的数据独立性。</li></ul></li></ol><h1 id="关系数据库"><a class="markdownIt-Anchor" href="#关系数据库"></a> 关系数据库</h1><h2 id="考试要点-2"><a class="markdownIt-Anchor" href="#考试要点-2"></a> 考试要点</h2><ul><li>关系的定义、码的概念、关系的性质</li><li>关系操作(查询和更新)</li><li>关系完整性约束(实体完整性、参照完整性、用户自定义完整性)</li><li>关系代数(五种基本代数)</li><li>查询优化</li><li>关系系统分类(表示系统、最小关系系统、关系完备系统、全关系系统)</li></ul><h1 id="关系数据库标准语言sql"><a class="markdownIt-Anchor" href="#关系数据库标准语言sql"></a> 关系数据库标准语言SQL</h1><h2 id="考试要点-3"><a class="markdownIt-Anchor" href="#考试要点-3"></a> 考试要点</h2><ul><li>SQL体系结构</li><li>定义功能、查询功能、数据操作功能、数据控制功能(略)</li><li>数据查询(单表、分组、聚集、排序、自连接、嵌套查询、Exists查询)</li></ul><h1 id="关系规范化理论"><a class="markdownIt-Anchor" href="#关系规范化理论"></a> 关系规范化理论</h1><h2 id="考试要点-4"><a class="markdownIt-Anchor" href="#考试要点-4"></a> 考试要点</h2><ul><li>完全函数依赖、部分函数依赖、传递依赖</li><li>主属性、非主属性、主码、外码、候选码</li><li>范式、函数依赖集闭包、属性集闭包、最小覆盖、码值理论</li><li>无损连接的判定、函数依赖保持的判定</li><li>基于 3NF 的分解算法</li></ul><h2 id="数据依赖的公理系统"><a class="markdownIt-Anchor" href="#数据依赖的公理系统"></a> 数据依赖的公理系统</h2><ul><li><p>函数依赖集的闭包</p></li><li><p>函数依赖的推理规则</p><ul><li>独立推理规则</li><li>其他推理规则</li></ul></li><li><p>属性集闭包与 F 逻辑蕴含的充要条件</p><ul><li><p>属性集闭包 — <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>X</mi><mi>F</mi><mo lspace="0em" rspace="0em">+</mo></msubsup></mrow><annotation encoding="application/x-tex">X_{F}^{+}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104993em;vertical-align:-0.293531em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.811462em;"><span style="top:-2.4064690000000004em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.293531em;"><span></span></span></span></span></span></span></span></span></span></p></li><li><p><strong>F 逻辑蕴含的充要条件</strong></p><ul><li>设 F 为属性集 U 上的一组函数依赖关系，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo>⊆</mo><mi>U</mi><mo separator="true">,</mo><mi>X</mi><mo>−</mo><mo>&gt;</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X,Y \subseteq U,X-&gt;Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span> 能由 F 根据 Armstrong 公理导出的充分必要条件是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi><mo>⊆</mo><msubsup><mi>X</mi><mi>F</mi><mo lspace="0em" rspace="0em">+</mo></msubsup></mrow><annotation encoding="application/x-tex">Y \subseteq X_{F}^{+}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104993em;vertical-align:-0.293531em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.811462em;"><span style="top:-2.4064690000000004em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.293531em;"><span></span></span></span></span></span></span></span></span></span></li><li>将函数依赖 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>−</mo><mo>&gt;</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X-&gt;Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span> 是否能由 F 根据 Armstrong 公理导出的问题转化为求 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>X</mi><mi>F</mi><mo lspace="0em" rspace="0em">+</mo></msubsup></mrow><annotation encoding="application/x-tex">X_{F}^{+}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104993em;vertical-align:-0.293531em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.811462em;"><span style="top:-2.4064690000000004em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.293531em;"><span></span></span></span></span></span></span></span></span></span></li></ul></li><li><p>求属性集闭包算法</p></li><li><p>码值理论 — 利用属性集闭包判断某个已知的属性集是否为关系的候选码</p></li></ul></li><li><p>最小函数依赖集</p><ul><li>定义 与 求解算法</li><li>函数依赖集 F 的最小覆盖可能会有多个，与删减顺序有关</li></ul></li><li><p>关系模式的分解方法</p><ul><li>由问题引入模式分解“等价性”的两个判定准则：“无损连接性”和“函数依赖保持性”</li><li>分解的无损连接性(无损分解)<ul><li>构造二维表</li><li>分解为两个关系的情况</li></ul></li><li>分解的函数依赖保持性<ul><li>分解的函数依赖保持行</li><li>保持依赖的判定算法</li></ul></li><li>关系模式的分解算法<ul><li>满足3NF的函数依赖保持分解算法</li><li>满足3NF的函数依赖保持和无损连接的分解算法</li></ul></li></ul></li></ul><h2 id="题型"><a class="markdownIt-Anchor" href="#题型"></a> 题型</h2><ol><li>范式判断</li><li>求属性集闭包</li><li>码值定理求候选码</li><li>求最小函数依赖集，三步走，右化小(单属性)，消除冗余，左删冗余</li><li>判断模式分解是否无损连接(两种情况)</li><li>判断模式分解是否保持函数依赖，需要在 F 中把左边决定属性的闭包加在分出的 R 中，之后再求并集</li><li>3NF的模式分解算法<ol><li>满足3NF的函数依赖保持，求最小函数依赖集，之后合并</li><li>满足3NF的函数依赖保持和无损连接</li></ol></li><li>分解 BC NF，使用码值定理求候选码</li></ol><h1 id="数据库设计"><a class="markdownIt-Anchor" href="#数据库设计"></a> 数据库设计</h1><h2 id="考试要点-5"><a class="markdownIt-Anchor" href="#考试要点-5"></a> 考试要点</h2><ul><li>数据库设计的步骤</li><li>需求分析(数据流图、数据字典)</li><li>概念结构设计(ER图、消除冲突)</li><li>逻辑结构设计(ER图到逻辑结构的转换、规范化)</li></ul><h1 id="数据库保护"><a class="markdownIt-Anchor" href="#数据库保护"></a> 数据库保护</h1><h2 id="考试要点-6"><a class="markdownIt-Anchor" href="#考试要点-6"></a> 考试要点</h2><ul><li>事务、事务特性</li><li>数据库恢复的概念、数据库故障的种类、故障恢复策略</li><li>并发操作引发的问题、可串行化判定方法(冲突可串行化、前驱图)</li><li>建立可串行化调度方法(封锁技术、三级封锁协议及解决的问题，2PL协议，冲突可串行化定义)</li><li>数据库安全性概念、措施、存取控制SQL语句</li><li>数据库完整性概念、约束的类型</li></ul>]]></content>
    
    
    <categories>
      
      <category>课程复习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>高级逆向分析技术</title>
    <link href="/posts/d0607d51.html"/>
    <url>/posts/d0607d51.html</url>
    
    <content type="html"><![CDATA[<h1 id="逆向分析技术"><a class="markdownIt-Anchor" href="#逆向分析技术"></a> 逆向分析技术</h1><blockquote><p><a href="https://bbs.kanxue.com/thread-225740.htm">反调试技术总结</a></p></blockquote><h2 id="tls回调函数"><a class="markdownIt-Anchor" href="#tls回调函数"></a> TLS回调函数</h2><p>​TLS(Thread Local Storage, 线程局部存储)回调函数(Callback Function).</p><p><a href="https://xz.aliyun.com/t/12057">TLS回调函数的学习</a></p><h2 id="teb"><a class="markdownIt-Anchor" href="#teb"></a> TEB</h2><p>​<strong>TEB</strong>：线程环境块，该结构包含进程中运行线程的各种信息，进程中的每个线程都对应一个TEB结构体。</p><h3 id="重要成员"><a class="markdownIt-Anchor" href="#重要成员"></a> 重要成员</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303202139261.png" alt="image-20230320213950169" /></p><ul><li><code>ProcessEnvironmentBlock</code><ul><li>指向PEB结构体的指针。–PEB是进程环境块，每个进程对应一个PEB结构体。</li></ul></li><li><code>NtTib</code><ul><li>TEB结构体的第一个成员为_NT_TIB结构体(TIB指线程信息块)</li></ul></li></ul><h3 id="teb的访问方法"><a class="markdownIt-Anchor" href="#teb的访问方法"></a> TEB的访问方法</h3><ul><li><code>Ntdll.NtCurrentTeb()</code><ul><li>此API用来返回当前线程的TEB结构体的地址(返回 <code>FS:[18]</code>)</li></ul></li></ul><h4 id="fs段寄存器"><a class="markdownIt-Anchor" href="#fs段寄存器"></a> FS段寄存器</h4><ul><li><p>FS段寄存器用来指示当前线程的TEB结构体----<strong>FS寄存器持有SDT的索引，该索引持有实际TEB地址</strong>。而由于段寄存器实际存储的是SDT的索引，所以它也被称为“段选择符”。</p><blockquote><p>SDT 位于内核内存区域，其地址存储在特殊的寄存器 GDTR (全局描述符表寄存器) 中</p></blockquote><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303202146251.png" alt="image-20230320214632226" /></p></li><li><p><code>FS:[0x18] = TEB 起始地址</code></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303202147341.png" alt="image-20230320214758319" /></p></li><li><p><code>FS:[0x30] = PEB 起始地址</code></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303202148834.png" alt="image-20230320214844817" /></p></li><li><p><code>FS:[0] = SEH 起始地址</code></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303202149069.png" alt="image-20230320214914053" /></p></li></ul><h2 id="peb"><a class="markdownIt-Anchor" href="#peb"></a> PEB</h2><p>​<strong>PEB</strong>：进程环境块，每个进程对应一个PEB结构体。</p><h3 id="重要成员-2"><a class="markdownIt-Anchor" href="#重要成员-2"></a> 重要成员</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303202151881.png" alt="image-20230320215125838" /></p><ul><li><p><code>BeingDebugged</code></p><ul><li><code>Kernel32.dll</code> 中的 <code>IsDebuggerPresent()</code> API通过检测 <code>PEB.BeingDebugged</code> 成员来确定是否正在调试进程(是，返回1；否则，返回0)</li></ul></li><li><p><code>ImageBaseAddress</code></p><ul><li><p><code>PEB.ImageBaseAddress</code> 成员用来表示进程的 ImageBase 。其中 <code>GetModuleHandle()</code> API 用来获取 ImageBase。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">HMODULE <span class="hljs-title">GetModuleHandleA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in, optional] LPCSTR lpModuleName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>向 <code>IpModuleName</code> 参数赋值为 NULL，调用 <strong>GetModuleHandle()</strong> 函数将返回进程被加载的 ImageBase。</p></li></ul></li><li><p><code>Ldr</code>(+0xC)</p><ul><li>指向 <code>_PEB_LDR_DATA</code> 结构体的指针。</li></ul></li><li><p><code>ProcessHeap &amp; NtGlobalFlag</code></p><ul><li>应用于反调试技术，若进程处于调试状态，则两个成员就持有特定值。</li></ul></li></ul><h2 id="seh"><a class="markdownIt-Anchor" href="#seh"></a> SEH</h2><p>​<code>SEH</code> 是 Windows 操作系统提供的异常处理机制，在程序源代码中使用 <code>__try、__except、__finall</code> 关键字来具体实现。</p><h3 id="os的异常处理方法"><a class="markdownIt-Anchor" href="#os的异常处理方法"></a> OS的异常处理方法</h3><ul><li><p>进程运行过程中若发生异常，OS会委托进程处理。</p><ul><li><p>若是进程代码中存在具体的异常处理(如 SEH 异常处理器) 代码，则能顺利处理相关异常，程序继续运行</p></li><li><p>否则相关异常无法处理，OS就会启动默认的遗产给处理机制，终止程序的运行</p></li></ul></li></ul><h3 id="调试器运行时的异常处理方法"><a class="markdownIt-Anchor" href="#调试器运行时的异常处理方法"></a> 调试器运行时的异常处理方法</h3><ul><li><p>若<strong>被调试进程</strong>内部发生异常，OS会先把异常抛给**调试进程处理 **(即调试器)。这里如果被调试者发生异常时，调试器就会暂停运行，必须采取某种措施来处理异常，完成后继续调试。遇到异常时经常采用的几种处理方法如下：</p><ol><li><p>直接修改异常：代码、寄存器、内存</p><p>被调试者发生异常时，调试器会在发生异常的代码处暂停，此时可以通过调试器直接修改有问题的代码、内存、寄存器等，排除异常后，调试器继续运行程序</p></li><li><p>将异常抛给被调试者处理</p><p>如果被调试者内部存在SEH (异常处理函数) 能够处理异常，那么异常通知会发送给调试者，由被调试者自行处理。</p></li><li><p>OS默认的异常处理机制</p><p>如果调试器于被调试者都无法处理(或故意不处理)当前的异常，则OS的默认异常处理机制会处理它，终止被调试进程，同时结束调试。</p></li></ol></li></ul><h3 id="异常"><a class="markdownIt-Anchor" href="#异常"></a> 异常</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303202214355.png" alt="image-20230320221405286" /></p><ul><li><p><code>EXCEPTION_ACCESS_VIOLATION (C0000005)</code></p><ul><li><p>试图访问不存在或不具有访问权限的内存区域时，就会发生 EXCEPTION_ACCESS_VIOLATION (非法访问异常)</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303202215544.png" alt="image-20230320221537507" /></p></li></ul></li><li><p><code>EXCEPTION_BREAKPOINT (80000003)</code></p><ul><li>在运行代码中设置断点后，CPU尝试执行该地址处的指令时，将会发生此类异常。调试器就是利用该异常实现断点功能的</li></ul></li><li><p><code>EXCEPTION_ILLEGAL_INSTRUCTION (C000001D)</code></p><ul><li>CPU遇到无法解析的指令时引发该异常</li></ul></li><li><p><code>EXCEPTION_INT_DIVIDE_BY_ZERO (C0000094)</code></p><ul><li>INTEGER 触发运算中，若是分母为0，则引发此异常</li></ul></li><li><p><code>EXCEPTION_SINGLE_STEP (80000004)</code></p><ul><li>Single Step(单步) 的含义时执行1条指令，然后暂停。CPU进入单步模式后，每执行一条指令就会引发此异常，暂停运行。将 EFLAGS 寄存器的 TF(Trap Flag, 陷阱标志) 位设置为1后，CPU就会进入单步工作模式</li></ul></li></ul><p><a href="https://www.yunzh1jun.com/2022/05/27/WindowsSEH/">学习博客</a></p><h1 id="反调试技术"><a class="markdownIt-Anchor" href="#反调试技术"></a> 反调试技术</h1><h2 id="静态反调试技术"><a class="markdownIt-Anchor" href="#静态反调试技术"></a> 静态反调试技术</h2><h3 id="peb-2"><a class="markdownIt-Anchor" href="#peb-2"></a> PEB</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303202235513.png" alt="image-20230320223555485" /></p><blockquote><p>获取PEB地址的方法</p></blockquote><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303202238312.png" alt="image-20230320223800272" /></p><blockquote><p>下方(+0x)的基址为 FS:[0x30]</p></blockquote><h4 id="beingdebugged0x2"><a class="markdownIt-Anchor" href="#beingdebugged0x2"></a> BeingDebugged(+0x2)</h4><ul><li><p>进程处于调试状态时，<code>PEB.BeingDebugged</code> 成员(+0x2)的值被设置为1(TRUE)；进程非调试状态下运行时，其值被设置为0(FALSE)</p><ul><li><code>Kernel32.dll</code> 中的 <code>IsDebuggerPresent()</code> API通过获取 <code>PEB.BeingDebugged</code> 的值来判断进程是否处于被调试状态</li></ul></li><li><p>破解之法：</p><ul><li>借助 DBG 将 <code>PEB.BeingDebugged</code> 的值修改为0即可</li></ul></li></ul><h4 id="ldr0xc"><a class="markdownIt-Anchor" href="#ldr0xc"></a> Ldr(+0xC)</h4><ul><li>调试进程时，其堆内存区域中就会出现一些特殊标识，表示它正处于被调试状态。其中最醒目的是，未使用的堆内存区域全部填充着 <code>0xFEEEFEEE</code> ，这证明正在调试进程。利用这一特征即壳判断进程是否处于被调试状态。</li><li><code>PEB.Ldr</code> 成员是一个指向 <code>_PEB_LDR_DATA</code> 结构体的指针，而 <code>_PEB_LDR_DATA</code> 结构体恰好是在堆内存区域创建的，所以可以使用 <code>PEB.Ldr</code> 指向堆内存地址，查看其是否填充了 <code>0xFEEEFEEE</code>。</li><li>破解之法：<ul><li>将填充着 <code>0xFEEEFEEE</code> 的区域全部覆写为NULL即可。</li></ul></li></ul><blockquote><p>该方法仅适用于 windows XP x系统，之后的系统无法使用。另外，利用附加功能将运行中的进程附加到调试器时，堆内存中并不出现上述标志。</p></blockquote><h4 id="processheap0x18"><a class="markdownIt-Anchor" href="#processheap0x18"></a> ProcessHeap(+0x18)</h4><ul><li><p><code>PEB.ProcessHeap</code> 成员是指向 <code>HEAP</code> 结构体的指针</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291506608.png" alt="image-20230329150650538" /></p></li><li><p>进程正常运行(非调试运行)时，<code>Heap.Flags(+0xC)</code>的值为<code>0x2</code>，<code>Heap.ForceFlags(+0x10)</code>的值为<code>0x0</code>。进程处于被调试状态时，这些值会随之改变</p></li><li><p>破解之法：</p><ul><li>重新设置为特定值即可</li></ul></li></ul><blockquote><p>只适用于Windows XP系统。此外，将运行中的进程附加到调试器时，也不会出现上述特征</p></blockquote><h4 id="ntglobalflag0x68"><a class="markdownIt-Anchor" href="#ntglobalflag0x68"></a> NtGlobalFlag(+0x68)</h4><ul><li><p>调试进程时，<code>PEB.NtGlobalFlag(+0x68)</code> 的值会被设置为<code>0x70</code></p></li><li><p>其被设置为<code>0x70</code>是下列 Flags值进行 <code>bit OR</code> 运算的结果</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291518918.png" alt="image-20230329151804891" /></p></li><li><p>破解之法：</p><ul><li>重设 <code>PEB.NtGlobalFlag</code> 值为0即可 (PEB.NtGlobalFlag = 0)</li></ul></li></ul><blockquote><p>将运行中的进程附加到调试器时，NtGlobalFlag的值不变</p></blockquote><h3 id="ntqueryinformationprocess"><a class="markdownIt-Anchor" href="#ntqueryinformationprocess"></a> NtQueryInformationProcess()</h3><p>​通过 <code>NtQueryInformationProcess() API</code> 可以获取各种与进程调试相关的信息</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// NtQueryInformationProcess 函数原型</span><br><span class="hljs-function">__kernel_entry NTSTATUS <span class="hljs-title">NtQueryInformationProcess</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  IN HANDLE           ProcessHandle, <span class="hljs-comment">// 进程句柄</span></span></span><br><span class="hljs-params"><span class="hljs-function">  IN PROCESSINFOCLASS ProcessInformationClass,  <span class="hljs-comment">// 检索的进程信息类型</span></span></span><br><span class="hljs-params"><span class="hljs-function">  OUT PVOID           ProcessInformation, <span class="hljs-comment">// 接收进程信息的缓冲区指针</span></span></span><br><span class="hljs-params"><span class="hljs-function">  IN ULONG            ProcessInformationLength,  <span class="hljs-comment">// 缓冲区指针大小</span></span></span><br><span class="hljs-params"><span class="hljs-function">  OUT PULONG          ReturnLength<span class="hljs-comment">// 实际接收的进程信息大小</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>​给 <code>NtQueryInformationProcess()</code> 函数的第二个参数 <code>PROCESSINFOCLASS ProcessInformationClass</code> 指定特定的值并调用该函数，则相关信息会设置到其第三个参数 <code>PVOID ProcessInformation</code>。这里关注 <code>PROCESSINFOCALSS</code> 中与调试器探测有关的成员 <code>ProcessDebugPort(0x7)</code>，<code>ProcessDebugObjectHandle(0x1E)</code>， <code>ProcessDebugFlags(0x1F)</code>。(括号中的值代表第二个参数的取值，对应着名称)</p><h4 id="processdebugport0x7"><a class="markdownIt-Anchor" href="#processdebugport0x7"></a> ProcessDebugPort(0x7)</h4><p>​进程处于调试状态时，系统会为它分配一个调试端口(Debug Port)。 <code>ProcessInformationClass</code> 参数的值设置为 <code>ProcessDebugPort(0x7)</code> 时，调用 <code>NtQueryInformationProcess()</code> 函数就能获取调试段口。若进程处于非调试状态，则变量 <code>dwDebugPort</code> 的值设置为0；若进程处于调试状态，则变量 <code>dwDebugPort</code> 的值设置为 0xFFFFFFFF</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303311752206.png" alt="image-20230331175210132" /></p><h4 id="processdebugobjecthandle0x1e"><a class="markdownIt-Anchor" href="#processdebugobjecthandle0x1e"></a> ProcessDebugObjectHandle(0x1E)</h4><p>​调试进程时会生成调试对象(<code>Debug Object</code>)。函数的第二个参数值为 <code>ProcessDebugObjectHandle(0x1E)</code> 时，调用函数后通过第三个参数就能获得调试对象的句柄。进程处于调试状态时，调试对象句柄的值就存在；若进程处于非调试状态，则调试对象句柄值为NULL。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303311755135.png" alt="image-20230331175507061" /></p><h4 id="processdebugflags0x1f"><a class="markdownIt-Anchor" href="#processdebugflags0x1f"></a> ProcessDebugFlags(0x1F)</h4><p>​检测 <code>Debug Flags(调试标志)</code> 的值也可以判断进程是否处于被调试状态。函数的第二个参数设置为 <code>ProcessDebugFlags(0x1F)</code> 时，调用函数后通过第三个参数即可获取调试标志的值：若为0，则进程处于被调试状态；若为1，则进程处于非调试状态。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303311757040.png" alt="image-20230331175707977" /></p><h4 id="破解之法"><a class="markdownIt-Anchor" href="#破解之法"></a> 破解之法</h4><p>​破解使用 <code>NtQueryInformationProcess() API</code> 探测调试器的技术，应当对该函数在特定参数值(<code>ProcessInformationClass</code>) 下输出的值进行操作。特定参数值时前面提过的三个。即将与三个相关的检测返回值(<code>dwDebugPort, DebugObject, DebugFlag</code>)进行更改。</p><h3 id="ntquerysysteminformation"><a class="markdownIt-Anchor" href="#ntquerysysteminformation"></a> NtQuerySystemInformation()</h3><p>​这是基于调试环境检测的反调试技术。运用这种反调试技术可以检测当前OS是否在调试模式下运行。(主要使用windbg调试target主机，查看其OS信息)。这里主要使用 <code>ntdall!NtQuerySystemInformation() API</code> 的系统函数，获取当前运行的多重OS信息。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">__kernel_entry NTSTATUS <span class="hljs-title">NtQuerySystemInformation</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]            SYSTEM_INFORMATION_CLASS SystemInformationClass,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in, out]       PVOID                    SystemInformation,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]            ULONG                    SystemInformationLength,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out, optional] PULONG                   ReturnLength</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>​<code>SYSTEM_INFORMATION_CALSS SystemInformationClass</code> 参数中指定需要的系统信息类型，将某结构体的地址传递给 <code>PVOID SystemInformation</code> 参数，API返回时，该结构体中就填充着相关信息。</p><p>​向 <code>SystemInformation</code> 参数传入 <code>SystemKernelDebuggerInformation</code> 值(0x23)，即可判断出当前OS是否在调试模式下运行</p><h3 id="ntqueryobject"><a class="markdownIt-Anchor" href="#ntqueryobject"></a> NtQueryObject()</h3><p>​系统中的某个调试器调试进程时，会创建一个调试对象类型的内核对象。检测该对象是否存在即可判断是否有进程正在呗调试。</p><p>​<code>ntdll!NtQueryObject() API</code> 用来获取系统各种内核对象的信息。调用 <code>NtQueryObject()</code> 函数时，先向第二个参数 <code>OBJECT_INFORMATION_CALSS ObjectInformationClass</code> 赋予某个特定值，调用API后，包含相关信息的结构体指针就返回第三个参数 <code>PVOID ObjectInformation</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">__kernel_entry NTSYSCALLAPI NTSTATUS <span class="hljs-title">NtQueryObject</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in, optional]  HANDLE                   Handle,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]            OBJECT_INFORMATION_CLASS ObjectInformationClass,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out, optional] PVOID                    ObjectInformation,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]            ULONG                    ObjectInformationLength,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out, optional] PULONG                   ReturnLength</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="zwsetinformationthread"><a class="markdownIt-Anchor" href="#zwsetinformationthread"></a> ZwSetInformationThread()</h3><p>​利用 <code>ZwSetInformationThread() API</code> 被调试者可将自身从调试器中分离出来—强制分离(Detach)被调试者和调试器的技术</p><p><img src="C:/Users/NU/AppData/Roaming/Typora/typora-user-images/image-20230331185309453.png" alt="image-20230331185309453" /></p><p>​<code>ZwSetInformationTread()</code> 函数用来为线程设置信息的。该函数拥有2个参数，第一个参数 <code>TreadHandle</code> 用来接受当前线程的句柄，第二个参数 <code>ThreadInformationClass</code> 表示线程信息类型，若其值设置为 <code>ThreadHideFromDebugger(0x11)</code>，调用该函数后，调试进程就会被分离出来。<code>ZwSetInformationThread() API</code> 不会对正常运行的程序(非调试运行)产生任何影响，但若运行的时调试器程序，调用该API将使调试器终止运行，同时终止自身进程。</p><h4 id="破解之法-2"><a class="markdownIt-Anchor" href="#破解之法-2"></a> 破解之法</h4><p>​调用API之前，查找存储在栈中的第二个参数 <code>ThreadInformationClass</code> 值，若其值为 <code>ThreadHideFromDebugger(0x11)</code> ，则修改为0后继续运行即可。</p><blockquote><p>Windows XP 以后新增了 DebugActiveProcessStop() API</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">BOOL <span class="hljs-title">DebugActiveProcessStop</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] DWORD dwProcessId</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>​<code>DebugActiveProcessStop() API</code> 用来分离调试器和被调试器，从而停止调试。而 <code>ZwSetInformationTread() API</code> 则用来隐藏当前线程，使调试器无法再受到该线程的调试事件，最终停止调试。</p>]]></content>
    
    
    <categories>
      
      <category>逆向笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>信息系统安全</title>
    <link href="/posts/e9381314.html"/>
    <url>/posts/e9381314.html</url>
    
    <content type="html"><![CDATA[<h1 id="复习资料"><a class="markdownIt-Anchor" href="#复习资料"></a> 复习资料</h1><h2 id="历年考题"><a class="markdownIt-Anchor" href="#历年考题"></a> 历年考题</h2><h3 id="2023-a"><a class="markdownIt-Anchor" href="#2023-a"></a> 2023-A</h3><p>​基本全是分析题😫，前6道题10分(也会一道题分成两个5分的)，后面两道综合题25+15。题目顺序和具体内容记不太清了，🤐是故意的还是不小心XD。</p><p><strong>一、“简答题”</strong></p><ol><li>说明消息认证码和加密技术实现消息认证的异同。</li><li>给了个被警告证书问题的URL，要求结合证书的相关知识解释可能出了什么问题。</li><li>Kerberos中Client和AS交互AS不会验证对方用户身份就把包发过去是否安全。</li><li>为防止在线/离线的字典攻击给出常用的策略、协议、方法。</li><li>在内核态设计一个针对文件透明加密的系统(就是EFS~)。</li><li>几种数据备份的考察和RAID-5特点。</li></ol><p><strong>二、分析题</strong></p><ol><li>访问控制(给你案例，让你分析采用什么策略(DAC、MAC等))，使用什么模型(BLP、Biba、BN)。</li><li>实现低粒度访问控制，方便员工外出办公、读取文件，TLS VPN/IPSEC VPN选什么。</li><li>给出原表求匿名表。</li></ol><h3 id="2024-a"><a class="markdownIt-Anchor" href="#2024-a"></a> 2024-A</h3><p>​全是老师说的，考点一字不差。反正没有见过这么匹配的试卷了</p><p><strong>一、“综述题”</strong></p><ol><li>说明保密性、完整性、可用性的含义</li><li>说明活动目录所涉及的服务机制，命名解析，目录服务，认证，逻辑组件</li><li>给出一个警告的证书，要求结合证书的相关知识解释可能出了什么问题</li><li>BN模型，利用DAC和MAC来说明对读写的保护</li><li>写出协议和算法，要求单向认证和密钥交换，用随机数保持新鲜性，要求使用非对称算法</li><li>设备身份认证<ol><li>物流体系里面，要求对于多个物品的认证</li><li>微信扫描PC二维码登录，问一开始信任的凭证是什么，之后为二维码的作用</li></ol></li></ol><p><strong>二、“分析题1”</strong></p><ol><li>4个磁盘，一个坏了，问采用什么RAID组成策略，恢复方法</li><li>实现低粒度访问控制，方便员工外出办公、公网读取服务器文件，TLS VPN/IPSEC VPN选什么。</li></ol><p><strong>三、“分析题2”</strong></p><ol><li>问匿名隐私保护的基本原理和手段</li><li>差分隐私的全局敏感性和局部敏感性什么时候用</li><li>同态加密的基本原理</li></ol><h2 id="老师重点"><a class="markdownIt-Anchor" href="#老师重点"></a> 老师重点</h2><p><strong>题型</strong></p><ul><li>综述 60 --&gt; 6个</li><li>分析 40 --&gt; 2~3个</li></ul><p><strong>第1章 概述</strong></p><ol><li>安全属性</li><li>安全漏洞</li></ol><p><strong>第2章 安全管理</strong></p><ol><li>信息安全管理的PDCA管理流程</li><li>活动目录设计及关键机制 --&gt; 认证、命名解析、目录访问、逻辑管理组件、物理组件</li><li>组策略</li><li>组策略的设置对象</li><li>组策略的处理和优先级</li><li>组策略的冲突解决方法</li></ol><p>补充：</p><ol><li>常见的安全标准TESEC、CC</li><li>等保标准与划分</li><li>Windows如何实施安全管理</li><li>DEP &amp; ASLR</li></ol><p><strong>第3章 密钥管理基础架构</strong></p><ol><li>PKI架构</li><li>CA建立信任的方式</li><li>数字证书及其验证(特别是第四步，需要掌握web应用中证书验证的细节) --&gt; 着重证书验证过程</li><li>PKI的安全性</li></ol><p><strong>第4章 身份验证</strong></p><ol><li>基于文本口令认证的安全机制</li><li>基于密钥学的认证协议(能分析协议，根据需要设计协议)</li><li>基于设备的认证及其案例(RFID、扫码认证)</li><li>现实中的认证与密钥交换协议(重点kerberos)</li></ol><p>补充：AAA，对称密钥交换，HMAC，公钥(2个)，DH，Kerberos协议，NTLM</p><p><strong>第5章 访问控制</strong></p><ol><li>常见访问控制策略<ol><li>自主访问控制DAC</li><li>强制访问控制MAC(BLP，Biba，中国墙模型)特点及分析</li><li>基于角色访问控制RBAC</li><li>基于属性访问控制</li></ol></li></ol><p>补充：访问控制基本原则</p><p><strong>第6章 数据安全</strong></p><ol><li>数据存储加密<ol><li>透明加解密的实现原理、密钥管理</li></ol></li><li>系统可靠性与数据容错<ol><li>数据备份的策略、及RAID机制的几种备份机制</li><li>数据恢复机制(基于备份和非备份的)</li></ol></li><li>隐私保护技术<ol><li>匿名化基本原理和方法</li><li>差分隐私原理(加什么噪声、不同敏感度函数的使用场景)，以数据型为例进行分析</li><li>同态加密的基本思想<br />补充：多方计算，TMP，联邦学习</li></ol></li></ol><p><strong>第7章 VPN</strong></p><ol><li>VPN概述<ol><li>IPSEC VPN和TLS VPN的比较</li></ol></li></ol><h1 id="第1章-概述"><a class="markdownIt-Anchor" href="#第1章-概述"></a> 第1章 概述</h1><p>​信息系统安全是为保护信息系统资产(硬件、软件、数据、通信设施和网络)而采取的技术上和管理上的措施和控制方法，用以抵御网络环境中的相关安全风险，从而保证系统的保密性、完整性、可用性等安全属性</p><blockquote><p>1 安全属性: 机密性，保密性，完整性，可用性等是什么意思，真正的含义</p><p>2 安全威胁: 根据不同的角度去分类，了解就行</p><p>3 安全漏洞: 生命周期，对于它每一部分，安全管理人员需要做哪些工作</p><p>4 安全模型: 了解</p></blockquote><h2 id="安全属性"><a class="markdownIt-Anchor" href="#安全属性"></a> 安全属性</h2><p>CIA+其他 -9</p><ul><li><strong>保密性</strong>：解决非授权的信息泄露问题，防止对信息进行未授权的“读”。<ul><li>物理隔离，访问控制，信息加密，混淆，业务流量填充</li></ul></li><li><strong>完整性</strong>：保证数据及系统不会被非授权更改或破坏，防止或者至少检测出未授权的“写”操作。<ul><li><p>分为数据完整性和系统完整性</p><ul><li>数据完整性，确保数据存储、使用、传输过程中不会被非授权的用户篡改，同时还要防止授权用户对系统及其信息进行不恰当的破坏</li><li>系统完整性，确保系统在被授权的情况下，以未受损的方式执行预定功能，不能多，不能少</li></ul></li><li><p>预防：加密，访问控制，冗余备份</p></li><li><p>检测：数字签名，哈希计算，日志审计 --&gt; 主要是发现数据完整性是否遭到破坏，并不试图阻止破坏</p></li></ul></li><li><strong>可用性</strong>：确保授权用户或实体对信息及资源的正常使用不会被异常拒绝，对信息资源和系统服务的拒绝服务攻击属于对可用性的破坏<ul><li>访问控制机制，检测&amp;应急响应，备份与灾难恢复</li></ul></li><li><strong>可控性</strong>：对系统中的各种资源和操作进行有效的控制和管理，能够根据授权对系统进行监测和控制，记录系统状态、审计操作的合规性、溯源操作主体等<ul><li>访问控制，安全审计，路由控制，过滤</li></ul></li><li><strong>不可否认性</strong>：也称不可抵赖性，收发双方不可抵赖<ul><li>数字签名(源发证明，交付证明)，第三方认证</li></ul></li><li><strong>可认证性</strong>：又称为真实性，是指能够对信息的发送实体和接收实体的真实身份，以及信息属性的真实性进行鉴别<ul><li>身份认证，数字签名，消息认证码</li></ul></li><li><strong>可追溯性</strong>：也称可说明性、可审计性，其安全目标是实体的动作能够被唯一的追踪到。该目标是责任的完整性<ul><li>审计，防抵赖，故障隔离，入侵检测和防护</li></ul></li><li><strong>可靠性</strong>：是指系统无故障地持续运行。越可靠的系统所能持续的时间越长</li></ul><h2 id="安全威胁"><a class="markdownIt-Anchor" href="#安全威胁"></a> 安全威胁</h2><h3 id="安全威胁-3"><a class="markdownIt-Anchor" href="#安全威胁-3"></a> 安全威胁-3</h3><ol><li>信息泄露<ul><li>敏感数据在有意或无意中被泄露或丢失</li><li>包括 --&gt; 传输中，存储介质中，建立隐蔽信道窃取</li></ul></li><li>信息破坏<ul><li>以非法手段获得对数据的使用权，删除，修改，插入或重发某些信息，以取得有益于攻击者的响应信息；</li><li>恶意添加、修改数据，以干扰用户的正常使用</li></ul></li><li>拒绝服务<ul><li>执行无关程序使系统响应减慢甚至瘫痪，影响正常用户的使用，甚至使合法用户被排斥而不能得到相应的服务</li></ul></li></ol><h3 id="威胁来源-2"><a class="markdownIt-Anchor" href="#威胁来源-2"></a> 威胁来源-2</h3><ul><li>自然因素<ul><li>包括各种自然灾害、系统环境和场地、电磁干扰、设备老化等</li></ul></li><li>人为因素<ul><li>有意和无意之分；无意，操作、设计失误等；有意，恶意攻击等</li></ul></li></ul><h2 id="安全漏洞"><a class="markdownIt-Anchor" href="#安全漏洞"></a> 安全漏洞</h2><h3 id="生命周期"><a class="markdownIt-Anchor" href="#生命周期"></a> 生命周期</h3><ol><li>漏洞发现：<ul><li>即通过人工或自动的方法分析、挖掘漏洞的过程。</li><li>从漏洞产生到被测试人员发现的阶段被称为“0-day”，在确认是安全漏洞后，要为该漏洞开发概念验证性的渗透攻击代码(POC, proof of concept)以及确认可利用性。</li></ul></li><li>漏洞利用：<ul><li>从漏洞被发现到官方发布修补方法的过程被称为“1-day”。</li><li>在发现安全漏洞并给出渗透攻击代码后，负责任的发现者会首先通知厂商进行修补，等厂商给出补丁后再进行公布。</li></ul></li><li>漏洞修复<ul><li>通过补丁、升级版本或配置策略等对漏洞进行修补的过程，使得该漏洞不能够被恶意主体所利用。</li><li>同时，漏洞管理部门通过网站、邮件列表等渠道将漏洞信息向社会或受影响的用户发布，随着用户逐渐地安装补丁和新的漏洞的产生，该漏洞的危害也就变得越来越小，并逐渐走向消亡。</li></ul></li></ol><h2 id="安全模型"><a class="markdownIt-Anchor" href="#安全模型"></a> 安全模型</h2><h3 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h3><ul><li>系统安全动态模型：纵向</li><li>系统安全层次模型：核心</li><li>系统安全综合模型：横向</li></ul><h3 id="系统安全动态模型纵向"><a class="markdownIt-Anchor" href="#系统安全动态模型纵向"></a> 系统安全动态模型:纵向</h3><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>P</mi><mn>2</mn></msup><mi>D</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">P^2DR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>模型 --&gt; 策略(Policy)，保护(Protection)，检测(Detection)，响应(Response)</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>D</mi><mi>R</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">PDRR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>模型 --&gt; 防护(Protection)，检测(Detection)，响应(Response)，恢复(Recovery)</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi><mi>P</mi><mi>D</mi><mi>R</mi><mi>R</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">WPDRRC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>模型 --&gt; 在PDRR模型的前后增加了预警(Warning)和反击(Counterattack)</li></ul><h3 id="系统安全层次模型核心"><a class="markdownIt-Anchor" href="#系统安全层次模型核心"></a> 系统安全层次模型:核心</h3><p>分层防御</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401061607969.png" alt="image-20240106160741830" /></p><h1 id="第2章-安全管理"><a class="markdownIt-Anchor" href="#第2章-安全管理"></a> 第2章 安全管理</h1><blockquote><p>1 掌握PDCA的过程: 每个阶段做什么工作</p><p>2 信息安全标准: 了解一下，特别是评测标准</p><p>3 活动目录设计及关键机制: 数据结构X.500(访问协议是LDAP身份认证)，命名解析(扁平形和竖型–&gt;DNS)，认证(单点登录-&gt;kerberos协议)，逻辑管理组件(组织单元，域，域树，域森林等)，物理组件(站点-&gt;和目录设计无关，只是物理结构体现)</p><p>4 组策略: 策略上实施的目标，策略上冲突检测怎么做(纵向看优先级，横向即用户策略发生冲突)</p><p>分A/B卷，这一块只有一张卷子上考(maybe)</p></blockquote><h2 id="pdca"><a class="markdownIt-Anchor" href="#pdca"></a> PDCA</h2><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401051104895.png" alt="image-20240105110442850" /></p><p>计划(Plan)：建立与组织的总体战略、目标和方针保持一致的信息安全管理方针和策略，通过风险评估来建立控制目标和方式，<strong>制定风险处理计划</strong>。</p><p>执行(Do)：按照控制目标和方式实施信息安全管理，<strong>开展全员安全培训、实施安全控制</strong>。</p><p>检查(Check)：对照信息安全管理体系的目标和方针，对信息安全管理进行监视和验证，<strong>评审ISMS的有效性和适当性</strong>。</p><p>处理(Act)：基于上述对体系的内部审核和管理评价的结果，采取<strong>纠正和预防</strong>措施，以<strong>持续改进组织的信息安全管理体系</strong>。</p><h2 id="信息安全标准"><a class="markdownIt-Anchor" href="#信息安全标准"></a> 信息安全标准</h2><p><strong>信息安全评测国际标准</strong>：TCSEC，CC，ISO/IEC 15408</p><ul><li>[2.1.pdf](file://E:/Data/大学/大三/大三上/信息系统安全/信息系统安全ppt/2.1.pdf)</li></ul><h2 id="活动目录"><a class="markdownIt-Anchor" href="#活动目录"></a> 活动目录</h2><h3 id="基础概念"><a class="markdownIt-Anchor" href="#基础概念"></a> 基础概念</h3><p>活动目录(Active Directory, AD)：域环境中提供目录服务的组件。</p><p><strong>特点</strong>：</p><ul><li>活动目录不仅<strong>存储网络对象的信息</strong>，还<strong>提供目录服务</strong>，使用者能快速准确查找目录中的信息，而不需要考虑搜索对象的地理位置。</li><li>活动目录提供了完全集成在Windows中的一个分层目录服务。为企业提供了网络环境中集中式管理制。</li><li>这种分层的目录结构，简化了一般的管理任务，可以使企业网络具有极强的可扩展性。</li></ul><h3 id="机制"><a class="markdownIt-Anchor" href="#机制"></a> 机制</h3><p>-&gt; 完成单域及多域环境下活动目录管理功能的机制</p><h4 id="单点登录"><a class="markdownIt-Anchor" href="#单点登录"></a> 单点登录</h4><p>单点登录(Single Sign On, SSO)：用户只需要登录一次就可以访问所有相互信任的应用系统。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401061626225.png" alt="image-20240106162658095" /></p><ul><li>认证：Kerberos。单点登录就是活动目录的认证，上图的sso基于kerberos协议，这里主要考察kerberos协议的认证</li><li>同时也有基于其他协议实现的SSO，如SPNEGO SSO、CAS SSO</li><li>kerberos协议：一种计算机网络认证协议，它允许某安全实体在非安全网络环境下通信，向另一个实体以一种安全的方式证明身份。</li></ul><h4 id="其余"><a class="markdownIt-Anchor" href="#其余"></a> 其余</h4><p><strong>全局目录</strong></p><p>​全局编录/全局目录(Global Catalog, GC)：保存在一个或多个域控制器中的数据库(只读副本，存储对象属性集的)。记录了 AD 中所有域对象的部分信息，架构信息和配置信息的完整副本。</p><p>全局目录的任务：</p><ul><li>登录：向域控制器提供通用组成员信息。<strong>用户登录网络时，必须存在一台全局编录服务器，否则只能登录到本地</strong>，例外是“域管理组中的成员”。</li><li>查询：使得客户机能够方便快捷地<strong>执行跨所有域的搜索</strong>，而不必逐个搜索每个域。只有当查询对象信息不在GC中时，服务器才会将查询转至对象所在域。</li></ul><p><strong>多主复制</strong></p><p>​多主复制(Multi-master replication)：通过安装域控制器，就可以在整个网络环境中创建目录的多份副本。网络中任何地方发生的变化都会在整个网络中自动复制。</p><p><strong>组策略</strong></p><p>在下面单独陈述</p><p><strong>命名解析</strong>：将对象的名称转化为其对应的网络地址或其他标识的过程</p><p>​扁平型</p><p>​竖型：DNS</p><p><strong>逻辑管理组件</strong>(组织单元，域，域树，域森林等)</p><ul><li>组织单元：可连接组策略，是委派管理权限的最小分组</li><li>域：一个有安全边界的计算机、用户的集合</li><li>域树：具有连续命名空间的多个域称为树</li><li>域森林：不构成连续命令空间的域树的集合</li></ul><p><strong>物理组件</strong>(站点-&gt;和目录设计无关，只是物理结构体现)</p><h2 id="组策略"><a class="markdownIt-Anchor" href="#组策略"></a> 组策略</h2><h3 id="概念-2"><a class="markdownIt-Anchor" href="#概念-2"></a> 概念</h3><p>​组策略(Group Policy, GP)：<strong>在初始化时应用于计算机或用户的配置设置</strong>。可在不同层次上定义控制规则。</p><p>​组策略是<strong>管理员针对于网络中的用户和计算机所作的一系列设置</strong>，可以设置在站点、域、组织单元(如果是工作组计算机则设置在本机上)，使管理员可以集中控制程序，网络资源及系统行为。</p><h3 id="设置对象"><a class="markdownIt-Anchor" href="#设置对象"></a> 设置对象</h3><p>​在域中，可以对站点、域、组织单元设置组策略。可将一个组策略链接到多个Site/Domain/OU，也可以将多个组策略链接到同一Site/Domain/OU。</p><p>​在工作组中，使用本地组策略对计算机进行设置。</p><h3 id="纵向处理"><a class="markdownIt-Anchor" href="#纵向处理"></a> 纵向处理</h3><ul><li><strong>处理顺序(默认处理)：</strong><ol><li>本地策略对象</li><li>链接在站点上的GPO对象(组策略对象)</li><li>链接在域上的GPO对象(组策略对象)</li><li>连接在OU(组织单元)上的GPO对象(组策略对象)</li></ol></li></ul><p>在OU组策略对象中仍会细分，处理顺序依次是：</p><p>最高级OU的GPO—&gt;子级OU的GPO—&gt;最低级OU的GPO</p><ul><li><strong>处理注意点：</strong><ul><li>排在处理顺序后面的GPO，<strong>拥有最高的优先级</strong></li><li>工作组成员只处理本地组策略对象</li></ul></li><li><strong>例外处理:</strong><ul><li>禁止替代，No Override：防止随后处理的GPO覆盖该GPO，当多个GPO均设置为“禁止替代”时，优先采用先处理的GPO。(对后面的GPO：必须、只能用我，我是当继承链的结尾)</li><li>阻止策略继承，Block Policy Inheritance：禁止该GPO继承父组策略(对前面的GPO：我不想用你，我想当继承链的新开头)。<strong>权限小于“禁止替代”</strong>。</li></ul></li></ul><h3 id="横向处理"><a class="markdownIt-Anchor" href="#横向处理"></a> 横向处理</h3><p>用户和计算机拥有不同的组策略。</p><p>默认处理顺序：</p><ol><li>计算机策略</li><li>用户策略</li></ol><p>Lookback环回选项(环回处理)：(让计算机策略更牛逼的选项)</p><ul><li>Replace替换模式：只用计算机策略。在系统启动时计算机所在容器的GPO列表完全替代用户所在容器的GPO策略列表</li><li>Merge合并模式：先用户策略、再计算机策略(计算机策略的优先级更高了)。计算机容器的GPO列表添加到用户容器的GPO用户策略列表之后，所以，有冲突的话，计算机容器的策略权限具有更高的优先权</li></ul><h2 id="其余-2"><a class="markdownIt-Anchor" href="#其余-2"></a> 其余</h2><ol><li><p>GPO对象的处理顺序(应用顺序也是处理顺序吗？)是什么，是策略生效顺序吗，如果是策略生效，那么先本地组策略，再站点，域，组织单元的顺序是不是后面替代前面的—&gt;感觉这样也对应了后面的GPO的优先级高的陈述，因为优先级高，所以它先作用</p><ul><li>计算机和用户是仅有的接收组策略的活动目录对象类型</li></ul></li><li><p>对于域用户的区分</p><ul><li>使用cmd输入 whoami，输出 A\B，前面的是计算机名，后面是用户名，可以通过这个来查看目前是什么用户</li></ul></li><li><p>关于计算机策略和用户策略</p><ul><li><p>计算机策略<strong>作用于</strong>该GPO链接的站点/域/组织单元中计算机</p></li><li><p>用户策略<strong>作用于</strong>该GPO链接的站点/域/组织单元中用户</p></li><li><p>简单而言，一个组织单元(maybe)中计算机与用户的区别主要在于创建的时候的<strong>类型</strong>，创建计算机可以理解为把域中的计算机拉到自己的这个组织单元中，而创建用户就是字面意思上从零创建一个新的用户</p></li><li><p>这里需要注意，域中的计算机是 <strong>域外计算机设置加入域后而产生的</strong> ，所以计算机就是真的指的一台物理的计算机</p></li><li><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401051031051.png" alt="image-20240105103122897" />这里是活动目录(每个win server就是一个域控–&gt;这里假定每个server都是一个域，而每个域控都存储着副本的活动目录数据库)，里面有Client Users的用户，Computers的计算机</p></li></ul></li><li><p>关于活动目录</p><ul><li><p>每个域都有自己的活动目录，用于存储该域内的对象信息，例如用户、组、计算机等</p></li><li><p>而对于这个域加入林而言，会为新林添加一个<strong>新的活动目录数据库</strong>，每个域都会共享一个全局目录树和一个全局目录命名空间(全局目录)</p></li></ul></li></ol><h1 id="第3章-密钥管理基础架构"><a class="markdownIt-Anchor" href="#第3章-密钥管理基础架构"></a> 第3章 密钥管理基础架构</h1><blockquote><p>1 PKI架构: 包含的组件</p><p>2 CA建立信任: 单独，层次，网状，桥式</p><p>3 数字证书: 证书的4步验证(前两步tls就会去验证，第四步就是验证功能(通用名称，域名是否一致等))-&gt; 要知道验证的细节，知道哪一步可能会出现的问题</p><p>4 涉及对称密钥的管理，相对简单，了解一下</p></blockquote><h2 id="pki架构"><a class="markdownIt-Anchor" href="#pki架构"></a> PKI架构</h2><p>​PKI(Public Key lnfrastruicture)是一个安全基础设施，是一个包括硬件、软件、人员、策略和规程的集合(一组组件和规程)。用来实现基于公钥密码体制的密钥和证书的产生、管理、存储、分发和撤销等功能。</p><h3 id="组件"><a class="markdownIt-Anchor" href="#组件"></a> 组件</h3><p>CA、RA、LDAP、密钥备份及恢复系统、CRL、API</p><ul><li>认证机构(CA)：是公钥基础设施中的<strong>可信第三方实体</strong>，是信任的起点，<strong>向主体颁发证书，证书吊销列表CRL</strong>，续借和更新证书。有些PKI会把RA的功能融合进CA中。</li><li>注册机构(RA)：多数情况下，RA主要用于在证书登记过程中<strong>核实证书申请者的身份</strong>，有的架构中，CA也委派给RA一些其他责任，像个人认证，吊销报告、密钥生成、存储密钥对。</li><li>证书库：存储，分发证书和CRL，证书存储库可由所有终端实体和 CA 访问，主要使用目录服务LDAP和数据库。</li><li>档案库：主要任务是存储和保护充足的信息来决定一份儿旧的文档中数字签名是可信任的。</li><li>密钥备份及恢复系统：为应对用户丢失解密密钥的情况，PKI提供了备份与恢复密钥的机制。密钥备份与恢复只能针对解密密钥，签名私钥为确保其唯一性而不能够作备份。</li><li>证书吊销系统：证书在有效期内由于某些原因(如私钥泄露)可能需要废除，即将证书列入CRL。</li><li>应用接口：提供良好的应用接口，使各种应用能够与PKI交互。</li></ul><p><strong>有次测试问组成</strong>：CA，RA，资料库，OCSP服务器(提供CRL-&gt;在线证书状态协议)</p><h3 id="功能"><a class="markdownIt-Anchor" href="#功能"></a> 功能</h3><p>认证：</p><ul><li>被认证的数据－－－－－－数据源认证</li><li>用户发送的远程认证请求—身份认证</li><li>远程设备生成请求－－－－身份认证</li></ul><p>完整性：利用数字签名即可实现实体认证、也可验证数据完整性</p><p>保密性：用公钥分发秘密密钥，用秘密密钥加密数据</p><p>不可否认性：数字签名</p><h2 id="ca建立信任方式"><a class="markdownIt-Anchor" href="#ca建立信任方式"></a> CA建立信任方式</h2><p>四种(zaj说的，具体的看博客)-&gt;单独，层次，网状，桥状</p><h2 id="数字证书"><a class="markdownIt-Anchor" href="#数字证书"></a> 数字证书</h2><p>书P255</p><p>数字证书是一个经CA数字签名的包含<strong>公钥拥有者信息</strong>以及<strong>公钥</strong>的文件，还包括签名算法和用途。PKI适用于异构环境，所以证书格式必须统一，公钥证书的形式是由<strong>X.509标准</strong>制定</p><p><strong>证书的用途</strong>: 签名证书，加密证书</p><p><strong>证书的验证</strong></p><ul><li><p>证书真实性的验证基于<strong>证书链验证机制</strong>，其验证对象：</p><ol><li><p>验证真实性。是否为可信任CA认证中心签发</p></li><li><p>验证有效性。是否在证书的有效使用期之内</p></li><li><p>验证可用性。是否已废除</p></li><li><p>验证证书结构中的证书用途。</p></li></ol></li><li><p>感觉老师说的验证过程就是下图https网站时的认证过程</p></li></ul><h2 id="pki的安全性"><a class="markdownIt-Anchor" href="#pki的安全性"></a> PKI的安全性</h2><p>访问https网站时的认证过程</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401061712719.png" alt="image-20240106171251613" /></p><ul><li>针对认证过程的攻击手段：<ol><li>对证书传输过程的攻击(中间人攻击)</li><li>对CA认证过程的攻击</li><li>对CA签名过程的攻击</li><li>对算法的攻击</li><li>对用户确认的攻击</li></ol></li></ul><p>1 Hacker无法取得CA签发的证书，<a href="http://xn--example-gi4kh6czxosvfly3ar8hbi8hteuav59a5e8b.com">会创建顶层自签名证书example.com</a>，而该证书不在浏览器信任范围内(不准确)，就会导致不可信弹窗(继续前往！)。</p><p>2 Hacker无法取得CA签发的证书，<a href="http://xn--hacker-o77iz38as2wd7mns4ckdbk88fx12agln.com">直接发送自己的证书hacker.com</a>，浏览器检查不通过，终止握手协议</p><h2 id="其余-3"><a class="markdownIt-Anchor" href="#其余-3"></a> 其余</h2><h3 id="证书签发与验证"><a class="markdownIt-Anchor" href="#证书签发与验证"></a> 证书签发与验证</h3><p>数字证书是一个经CA数字签名的包含<strong>公钥拥有者</strong>信息以及<strong>公钥</strong>的文件，还包括签名算法和用途。</p><ul><li>证书签发</li></ul><ol><li>**根CA：**是整个证书体系中的最高级别的证书颁发机构。根CA的公钥被内置到系统或浏览器中，用于验证其他证书的真实性。</li><li>**下级CA：**是位于根CA之下的证书颁发机构。下级CA可以用于签署终端用户的证书，也可以进一步创建更下级的CA。这样的层次结构可以形成一个证书链。</li><li><strong>签名过程：</strong> 下级CA需要获得一个证书时，它会生成一对公钥和私钥。然后，它将其公钥与一些其他信息一起发送给上级CA，即根CA。上级CA使用自己的私钥对下级CA的公钥和相关信息进行数字签名，生成一个签名值。</li><li><strong>颁发证书：</strong> 上级CA将生成的签名值附加到下级CA的证书请求中，形成了下级CA的数字证书。这个数字证书包含了下级CA的公钥和其他相关信息，同时被上级CA的数字签名所认证。</li><li><strong>证书链：</strong> 下级CA可以使用其数字证书签署终端用户的证书，这就形成了一个证书链。终端用户的证书通过层层的签名，最终可以追溯到根CA，从而建立了信任链。</li></ol><ul><li>证书验证</li></ul><p>当 A 向 B 发送数字证书时，B 需要验证这个数字证书的真实性。这个数字证书可能是由另一个中间CA签发的，而不是由根CA直接签发。在这种情况下，验证的步骤如下：</p><ol><li><strong>获取证书：</strong> B 首先收到 A 发送的数字证书，该证书包含了 A 的公钥以及其他相关信息。</li><li><strong>提取公钥：</strong> B 从证书中提取 A 的公钥。</li><li><strong>验证签名：</strong> B 使用签发该证书的CA(可能是中间CA)的公钥来验证数字证书的签名。中间CA的公钥可以通过根CA的证书链进行验证。如果数字签名验证成功，说明证书是由中间CA签发的。</li><li><strong>检查有效期：</strong> B 检查证书的有效期，确保证书在当前时间内是有效的。</li><li><strong>检查撤销状态：</strong> B 可以查询中间CA的证书撤销列表(CRL)或使用在线证书状态协议(OCSP)来检查证书的撤销状态。如果证书已被撤销，验证失败。</li><li><strong>验证证书链：</strong> 如果证书是由中间CA签发的，B 可以继续验证证书链，确保中间CA的证书也是由更高一级的CA签发的。这个过程一直追溯到根CA的证书。<code>证书链主要是验证用于验证证书的公钥是否正确，所以不断向上，找到跟CA</code></li><li><strong>应用证书：</strong> 如果验证成功，B 可以使用 A 的公钥来加密或验证数字签名，确保与 A 进行安全的通信。</li></ol><h3 id="ca"><a class="markdownIt-Anchor" href="#ca"></a> CA</h3><ol><li>单个CA</li><li>网状结构–&gt;相互信任<ul><li>独立的CA双方交叉认证也就是互相发放证书也就是互相发放证书，结果是在对等的CA中产生了信任关系网。信任仅存在于这两个CA及其下面的子CA之间。</li></ul></li><li>桥式CA–&gt;中间得桥式CA不签名，也通常不被主体信任，只是一个中间人<ul><li>桥式PKI通过引进一个新的CA称为桥式CA称为桥式CA来连接企业之间的PKI。桥式CA惟一的目的是为企业PKI建立关系。</li></ul></li></ol><h1 id="第4章-身份验证"><a class="markdownIt-Anchor" href="#第4章-身份验证"></a> 第4章 身份验证</h1><blockquote><p>1 基于文本口令认证: 知道提供的安全机制</p><p>2 基于密码学认证协议: 给出需求设计出认证协议-&gt;对称的，非对称的，基于消息验证码的，根据提示来设计</p><p>3 基于图形和生物特征的认证: 关于身份的鉴别，了解即可</p><p>4 基于设备的认证及其案例: 理解细节 RFID，射频可以实现设备的多点认证，扫码认证是认证信息放在手机端，(微信扫码举例)存放的是已经验证好的token，码里存放的是跟设备相关的信息–&gt;手机里的信息和二维码的信息进行结合，生成一个信息对电脑设备进行认证，考身份认证过程中流转的身份信息来自于哪里，微信扫码是来自微信已经登录过的缓存的身份验证块(token)</p><p>5 掌握kerberos协议，基于对称加密的身份认证协议，可以实现单点登录，需要掌握细节</p></blockquote><p>系统安全最基本服务：AAA</p><ul><li><p>身份认证：对用户身份的证实，它能防止攻击者假冒合法用户获取访问权限</p></li><li><p>授权：当用户身份被证实后，赋予该用户进行资源访问的权限</p></li><li><p>审计：每一个用户都应该为自己所做的操作负责，所以每个操作都要留下记录，以便事后核查</p></li></ul><h2 id="基于文本口令认证的安全机制"><a class="markdownIt-Anchor" href="#基于文本口令认证的安全机制"></a> 基于文本口令认证的安全机制</h2><p>​基于口令的机制允许人们选择自己的口令，并且不需要辅助设备生成或储存，因此用户名加口令成为应用最广泛的一种身份认证方式。基于口令的认证虽然简单便捷、费用低廉，但安全性上也存在风险。</p><p><strong>口令安全</strong></p><p>(1)口令Hash散列存储 – 防离线字典，穷举攻击</p><p>(2)加盐Hash – 增加离线字典攻击难度</p><p>(3)强口令设置 – 字典，穷举</p><p>(4)密码策略</p><p><strong>利用验证码增加安全</strong></p><p>​目前抵御在线口令猜测的主要方式是使用验证码，在线口令猜测威胁主要来自专门的破解工具的自动程序猜测攻击。验证码是一种逆图灵测试。</p><p><strong>攻击手段</strong></p><ol><li>字典或穷举攻击(认证端)</li><li>社交工程窥探、垃圾收集、污迹攻击</li><li>网络数据流窃听：如果口令使用明文传输，则可被非法截获。如Telnet、FTP、POP3都使用明文口令，而攻击者只需通过窃听就能分析出口令。</li><li>截取/重放攻击：利用截获的值，攻击者可以在新的登录清求中将其提交到同一服务器，服务器不能区分这个登录谓求是来自合法用户还是攻击者。</li></ol><h2 id="基于密码学的认证协议"><a class="markdownIt-Anchor" href="#基于密码学的认证协议"></a> 基于密码学的认证协议</h2><p>​基于密码学实现的身份鉴别机制，其基本思想是一个实体向另一个实体证明他知道有关的秘密知识，但不向验证者提供秘密本身。同时，向验证者提供的消息要具有时效性。</p><h3 id="基于对称密码的验证机制"><a class="markdownIt-Anchor" href="#基于对称密码的验证机制"></a> 基于对称密码的验证机制</h3><ul><li>基于对称密码算法的鉴别机制可以没有第三方， 也可以有可信的第三方——通常称为KDC(Key Distrib-ution Center)用来进行密钥管理。<ul><li>两个人共享对称密码的密钥</li></ul></li></ul><h3 id="基于mac码的验证机制"><a class="markdownIt-Anchor" href="#基于mac码的验证机制"></a> 基于MAC码的验证机制</h3><p>​利用共享密钥来生成固定长度的数据块，称为消息认证码MAC(也称报文 鉴别码Message Authentication Code)，是最常用的对称密码技术</p><p><strong>特点:</strong></p><ol><li>固定长度</li><li>由校验算法生成：MAC=F(KAB,M)</li><li>A、B共享密钥，接受者对输入执行同方向计算，检查生成的MAC是否与接受的MAC匹配</li><li>提供<strong>数据完整性</strong>、<strong>数据源认证</strong>两种服务</li></ol><p>算法输入秘密密钥和特定数据，算法设计上是不可逆的</p><ol><li>通信双方共享秘密密钥。接收者对特定输入数据执行相同方向的计算，并检查它是否与收到的MAC匹配。</li><li>确保数据来自声称的发送者且传输过程没有被篡改。</li></ol><p><strong>生成方法</strong>主要是分组密码和利用散列函数的消息认证技术(HMAC-&gt;Hmac本质上就是把key混入摘要的算法)</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401080837495.png" alt="image-20240108083700317" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401071653108.png" alt="image-20240107165331053" /></p><h3 id="基于非对称密码的认证机制"><a class="markdownIt-Anchor" href="#基于非对称密码的认证机制"></a> 基于非对称密码的认证机制</h3><ul><li>公钥加密</li><li>私钥加密</li><li>私钥-公钥加密</li></ul><p><strong>功能特点</strong></p><p>公钥加密：仅提供保密性，不能进行认证</p><p>私钥签名：可提供消息认证的三种安全服务(完整性，认证性，抗抵赖性)</p><p>先私钥后公钥：保密性、消息认证的所有三种服务。</p><h3 id="现实中的认证与密钥交换协议"><a class="markdownIt-Anchor" href="#现实中的认证与密钥交换协议"></a> 现实中的认证与密钥交换协议</h3><p><strong>这里就是kerberos协议(对称密钥)</strong></p><ul><li>基于对称加密技术，基于可信第三方<ul><li>功能：实现认证，完整性，保密性服务。<ul><li>重点解决的问题：集中的身份认证和密钥分配—用户只需输入一次身份验证信息，就可以访问多个服务，也就是俗称单点登录。</li></ul></li></ul></li></ul><p>采用基于密钥的认证交换协议的设计前提</p><ul><li>所有用户均在KDC上注册，KDC数据库中拥有所有参与用户的UID和口令散列</li><li>Kerberos定义了口令到密钥的转化机制，用户仅需记忆口令，认证过程中使用密钥</li><li>所有服务器均在KDC上注册，KDC必须与每一个服务器之间共享一个保密密钥</li><li>时效性用随机数和时间戳</li></ul><p><strong>NTLM(MAC)</strong></p><p><strong>TLS(非对称)</strong></p><p>剩下的看</p><p>[word复习资料P14](file://E:/Data/大学/大三/大三上/信息系统安全/考试/信息安全复习.docx)</p><h2 id="基于图形和生物特征的认证"><a class="markdownIt-Anchor" href="#基于图形和生物特征的认证"></a> 基于图形和生物特征的认证</h2><h3 id="图形认证"><a class="markdownIt-Anchor" href="#图形认证"></a> 图形认证</h3><p>​利用人类对图形记忆要优于对文本记忆的特点设计出来的一种新型口令。用户不用记忆冗长的字符串而是通过识别或记住图形来进行身份认证</p><p><strong>优势</strong>：图形口令空间大，可以抵御文本口令面临的攻击(字典爆破)，人们记忆能力强，不容易被获取</p><p><strong>分类</strong>：基于识别型的图形口令，基于回忆型，混合型</p><h3 id="生物特征认证"><a class="markdownIt-Anchor" href="#生物特征认证"></a> 生物特征认证</h3><p>​所谓生物特征识别，是指通过计算机与各种传感器和生物统计学原理等高科技手段的密切结合，利用人体唯一拥有的生理特性和行为特征，来进行个人身份鉴定的方法。</p><p><strong>常见特征</strong>：指纹特征，人脸特征，虹膜特征</p><h2 id="基于设备的认证及其案例"><a class="markdownIt-Anchor" href="#基于设备的认证及其案例"></a> 基于设备的认证及其案例</h2><p>​<strong>令牌</strong>：是用户持有的用于进行用户认证的一种物品。可以用做令牌的常见凭证有磁卡、存储卡、智能卡，目前，最常用的是存储卡和智能卡。</p><p><a href="https://flowus.cn/7bd9387d-744f-418a-9400-e9f14e5387c8">参考</a></p><ul><li>RFID(无线射频识别): 非接触，唯一识别，批量识别，自动识别</li><li>二维码：聊生于无吧，把上面老师的阐述给chatgpt，让他来看看<ul><li><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401062030522.png" alt="image-20240106203040447" /></li><li><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401080848170.png" alt="image-20240108084846050" /></li><li><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401080848925.png" alt="image-20240108084825869" /></li></ul></li></ul><h2 id="其余-4"><a class="markdownIt-Anchor" href="#其余-4"></a> 其余</h2><h3 id="数字证书-2"><a class="markdownIt-Anchor" href="#数字证书-2"></a> 数字证书</h3><ul><li>从证书的用途，分为签名证书和加密证书。用户配置了两对密钥(签名密钥对、加密密钥对)</li><li>签名证书<ul><li>负责验证数字签名真实性</li><li>Alice向Bob发送文件和数字签名(可能还发送证书)，然后Bob用签名证书(含有Alice公钥)来验证</li></ul></li><li>加密证书<ul><li>主要用于加密在网络上传输的数据</li><li>Bob有个网站，它自己生成了加密证书放在服务器上。然后Alice访问，经过身份验证后，Bob把证书发给Alice，然后Alice的请求用Bob公钥进行加密再发送给Bob</li></ul></li></ul><h1 id="第5章-访问控制"><a class="markdownIt-Anchor" href="#第5章-访问控制"></a> 第5章 访问控制</h1><blockquote><p>1 自主访问控制: 概念很简单，但是要理解为什么没办法去防木马(这里指上课讲的evil的那个案例)</p><p>2 强制访问控制: 三个访问控制模型读和写的控制原则，比如BLP和Biba都是对于信息流的单向控制，中国墙模型需要知道读和写操作，以及清洗的数据如何控制，强制访问控制都是给安全标识，BLP是保密性，Biba是完整性，中国墙是客体为分类，主体为状态转换矩阵来记录访问顺序</p><p>3 基于角色和基于属性: 了解一下</p><p>4 Windows分布式访问控制授权管理: 了解一下授权是通过不同组的映射来实现分工授权</p></blockquote><p>​访问控制以身份认证为前提，是一种针对越权使用资源的防御措施，它的基本目标是防止对任何资源进行未授权的访问，保障资源只能被合法用户执行合法操作。访问控制对机密性、完整性起直接的作用。</p><p>这里是对[word复习资料P18](file://E:/Data/大学/大三/大三上/信息系统安全/考试/信息安全复习.docx)的补充说明</p><h2 id="自主访问控制"><a class="markdownIt-Anchor" href="#自主访问控制"></a> 自主访问控制</h2><p>​自主访问控制(DAC)是基于身份的访问控制，其特点是根据主体的身份及允许访问的权限进行决策。自主是指，主体能够自主的将自身具有的访问权限或其子集授予其他主体</p><p>​对于Evil的那个案例，原因就是资源的拥有者自主管理资源，因为Bob拥有对于暗袋文件的执行权力，在执行时那个暗袋文件或被授权Bob的访问权限，所以可以访问到机密数据并写入暗袋文件</p><h2 id="强制访问控制"><a class="markdownIt-Anchor" href="#强制访问控制"></a> 强制访问控制</h2><p>​强制访问控制(MAC)是基于规则的访问控制。授权完全由主客体安全属性决定，其由系统控制，用户不能改变主客体的安全属性。</p><p>​对资源的访问取决于对实体的授权策略而非简单的取决于主体的身份。通过比较主体与客体的安全属性来决定是否允许主体访问客体。</p><h3 id="中国墙模型"><a class="markdownIt-Anchor" href="#中国墙模型"></a> 中国墙模型</h3><p>客体为分类，主体为状态转换矩阵来记录访问顺序</p><ul><li><p>此模型根据主体的<strong>访问历史</strong>来判断数据是否可以被访问。而不是根据数据属性作为约束条件。其本质是将全体数据划分为“利益冲突类”，根据强制约束，主体至多访问每个“利益冲突类”中的一个数据集</p></li><li><p><strong>简单安全性</strong>：一旦一个主体访问过一个客体，那其余可被该主体访问的客体必须满足：与主体访问过的客体在同一公司内，或者在不同利益冲突中</p><p><strong>清洁信息</strong>: 清洁信息不存在公司敏感信息，所以，可以不用限制对清洁信息的读访问请求</p><p>*<strong>特性</strong>: 主体s能写客体o,必须</p><ul><li>有读0的简单安全性权利，</li><li>S没有访问过o所属公司数据集或清洁数据以外的任何公司数据(如B)</li><li>非清洁的信息只局限在本公司数据集内部，不能随意流动，清洁后的信息可以在系统中自由的流动</li></ul></li></ul><h2 id="基于角色的访问控制"><a class="markdownIt-Anchor" href="#基于角色的访问控制"></a> 基于角色的访问控制</h2><p>​权限通常由用户在一个组织中担当的角色来确定权限/许可被授权给角色，角色被授权给用户，用户不直接与许可关联。对访问权限的授权由管理员统一管理.</p><p><strong>核心RBAC</strong>、<strong>角色层次RBAC</strong>、<strong>静态职责分离关系</strong>、<strong>动态职责分离关系</strong></p><h2 id="wiondows分布式访问控制授权管理"><a class="markdownIt-Anchor" href="#wiondows分布式访问控制授权管理"></a> Wiondows分布式访问控制授权管理</h2><p>全局组，通用组，域本地组</p><ul><li><p>权限指派</p><ul><li><p>粗粒度权限管理：在域中指派用户权限</p></li><li><p>细粒度权限管理：在资源上指派资源访问权限</p></li></ul></li><li><p>组映射</p><ul><li><p>无通用组：将全局组product*加入域本地组files</p></li><li><p>有通用组：将全局组product*加入通用组productall，再将productall加入域本地组files</p></li></ul></li></ul><h1 id="第6章-数据安全"><a class="markdownIt-Anchor" href="#第6章-数据安全"></a> 第6章 数据安全</h1><blockquote><p>1 数据存储的透明加解密服务的流程，哪一部分在内核态(真正实现加密和解密操作的过程)，哪一部分在应用态(密钥套件的生成，加解密密钥)</p><p>2 密钥管理，二级还是三级去保护密钥</p><p>3 可靠性与数据容错: 主要是备份策略怎么用，差分、增量、完全。实现数据冗余的方法，不同RAID的实现有什么区别</p><p>4 隐私保护，掌握原理和基本实现方法(匿名化基本原理，分三类属性，关键属性、准标识符属性、敏感属性，常见的手段，抑制、泛化)</p><p>5 差分隐私原理，加噪声，加扰动(加扰动和查询函数有关，又和敏感度有关，全局敏感性局部敏感性函数都在什么情况下使用)，掌握数字型为主</p><p>6 知道同态加密的原理</p></blockquote><h2 id="透明加解密"><a class="markdownIt-Anchor" href="#透明加解密"></a> 透明加解密</h2><p>​透明加密：又称静态加密，加解密细节不会被察觉，由存储系统自动完成，文件在内存中为明文形式、在硬盘中为密文形式。当使用环境改变时，会因无法获得自动解密服务而无法打开，从而达到保护文件内容的目的。</p><h2 id="数据备份与恢复"><a class="markdownIt-Anchor" href="#数据备份与恢复"></a> 数据备份与恢复</h2><h3 id="备份"><a class="markdownIt-Anchor" href="#备份"></a> 备份</h3><p><strong>完全备份</strong></p><p>完全备份：对某一个时间点上的所有数据进行的一个完全复制。</p><p>在完全备份过程中，备份选中的文件，<strong>清除存档属性</strong>，即将每个文件都被标记为已备份。</p><p><strong>差异备份(偷摸备份)</strong></p><p>差异备份：备份自上一次备份后<strong>有存档属性的</strong>文件。(规矩上需要备份)</p><p>在差异备份过程中，备份选中的、<strong>有存档属性的</strong>文件，<strong>不清除存档属性</strong>，即备份后不标记为已备份文件。(有种偷偷备份的感觉)</p><p>在进行恢复时，需使用上次的全备份和<strong>最后一次的</strong>差异备份进行恢复。</p><p><strong>增量备份</strong></p><p>增量备份：备份自上一次备份之后<strong>有变化的</strong>数据。(事实上真的需要备份)</p><p>在增量备份过程中，备份选中的、<strong>有存档属性的</strong>文件，<strong>清除存档属性</strong>。</p><p>在进行恢复时，需使用上次的全备份和<strong>每次的</strong>差异备份进行恢复。</p><h3 id="raid"><a class="markdownIt-Anchor" href="#raid"></a> RAID</h3><p>​独立磁盘冗余阵列：将多块磁盘通过一定的技术手段组成一个单一的虚拟磁盘使用。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401072330145.png" alt="image-20240107233019013" /></p><ul><li>RAID-0：数据基带条阵列。将数据分割存储到多块磁盘上，磁盘读写时负载平均分配到多块磁盘。由于多块磁盘可同时读写，所以速度明显提升。<ul><li>优点：读写快、利用率高、成本低</li><li>缺点：无冗余、无校验、无备份、不提供容错性</li></ul></li><li>RAID-1：磁盘镜像，至少由2块磁盘实现。将同样的数据写入2块磁盘(互为镜像)，一块磁盘发生故障时，另一块磁盘可继续工作，并可在更换磁盘后重新创建镜像。<ul><li>优点：可靠性高、读取速率快</li><li>缺点：写入速率低、利用率低</li></ul></li><li>RAID-0+1：至少由4块磁盘实现。将RAID-0中的2块磁盘视为虚拟磁盘，再使用RAID-1方案阵列<ul><li>优点：读写快、安全</li></ul></li><li>RAID-5：循环奇偶校验阵列至少由3块磁盘实现。将数据分布在不同磁盘上，并在所有磁盘上交叉地存取数据及<strong>奇偶校验信息</strong>。<ul><li>优点：数据安全、读取速率高、磁盘利用率高</li><li>缺点：写入速率低</li></ul></li></ul><h2 id="隐私保护"><a class="markdownIt-Anchor" href="#隐私保护"></a> 隐私保护</h2><p>​隐私保护：是对隐私数据采取一系列的安全手段防止其泄露和被滥用的行为，同时用户还能享受各种服务。旨在实现数据安全和共享的某种平衡。</p><p>​匿名隐私保护技术是在隐去标识属性的基础上，为了更好地保护发布数据中的隐私信息不被泄露，对用户的准标识符进行数据发布限制的技术。</p><p>链接攻击：类似数据库里的自然连接，通过等值的列进行连接，可以获得某个元组更详细的信息。</p><p>所以匿名化的目的就是使公开表之间无法自然连接。</p><p><strong>数据属性分类</strong></p><ul><li><strong>关键属性</strong>：一般是个体的唯一标识，如姓名、地址、电话等，这些需要在公开数据的时候删掉</li><li><strong>准标识</strong>：类似邮编，年龄，性别等，虽然不是唯一标识，但是能帮助研究人员关联相关数据的标识。</li><li><strong>敏感属性</strong>：如购买偏好，薪水，这些数据是研究人员进行分析和挖掘必须的，一般都直接公开。</li></ul><p><strong>实现匿名主要方法</strong></p><ul><li>泛化：对数据进行抽象或概括的描述</li><li>抑制：不发布相应项，去除单元值或一个元组的所有值</li><li>分割：将原始数据按照l-多样性原则划分，然后把<strong>准标识属性</strong>和<strong>敏感属性</strong>分成两个表后直接发布，两者之间通过“组号”来连接</li><li>聚类：对数据中的不同记录进行分类，每个分类中的数据属性相同或相似</li></ul><h3 id="k-匿名性"><a class="markdownIt-Anchor" href="#k-匿名性"></a> k-匿名性</h3><ul><li><p>k-匿名化：将某些列属性的具体值替换为泛化值，使其满足k-匿名性的过程，也称泛化过程。</p></li><li><p>k-匿名性：当表中的每一个元组无法与其他至少k−1个元组互相区分，即每个元组所在的等价类≥k时，称该表满足k-匿名性。</p></li><li><p>k值越大，保护强度越大，丢失信息越多，可用性越低</p></li><li><p>注意：k-匿名性不考虑敏感属性。</p></li><li><p>同质化攻击：等价类中的敏感属性取值相同，会“无法相互区分”，敌手可直接将这个等价类的信息视为等价类中每一个元组的信息(反正从这张表看这些人都一样)。</p></li></ul><h3 id="l-多样性"><a class="markdownIt-Anchor" href="#l-多样性"></a> l-多样性</h3><ul><li><p>由于k-匿名性不考虑敏感属性，存在同质性攻击，于是有了l-多样性。</p></li><li><p>l-多样性：在k-匿名性的基础上，每个等价类中至少有l种敏感属性，即每个等价类的敏感属性≥l</p></li><li><p>偏斜性攻击：等价类中敏感属性的分布与全体数据的分布相差较大，敌手可以结合语义判断某个元组的敏感属性在哪个属性上的区间。</p></li></ul><h3 id="t-临近性"><a class="markdownIt-Anchor" href="#t-临近性"></a> t-临近性</h3><ul><li><p>由于l-多样性不考虑等价类与总体的分布差异，于是有了t-邻近性。</p></li><li><p>t-邻近性：在每个等价类中，敏感属性的分布与全体属性的分布邻近，且不超过t。</p></li></ul><h2 id="差分隐私"><a class="markdownIt-Anchor" href="#差分隐私"></a> 差分隐私</h2><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ε</mi></mrow><annotation encoding="application/x-tex">\varepsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">ε</span></span></span></span>(隐私保护预算)越大，引入的噪声越小，隐私泄露的风险越大。</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ε</mi></mrow><annotation encoding="application/x-tex">\varepsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">ε</span></span></span></span>越小，引入的噪声越大，隐私泄露的风险越小。</p></li></ul><p>噪声过多会使可用性下降，噪声过少会使数据安全性下降</p><p>敏感度越大，需要添加足够大的噪声，</p><p>因此，全局敏感度只与查询函数有关。这有可能要面对很大的全局敏感性，需要加更大的噪声，因此，提出了局部敏感性的概念。局部敏感度首先会对待保护数据集进行变换(如差值等)，降低待保护数据集的敏感度，由于利用了数据集的数据分布特征，局部敏感度通常比全局敏感度小的多。</p><h2 id="同态加密"><a class="markdownIt-Anchor" href="#同态加密"></a> 同态加密</h2><p>​同态加密技术，它支持直接对密文进行运算，并且计算结果的解密值与对应明文的计算结果相同</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202401062220694.png" alt="image-20240106222019639" /></p><h1 id="第7章-vpn"><a class="markdownIt-Anchor" href="#第7章-vpn"></a> 第7章 VPN</h1><blockquote><p>1 IPSEC VPN 与 TLS VPN 搞清楚什么情况下使用，具体情况下怎么封装了解即可，了解隧道协议即可，主要掌握几种VPN的比较点</p></blockquote><h2 id="ipsec-vpn"><a class="markdownIt-Anchor" href="#ipsec-vpn"></a> IPSEC VPN</h2><ul><li>使用场景：<ul><li>站点到站点的连接</li><li>远程访问</li></ul></li><li>协议层次：<ul><li>IPSEC工作在网络层，为整个网络通信提供安全性</li></ul></li><li>加密和鉴别<ul><li>IPsec提供数据加密和身份验证，通常使用AH和ESP协议来实现</li></ul></li></ul><h2 id="tls-vpn"><a class="markdownIt-Anchor" href="#tls-vpn"></a> TLS VPN</h2><ul><li>使用场景<ul><li>远程用户访问</li><li>移动设备支持：由于TLS VPN工作在传输层(第四层)，因此适用于多种设备，包括移动设备</li></ul></li><li>协议层次：<ul><li>TLS VPN工作在传输层与应用层之间，为端到端的通信提供安全性</li></ul></li><li>加密和鉴别<ul><li>TLS VPN使用TLS协议(也称为SSL/TLS)来实现加密和身份验证</li></ul></li><li>连接方式：<ul><li>TLS VPN通常作为应用层协议，因此可以使用独立的客户端软件，也可以通过Web浏览器进行访问。相对于IPsec，TLS VPN更容易部署，无需对底层网络设备进行复杂的配置。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>课程复习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PE文件解析</title>
    <link href="/posts/d7f95dad.html"/>
    <url>/posts/d7f95dad.html</url>
    
    <content type="html"><![CDATA[<h1 id="汇总"><a class="markdownIt-Anchor" href="#汇总"></a> 汇总</h1><ul><li>分析PE格式工具----<a href="https://blog.csdn.net/u013908944/article/details/103356615">PETool</a></li><li><strong>引用</strong><ul><li><a href="https://blog.csdn.net/freeking101/article/details/102752048">PE文件结构详解</a></li><li><a href="https://blog.csdn.net/weixin_43655282/article/details/104291312">PE文件结构详解精华</a></li></ul></li></ul><h1 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h1><h2 id="pe文件"><a class="markdownIt-Anchor" href="#pe文件"></a> PE文件</h2><ul><li><p>PE (Portable Execute) 文件是Windows下可执行文件的总称，常见的有 <strong>DLL，EXE，OCX，SYS</strong> 等。它是微软在 UNIX 平台的 COFF (通用对象文件格式) 基础上制作而成。<strong>最初设计用来提高程序在不同操作系统上的移植性，但实际上这种文件格式仅用在 Windows 系列操作系统下</strong>。<strong>PE文件是指 32 位可执行文件，也称为PE32。64位的可执行文件称为 PE+ 或 PE32+，是PE(PE32)的一种扩展形式(请注意不是PE64)</strong></p></li><li><p>早期磁盘空间不足，PE磁盘文件与内存映像结构不同，磁盘每200h为一节，内存则是1000h为一节。后来随之发展，二者相一致</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291126138.png" alt="202301121246317" /></p></li><li><p>PE文件的结构一般来说如下图所示：从起始位置开始依次是 <strong>DOS头</strong>，<strong>NT头</strong>，<strong>节表</strong> 以及<strong>具体的节</strong></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291127620.png" alt="202302250820743" /></p></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291127571.png" alt="202301121155957" /></p><h2 id="pe文件执行顺序"><a class="markdownIt-Anchor" href="#pe文件执行顺序"></a> PE文件执行顺序</h2><ol><li>当一个 PE 文件被执行时，<strong>PE 装载器</strong>首先检查 DOS header 里的 PE header 的偏移量。如果找到，则直接跳转到 PE header 的位置。</li><li>当<strong>PE 装载器</strong>跳转到 PE header 后，第二步要做的就是检查 PE header 是否有效。如果该 PE header 有效，就跳转到 PE header 的尾部。</li><li>紧跟 PE header 尾部的是节表。PE装载器 执行完第二步后开始读取节表中的节段信息，并采用文件映射的方法将这些节段映射到内存，<strong>同时附上节表里指定节段的读写属性</strong>。<ul><li><strong>文件映射</strong>----在执行一个PE文件的时候，Windows并不在一开始就将整个文件读入内存，而是采用与内存映射的机制，也就是说，<strong>Windows装载器在装载的时候仅仅建立好虚拟地址和PE文件之间的映射关系，只有真正执行到某个内存页中的指令或者访问某一页中的数据时，这个页面才会被从磁盘提交到物理内存</strong>，这种机制使文件装入的速度和文件大小没有太大的关系</li></ul></li><li>PE文件映射入内存后，PE装载器 将继续处理PE文件中类似 import table (输入表)的逻辑部分。</li></ol><h2 id="pe文件结构"><a class="markdownIt-Anchor" href="#pe文件结构"></a> PE文件结构</h2><ol><li><strong>DOS头</strong> 是用来兼容 MS-DOS 操作系统的，目的是当这个文件在 MS-DOS 上运行时提示一段文字，大部分情况下是：This program cannot be run in DOS mode. 同时指明 NT 头在文件中的位置。</li><li><strong>NT头</strong> 包含 windows PE 文件的主要信息，其中包括一个 <strong>‘PE’ 字样的签名</strong>，**PE文件头(IMAGE_FILE_HEADER)**和 <strong>PE可选头(IMAGE_OPTIONAL_HEADER32)。</strong></li><li><strong>节表</strong>：是 PE 文件后续节的描述，windows 根据节表的描述加载每个节。</li><li><strong>节</strong>：每个节实际上是一个容器，可以包含代码、数据等等，每个节可以有独立的内存权限，比如代码节默认有读/执行权限，节的名字和数量可以自己定义，未必是上图中的三个。</li></ol><h2 id="varva"><a class="markdownIt-Anchor" href="#varva"></a> VA&amp;RVA</h2><p>​VA指的是进程虚拟内存的<strong>绝对地址</strong>，RVA指从某个基准位置开始的<strong>相对地址</strong>。VA与RVA满足：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><mi>V</mi><mi>A</mi><mo>+</mo><mi>I</mi><mi>m</mi><mi>a</mi><mi>g</mi><mi>e</mi><mi>B</mi><mi>a</mi><mi>s</mi><mi>e</mi><mo>=</mo><mi>V</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">RVA + ImageBase = VA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal">a</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal">A</span></span></span></span></span></p><p>​PE头内部大多以RVA形式存在。32位Windows OS中，各进程分配有 4GB 的虚拟内存，因此进程中VA值的范围是0000 0000 ~ FFFF FFFF。</p><h1 id="pe头"><a class="markdownIt-Anchor" href="#pe头"></a> PE头</h1><p>win采用小端序存储，查看十六进制时需要从右往左</p><ul><li><p>32位PE头大小</p><ul><li><p>DOS—40h</p></li><li><p>NT—4h + 14h(FILE) + E0h(Optional)</p></li></ul></li></ul><h2 id="dos头"><a class="markdownIt-Anchor" href="#dos头"></a> DOS头</h2><h3 id="image_dos_header"><a class="markdownIt-Anchor" href="#image_dos_header"></a> IMAGE_DOS_HEADER</h3><p>​所有的PE文件都是以一个<strong>64(40h)字节</strong>(一个字节8位)的<strong>DOS头</strong>(MZ文件头)开始。这个DOS头只是为了兼容早期的DOS操作系统。该结构体中需要掌握的字段只有2个，分别是第一个字段 <code>e_magic</code> 和最后一个字段 <code>e_lfanew</code> 字段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_DOS_HEADER</span> &#123;</span>　<span class="hljs-comment">// DOS .EXE header</span><br>WORD　e_magic;　　　　<span class="hljs-comment">// Magic number</span><br>WORD　e_cblp;　　　　 <span class="hljs-comment">// Bytes on last page of file</span><br>WORD　e_cp;　　　　　 <span class="hljs-comment">// Pages in file</span><br>WORD　e_crlc;　　　　 <span class="hljs-comment">// Relocations</span><br>WORD　e_cparhdr;　　　<span class="hljs-comment">// Size of header in paragraphs</span><br>WORD　e_minalloc;　　 <span class="hljs-comment">// Minimum extra paragraphs needed</span><br>WORD　e_maxalloc;　　 <span class="hljs-comment">// Maximum extra paragraphs needed</span><br>WORD　e_ss;　　　　　　<span class="hljs-comment">// Initial (relative) SS value</span><br>WORD　e_sp;　　　　　　<span class="hljs-comment">// Initial SP value</span><br>WORD　e_csum;　　　　　<span class="hljs-comment">// ChecksumWORD e_ip;Initial IP valueWORD　e_cs;Initial (relative) CS value</span><br>WORD　e_lfarlc;　　　　<span class="hljs-comment">// File address of relocation table</span><br>WORD　e_ovno;　　　　　<span class="hljs-comment">// Overlay number</span><br>WORD　e_res[<span class="hljs-number">4</span>];　　　　<span class="hljs-comment">// Reserved words</span><br>WORD　e_oemid;　　　　 <span class="hljs-comment">// OEM identifier (for e_oeminfo)</span><br>WORD　e_oeminfo;　　　 <span class="hljs-comment">// OEM information; e_oemid specific</span><br>WORD　e_res2[<span class="hljs-number">10</span>];　　　<span class="hljs-comment">// Reserved words</span><br>LONG　e_lfanew;　　　　<span class="hljs-comment">// File address of new exe header</span><br>&#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;<br><br></code></pre></td></tr></table></figure><ul><li><p><code>e_magic</code> 字段</p><p>DOS 可执行文件的标识符(DOS签名)，占用2字节。该位置保存着的字符是“MZ”。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_DOS_SIGNATURE　　　　<span class="hljs-comment">//0x5A4D　MZ</span></span><br></code></pre></td></tr></table></figure></li><li><p><code>e_lfanew</code> 字段：<br />只是NT头的偏移----PE头相对于文件的偏移，定位PE文件</p></li><li><p>作用：</p><ul><li><strong>定位PE文件头开始位置</strong>，也可用于<strong>PE文件合法性检测</strong></li></ul></li></ul><h3 id="dos存根"><a class="markdownIt-Anchor" href="#dos存根"></a> DOS存根</h3><p>​DOS存根(stub)在DOS头下方，是个可选项，且大小不固定(即使没有DOS存根，文件也能正常运行)。</p><h2 id="nt头"><a class="markdownIt-Anchor" href="#nt头"></a> NT头</h2><h3 id="image_nt_headers"><a class="markdownIt-Anchor" href="#image_nt_headers"></a> IMAGE_NT_HEADERS</h3><p>​<strong>NT头：PE标识</strong>结构体的大小为<strong>F8h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_NT_HEADERS</span> &#123;</span> <br>        DWORD Signature;                         <br>      <span class="hljs-comment">//该结构体中的Signature就是PE标识符,标识该文件是否是PE文件。4字节，即 50 45 0000 -&gt; 00 00 45 50 -&gt; PE</span><br>        IMAGE_FILE_HEADER FileHeader;             <br>      <span class="hljs-comment">// IMAGE_FILE_HEADER是PE文件头</span><br>        IMAGE_OPTIONAL_HEADER32 OptionalHeader;   <span class="hljs-comment">// </span><br>&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;  <br></code></pre></td></tr></table></figure><ul><li><p><code>Signature(签名)</code>字段</p><ul><li>类似于 DOS头中的 e_magic，其高16位是0，低16是0x4550，用字符表示是 “PE”。</li></ul></li><li><p><code>File Header</code></p><ul><li>文件头结构体</li></ul></li><li><p><code>Optional Header</code></p><ul><li>可选头结构体</li></ul></li><li><p>为简单分析，此时PE头(file与optional)只看32位，64位的暂且不看</p></li></ul><h3 id="image_file_header"><a class="markdownIt-Anchor" href="#image_file_header"></a> IMAGE_FILE_HEADER</h3><p>​<strong>NT头：文件头</strong>，共<strong>14h</strong>个字节，其中需要掌握的字段有5个(注意NT头有个4字节的Signature)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_FILE_HEADER</span> &#123;</span> <br>        WORD    Machine;              <br>        <span class="hljs-comment">// 每个CPU拥有唯一的Machine码 -&gt; 4C 01 -&gt; PE -&gt; 兼容32位Intel X86芯片</span><br><br>        WORD    NumberOfSections;     <br>        <span class="hljs-comment">// 指文件中存在的节段(又称节区)数量，也就是节表中的项数 -&gt; 00 04 -&gt; 4</span><br>        <span class="hljs-comment">// 该值一定要大于0，且当定义的节段数与实际不符时，将发生运行错误。</span><br><br>        DWORD   TimeDateStamp;         <br>        <span class="hljs-comment">// PE文件的创建时间，一般有连接器填写 -&gt; 38 D1 29 1E</span><br>    <br>        DWORD   PointerToSymbolTable;<br>        <span class="hljs-comment">// COFF文件符号表在文件中的偏移 -&gt; 00 00 00 00</span><br>        DWORD   NumberOfSymbols;       <br>        <span class="hljs-comment">// 符号表的数量 -&gt; 00 00 00 00</span><br><br>        WORD    SizeOfOptionalHeader; <br>        <span class="hljs-comment">// 指出IMAGE_OPTIONAL_HEADER32结构体的长度。-&gt;  00 E0 -&gt; 224字节</span><br>        <span class="hljs-comment">// PE32+ 格式文件中使用的是IMAGE_OPTIONAL_HEADER64结构体，</span><br>        <span class="hljs-comment">// 这两个结构体尺寸是不相同的，所以需要在SizeOfOptionalHeader中指明大小。</span><br><br>        WORD    Characteristics;      <br>        <span class="hljs-comment">// 标识文件的属性，二进制中每一位代表不同属性 -&gt; 0F 01</span><br>    <br>&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;<br></code></pre></td></tr></table></figure><ul><li><p><code>Machine</code>字段</p><ul><li>指明程序能够运行的CPU型号(运行平台)：</li><li><strong>0x0000</strong> 任何处理器; <strong>0x0014C</strong> x86及后续处理器</li></ul></li><li><p><code>NumberOfSections</code>字段</p><ul><li>文件中存在的节区的总数，如果要新增节或者合并节，就要修改这个值</li></ul></li><li><p><strong>TimeDateStamp</strong>字段</p><ul><li>时间戳：文件的创建时间(和操作系统的创建时间无关)，编译器填写的</li></ul></li><li><p><code>SizeOfOptionalHeader</code>字段</p><ul><li>指出可选PE头(IMAGE_OPTIONAL_HEADER)的大小，32位PE文件默认<strong>E0h</strong>，64位PE文件默认为<strong>F0h</strong>，大小可以自定义</li></ul></li><li><p><code>Characteristics</code>字段</p><ul><li>文件属性，每个位(十六进制转化为二进制)有不同的含义，可执行文件值为10F 即0 1 2 3 8位置1</li></ul></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304020940369.png" alt="202301121638095" /></p><h3 id="image_optional_header"><a class="markdownIt-Anchor" href="#image_optional_header"></a> IMAGE_OPTIONAL_HEADER</h3><p>​<strong>NT头：可选头</strong>，32位下大小为<strong>E0h</strong>个字节，64位下大小为<strong>F0h</strong>个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_OPTIONAL_HEADER</span> &#123;</span> <br>        WORD    Magic;                     <br>        <span class="hljs-comment">// 魔数 32位为0x10B，64位为0x20B，ROM镜像为0x107&#x27;</span><br>        BYTE    MajorLinkerVersion;         <br>        <span class="hljs-comment">// 链接器的主版本号 -&gt; 05</span><br>        BYTE    MinorLinkerVersion;         <br>        <span class="hljs-comment">// 链接器的次版本号 -&gt; 0C</span><br>        DWORD   SizeOfCode;                 <br>        <span class="hljs-comment">// 代码节大小，一般放在“.text”节里，必须是FileAlignment的整数倍 -&gt; 40 00 04 00</span><br>        DWORD   SizeOfInitializedData;      <br>        <span class="hljs-comment">// 已初始化数大小，一般放在“.data”节里，必须是FileAlignment的整数倍 -&gt; 40 00 0A 00</span><br>        DWORD   SizeOfUninitializedData;    <br>        <span class="hljs-comment">// 未初始化数大小，一般放在“.bss”节里，必须是FileAlignment的整数倍 -&gt; 00 00 00 00</span><br>        DWORD   AddressOfEntryPoint;       <br>        <span class="hljs-comment">// 指出程序最先执行的代码起始地址(RVA) -&gt; 00 00 10 00&#x27;</span><br>        DWORD   BaseOfCode;                 <br>        <span class="hljs-comment">// 代码基址，当镜像被加载进内存时代码节的开头RVA。必须是SectionAlignment的整数倍 -&gt; 40 00 10 00</span><br> <br>        DWORD   BaseOfData;                 <br>        <span class="hljs-comment">// 数据基址，当镜像被加载进内存时数据节的开头RVA。必须是SectionAlignment的整数倍 -&gt; 40 00 20 00</span><br>        <span class="hljs-comment">// 在64位文件中此处被并入紧随其后的ImageBase中。</span><br> <br>        DWORD   ImageBase;                 <br>        <span class="hljs-comment">// 当加载进内存时，镜像的第1个字节的首选地址。</span><br>        <span class="hljs-comment">// WindowEXE默认ImageBase值为00400000，DLL文件的ImageBase值为10000000，也可以指定其他值。</span><br>        <span class="hljs-comment">// 执行PE文件时，PE装载器先创建进程，再将文件载入内存，</span><br>        <span class="hljs-comment">// 然后把EIP寄存器的值设置为ImageBase+AddressOfEntryPoint&#x27;</span><br>        <span class="hljs-comment">// PE文件的Body部分被划分成若干节段，这些节段储存着不同类别的数据。</span><br>        DWORD   SectionAlignment;          <br>        <span class="hljs-comment">// SectionAlignment指定了节段在内存中的最小单位， -&gt; 00 00 10 00&#x27;</span><br>        DWORD   FileAlignment;             <br>        <span class="hljs-comment">// FileAlignment指定了节段在磁盘文件中的最小单位，-&gt; 00 00 02 00</span><br>        <span class="hljs-comment">// SectionAlignment必须大于或者等于FileAlignment&#x27;</span><br> <br>        WORD    MajorOperatingSystemVersion;<span class="hljs-comment">// 主系统的主版本号 -&gt; 00 04</span><br>        WORD    MinorOperatingSystemVersion;<span class="hljs-comment">// 主系统的次版本号 -&gt; 00 00</span><br>        WORD    MajorImageVersion;          <span class="hljs-comment">// 镜像的主版本号 -&gt; 00 00</span><br>        WORD    MinorImageVersion;          <span class="hljs-comment">// 镜像的次版本号 -&gt; 00 00</span><br>        WORD    MajorSubsystemVersion;      <span class="hljs-comment">// 子系统的主版本号 -&gt; 00 04</span><br>        WORD    MinorSubsystemVersion;      <span class="hljs-comment">// 子系统的次版本号 -&gt; 00 00</span><br>        DWORD   Win32VersionValue;          <span class="hljs-comment">// 保留，必须为0 -&gt; 00 00 00 00</span><br> <br>        DWORD   SizeOfImage;               <br>        <span class="hljs-comment">// 当镜像被加载进内存时的大小，包括所有的文件头。向上舍入为SectionAlignment的倍数。</span><br>        <span class="hljs-comment">// 一般文件大小与加载到内存中的大小是不同的。 -&gt; 00 00 50 00&#x27;</span><br> <br>        DWORD   SizeOfHeaders;             <br>        <span class="hljs-comment">// 所有头的总大小，向上舍入为FileAlignment的倍数。                                     </span><br>        <span class="hljs-comment">// 可以以此值作为PE文件第一节的文件偏移量。-&gt; 00 00 04 00&#x27;</span><br> <br>        DWORD   CheckSum;                   <span class="hljs-comment">// 镜像文件的校验和 -&gt; 00 00 B4 99</span><br> <br>        WORD    Subsystem;                 <br>        <span class="hljs-comment">// 运行此镜像所需的子系统 -&gt; 00 02 -&gt; 窗口应用程序</span><br>        <span class="hljs-comment">// 用来区分系统驱动文件(*.sys)与普通可执行文件(*.exe，*.dll)，</span><br><br> <br>        WORD    DllCharacteristics;         <span class="hljs-comment">// DLL标识 -&gt; 00 00</span><br>        DWORD   SizeOfStackReserve;         <span class="hljs-comment">// 最大栈大小。CPU的堆栈。默认是1MB。-&gt; 00 10 00 00</span><br>        DWORD   SizeOfStackCommit;          <span class="hljs-comment">// 初始提交的堆栈大小。默认是4KB -&gt; 00 00 10 00</span><br>        DWORD   SizeOfHeapReserve;          <span class="hljs-comment">// 最大堆大小。编译器分配的。默认是1MB -&gt;00 10 00 00</span><br>        DWORD   SizeOfHeapCommit;           <span class="hljs-comment">// 初始提交的局部堆空间大小。默认是4K -&gt;00 00 10 00</span><br>        DWORD   LoaderFlags;                <span class="hljs-comment">// 保留，必须为0 -&gt; 00 00 00 00</span><br> <br>        DWORD   NumberOfRvaAndSizes;       <br>        <span class="hljs-comment">// 指定DataDirectory的数组个数，由于以前发行的Windows NT的原因，它只能为16。 -&gt; 00 00 00 10&#x27;</span><br>        IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]; <br>        <span class="hljs-comment">// 数据目录数组。详见下文。</span><br>    <br>&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;<br> <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_DATA_DIRECTORY</span> &#123;</span>  <br>    DWORD   VirtualAddress;  <br>    DWORD   Size;  <br>&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;<br></code></pre></td></tr></table></figure><ul><li><code>Magic</code>字段<ul><li>说明文件类型：</li><li>32位下的PE文件–<strong>10B</strong>， 64位下的PE文件–<strong>20B</strong></li></ul></li><li><strong>SizeOfCode</strong>字段<ul><li>所有代码节的和，必须是FileAlignment的整数倍  编译器填的</li></ul></li><li><strong>SizeOfInitializedData</strong>字段<ul><li>已初始化数据大小的和，必须是FileAlignment的整数倍  编译器填的</li></ul></li><li><strong>SizeOfUninitializedData</strong>字段<ul><li>未初始化数据大小的和，必须是FileAlignment的整数倍  编译器填的</li></ul></li><li><code>AddressOfEntryPoint</code>字段<ul><li>程序入口—AddressOfEntryPoint持有EP的RVA值。该值指出程序最先执行的代码起始地址。</li></ul></li><li><strong>BaseOfCode</strong>字段<ul><li>代码开始的基址，编译器填的</li></ul></li><li><strong>BaseOfData</strong>字段<ul><li>数据开始的基址，编译器填的</li></ul></li><li><code>ImageBase</code>字段<ul><li>内存镜像基址。进程虚拟内存的范围是0000 0000 ~ FFFF FFFF(32位系统)。PE文件被加载到内存中时，ImageBase 指出文件的优先装入地址。</li><li>EXE、DLL文件被装载到用户内存的0000 0000 ~ 7FFF FFFF中，SYS文件被载入内核内存的8000 0000 ~ FFFF FFFF中。一般而言，使用开发攻击(VB/VC++/Dephi)创建好EXE文件后，其执行PR文件时，PE装载器先创建进程，再将文件载入内存，然后把EIP寄存器的值设置为 <strong>ImageBase + AddressOfEntryPoint</strong></li></ul></li><li><code>SectionAlignment</code>字段<ul><li>内存对齐—节区在内存中的最小单位</li></ul></li><li><code>FileAlignment</code>字段<ul><li>文件对齐—节区再磁盘文件中的最小单位</li></ul></li><li><code>SizeOfImage</code>字段<ul><li>内存中整个PE文件的映射的尺寸，可以比实际的值大，但必须是SectionAlignment的整数倍</li></ul></li><li><code>SizeOfHeaders</code>字段<ul><li>所有头与节表按照<strong>文件对齐</strong>后的大小，否则加载会出错</li><li>指出整个PE头的大小[ DOS + NT( NT + File + Optional ) ]。该值也是FileAlignment的整数倍。第一节区所在位置与SizeOfHeader距文件开始偏移的量相同</li></ul></li><li><strong>CheckSum</strong>字段<ul><li>校验和，一些系统文件有要求.用来判断文件是否被修改</li></ul></li><li><strong>SizeOfStackReserve</strong>字段<ul><li>初始化时保留的堆栈大小</li></ul></li><li><strong>SizeOfStackCommit</strong>字段<ul><li>初始化时实际提交的大小</li></ul></li><li><strong>SizeOfHeapReserve</strong>字段<ul><li>初始化时保留的堆大小</li></ul></li><li><strong>SizeOfHeapCommit</strong>字段<ul><li>初始化时实践提交的大小</li></ul></li><li><code>NumberOfRvaAndSizes</code>字段<ul><li>目录项数目</li><li>指出Data_Directory(IMAGE_OPTIONAL_HEADER32结构体的最后一个成员)数组的个数。</li></ul></li><li><code>Data_Directory</code>字段<ul><li>数据目录表，由NumberOfRvaAndSize个IMAGE_DATA_DIRECTORY结构体组成的数组。该数组包含输入表，输出表，资源，重定位等数据目录项的RVA和大小。</li></ul></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304020950878.png" alt="202302242139607" /></p><h2 id="节区头节表"><a class="markdownIt-Anchor" href="#节区头节表"></a> 节区头(节表)</h2><p><strong>IMAGE_SECTION_HEADER</strong></p><p>​在PE文件头与原始数据之间存在一个区块表(Section Table)，它是一个IMAGE_SECTION_HEADER结构数组，<code>区块表包含每个块在映像中的信息</code>(如位置、长度、属性)，分别指向不同的区块实体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_SECTION_HEADER</span> &#123;</span><br>    Name<span class="hljs-comment">//8个字节的块名</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">    &#123;</span><br>        DWORD PhysicalAddress;<br>        DWORD VirtualSize;<br>    &#125; Misc;                     <span class="hljs-comment">//区块尺寸(真实)</span><br>    DWORD VirtualAddress;<span class="hljs-comment">//区块的RVA地址</span><br>    DWORD SizeOfRawData;<span class="hljs-comment">//在文件中对齐后的尺寸</span><br>    DWORD PointerToRawData;<span class="hljs-comment">//在文件中偏移</span><br>    DWORD PointerToRelocations;<span class="hljs-comment">//在OBJ文件中使用，重定位的偏移</span><br>    DWORD PointerToLinenumbers;<span class="hljs-comment">//行号表的偏移(供调试使用地)</span><br>    WORD NumberOfRelocations;<span class="hljs-comment">//在OBJ文件中使用，重定位项数目</span><br>    WORD NumberOfLinenumbers;<span class="hljs-comment">//行号表中行号的数目</span><br>    DWORD Characteristics;<span class="hljs-comment">//区块属性如可读，可写，可执行等</span><br>&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;<br></code></pre></td></tr></table></figure><ul><li><p><code>Name</code></p><ul><li><strong>8个字节</strong> 一般情况下是以&quot;\0&quot;结尾的ASCII吗字符串来标识的名称，内容可以自定义</li></ul></li><li><p><code>Misc</code></p><ul><li><strong>双字</strong> 是该节在没有对齐前的真实尺寸,该值可以不准确</li></ul></li><li><p><code>VirtualSize</code></p><ul><li>内存中节区所占大小</li></ul></li><li><p><code>VirtualAddress</code></p><ul><li>节区在<strong>内存中</strong>的偏移地址(RVA)。加上ImageBase才是在内存中的真正地址。由SectionAlignment确定</li></ul></li><li><p><code>SizeOfRawData</code></p><ul><li>节区在<strong>文件中</strong>对齐后的尺寸—磁盘文件中节区所占大小</li></ul></li><li><p><code>PointerToRawData</code></p><ul><li>节区在<strong>文件中</strong>的偏移—磁盘文件中节区的起始位置。由FileAlignment确定</li></ul></li><li><p><code>Characteristics</code></p><ul><li><p>节区属性(bit OR)</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291128040.png" alt="202302242144521" /></p></li></ul></li></ul><h1 id="rva-to-raw"><a class="markdownIt-Anchor" href="#rva-to-raw"></a> RVA to RAW</h1><p>​PE文件从磁盘到内存映射—PE文件加载到内存时，每个节区都要能准确完成内存地址与文件偏移间的映射(RVA to RAW).方法如下：</p><ol><li><p>查早RVA所在节区</p></li><li><p>使用简单的公式计算文件偏移(RAW/FOA)</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><mi>A</mi><mi>W</mi><mo stretchy="false">(</mo><mi>F</mi><mi>O</mi><mi>A</mi><mo stretchy="false">)</mo><mo>−</mo><mi>P</mi><mi>o</mi><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>T</mi><mi>o</mi><mi>R</mi><mi>a</mi><mi>w</mi><mi>D</mi><mi>a</mi><mi>t</mi><mi>a</mi><mo>=</mo><mi>R</mi><mi>V</mi><mi>A</mi><mo>−</mo><mi>V</mi><mi>i</mi><mi>r</mi><mi>t</mi><mi>u</mi><mi>a</mi><mi>l</mi><mi>A</mi><mi>d</mi><mi>d</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">RAW(FOA) - PointerToRawData = RVA - VirtualAddress</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">o</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">t</span><span class="mord mathnormal">u</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">A</span><span class="mord mathnormal">d</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">s</span></span></span></span></span></p><p>PointerToRawData：<strong>磁盘文件中</strong>节区的起始位置。由FileAlignment确定</p><p>virtualAddress：<strong>内存中</strong>节区起始地址(RVA)</p></li></ol><h1 id="数据目录"><a class="markdownIt-Anchor" href="#数据目录"></a> 数据目录</h1><ul><li><p><strong>引用：</strong></p><ul><li><p><a href="https://blog.csdn.net/qq_35289660/category_9995600.html">PE文件结构_C4cke的博客-CSDN博客</a></p></li><li><p><a href="https://www.anquanke.com/member.html?memberId=156165">深度理解win32</a></p></li></ul></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291128802.png" alt="202302261105566" /></p><h2 id="导出表"><a class="markdownIt-Anchor" href="#导出表"></a> 导出表</h2><p>​**基本概念：**导出表是PE文件为其他应用程序提供自身的一些变量、函数以及类，将其导出给第三方程序使用的一张清单，里面包含了可以导出的元素。位于数据目录项的第一个结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_DATA_DIRECTORY</span> &#123;</span><br>DWORD VirtualAddress;<br>DWORD Size;<br>&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;<br></code></pre></td></tr></table></figure><ul><li><code>VirtualAddress</code>：真正导出表的RVA</li><li><code>Size</code>：导出表的大小，在这个地方的结构只是说明了导出表在<strong>内存中</strong>所存在的地址以及导出表的大小，并不是真正的导出表，需要通过RVA去找到导出表真正存在的地址</li></ul><h3 id="image_export_directory"><a class="markdownIt-Anchor" href="#image_export_directory"></a> IMAGE_EXPORT_DIRECTORY</h3><p>真正的导出表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span><br>    DWORD Characteristics; <span class="hljs-comment">// 未使用</span><br>    DWORD TimeDateStamp; <span class="hljs-comment">// 时间戳</span><br>    WORD MajorVersion; <span class="hljs-comment">// 未使用</span><br>    WORD MinorVersion; <span class="hljs-comment">// 未使用</span><br>    DWORD Name;     <span class="hljs-comment">// 指向该导出表文件名字符串</span><br>    DWORD Base;     <span class="hljs-comment">// 导出函数起始序号</span><br>    DWORD NumberOfFunctions;  <span class="hljs-comment">// 所有导出函数的个数</span><br>    DWORD NumberOfNames;  <span class="hljs-comment">// 以函数名字导出的函数个数</span><br>    DWORD AddressOfFunctions;  <span class="hljs-comment">// 导出函数地址表RVA</span><br>    DWORD AddressOfNames;  <span class="hljs-comment">// 导出函数名称表RVA</span><br>    DWORD AddressOfNameOrdinals;  <span class="hljs-comment">// 导出函数序号表RVA</span><br>&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;<br></code></pre></td></tr></table></figure><ul><li><p>导出表导出方式为两种，分别是以<strong>名字导出</strong>、以<strong>序号导出</strong>：</p></li><li><p>**AddressOfFunctions、AddressOfNames、AddressOfNameOrdinal **这三个RVA指向的是三个存放了函数具体地址的表，如下图所示</p><ul><li><strong>AddressOfFunctions</strong>存放的地址数量由NumberOfFuntions决定，</li><li><strong>AddressOfNameOrdinals</strong>和<strong>AddressOfNames</strong>存放的地址数量由NumberOfNames来决定</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291128759.png" alt="202302261031945" /></p></li></ul><h4 id="addressofnames"><a class="markdownIt-Anchor" href="#addressofnames"></a> AddressOfNames</h4><ul><li>这个表里面的宽度为4字节，即0x12345678，存放的地址也为RVA，在这个表里面，名称是按字符顺序排序的<ul><li><p>例如有一个函数名称为apple，另外一个函数名称为bee，那么apple的RVA就在这个表里面的第一项，bee的RVA就在这个表里面的第二项，但是这个可能并不是函数真正的名字，如下图所示</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291128671.png" alt="202302261034484" /></p></li></ul></li></ul><h4 id="addressofnameordinals"><a class="markdownIt-Anchor" href="#addressofnameordinals"></a> AddressOfNameOrdinals</h4><ul><li>这个表里面的宽度为2字节，存放的地址也为RVA，通过这个表里面的内容加上Base就可以得到函数的导出序号</li></ul><h4 id="addressoffunctions"><a class="markdownIt-Anchor" href="#addressoffunctions"></a> AddressOfFunctions</h4><ul><li>这个表里面的宽度也是4字节，存放的是所有导出函数的地址，这个地址也是RVA，所以要想得到真正的地址需要加上ImageBase</li></ul><h3 id="导出方式"><a class="markdownIt-Anchor" href="#导出方式"></a> 导出方式</h3><ul><li>以名字导出<ul><li>首先遍历名字表(AddressOfNames)，用名字表中的地址找字符串，与目标字符串比对。如果找到字符串一样的，得到该处的索引。按照相同的索引号从序号表中找到序号值(即<strong>名字表与序号表的下标相同</strong>)，再通过序号值(序号表中的value)为索引，从地址表中找到目标函数的地址(RVA)，之后这个地址需要加上ImagBase，即可得到真正导出函数的地址</li></ul></li><li>以序号导出<ul><li>用目标序号-BASE，得到一个值，直接用这个值为索引，从地址表中找函数的地址(RVA)，之后这个地址需要加上ImagBase，即可得到真正导出函数的地址</li></ul></li></ul><h2 id="导入表"><a class="markdownIt-Anchor" href="#导入表"></a> 导入表</h2><p>​**基本概念：**导入表是记录PE文件中用到的动态连接库的集合，一个dll库在导入表中占用一个元素信息的位置，这个元素描述了该导入dll的具体信息。如dll的最新修改时间、dll中函数的名字/序号、dll加载后的函数地址等。</p><blockquote><p>补充：DLL</p></blockquote><p>​DLL(Dynamic Linked Library)----动态链接库</p><p>DLL概念：</p><ul><li>不把库包含到程序中，单独组成DLL文件，需要时调用即可</li><li>内存映射技术使加载后的DLL代码、资源在多个进程中实现共享</li><li>更新库时只要替换相关文件即可，简便易行</li></ul><p>DLL加载：</p><ol><li>显示链接：程序使用DLL时加载，使用完毕后释放内存；</li><li>隐式链接：程序开始时即一同加载DLL，程序终止时再释放占用的内存</li></ol><p><strong>IAT提供的机制即与隐式链接有关</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_DATA_DIRECTORY</span> &#123;</span><br>    DWORD   VirtualAddress;<br>    DWORD   Size;<br>&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;<br></code></pre></td></tr></table></figure><ul><li><code>VirtualAddress</code>：指向真正导入表结构的RVA</li><li><code>Size</code>：导入表的大小</li></ul><h3 id="image_import_descriptor"><a class="markdownIt-Anchor" href="#image_import_descriptor"></a> IMAGE_IMPORT_DESCRIPTOR</h3><p>​IMAGE_IMPORT_DESCRIPTOR结构体中记录着PE文件要导入哪些库文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>        DWORD   Characteristics;            <span class="hljs-comment">//导入表结束标志</span><br>        DWORD   OriginalFirstThunk;         <span class="hljs-comment">//RVA 指向IMAGE_THUNK_DATA结构体数组(INT表)</span><br>    &#125;;<br>    DWORD   TimeDateStamp;                  <span class="hljs-comment">//时间戳</span><br>    DWORD   ForwarderChain;                 <span class="hljs-comment">// -1 if no forwarders</span><br>    DWORD   Name;                           <span class="hljs-comment">//RVA指向dll名字，以0结尾</span><br>    DWORD   FirstThunk;                     <span class="hljs-comment">//RVA 指向IMAGE_THUNK_DATA结构体数组(IAT表)</span><br>&#125; IMAGE_IMPORT_DESCRIPTOR;<br><span class="hljs-keyword">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;<br></code></pre></td></tr></table></figure><p>​执行一个普通程序往往需要导入多个库，导入多少库就存在多少个 <strong>IMAGE_IMPORT_DESCRIPTOR结构体</strong>，这些结构体组成了数组，且结构体数组最后以NULL结束。</p><ul><li><code>OriginalFirstThunk</code><ul><li>该字段保存了指向**导入函数名称(序号)**的 RVA 表(<strong>INT表</strong>)，这个表其实是一个 IMAGE_THUNK_DATA结构体</li></ul></li><li><code>Name</code><ul><li>RVA，指向dll名字(库名称字符串的地址)，该名字以 0 结尾</li></ul></li><li><code>FirstThunk</code><ul><li>RVA，指向IMAGE_THUNK_DATA结构数组，即<strong>指向IAT表</strong></li><li>该字段保存了指向导入地址表的 RVA，在 <strong>PE 文件没有被装载前</strong>它的内容与 OriginalFirstThunk 指向相同的内容，也就是在 PE 文件没有被装载前它也指向 IMAGE_THUNK_ DATA 结构体。</li><li>当<strong>被 Windows 操作系统装入内存后</strong>，它的值则发生了变化，被装载入内存后，这里保存了导入函数实际地址</li></ul></li></ul><h4 id="originalfirstthunk"><a class="markdownIt-Anchor" href="#originalfirstthunk"></a> OriginalFirstThunk</h4><ul><li><strong>OriginalFirstThunk</strong>这个RVA所指向的是INT表(Import Name Table)，这个表每个数据占4个字节。顾名思义就是表示要导入的函数的名字表</li><li><code>INT</code>：<ul><li>如果这个4字节数的最高位(二进制)为1，那么抹去这个最高位之后，所表示的数就是要导入的函数的序号；</li><li>如果最高位是0，那这个数就也是一个RVA，指向IMAGE_IMPORT_BY_NAME结构体(包含真正的导入函数的名字字符串，以0结尾)。INT表以4字节0结尾。</li></ul></li><li><code>IMAGE_IMPORT_BY_NAME</code>：前两个字节是一个序号，不是导入序号，一般无用，后面接着就是导入函数名字的字符串，以0结尾。</li></ul><h4 id="name"><a class="markdownIt-Anchor" href="#name"></a> Name</h4><p>​这个结构体变量也是一个RVA，直接指向一个字符串，这个字符串就是这个导入表对应的DLL的名字。一个导入表只对应一个DLL。存在多个导入表，则对应目录项里的VirtualAddress(RVA)指向的是所有导入表的首地址，每个导入表占20字节，挨着。最后以一个空结构体作为结尾(20字节全0结构体)。</p><h4 id="firstaddress"><a class="markdownIt-Anchor" href="#firstaddress"></a> FirstAddress</h4><ul><li><p>FirstAddress(RVA)指向的就是<strong>IAT表</strong>。IAT表也是每个数据占4个字节。最后以4字节0结尾。</p></li><li><p><code>PE加载：</code></p><ul><li><p>PE加载前，IAT表和INT表完全相同，此时IAT表可以判断函数导出序号，或指向函数名字结构体</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291129288.png" alt="202302261010635" /></p></li><li><p>PE加载后：IAT表发生变化，系统会现根据结构体变量Name加载对应的dll(拉伸)，读取dll的导出表，对应原程序的INT表，匹配dll导出函数的地址，返回其地址，贴在对应的IAT表上，挨个修正地址(即GetPeocAddress)</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291129939.png" alt="202302261010941" /></p></li></ul></li></ul><h3 id="image_thunk_data"><a class="markdownIt-Anchor" href="#image_thunk_data"></a> <strong>IMAGE_THUNK_DATA</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_THUNK_DATA32</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>        DWORD ForwarderString;      <span class="hljs-comment">// PBYTE </span><br>        DWORD Function;             <span class="hljs-comment">// PDWORD，被输入的函数的内存地址</span><br>        DWORD Ordinal;   <span class="hljs-comment">// 被输入的API的序数值</span><br>        DWORD AddressOfData;        <span class="hljs-comment">// RVA 指向_IMAGE_IMPORT_BY_NAME </span><br>    &#125; u1;<br>&#125; IMAGE_THUNK_DATA32;<br><span class="hljs-keyword">typedef</span> IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;<br></code></pre></td></tr></table></figure><ul><li>首先要判断最高位是否为1，如果最高位的值为1，那么去除最高位的值之后，即为函数的导出序号</li><li>如果最高位的值不为1，那么这个值就是一个RVA，在转成FOA之后指向<code>IMAGE_IMPORT_BY_NAME</code>这个结构</li></ul><h3 id="image_import_by_name"><a class="markdownIt-Anchor" href="#image_import_by_name"></a> IMAGE_IMPORT_BY_NAME</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_IMPORT_BY_NAME</span> &#123;</span>                <br>    WORD    Hint;                <br>    BYTE    Name[<span class="hljs-number">1</span>];                <br>&#125; IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;<br></code></pre></td></tr></table></figure><ul><li>Hint为2字节，为当前函数在导出表中的索引，但是这个值一般起不到什么作用。我们思考一下，如果我们最高位值为1是以序号导出，最高位值不为1则以名字导出，而以名字导出的时候我们才会用到<code>IMAGE_IMPORT_BY_NAME</code>结构，但是我们按名字导出也就不需要管函数的索引了，所以Hint这个值可以忽略，在一些编译器里面会直接将Hint的值置为0。</li><li>我们主要是看一下<code>Name[1]</code>这个结构，可以看到它是BYTE，大小为1字节。因为考虑到了函数名字长度的不确定性，设计者只将函数开头的1字节存到<code>Name[1]</code>这个结构中，函数名是以<code>\0</code>结尾的，也就是说在找到<code>Name[1]</code>里面所存的首字节后，一直往后遍历，直到找到0即为函数名的结束。</li></ul><h3 id="绑定导入表"><a class="markdownIt-Anchor" href="#绑定导入表"></a> 绑定导入表</h3><p>​PE在加载前INT、IAT表都指向一个名称表，但是有的exe程序，在打印IAT表的时候，会发现里面是地址。这是因为我们的PE程序在加载的时候，IAT表会填写函数地址。但是这就造成了一个问题，PE程序启动慢，每次启动都要给IAT表填写函数地址。那么这里我们就可以使用到绑定导入表来使PE程序的启动变快。</p><ul><li>注意：<code>TimeDataStamp</code>(时间戳)。PE加载EXE相关的DLL时，首先会根据<code>IMAGE_IMPORT_DESCRIPTOR</code>结构中的<code>TimeDateStamp</code>来判断是否要重新计算IAT表中的地址。若<code>TimeDataStamp == 0</code> 则未绑定，<code>TimeDataStamp == -1</code> 则已绑定<ul><li>一般的PE文件在加载前INT和IAT表中都是指向<code>IMAGE_IMPORT_BY_NAME</code>这张表的，也就是说INT表和IAT表在PE加载前表中所存的内容都是一样的。</li><li>PE在加载后，IAT表里存的才是函数的地址，这种情况就属于没有绑定导入表的情况，即<code>TimeDataStamp</code>为0的情况。</li></ul></li></ul><p>​真正的绑定导入表位于目录的第12项，其中<code>TimeDataStamp</code>为真正的时间戳，<code>OffsetModuleName</code>为剩余dll的名字，<code>NumberOfModuleForwarderRefs</code>为依赖dll的数量</p><h4 id="image_bound_import_descriptor"><a class="markdownIt-Anchor" href="#image_bound_import_descriptor"></a> IMAGE_BOUND_IMPORT_DESCRIPTOR</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_BOUND_IMPORT_DESCRIPTOR</span> &#123;</span><br>    DWORD   TimeDateStamp;　　　　　　　　　　　　　　　　<span class="hljs-comment">//真正的时间戳</span><br>    WORD    OffsetModuleName;　　　　　　　　　　　　　　<span class="hljs-comment">//DLL的名字,PE的文件名</span><br>    WORD    NumberOfModuleForwarderRefs;　　　　　　　　<span class="hljs-comment">//依赖的另外的DLL有几个</span><br><span class="hljs-comment">// Array of zero or more IMAGE_BOUND_FORWARDER_REF follows</span><br>&#125; IMAGE_BOUND_IMPORT_DESCRIPTOR,  *PIMAGE_BOUND_IMPORT_DESCRIPTOR;<br></code></pre></td></tr></table></figure><ul><li><p>其中要注意的是<code>OffsetModuleName</code>这个值有点特殊，它既不是foa，也不是rva，它的计算公式为第一个<code>DESCRIPTOR</code>的值加上所在结构体的<code>OffsetMoudeleName</code>得到。如果<code>NumberOfModuleForwarderRefs</code>的值为2，则绑定导入表一共就有3个dll。</p></li><li><p>如果<code>NumberOfModuleForwarderRefs</code>的值不为0，绑定导入表下面还会跟一张依赖dll的绑定导入表结构，含义的话跟绑定导入表相同，<code>Reserved</code>值可以不用管。</p><ul><li><pre class="highlight"><code class="c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_BOUND_FORWARDER_REF</span> &#123;</span>    DWORD   TimeDateStamp;    WORD    OffsetModuleName;    WORD    Reserved;&#125; IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;&lt;!--code￼<span class="hljs-number">13</span>--&gt;</code></pre></li></ul></li><li><p><code>VirtualAddress</code>：存放真正重定位表地址的RVA</p></li><li><p><code>Size</code>：重定位表的大小</p></li></ul><h3 id="image_base_relocation"><a class="markdownIt-Anchor" href="#image_base_relocation"></a> IMAGE_BASE_RELOCATION</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_BASE_RELOCATION</span> &#123;</span><br>    DWORD   VirtualAddress;  <span class="hljs-comment">//RVA</span><br>    DWORD   SizeOfBlock;<br>&#125; IMAGE_BASE_RELOCATION;<br><span class="hljs-keyword">typedef</span> IMAGE_BASE_RELOCATION ，* PIMAGE_BASE_RELOCATION;<br></code></pre></td></tr></table></figure><h4 id="sizeofblock"><a class="markdownIt-Anchor" href="#sizeofblock"></a> SizeOfBlock</h4><ul><li>重定位表的核心结构，存储的值以字节为单位，表示的是重定位表的大小</li></ul><h4 id="判断重定位表的数量"><a class="markdownIt-Anchor" href="#判断重定位表的数量"></a> 判断重定位表的数量</h4><ul><li>规定在最后一个结构的VirtualAddress和SizeOfBlock的值都为0，这里就可以进行判断来获取重定位表有多少个结构<ul><li><p>例如：假设重定位结构的数量为3，那么在最后8字节即VirtualAddress和SizeOfBlock的值都为0，可以说重定位表就是很多个块结构所构成的。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291129308.png" alt="202302261049857" /></p></li></ul></li></ul><h4 id="具体项"><a class="markdownIt-Anchor" href="#具体项"></a> 具体项</h4><ul><li>在每一块结构的VirtualAddress和SizeOfBlock里面，都有很多宽度为2字节的十六进制数据，这里我们称他们为具体项。</li><li>在内存中页大小的值为1000H，即2的12次方，也就是通过这个1000H就能够表示出一个页里面所有的偏移地址。而具体项的宽度为16位，页大小的值为低12位。</li><li>高四位为0011或0000，对应的十进制就是3或0.<ul><li><strong>当高4位的值为0011</strong>，我们需要修复的数据地址就是VirtualAddress + 低12位的值。<ul><li>例如VirtualAddress是0x12345678，具体项的数值为001100000001，那么这个值就是有意义的，需要修改的RVA = 0x12345678+0x00000001 = 0x12345679。</li></ul></li><li><strong>当高4位的值为0000</strong>，这里就不需要进行重定位的修改，这里的具体项只是用于数据对齐的数据。</li></ul></li></ul><h2 id="资源表"><a class="markdownIt-Anchor" href="#资源表"></a> 资源表</h2><p>​**背景：**资源表是PE所有表里边最复杂的表，造成资源表复杂是有历史原因的，简单说就是微软设计PE的时候错误的以为只要定义16位中的资源类型就够了，后来发现远远不够，但是PE结构已经定下来了，只能在原有基础上修改，因此就造成了资源表这块比较不好理解。</p><ul><li>所谓的不好理解，就是它里边用到的结构，其中的属性会出现<strong>位段/位域</strong>的用法<ul><li>同一个4字节，要根据高位判断它到底是一个整数还是一个偏移；</li><li>偏移并不是RVA，而是相对于资源表的偏移</li></ul></li></ul><h3 id="image_resource_directory"><a class="markdownIt-Anchor" href="#image_resource_directory"></a> IMAGE_RESOURCE_DIRECTORY</h3><p>资源目录的结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_RESOURCE_DIRECTORY</span> &#123;</span>                                <br>    DWORD   Characteristics;                        <span class="hljs-comment">//资源属性  保留 0        </span><br>    DWORD   TimeDateStamp;                        <span class="hljs-comment">//资源创建的时间        </span><br>    WORD    MajorVersion;                        <span class="hljs-comment">//资源版本号 未使用 0        </span><br>    WORD    MinorVersion;                        <span class="hljs-comment">//资源版本号 未使用 0        </span><br>    WORD    NumberOfNamedEntries;                        <span class="hljs-comment">//以名称命名的资源数量        </span><br>    WORD    NumberOfIdEntries;                           <span class="hljs-comment">//以ID命名的资源数量        </span><br><span class="hljs-comment">//  IMAGE_RESOURCE_DIRECTORY_ENTRY DirectoryEntries[];                                </span><br>&#125; IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;<br></code></pre></td></tr></table></figure><h3 id="资源表的真正结构"><a class="markdownIt-Anchor" href="#资源表的真正结构"></a> 资源表的真正结构</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291129287.png" alt="202302261111997" /></p><ul><li>其中每一层都有一个资源目录这个结构，这个结构的意义就是用来统计有多少个<code>IMAGE_RESOURCE_DIRECTORY_ENTRY</code>结构</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_RESOURCE_DIRECTORY_ENTRY</span> &#123;</span>                                <br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span>                            <span class="hljs-comment">//目录项的名称、或者ID        </span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>                                <br>            DWORD NameOffset:<span class="hljs-number">31</span>;                                <br>            DWORD NameIsString:<span class="hljs-number">1</span>;                                <br>        &#125;;                                <br>        DWORD   Name;                                <br>        WORD    Id;                                <br>    &#125;;                                <br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span>                                <br>        DWORD   OffsetToData;                        <span class="hljs-comment">//目录项指针        </span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>                                <br>            DWORD   OffsetToDirectory:<span class="hljs-number">31</span>;                                <br>            DWORD   DataIsDirectory:<span class="hljs-number">1</span>;                                <br>        &#125;;                                <br>    &#125;;                                <br>&#125; IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;<br></code></pre></td></tr></table></figure><ul><li><code>IMAGE_RESOURCE_DIRECTORY_ENTRY</code>这个结构在每一层里面的含义都不相同，在第一层用来判断资源的类型，第二层用来判断资源的编号，第三层表示的是代码页</li></ul><h4 id="第一层"><a class="markdownIt-Anchor" href="#第一层"></a> 第一层</h4><h5 id="第一个联合体"><a class="markdownIt-Anchor" href="#第一个联合体"></a> 第一个联合体</h5><ul><li><p><code>资源类型</code>：每种资源有类型及名字，它们是数值标识符或字符串。windows定义了十六种预定义类型，如光标对应1，位图对应2，图标对应3等等。而资源类型既可以用序号表示，也可以用字符串表示。第一层里Name表示的就是资源类型，使用NameIsString判断资源类型用什么表示</p><ul><li><p><code>DWORD NameOffset:31;</code> 和 <code>DWORD NameIsString:1;</code> 这两个值，</p><ul><li><code>NameOffset:31</code>就是表示占低31位，而<code>NameIsString</code>则占剩下的1位</li></ul></li><li><p>当最高位为1时，即<code>NameIsString = 1</code> 时，低31位为一个UNICODE指针，指向<code>_IMAGE_RESOURCE_DIR_STRING_U</code>结构，在这个结构里面<code>Length</code>表示长度，<code>NameString[1]</code>表示的是真正UNICODE起始的地址(字符串表示)</p><ul><li><pre class="highlight"><code class="c">ypedef <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_RESOURCE_DIR_STRING_U</span> &#123;</span>                            WORD    Length;                            WCHAR   NameString[ <span class="hljs-number">1</span> ];                        &#125; IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;&lt;!--code￼<span class="hljs-number">17</span>--&gt;</code></pre></li></ul></li><li><p><code>VirtualAddress</code>是RVA，表示资源真正存储的位置，</p></li><li><p><code>Size</code>表示资源的大小</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C &amp; C++</title>
    <link href="/posts/4356fc58.html"/>
    <url>/posts/4356fc58.html</url>
    
    <content type="html"><![CDATA[<h1 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h1><h2 id="堆栈"><a class="markdownIt-Anchor" href="#堆栈"></a> 堆栈</h2><h3 id="函数概念"><a class="markdownIt-Anchor" href="#函数概念"></a> 函数概念</h3><ul><li><p>计算机的函数，是一个固定的一个程序段，或称其为一个子程序，它在可以实现固定运算功能的同时还带有一入口和一个出口，所谓的入口，就是函数所带的各个参数，我们可以通过这个入口，把函数的参数值代入子程序，供计算机处理，所谓出口，就是指函数的计算结果,也称为返回值，在计算机求得之后，由此口带回给调用它的程序。</p></li><li><p>汇编中的函数</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291123136.png" alt="202210032043850" /></p></li><li><p>函数的入口</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291123438.png" alt="202210032043993" /></p><ul><li>存储变量传递给函数除了存入堆栈中，也可以存入其余的寄存器中</li></ul></li><li><p>函数的出口</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291123896.png" alt="202210032044374" /></p><ul><li>函数的计算结果除了放在寄存器中，还可以放到堆栈中</li></ul></li></ul><h3 id="winodws堆栈"><a class="markdownIt-Anchor" href="#winodws堆栈"></a> Winodws堆栈</h3><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291123987.png" alt="202210032045557" /></p><ul><li>特点：<ul><li>先进后出</li><li>向低地址扩展(ESP向上移动要-4)</li></ul></li><li>堆栈平衡：<ul><li>Windows中的堆栈，是一块普通的内存，主要用来存储一些临时的数据和参数等</li><li>可以把Windows中的堆栈想象成是一个公用的书箱，函数就像是使用箱子的人，函数在执行的时候，会用到这个书箱，把一些数据存到里面。但用完的时候，一定要记得把书拿走，否则会乱的，也就是说，你放进去几本书，走的时候也要拿走几本书，这个就是堆栈平衡.</li></ul></li></ul><h3 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h3><ul><li>按Ctrl+G进行查找内存地址，按F2进行CPU定位(加断点)，之后按住OD上的暂停按钮使CPU达到此内存处，之后可以正常按F8进行步进</li><li>call需要按F7进行步入，遇到<code>jmp</code>按回车进行跳转<ul><li>F7指遇到函数跳入函数内部执行——单步步入</li><li>F8指直接执行函数，执行完之后到下一行——单步步过</li></ul></li><li>函数调用函数时，编译器会自动增加一个函数，用以检测是否堆栈平衡，按<code>enter</code>进入函数，按<code>-</code>退出</li></ul><h2 id="函数特点"><a class="markdownIt-Anchor" href="#函数特点"></a> 函数特点</h2><h3 id="函数分类"><a class="markdownIt-Anchor" href="#函数分类"></a> 函数分类</h3><p><a href="https://learn.microsoft.com/zh-cn/cpp/cpp/naked-cpp?view=msvc-170">naked (C++)</a></p><h4 id="裸函数"><a class="markdownIt-Anchor" href="#裸函数"></a> 裸函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __declspec(naked) Function()<br>&#123;<br>  <span class="hljs-comment">// 编译器不对裸函数进行任何处理，无法堆栈平衡，需要自己平衡堆栈</span><br>  __asm<br>    &#123;<br>        ret<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="无参数无返回值函数"><a class="markdownIt-Anchor" href="#无参数无返回值函数"></a> 无参数无返回值函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __declspec(naked) Function()  <br>&#123;<br>__asm<br>&#123;<br>  <span class="hljs-comment">// 提升堆栈，为函数执行提供空间</span><br>push ebp<br>mov ebp,esp<br>sub esp,<span class="hljs-number">0x40</span><br>  <span class="hljs-comment">// 保留现场</span><br>push ebx<br>push esi<br>push edi<br>  <span class="hljs-comment">// 向分配空间填充数据</span><br>lea edi,dword ptr ds:[ebp<span class="hljs-number">-0x40</span>]<br>mov eax,<span class="hljs-number">0xCCCCCCCC</span><br>mov ecx,<span class="hljs-number">0x10</span><br>rep stosd<br>    <span class="hljs-comment">/*此处实现函数功能*/</span><br>  <span class="hljs-comment">// 恢复现场，将之前保留的寄存器值恢复</span><br>pop edi<br>pop esi<br>pop ebx<br>  <span class="hljs-comment">// 降低堆栈   </span><br>mov esp,ebp<br>  <span class="hljs-comment">// 恢复栈底   </span><br>pop ebp<br>  <span class="hljs-comment">// 函数执行完毕，返回到调用处</span><br>ret<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="有参数有返回值函数"><a class="markdownIt-Anchor" href="#有参数有返回值函数"></a> 有参数有返回值函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __declspec(naked) Function(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)  <br>&#123;<br>__asm<br>&#123;<br>push ebp<br>mov ebp,esp<br>sub esp,<span class="hljs-number">0x40</span><br>push ebx<br>push esi<br>push edi<br>lea edi,dword ptr ds:[ebp<span class="hljs-number">-0x40</span>]<br>mov eax,<span class="hljs-number">0xCCCCCCCC</span><br>mov ecx,<span class="hljs-number">0x10</span><br>rep stosd<br>            <br><span class="hljs-comment">/*函数功能实现*/</span><br>mov eax,dword ptr ds:[ebp+<span class="hljs-number">8</span>]<br>add eax,dword ptr ds:[ebp+<span class="hljs-number">0xC</span>]<br><br>pop edi<br>pop esi<br>pop ebx<br>mov esp,ebp<br>pop ebp<br><br>ret<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="带局部变量的函数"><a class="markdownIt-Anchor" href="#带局部变量的函数"></a> 带局部变量的函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __declspec(naked) Function(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)  <br>&#123;<br>__asm<br>&#123;<br>push ebp<br>mov ebp,esp<br>sub esp,<span class="hljs-number">0x40</span><br>push ebx<br>push esi<br>push edi<br>lea edi,dword ptr ds:[ebp<span class="hljs-number">-0x40</span>]<br>mov eax,<span class="hljs-number">0xCCCCCCCC</span><br>mov ecx,<span class="hljs-number">0x10</span><br>rep stosd<br>          <br>  <span class="hljs-comment">/*局部变量引入*/</span><br>mov dword ptr ds:[ebp<span class="hljs-number">-4</span>],<span class="hljs-number">2</span><br>mov dword ptr ds:[ebp<span class="hljs-number">-8</span>],<span class="hljs-number">3</span><br><br>mov eax,dword ptr ds:[ebp+<span class="hljs-number">8</span>]<br>add eax,dword ptr ds:[ebp+<span class="hljs-number">0xC</span>]<br><br>pop edi<br>pop esi<br>pop ebx<br>mov esp,ebp<br>pop ebp<br><br>ret<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="调用约定"><a class="markdownIt-Anchor" href="#调用约定"></a> 调用约定</h3><table><thead><tr><th>调用约定</th><th>参数压栈顺序</th><th>平衡堆栈</th></tr></thead><tbody><tr><td>__cdecl</td><td>从右至左入栈</td><td>调用者清理栈(外平栈)</td></tr><tr><td>__stdcall</td><td>从右至左入栈</td><td>自身清理栈(内平栈)</td></tr><tr><td>__fastcall</td><td>ECX/EDX传送前两个，剩下:从右至左入栈</td><td>自身清理栈(内平栈)</td></tr></tbody></table><span class="label label-info">__fastcall的参数只有大于两个才需要內平栈，两个参数直接传递寄存器，不需要平衡堆栈</span><h3 id="函数参数"><a class="markdownIt-Anchor" href="#函数参数"></a> 函数参数</h3><h4 id="一般方式"><a class="markdownIt-Anchor" href="#一般方式"></a> 一般方式</h4><ol><li><p>观察调用处的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push        3<br>push        2<br>push        1<br>call       0040100f<br></code></pre></td></tr></table></figure></li><li><p>找到平衡堆栈的代码(外平栈)或者函数内部(內平栈)继续论证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">call        0040100f<br>add         esp,0Ch<br><br>ret 4/8/0xC/0x10<br></code></pre></td></tr></table></figure></li><li><p>将二者结合，确定参数个数</p></li></ol><h4 id="观察代码"><a class="markdownIt-Anchor" href="#观察代码"></a> 观察代码</h4><ol><li><p>不考虑ebp、esp</p></li><li><p>只找给别人赋值的寄存器eax/ecx/edx/ebx/esi/edi</p></li><li><p>找到以后追查其来源，如果该寄存器中的值不是在<strong>函数内存赋值</strong>的，那一定是传进来的参数</p></li><li><p>获得参数数量</p><ul><li><p>公式一：寄存器 + ret  4 = 参数个数</p></li><li><p>公式二：寄存器 + [ebp+8] + [ebp+0x] = 参数个数</p></li></ul></li></ol><h2 id="语句"><a class="markdownIt-Anchor" href="#语句"></a> 语句</h2><h3 id="ifelse"><a class="markdownIt-Anchor" href="#ifelse"></a> if……else</h3><ul><li>反汇编语句与if语句含义相反，即若if(x&gt;=1)，则反汇编中表达x&lt;1时跳转，否则继续顺序执行</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Fun</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br><span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">3</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291124190.png" alt="202212241152274" /></p><center><strong> if……else语句</strong></center><h3 id="switch"><a class="markdownIt-Anchor" href="#switch"></a> switch</h3><ol><li><p>分支小于4或者数据无规律时，用switch无意义，生成类似if……else的反汇编</p></li><li><p>Switch语句中数值相近时，会自动生成大表(连续数值中多个不存在时，会生成小表)</p><p><a href="https://www.cnblogs.com/Reverse-xiaoyu/p/11711393.html">switch…case…语句分析(大表跟小表何时产生)</a></p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Fun</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br><span class="hljs-keyword">switch</span> (x) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;Error&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291125123.png" alt="202212241120544" /></p><center><strong> Switch语句中的大表</strong></center><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Fun</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br><span class="hljs-keyword">switch</span> (x) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">101</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">108</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;X&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">109</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">110</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;Error&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291125399.png" alt="202212241139348" /></p><center><strong> Switch语句中的小表</strong></center><h3 id="while"><a class="markdownIt-Anchor" href="#while"></a> while</h3><ol><li>根据条件跳转指令所跳转到的地址，可以得到循环语句块的结束地址</li><li>根据 jmp 指令所跳转到的地址，可以得到循环语句块的起始地址</li><li>在还原while 比较时，条件跳转的逻辑与源码相反</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Fun</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br><span class="hljs-keyword">while</span> (x &lt; y)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, x);<br>x++;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291125717.png" alt="202212241157555" /></p><center><strong> while语句</strong></center><h3 id="for"><a class="markdownIt-Anchor" href="#for"></a> for</h3><ol><li>第一个 jmp 指令之前为赋初值部分</li><li>第一个 jmp 指令所跳转的地址为循环条件判定部分起始</li><li>判断条件后面的跳转指令条件成立时跳转的循环体外面</li><li>条件判断跳转指令所指向的地址上面有一个 jmp， jmp地址为表达式3的起始位置</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Fun</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=x;i&lt;y;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,i);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291125748.png" alt="202212241200812" /></p><center><strong> for语句</strong></center><h1 id="数据"><a class="markdownIt-Anchor" href="#数据"></a> 数据</h1><h2 id="数据类型及存储"><a class="markdownIt-Anchor" href="#数据类型及存储"></a> 数据类型及存储</h2><h3 id="c语言数据类型"><a class="markdownIt-Anchor" href="#c语言数据类型"></a> c语言数据类型</h3><ol><li><p><strong>基本类型</strong></p><ul><li><p>整数类型</p></li><li><p>浮点类型</p></li></ul></li><li><p><strong>构造类型</strong></p><ul><li><p>数组类型</p></li><li><p>结构体类型</p></li><li><p>共用体(联合)类型</p></li></ul></li><li><p><strong>指针类型</strong></p></li><li><p><strong>空类型(void)</strong></p></li></ol><ul><li>数据类型三个要素<ul><li>存储数据的宽度</li><li>存储数据的格式</li><li>作用范围(作用域)</li></ul></li></ul><h3 id="基本类型"><a class="markdownIt-Anchor" href="#基本类型"></a> 基本类型</h3><h4 id="整数类型"><a class="markdownIt-Anchor" href="#整数类型"></a> 整数类型</h4><table><thead><tr><th>数据类型</th><th>长度(bit)</th><th>长度(字节)</th><th>汇编中表示</th></tr></thead><tbody><tr><td>char</td><td>8BIT</td><td>1字节</td><td>BYTE</td></tr><tr><td>short</td><td>16BIT</td><td>2字节</td><td>WORD</td></tr><tr><td>int</td><td>32BIT</td><td>4字节</td><td>DWORD</td></tr><tr><td>long</td><td>32BIT</td><td>4字节</td><td></td></tr></tbody></table><ul><li>认为划分为<strong>有符号(signed)<strong>与</strong>无符号(unsigned)</strong>，其在计算机中存储方式相同，但是根据需求认定为不同的数值</li></ul><h4 id="浮点类型"><a class="markdownIt-Anchor" href="#浮点类型"></a> 浮点类型</h4><ul><li><strong>float</strong>和<strong>double</strong></li><li>二者在存储方式上遵从<strong>IEEE</strong>规范</li></ul><ol><li>float的存储方式</li></ol><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291125885.png" alt="202212222043652" /></p><ol start="2"><li>double的存储方式</li></ol><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291125982.png" alt="202212222044090" /></p><ol start="3"><li>将一个float型转化为内存存储格式：<ul><li>先将这个实数的绝对值化为二进制格式</li><li>将这个二进制格式实数的小数点左移或右移n位，直到小数点移动到第一个有效数字(1)的右边</li><li>从小数点右边第一位开始数出二十三位数字放入第22到第0位</li><li>将移动位数+127并转化为二进制放入第30到23位(例如:右移3位，即127+(-3) = 124)</li><li>若原本数字为负数，则在符号位填入“1”；否则，填入“0”</li></ul></li></ol><h4 id="类型转换"><a class="markdownIt-Anchor" href="#类型转换"></a> 类型转换</h4><ul><li><p><code>MOVSX</code>先符号扩展，再传送，适用于有符号类型转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al,0xFF<br>movsx cx,al<br>;此时cx == 0XFFFF(看0xFF的第一位是什么，FF == 1111 1111，首位是1，扩展8个1)<br></code></pre></td></tr></table></figure></li><li><p><code>MOVZX</code>先零扩展，再传送，适用于无符号类型转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al,0xFF<br>movsx cx,al<br>;此时cx == 0XFF(直接在FF前面补8个0)<br></code></pre></td></tr></table></figure></li><li><p>小数据类型向大数据类型转换</p><ul><li>采用保留低位数据，舍弃高位数据</li></ul></li></ul><h3 id="构造类型"><a class="markdownIt-Anchor" href="#构造类型"></a> 构造类型</h3><h4 id="数组类型"><a class="markdownIt-Anchor" href="#数组类型"></a> 数组类型</h4><ul><li><p>一组相同类型的变量，为了方便读写，采用另外一种表示形式。其在声明的时候，必须用常量来指明长度，不能使用变量(<strong>常量是因为在编译的时候，编译器就要知道开辟的缓冲区的大小，所以必须是常量</strong>)</p></li><li><p>数组在使用时，可以通过变量来定位数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//例如：</span><br><span class="hljs-type">int</span> arr[m][n][k] = &#123;&#123;&#125;,&#123;&#125;……&#125;;<br><br><span class="hljs-comment">//寻找arr[3][2][1]</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">在编译器中，寻找方式为arr[3*n+2*k+1]。</span><br><span class="hljs-comment">一维数组与多维数组的本质没有区别，arr[m*n*k]与arr[m][n][k]开辟相同</span><br><span class="hljs-comment">*/</span>  <br></code></pre></td></tr></table></figure></li></ul><h4 id="结构体类型"><a class="markdownIt-Anchor" href="#结构体类型"></a> 结构体类型</h4><ul><li>本质是大量数据的内存复制</li></ul><h3 id="指针类型"><a class="markdownIt-Anchor" href="#指针类型"></a> 指针类型</h3><h4 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h4><ol><li><p>格式：<code>数据类型* 变量名</code></p></li><li><p>宽度为4字节， * 可以是任意数量</p></li><li><p>加减操作(+/-/++/–)都是<code>以数据类型的宽度为标准</code>进行增加或减少，例如：char为1，int为4。</p><p><code>总结</code>：加减增加的是去掉一个 * 之后的数据宽度，若是char **，增加的就是4字节</p></li><li><p><code>两种类型相互加减</code>：</p><ul><li>两个类型相同的带 * 类型的变量可以进行减法操作，减完后的数据类型是去掉 * 的数据类型</li><li>相减的结果要除以去掉一个 * 的数据类型的宽度</li></ul></li></ol><h4 id="运用"><a class="markdownIt-Anchor" href="#运用"></a> 运用</h4><ol><li><p><code>&amp;</code> 是地址符，类型是其后面的类型加一个 * ，任何变量都可以使用&amp;来获取地址，但不能用在常量上</p></li><li><p><code>带 * 类型的变量</code>，可以通过在其变量前加 * 来获取<code>其指向内存中存储的值</code>，即在带 * 类型的变量前面加*，类型是其原来的类型减去一个 * 。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> x;<br>&amp;x<span class="hljs-comment">//(int*)</span><br>    <br><span class="hljs-type">int</span>* y;<br>*y<span class="hljs-comment">//(int)</span><br></code></pre></td></tr></table></figure><h4 id="结合"><a class="markdownIt-Anchor" href="#结合"></a> 结合</h4><ol><li>指针函数<ul><li>返回值为指针的函数----函数</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span>* <span class="hljs-title function_">strcpy</span> <span class="hljs-params">(<span class="hljs-type">char</span>* dest,<span class="hljs-type">char</span>* src)</span><br>&#123;<br><span class="hljs-keyword">while</span>((*(dest++)=*(src++))!=<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">return</span> dest;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>函数指针<ul><li>声明----返回类型(*函数名)(参数表)</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//声明</span><br><span class="hljs-type">int</span> (*pFun)(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>);<br><span class="hljs-comment">//赋值</span><br>pFun = (<span class="hljs-type">int</span> (*)(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>))<span class="hljs-number">10</span>;<br>pFun = 函数名;<br></code></pre></td></tr></table></figure><ol start="2"><li>指针数组<ul><li>数组的类型是指针类型----数组</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span>* arr[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>数组指针<ul><li>本质是指针，<code>不必指向数组</code>，只是使用定义的数组的宽度</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//变量名px，数据类型 int[5]</span><br><span class="hljs-type">int</span>(*px)[<span class="hljs-number">5</span>];<br><br><span class="hljs-comment">//例子</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">15</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br><span class="hljs-type">int</span>(*p)[<span class="hljs-number">2</span>];<br>p = (<span class="hljs-type">int</span>(*) [<span class="hljs-number">2</span>])arr;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, *(*(p+<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>), *(p + <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>], p[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure><ol start="3"><li>结构体指针<ul><li>结构体</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c">Struct Arg<br>&#123;<br>   <span class="hljs-type">int</span> a;<br>   <span class="hljs-type">int</span> b;<br>   <span class="hljs-type">int</span> c;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">function</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//创建结构体</span><br>    Student s;<br>    s.a = <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//声明结构体指针</span><br>    Student* ps;<br>    <span class="hljs-comment">//为结构体指针赋值</span><br>    ps = &amp;s;<br>    <span class="hljs-comment">//通过指针读取数据</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ps-&gt;a);<br>    <br>    <span class="hljs-comment">//还可以使用其他指针类型对结构体指针进行赋值，此时结构体指针可以利用自己的构造遍历未知空间数据</span><br>    <span class="hljs-type">int</span> x = <span class="hljs-number">100</span>;<br>    Arg* px = (Arg*)&amp;x;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>,px-&gt;a,px-&gt;b,px-&gt;c);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="内存"><a class="markdownIt-Anchor" href="#内存"></a> 内存</h1><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291126765.png" alt="202212222123177" /></p><h2 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h2><h3 id="全局变量"><a class="markdownIt-Anchor" href="#全局变量"></a> 全局变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> g_n = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> x = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> y = <span class="hljs-number">3</span>;<br><br><span class="hljs-keyword">return</span> g_n+x+y;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>全局变量在程序编译完成后地址就已经确定下来了，只要程序启动，全局变量就已经存在了，启动后里面是否有值取决于声明时是否给定了初始值，如果没有，默认为0</li><li>全局变量的值可以被所有函数所修改，里面存储的是最后一次修改的值</li><li>全局变量所占内存会一直存在，知道整个进程结束</li><li>全局变量的反汇编识别，通过寄存器的宽度，或者byte/word/dword 来判断全局变量的宽度<ul><li><code>MOV REG,byte/word/dword ptr ds:[0x12345678]</code></li></ul></li><li><strong>全局变量就是所谓的基址</strong></li></ol><h3 id="局部变量"><a class="markdownIt-Anchor" href="#局部变量"></a> 局部变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> x = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> y = <span class="hljs-number">3</span>;<br><br><span class="hljs-keyword">return</span> g_n+x+y;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>局部变量在程序编译完成后并没有分配固定的地址</li><li>在所属的方法没有被调用时，局部变量并不会分配内存地址，只有当所属的程序被调用了，才会在堆栈中分配内存</li><li>当局部变量所属的方法执行完毕后，局部变量所占用的内存将变成垃圾数据。局部变量消失</li><li>局部变量只能在方法内部使用，函数A无法使用函数B的局部变量</li><li>局部变量的反汇编识别<ul><li><code>[ebp-4]</code>，<code>[ebp-8]</code>，<code>[ebp-0xC]</code>等</li></ul></li></ol><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>​这里需要注意，这是针对普通的函数所写出的地址对应，即<code>push edp……</code>等操作，如果是个裸函数，或自定义函数，则不再适配</p><ul><li><p>全局变量----一个固定的地址，类似<code>byte/word/dword ptr ds:[0x12345678]</code>类型</p></li><li><p>局部变量----<code>[ebp-x]</code>，类似<code>[ebp-4]</code>，<code>[ebp-8]</code>，<code>[ebp-0xC]</code>等</p></li><li><p>传入参数----<code>[ebp+x]</code>，类似<code>[ebp+8]</code>，<code>[ebp+0xC]</code>等(x≠4)</p></li><li><p>特殊----</p><ul><li><code>[ebp]</code>存储的是ebp在被push前的数值</li><li><code>[ebp+4]</code>存储是call返回时的EIP指向的地址</li></ul></li></ul><h2 id="常量"><a class="markdownIt-Anchor" href="#常量"></a> 常量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//样例一</span><br><span class="hljs-type">char</span>* x = <span class="hljs-string">&quot;china&quot;</span>;<br><span class="hljs-type">char</span> y[] = <span class="hljs-string">&quot;china&quot;</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//报错，其中&quot;china&quot;存储在常量区，不能对其进行修改，但是可以修改x的指向(地址)</span><br>*(x+<span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-comment">//正常，y[]存储的字符串存储在全局变量区域(从常量区复制过来的)，可以进行修改</span><br>y[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;A&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//样例二</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span>* x = <span class="hljs-string">&quot;china&quot;</span>;<br><span class="hljs-type">char</span> y[] = <span class="hljs-string">&quot;china&quot;</span>;<br><span class="hljs-comment">//报错</span><br>*(x+<span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-comment">//正常</span><br>y[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;A&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>&quot;china&quot;字符串存储在常量区内，不可以进行修改</li><li><code>*(x+1)</code>中的x指向的是&quot;china&quot;在常量区的地址，直接对x进行修改就是修改常量区的数据，报错</li><li><code>y[1]</code>中的数组在堆栈中开辟，常量区中的&quot;china&quot;被复制到了eax等寄存器中，成为了变量，修改y就是修改堆栈中的变量部分，所以正常运行。即y[1]不修改常量区内容，而是复制到变量区再进行修改</li></ul><h2 id="内存分配与释放"><a class="markdownIt-Anchor" href="#内存分配与释放"></a> 内存分配与释放</h2><ul><li>自动分配内存(c语言)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* ptr;<span class="hljs-comment">//声明指针</span><br><br><span class="hljs-comment">//在堆中申请内存,分配128个int</span><br>ptr = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*<span class="hljs-number">128</span>);<br><br><span class="hljs-comment">//无论申请的空间大小 一定要进行校验 判断是否申请成功</span><br><span class="hljs-keyword">if</span>(ptr == <span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化分配的内存空间</span><br><span class="hljs-built_in">memset</span>(ptr,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*<span class="hljs-number">128</span>);<br><br><span class="hljs-comment">//使用。。。</span><br>*(ptr) = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">//使用完毕 释放申请的堆空间</span><br><span class="hljs-built_in">free</span>(ptr);<br><br><span class="hljs-comment">//将指针设置为NULL</span><br>ptr = <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><ul><li>注意事项：<ol><li>使用 sizeof(类型)*n 来定义申请内存的大小</li><li>malloc 返回类型为 void* 类型  需要强制转换</li><li>无论申请的内存有多小，一定要判断是否申请成功</li><li>申请完空间后要记得初始化</li><li>使用完一定要是否申请的空间</li><li>将指针的值设置为NULL</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【NewStartCTF】Reverse_Week4</title>
    <link href="/posts/c66ef6f9.html"/>
    <url>/posts/c66ef6f9.html</url>
    
    <content type="html"><![CDATA[<h1 id="hash"><a class="markdownIt-Anchor" href="#hash"></a> Hash</h1><h2 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h2><ul><li>无壳，直接分析，发现是每3个字节进行sha1加密</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304232130791.png" alt="image-20230423213033751" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304232130663.png" alt="image-20230423213042625" /></p><h2 id="exp"><a class="markdownIt-Anchor" href="#exp"></a> exp</h2><p>直接进行爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> itertools<br><br>text=[<span class="hljs-string">&#x27;A2F17ED1C6A8BC31769CDF654DF4B8A937042CB6&#x27;</span>,<span class="hljs-string">&#x27;0CA8A2EDB0C1D34A432A5A4464E0D6ABD847C831&#x27;</span>,<span class="hljs-string">&#x27;C359D69F3F08BB920F2C3B51133205533462093E&#x27;</span>,<span class="hljs-string">&#x27;CC5C3FE6E7356A26A134CFF5633349F597C40A9D&#x27;</span>,<span class="hljs-string">&#x27;4AC4BB3F27F245BA9178651AA5CDEDCBB2862E2A&#x27;</span>,<span class="hljs-string">&#x27;A01E33F4DCDB6BA1AE9F34A97CF8F6DEEEDF1A8D&#x27;</span>,<span class="hljs-string">&#x27;D3AF70912A8C1B22CFDECE071BA36BC4662B58FA&#x27;</span>,<span class="hljs-string">&#x27;9395EAB195D25B676D7D07075D3838A9AC19DF21&#x27;</span>,<span class="hljs-string">&#x27;FDB43C5EF76ECDA0C1661D6D199B5BFAC1DB538A&#x27;</span>,<span class="hljs-string">&#x27;DA8E9997A010BE78B20108CE79FEC1FB9C63D8DC&#x27;</span>,<span class="hljs-string">&#x27;809DA627F1AD01D65864C376E3179B62D9D74261&#x27;</span>,<span class="hljs-string">&#x27;8F61EE21AC7579626934E0FFB6A62B3D4A82EEC4&#x27;</span>,<span class="hljs-string">&#x27;E2A954758FDB61F869998E9788B7B7E48480B832&#x27;</span>,<span class="hljs-string">&#x27;B8E3349B97532B27AA62B8718B68240179158144&#x27;</span>]<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(text)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(text[i]))<br><br>modle = <span class="hljs-built_in">list</span>(itertools.product(<br>    [<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>,<br>     <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>,<br>     <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>,<span class="hljs-string">&#x27;&#123;&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;!&#x27;</span>,<span class="hljs-string">&#x27;@&#x27;</span>,<span class="hljs-string">&#x27;|&#x27;</span>], repeat=<span class="hljs-number">3</span>))<br><br>i = -<span class="hljs-number">1</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(text)):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        i += <span class="hljs-number">1</span><br>        <span class="hljs-comment"># print(modle[i])</span><br>        <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;&#x27;</span>.join(modle[i])<br><br>        <span class="hljs-keyword">if</span> hashlib.sha1(<span class="hljs-built_in">str</span>.encode()).hexdigest() <span class="hljs-keyword">in</span> text[k].lower():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;correct: &#x27;</span>, <span class="hljs-built_in">str</span>)<br>            <span class="hljs-comment"># input()</span><br>            flag+=<span class="hljs-built_in">str</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[-]:&#x27;</span>+<span class="hljs-built_in">str</span>)<br>    i=-<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><br><br>enc = [<span class="hljs-string">&#x27;a2f17ed1c6a8bc31769cdf654df4b8a937042cb6&#x27;</span>, <span class="hljs-string">&#x27;0ca8a2edb0c1d34a432a5a4464e0d6abd847c831&#x27;</span>, <span class="hljs-string">&#x27;c359d69f3f08bb920f2c3b51133205533462093e&#x27;</span>, <span class="hljs-string">&#x27;cc5c3fe6e7356a26a134cff5633349f597c40a9d&#x27;</span>, <span class="hljs-string">&#x27;4ac4bb3f27f245ba9178651aa5cdedcbb2862e2a&#x27;</span>, <span class="hljs-string">&#x27;a01e33f4dcdb6ba1ae9f34a97cf8f6deeedf1a8d&#x27;</span>, <span class="hljs-string">&#x27;d3af70912a8c1b22cfdece071ba36bc4662b58fa&#x27;</span>,<br>       <span class="hljs-string">&#x27;9395eab195d25b676d7d07075d3838a9ac19df21&#x27;</span>, <span class="hljs-string">&#x27;fdb43c5ef76ecda0c1661d6d199b5bfac1db538a&#x27;</span>, <span class="hljs-string">&#x27;da8e9997a010be78b20108ce79fec1fb9c63d8dc&#x27;</span>, <span class="hljs-string">&#x27;809da627f1ad01d65864c376e3179b62d9d74261&#x27;</span>, <span class="hljs-string">&#x27;8f61ee21ac7579626934e0ffb6a62b3d4a82eec4&#x27;</span>, <span class="hljs-string">&#x27;e2a954758fdb61f869998e9788b7b7e48480b832&#x27;</span>, <span class="hljs-string">&#x27;b8e3349b97532b27aa62b8718b68240179158144&#x27;</span>]<br><br><span class="hljs-comment"># 爆破的字符表</span><br><span class="hljs-built_in">dict</span> = string.ascii_letters + string.punctuation + string.digits<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(<span class="hljs-built_in">dict</span>, k=<span class="hljs-number">3</span>))  <span class="hljs-comment"># 随机生成三个字符，可以产生重复字符</span><br>        <span class="hljs-comment"># print(str)</span><br>        <span class="hljs-keyword">if</span> hashlib.sha1(<span class="hljs-built_in">str</span>.encode()).hexdigest() == enc[i]:<br>            flag += <span class="hljs-built_in">str</span><br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h1 id="exception"><a class="markdownIt-Anchor" href="#exception"></a> Exception</h1><ul><li>涉及一个SEH断点异常处理，可以大致看出逻辑。将 <code>try</code> patch掉之后不会报错，可以看出是一个魔改的TEA</li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【NewStartCTF】Reverse_Week3</title>
    <link href="/posts/580a635a.html"/>
    <url>/posts/580a635a.html</url>
    
    <content type="html"><![CDATA[<h1 id="zzzzzz3333"><a class="markdownIt-Anchor" href="#zzzzzz3333"></a> Zzzzzz3333</h1><h2 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h2><ul><li>32位，无壳，直接IDA分析<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291150349.png" alt="202211102038340" /><br />由图，需要对 <code>Arglist</code> 的一系列方程进行解密，然后将 <code>Arglist</code> 放入加密过程中进行加密之后就可以得到flag<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291150598.png" alt="202211102050613" /><span class="label label-primary">byte_402168</span>中的数据此时可以使用z3求解器来解方程组来得到 <code>Arglist</code></li></ul><h2 id="exp"><a class="markdownIt-Anchor" href="#exp"></a> exp</h2><ul><li><p>z3下载</p><ol><li>打开文件管理器，在地址栏中输入 <code>%APPDATA%</code></li><li>搜索pip文件夹，在pip文件夹中打开pip.ini文件,将其修改为下面形式(这是阿里源)</li></ol>  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[<span class="hljs-keyword">global</span>]<br><span class="hljs-keyword">index</span>-url = http://mirrors.aliyun.com/pypi/simple/<br><span class="hljs-keyword">trusted</span>-host = mirrors.aliyun.com<br></code></pre></td></tr></table></figure><ol start="3"><li>直接使用pip下载</li></ol>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> z3-solver<br></code></pre></td></tr></table></figure><p>之后就可以在pycharm中导入z3的包并且不报错了<br />若是直接可以pip下载，则直接下载即可,我是pip源出现了问题,所以写此来提醒自己应该怎么正确换源不报错</p></li><li><p>直接使用z3解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#创建容器</span><br>a=Solver()<br><br><span class="hljs-comment">#设置未知量</span><br>s=[Int(<span class="hljs-string">&#x27;s[%d]&#x27;</span> %i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br><span class="hljs-built_in">print</span>(s)<br><br><span class="hljs-comment">#添加约束条件</span><br>a.add((s[<span class="hljs-number">0</span>]*<span class="hljs-number">12</span>+s[<span class="hljs-number">1</span>]*<span class="hljs-number">11</span>+s[<span class="hljs-number">2</span>]*<span class="hljs-number">20</span>+s[<span class="hljs-number">3</span>]*<span class="hljs-number">5</span>+s[<span class="hljs-number">4</span>]*<span class="hljs-number">3</span>+s[<span class="hljs-number">5</span>]*<span class="hljs-number">2</span>+s[<span class="hljs-number">6</span>]*<span class="hljs-number">8</span>+s[<span class="hljs-number">7</span>]*<span class="hljs-number">1</span>)==<span class="hljs-number">0x191a</span>)<br>a.add((s[<span class="hljs-number">0</span>]*<span class="hljs-number">11</span>+s[<span class="hljs-number">1</span>]*<span class="hljs-number">45</span>+s[<span class="hljs-number">2</span>]*<span class="hljs-number">1</span>+s[<span class="hljs-number">3</span>]*<span class="hljs-number">11</span>+s[<span class="hljs-number">4</span>]*<span class="hljs-number">8</span>+s[<span class="hljs-number">5</span>]*<span class="hljs-number">4</span>+s[<span class="hljs-number">6</span>]*<span class="hljs-number">7</span>+s[<span class="hljs-number">7</span>]*<span class="hljs-number">11</span>)==<span class="hljs-number">0x2649</span>)<br>a.add((s[<span class="hljs-number">0</span>]*<span class="hljs-number">16</span>+s[<span class="hljs-number">1</span>]*<span class="hljs-number">5</span>+s[<span class="hljs-number">2</span>]*<span class="hljs-number">2</span>+s[<span class="hljs-number">3</span>]*<span class="hljs-number">12</span>+s[<span class="hljs-number">4</span>]*<span class="hljs-number">2</span>+s[<span class="hljs-number">5</span>]*<span class="hljs-number">6</span>+s[<span class="hljs-number">6</span>]*<span class="hljs-number">6</span>+s[<span class="hljs-number">7</span>]*<span class="hljs-number">12</span>)==<span class="hljs-number">0x1785</span>)<br>a.add((s[<span class="hljs-number">0</span>]*<span class="hljs-number">19</span>+s[<span class="hljs-number">1</span>]*<span class="hljs-number">9</span>+s[<span class="hljs-number">2</span>]*<span class="hljs-number">5</span>+s[<span class="hljs-number">3</span>]*<span class="hljs-number">28</span>+s[<span class="hljs-number">4</span>]*<span class="hljs-number">4</span>+s[<span class="hljs-number">5</span>]*<span class="hljs-number">7</span>+s[<span class="hljs-number">6</span>]*<span class="hljs-number">5</span>+s[<span class="hljs-number">7</span>]*<span class="hljs-number">67</span>)==<span class="hljs-number">0x386c</span>)<br>a.add((s[<span class="hljs-number">0</span>]*<span class="hljs-number">20</span>+s[<span class="hljs-number">1</span>]*<span class="hljs-number">10</span>+s[<span class="hljs-number">2</span>]*<span class="hljs-number">6</span>+s[<span class="hljs-number">3</span>]*<span class="hljs-number">10</span>+s[<span class="hljs-number">4</span>]*<span class="hljs-number">5</span>+s[<span class="hljs-number">5</span>]*<span class="hljs-number">22</span>+s[<span class="hljs-number">6</span>]*<span class="hljs-number">4</span>+s[<span class="hljs-number">7</span>]*<span class="hljs-number">4</span>)==<span class="hljs-number">0x1c53</span>)<br>a.add((s[<span class="hljs-number">0</span>]*<span class="hljs-number">12</span>+s[<span class="hljs-number">1</span>]*<span class="hljs-number">4</span>+s[<span class="hljs-number">2</span>]*<span class="hljs-number">9</span>+s[<span class="hljs-number">3</span>]*<span class="hljs-number">19</span>+s[<span class="hljs-number">4</span>]*<span class="hljs-number">0</span>+s[<span class="hljs-number">5</span>]*<span class="hljs-number">12</span>+s[<span class="hljs-number">6</span>]*<span class="hljs-number">3</span>+s[<span class="hljs-number">7</span>]*<span class="hljs-number">45</span>)==<span class="hljs-number">0x2746</span>)<br>a.add((s[<span class="hljs-number">0</span>]*<span class="hljs-number">7</span>+s[<span class="hljs-number">1</span>]*<span class="hljs-number">34</span>+s[<span class="hljs-number">2</span>]*<span class="hljs-number">10</span>+s[<span class="hljs-number">3</span>]*<span class="hljs-number">17</span>+s[<span class="hljs-number">4</span>]*<span class="hljs-number">11</span>+s[<span class="hljs-number">5</span>]*<span class="hljs-number">22</span>+s[<span class="hljs-number">6</span>]*<span class="hljs-number">2</span>+s[<span class="hljs-number">7</span>]*<span class="hljs-number">12</span>)==<span class="hljs-number">0x29ef</span>)<br>a.add((s[<span class="hljs-number">0</span>]*<span class="hljs-number">43</span>+s[<span class="hljs-number">1</span>]*<span class="hljs-number">2</span>+s[<span class="hljs-number">2</span>]*<span class="hljs-number">11</span>+s[<span class="hljs-number">3</span>]*<span class="hljs-number">15</span>+s[<span class="hljs-number">4</span>]*<span class="hljs-number">1</span>+s[<span class="hljs-number">5</span>]*<span class="hljs-number">21</span>+s[<span class="hljs-number">6</span>]*<span class="hljs-number">1</span>+s[<span class="hljs-number">7</span>]*<span class="hljs-number">30</span>)==<span class="hljs-number">0x2d7e</span>)<br><br><span class="hljs-comment">#判断是否有解(a.model()前必須先調用a.check())</span><br><span class="hljs-keyword">if</span> a.check()==sat:<br>    <span class="hljs-built_in">print</span>(a.model())<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No resolve&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">得到了s的数值</span><br><span class="hljs-string">s[7] = 100, s[3] = 108, s[5] = 49, s[0] = 102,</span><br><span class="hljs-string">s[2] = 108, s[6] = 110, s[1] = 97, s[4] = 119,</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>key = [<span class="hljs-number">0</span>,  <span class="hljs-number">13</span>,  <span class="hljs-number">13</span>,  <span class="hljs-number">11</span>,  <span class="hljs-number">12</span>, <span class="hljs-number">107</span>,  <span class="hljs-number">20</span>,  <span class="hljs-number">30</span>,  <span class="hljs-number">28</span>,  <span class="hljs-number">82</span>,<br> <span class="hljs-number">95</span>,  <span class="hljs-number">95</span>,  <span class="hljs-number">40</span>, <span class="hljs-number">120</span>,  <span class="hljs-number">29</span>,  <span class="hljs-number">59</span>,  <span class="hljs-number">37</span>,  <span class="hljs-number">14</span>,   <span class="hljs-number">3</span>,   <span class="hljs-number">0</span>,<br> <span class="hljs-number">86</span>,  <span class="hljs-number">16</span>,  <span class="hljs-number">79</span>,  <span class="hljs-number">25</span>]<br>k = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key)):<br>    k += <span class="hljs-built_in">chr</span>((key[i] &amp; (s[i &amp; <span class="hljs-number">7</span>] ^ key[i]) | ~key[i] &amp; (~key[i] ^ ~s[i &amp; <span class="hljs-number">7</span>])))<br><br><span class="hljs-built_in">print</span>(k)<br></code></pre></td></tr></table></figure></li><li><p>使用矩阵方法求解(实质与使用z3一样)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#导入 numpy 模块</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment">#行交换</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">swap_row</span>(<span class="hljs-params">matrix, i, j</span>):<br>      m, n = matrix.shape<br>      <span class="hljs-keyword">if</span> i &gt;= m <span class="hljs-keyword">or</span> j &gt;= m:<br>          <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;错误! : 行交换超出范围 ...&#x27;</span>)<br>      <span class="hljs-keyword">else</span>:<br>          matrix[i],matrix[j] = matrix[j].copy(),matrix[i].copy()<br>      <span class="hljs-keyword">return</span> matrix<br><br><br>  <span class="hljs-comment">#变成阶梯矩阵</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_change</span>(<span class="hljs-params">matrix</span>):<br>      m, n = matrix.shape<br>      main_factor = []<br>      main_col = main_row = <span class="hljs-number">0</span><br>      <span class="hljs-keyword">while</span> main_row &lt; m <span class="hljs-keyword">and</span> main_col &lt; n:<br>          <span class="hljs-comment"># 选择进行下一次主元查找的列</span><br>          main_row = <span class="hljs-built_in">len</span>(main_factor)<br>          <span class="hljs-comment"># 寻找列中非零的元素</span><br>          not_zeros = np.where(<span class="hljs-built_in">abs</span>(matrix[main_row:,main_col]) &gt; <span class="hljs-number">0</span>)[<span class="hljs-number">0</span>]<br>          <span class="hljs-comment"># 如果该列向下全部数据为零，则直接跳过列</span><br>          <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(not_zeros) == <span class="hljs-number">0</span>:<br>              main_col += <span class="hljs-number">1</span><br>              <span class="hljs-keyword">continue</span><br>          <span class="hljs-keyword">else</span>:<br>              <span class="hljs-comment"># 将主元列号保存在列表中</span><br>              main_factor.append(main_col)<br>              <span class="hljs-comment"># 将第一个非零行交换至最前</span><br>              <span class="hljs-keyword">if</span> not_zeros[<span class="hljs-number">0</span>] != [<span class="hljs-number">0</span>]:<br>                  matrix = swap_row(matrix,main_row,main_row+not_zeros[<span class="hljs-number">0</span>])<br>              <span class="hljs-comment"># 将该列主元下方所有元素变为零</span><br>              <span class="hljs-keyword">if</span> main_row &lt; m-<span class="hljs-number">1</span>:<br>                  <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(main_row+<span class="hljs-number">1</span>,m):<br>                      a = <span class="hljs-built_in">float</span>(matrix[k, main_col] / matrix[main_row, main_col])<br>                      matrix[k] = matrix[k] - matrix[main_row] * matrix[k, main_col] / matrix[main_row, main_col]<br>              main_col += <span class="hljs-number">1</span><br>      <span class="hljs-keyword">return</span> matrix,main_factor<br><br><br>  <span class="hljs-comment">#回代求解</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">back_solve</span>(<span class="hljs-params">matrix, main_factor</span>):<br>      <span class="hljs-comment"># 判断是否有解</span><br>      <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(main_factor) == <span class="hljs-number">0</span>:<br>          <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主元错误,无主元！ ...&#x27;</span>)<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>      m, n = matrix.shape<br>      <span class="hljs-keyword">if</span> main_factor[-<span class="hljs-number">1</span>] == n - <span class="hljs-number">1</span>:<br>          <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;无解！ ...&#x27;</span>)<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>      <span class="hljs-comment"># 把所有的主元元素上方的元素变成0</span><br>      <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(main_factor) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>          factor = matrix[i, main_factor[i]]<br>          matrix[i] = matrix[i] / <span class="hljs-built_in">float</span>(factor)<br>          <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>              times = matrix[j, main_factor[i]]<br>              matrix[j] = matrix[j] - <span class="hljs-built_in">float</span>(times) * matrix[i]<br>      <span class="hljs-comment"># 先看看结果对不对</span><br>      <span class="hljs-keyword">return</span> matrix<br><br><br>  <span class="hljs-comment">#结果打印</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_result</span>(<span class="hljs-params">matrix, main_factor</span>):<br>      <span class="hljs-keyword">if</span> matrix <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>          <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;阶梯矩阵为空！ ...&#x27;</span>)<br>          <span class="hljs-keyword">return</span><br>      m, n = matrix.shape<br>      result = [<span class="hljs-string">&#x27;&#x27;</span>] * (n - <span class="hljs-number">1</span>)<br>      main_factor = <span class="hljs-built_in">list</span>(main_factor)<br>      <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>):<br>          <span class="hljs-comment"># 如果不是主元列，则为自由变量</span><br>          <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> main_factor:<br>              result[i] = <span class="hljs-string">&#x27;x_&#x27;</span> + <span class="hljs-built_in">str</span>(i + <span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;(free var)&#x27;</span><br>          <span class="hljs-comment"># 否则是主元变量，从对应的行，将主元变量表示成非主元变量的线性组合</span><br>          <span class="hljs-keyword">else</span>:<br>              <span class="hljs-comment"># row_of_main表示该主元所在的行</span><br>              row_of_main = main_factor.index(i)<br>              result[i] = <span class="hljs-built_in">str</span>(matrix[row_of_main, -<span class="hljs-number">1</span>])<br>              <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>):<br>                  ratio = matrix[row_of_main, j]<br>                  <span class="hljs-keyword">if</span> ratio &gt; <span class="hljs-number">0</span>:<br>                      result[i] = result[i] + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-built_in">str</span>(ratio) + <span class="hljs-string">&#x27;x_&#x27;</span> + <span class="hljs-built_in">str</span>(j + <span class="hljs-number">1</span>)<br>                  <span class="hljs-keyword">if</span> ratio &lt; <span class="hljs-number">0</span>:<br>                      result[i] = result[i] + <span class="hljs-string">&#x27;+&#x27;</span> + <span class="hljs-built_in">str</span>(-ratio) + <span class="hljs-string">&#x27;x_&#x27;</span> + <span class="hljs-built_in">str</span>(j + <span class="hljs-number">1</span>)<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;方程的通解是:&#x27;</span>, )<br>      <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>):<br>          <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x_&#x27;</span> + <span class="hljs-built_in">str</span>(i + <span class="hljs-number">1</span>), <span class="hljs-string">&#x27;=&#x27;</span>, result[i])<br><br><br>  <span class="hljs-comment">#得到简化的阶梯矩阵和主元列</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">Handle</span>(<span class="hljs-params">matrix_a, matrix_b</span>):<br>      <span class="hljs-comment"># 拼接成增广矩阵</span><br>      matrix_01 = np.hstack([matrix_a, matrix_b])<br>      matrix_01, main_factor = matrix_change(matrix_01)<br>      matrix_01 = back_solve(matrix_01, main_factor)<br>      print_result(matrix_01, main_factor)<br>      <span class="hljs-keyword">return</span> matrix_01, main_factor<br><br><br>  <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>      <span class="hljs-comment">#a = np.array([[0, 1, 1], [0, 1, 0], [1, 0, 0]])</span><br>      a = np.array([[<span class="hljs-number">12</span>,<span class="hljs-number">11</span>,<span class="hljs-number">20</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>], [<span class="hljs-number">11</span>,<span class="hljs-number">45</span>,<span class="hljs-number">1</span>,<span class="hljs-number">11</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>], [<span class="hljs-number">16</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">12</span>],[<span class="hljs-number">19</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">28</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">67</span>],[<span class="hljs-number">20</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,<span class="hljs-number">22</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">19</span>,<span class="hljs-number">0</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">45</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">34</span>,<span class="hljs-number">10</span>,<span class="hljs-number">17</span>,<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>],[<span class="hljs-number">43</span>,<span class="hljs-number">2</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">21</span>,<span class="hljs-number">1</span>,<span class="hljs-number">30</span>]],dtype=<span class="hljs-built_in">float</span>)<br>      b = np.array([[<span class="hljs-number">6426</span>],[<span class="hljs-number">9801</span>],[<span class="hljs-number">6021</span>],[<span class="hljs-number">14444</span>],[<span class="hljs-number">7251</span>],[<span class="hljs-number">10054</span>],[<span class="hljs-number">10735</span>],[<span class="hljs-number">11646</span>]],dtype=<span class="hljs-built_in">float</span>)<br>      Handle(a, b)<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span> * <span class="hljs-number">20</span>)<br><br></code></pre></td></tr></table></figure><p>得到的x[1…8]就是解出来的Arglist，也是上文的s[0…8],使用上面的代码代入求解即可.<br />ps:解出来的为浮点数，记得需要进位操作</p></li></ul><h1 id="eztea"><a class="markdownIt-Anchor" href="#eztea"></a> EzTea</h1><h2 id="分析-2"><a class="markdownIt-Anchor" href="#分析-2"></a> 分析</h2><ul><li>查壳,放到IDA中查看,之后可以看出来是将输入进行加密,之后和原有之进行比较<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291151611.png" alt="202211121540089" /></li><li>然后根据查看tea中的内容，知道使用的就是xxtea加密，只不过将一些数据进行了修改<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291151464.png" alt="202211121555569" /><br />对比后发现修改的地方为:<span class="label label-primary">DELTA,z>>5变成z>>4,z<<4变成z<<5</span></li></ul><h2 id="exp-2"><a class="markdownIt-Anchor" href="#exp-2"></a> exp</h2><ul><li>xxtea的通用代码,根据题意进行了修改<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*原来</span><br><span class="hljs-comment">  DELTA 0x9e3779b9  </span><br><span class="hljs-comment">  MX (((z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z))) </span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//修改后 </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DELTA 0x11451400</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MX (((z^key[(p&amp;3)^e]) + (y^sum)) ^ ((z<span class="hljs-string">&lt;&lt;5^y&gt;</span>&gt;3) + (y<span class="hljs-string">&lt;&lt;2^z&gt;</span>&gt;4))) </span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">xxtea</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">int</span> n, <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">uint32_t</span> y, z, sum;<br>    <span class="hljs-type">unsigned</span> p, rounds, e;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>)            <span class="hljs-comment">/* Coding Part */</span><br>    &#123;<br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br>        sum = <span class="hljs-number">0</span>;<br>        z = v[n - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            sum += DELTA;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; p &lt; n - <span class="hljs-number">1</span>; p++)<br>            &#123;<br>                y = v[p + <span class="hljs-number">1</span>];<br>                z = v[p] += MX;<br>            &#125;<br>            y = v[<span class="hljs-number">0</span>];<br>            z = v[n - <span class="hljs-number">1</span>] += MX;<br>        &#125; <span class="hljs-keyword">while</span> (--rounds);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">-1</span>)      <span class="hljs-comment">/* Decoding Part */</span><br>    &#123;<br>        n = -n;<br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br>        sum = rounds * DELTA;<br>        y = v[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = n - <span class="hljs-number">1</span>; p &gt; <span class="hljs-number">0</span>; p--)<br>            &#123;<br>                z = v[p - <span class="hljs-number">1</span>];<br>                y = v[p] -= MX;<br>            &#125;<br>            z = v[n - <span class="hljs-number">1</span>];<br>            y = v[<span class="hljs-number">0</span>] -= MX;<br>            sum -= DELTA;<br>        &#125; <span class="hljs-keyword">while</span> (--rounds);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> enc[] =<br>    &#123;<br>      <span class="hljs-number">0x82</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x96</span>,<br>      <span class="hljs-number">0x40</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x71</span>,<br>      <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x88</span>,<br>      <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span><br>    &#125;;<br>    <span class="hljs-type">uint32_t</span> key[] = &#123; <span class="hljs-number">0x19</span>,<span class="hljs-number">0x19</span>,<span class="hljs-number">0x8</span>,<span class="hljs-number">0x10</span> &#125;;<br>    <span class="hljs-comment">// 传入-9代表解密，9为v的长度，即n</span><br>    <span class="hljs-built_in">xxtea</span>((<span class="hljs-type">uint32_t</span>*)enc, <span class="hljs-number">-9</span>, (<span class="hljs-type">uint32_t</span>*)key);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,enc);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="annnnnggrr"><a class="markdownIt-Anchor" href="#annnnnggrr"></a> Annnnnggrr</h1><ul><li>考察angr的知识点,直接一把梭</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> claripy<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">argv</span>):<br>    bin_path = argv[<span class="hljs-number">1</span>]<br>    p = angr.Project(bin_path)<br><br>    start_addr = <span class="hljs-number">0x140001103</span> <span class="hljs-comment"># 跳过输入，从获取输入内存开始</span><br>    init_state = p.factory.blank_state(addr = start_addr)<br><br>    passwd = claripy.BVS(<span class="hljs-string">&quot;passwd&quot;</span>,<span class="hljs-number">32</span>*<span class="hljs-number">8</span>)<span class="hljs-comment"># 创建向量，32个char类型</span><br>    pass_addr = <span class="hljs-number">0x140005640</span> <span class="hljs-comment"># 存放输入数据的内存地址</span><br>    init_state.memory.store(pass_addr, passwd) <span class="hljs-comment"># 将创建的向量加载到内存地址中</span><br><br>    sm = p.factory.simgr(init_state)<br>    sm.explore(find = <span class="hljs-number">0x14000248A</span>) <span class="hljs-comment"># 找到开始对比的地址处</span><br><br>    <span class="hljs-comment"># 将运行数据和内置数据进行对比</span><br>    enc = [<span class="hljs-number">0x4F</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0xCA</span>]<br>    <br>    <span class="hljs-keyword">if</span> sm.found:<br>        check_state = sm.found[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>            <span class="hljs-comment"># 加载相应地址上的输入到 ch 中</span><br>            ch = check_state.memory.load(pass_addr + i, <span class="hljs-number">1</span>)<br>            check_state.solver.add(ch == enc[i]) <span class="hljs-comment">#add添加约束，不满足则重新找</span><br>        <span class="hljs-comment"># 得到最终的数据</span><br>        res = check_state.solver.<span class="hljs-built_in">eval</span>(passwd,cast_to = <span class="hljs-built_in">bytes</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(res))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;No&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main(sys.argv)<br></code></pre></td></tr></table></figure><h1 id="the-sliders-labyrinth"><a class="markdownIt-Anchor" href="#the-sliders-labyrinth"></a> The Slider’s Labyrinth</h1><ul><li>无壳，直接看，发现有两处花指令，直接把 E8 <code>nop</code> 掉，然后生成函数</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304232049500.png" alt="image-20230423204916419" /></p><ul><li>之后发现是一个 maze，这里知道遇见 <code>#</code> 才会停止</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304232048777.png" alt="image-20230423204808646" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">################</span><br><span class="hljs-string">#*        #    #</span><br><span class="hljs-string">#              #</span><br><span class="hljs-string">#    #         #</span><br><span class="hljs-string">##             #</span><br><span class="hljs-string">#        #    ##</span><br><span class="hljs-string">#   #          #</span><br><span class="hljs-string">#              #</span><br><span class="hljs-string">#    #      # O#</span><br><span class="hljs-string">################</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>然后走最短路径为 <code>dsasdwds</code></li></ul><h1 id="funnyotl"><a class="markdownIt-Anchor" href="#funnyotl"></a> funnyOTL</h1><h2 id="分析-3"><a class="markdownIt-Anchor" href="#分析-3"></a> 分析</h2><ul><li>无壳，直接看，发现进行了伪随机数参与的加密</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304232116152.png" alt="image-20230423211637028" /></p><ul><li>动调获得每一次的 <code>posLogMe</code> 和 最后的 <code>enc</code>，然后求解</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304232118527.png" alt="image-20230423211844458" /></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304232118923.png" alt="image-20230423211852840" /></p><h2 id="exp-3"><a class="markdownIt-Anchor" href="#exp-3"></a> exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>enc = [<span class="hljs-number">0x4C</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x5F</span>,<br>       <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x61</span>,<br>       <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x5F</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag&#123;&#x27;</span>+<span class="hljs-string">&#x27;x&#x27;</span>*<span class="hljs-number">18</span>+<span class="hljs-string">&#x27;&#125;&#x27;</span>)  <span class="hljs-comment"># flag&#123;123456789012345678&#125;</span><br><br>order = [<span class="hljs-number">0x12</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0x8</span>,<span class="hljs-number">0xa</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0xa</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xc</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>]  <span class="hljs-comment"># 动态调试获得</span><br><br>string_3 = [<span class="hljs-number">0</span>] * <span class="hljs-number">2</span><br>string_4 = [<span class="hljs-number">0</span>] * <span class="hljs-number">2</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">22</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">2</span>):<br>    posCur=i<br>    posLogMe=order[i//<span class="hljs-number">2</span>]<br><br>    string_3[<span class="hljs-number">1</span>]= enc[posLogMe + <span class="hljs-number">1</span>]<br>    string_3[<span class="hljs-number">0</span>] =enc[posLogMe]<br><br>    string_4[<span class="hljs-number">0</span>] = enc[posCur]<br>    string_4[<span class="hljs-number">1</span>] = enc[posCur + <span class="hljs-number">1</span>]<br><br>    string_3[<span class="hljs-number">1</span>] = (~(string_3[<span class="hljs-number">1</span>])&amp;<span class="hljs-number">0xff</span>) ^ posLogMe <span class="hljs-comment"># 这里的处理需要注意</span><br>    string_3[<span class="hljs-number">0</span>] = string_3[<span class="hljs-number">0</span>]^posLogMe&amp;<span class="hljs-number">0xff</span><br><br>    enc[posLogMe] = string_4[<span class="hljs-number">0</span>]<br>    enc[posLogMe + <span class="hljs-number">1</span>] = string_4[<span class="hljs-number">1</span>]<br><br>    enc[posCur+<span class="hljs-number">1</span>] = string_3[<span class="hljs-number">1</span>]<br>    enc[posCur] = string_3[<span class="hljs-number">0</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(enc[i]), end=<span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-comment"># &#125;LTS_wonk_u_w0n_LTO&#123;galf</span><br><br><span class="hljs-built_in">print</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#125;LTS_wonk_u_w0n_LTO&#123;galf&#x27;</span>[::-<span class="hljs-number">1</span>])<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【NewStartCTF】Reverse_Week2</title>
    <link href="/posts/2f0d53cc.html"/>
    <url>/posts/2f0d53cc.html</url>
    
    <content type="html"><![CDATA[<h1 id="前人后者"><a class="markdownIt-Anchor" href="#前人后者"></a> 前…人，后…者</h1><h2 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h2><ul><li>查壳之后是32位程序，IDA打开<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291147000.png" alt="202211081105733" /></li><li>使用<span class="label label-primary">sub_4113DE</span>对输入进行加密<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291147034.png" alt="202211081110311" /></li><li>观察特点，上面是凯撒加密，之后价格结果与0x22异或<br />查看<span class="label label-primary">byte_41A004</span><br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291147160.png" alt="202211081113384" /><br />得到经过凯撒加密，然后异或之后的结果</li></ul><h2 id="exp"><a class="markdownIt-Anchor" href="#exp"></a> exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">81</span>, <span class="hljs-number">91</span>,  <span class="hljs-number">76</span>,  <span class="hljs-number">86</span>,  <span class="hljs-number">89</span>,  <span class="hljs-number">77</span>,  <span class="hljs-number">80</span>,  <span class="hljs-number">86</span>,  <span class="hljs-number">84</span>,  <span class="hljs-number">67</span>, <span class="hljs-number">125</span>,<br>  <span class="hljs-number">76</span>,  <span class="hljs-number">67</span>,  <span class="hljs-number">83</span>, <span class="hljs-number">125</span>,  <span class="hljs-number">80</span>,  <span class="hljs-number">67</span>,  <span class="hljs-number">83</span>, <span class="hljs-number">125</span>,  <span class="hljs-number">71</span>,  <span class="hljs-number">80</span>,<br>  <span class="hljs-number">125</span>,  <span class="hljs-number">76</span>,  <span class="hljs-number">67</span>,  <span class="hljs-number">83</span>, <span class="hljs-number">125</span>,  <span class="hljs-number">78</span>,  <span class="hljs-number">64</span>,  <span class="hljs-number">74</span>,  <span class="hljs-number">95</span>]<br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-built_in">str</span>+=<span class="hljs-built_in">chr</span>(a[i]^<span class="hljs-number">0x22</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i]) &gt;= <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i]) &lt;= <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;z&#x27;</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i]) - k - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i]) &gt;= <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i]) &lt;= <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;Z&#x27;</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i]) - k - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[i], end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291148316.png" alt="202211081130028" /></p><h1 id="findme"><a class="markdownIt-Anchor" href="#findme"></a> FindMe</h1><h2 id="分析-2"><a class="markdownIt-Anchor" href="#分析-2"></a> 分析</h2><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291148685.png" alt="202211092056077" /><br />该程序经过<span class="label label-primary">sub_1BCD</span>使得dword_5040 == 1即可得到flag</p><p>怎经过调试，可以看到关键的函数<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291148532.png" alt="202211092101605" /><br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291148972.png" alt="202211092101271" /><br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291148828.png" alt="202211092102474" /><br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291148741.png" alt="202211092103231" /><br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291148418.png" alt="202211092103704" /><br />大致的含义是首先对s进行赋0，然后经过位运算，异或之后进行得到dword_5020，求解就是逆推进行求解</p><h2 id="exp-2"><a class="markdownIt-Anchor" href="#exp-2"></a> exp</h2><ul><li>首先由dword_5020获得最后的数据<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291148156.png" alt="202211092108307" /><br />则首先经过异或右移17，之后再右移0x2022</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">s = [<span class="hljs-number">1734442996</span>,<span class="hljs-number">1848660801</span>,<span class="hljs-number">1701596640</span>,<span class="hljs-number">1769229292</span>,<span class="hljs-number">1650422880</span>,<span class="hljs-number">1869826292</span>,<span class="hljs-number">1701343689</span>,<span class="hljs-number">2099343059</span>]<br>key = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)):<br>    s[i]^=(s[i]&gt;&gt;<span class="hljs-number">17</span>)<br><span class="hljs-built_in">print</span>(s)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)):<br>    s[i] ^= <span class="hljs-number">0x2022</span><br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><ul><li>之后经过位运算<br />|为按位或运算，只要对应两个二进制位有一个为1时，结果就为1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">s = [<span class="hljs-number">1734442996</span>,<span class="hljs-number">1848660801</span>,<span class="hljs-number">1701596640</span>,<span class="hljs-number">1769229292</span>,<span class="hljs-number">1650422880</span>,<span class="hljs-number">1869826292</span>,<span class="hljs-number">1701343689</span>,<span class="hljs-number">2099343059</span>]<br>key = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)):<br>    s[i]^=(s[i]&gt;&gt;<span class="hljs-number">17</span>)<br><span class="hljs-built_in">print</span>(s)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)):<br>    s[i] ^= <span class="hljs-number">0x2022</span><br><span class="hljs-built_in">print</span>(s)<br>flag = [<span class="hljs-string">&#x27;&#x27;</span>]*<span class="hljs-number">32</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">32</span>,<span class="hljs-number">4</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-built_in">ascii</span> = s[i//<span class="hljs-number">4</span>] &gt;&gt; (<span class="hljs-number">8</span>*(<span class="hljs-number">4</span>-j-<span class="hljs-number">1</span>))<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        还原或运算，每次左移在后面补零，又与之后的s[i]位运算将零替换成s[i]的值</span><br><span class="hljs-string">        即最后的s[i]由s[i]本身与s[i]左移之后的数相加而成(左移位数远远超过本身，按位或就成为了相加),则逆推需要减去</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        s[i//<span class="hljs-number">4</span>] = s[i//<span class="hljs-number">4</span>] - (<span class="hljs-built_in">ascii</span> &lt;&lt; <span class="hljs-number">8</span>*(<span class="hljs-number">4</span>-j-<span class="hljs-number">1</span>))<br>        flag[i+(<span class="hljs-number">4</span>-j-<span class="hljs-number">1</span>)] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ascii</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(flag))<br></code></pre></td></tr></table></figure><h1 id="petals"><a class="markdownIt-Anchor" href="#petals"></a> Petals</h1><h2 id="分析-3"><a class="markdownIt-Anchor" href="#分析-3"></a> 分析</h2><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291149363.png" alt="202211172010055" /></p><p>找到main函数，观察<code>loc_1209</code>是指令，可能反编译有问题，点击进去看看</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291149708.png" alt="202211172012817" /></p><p>在下面找到一个错误的提示，按D转换成原始数据形式</p><p>对E8使用Patcher直接nop掉，之后按c转换为代码，同时将此指令<code>loc_1209</code>按P转换为函数，之后就转换成函数</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291149728.png" alt="202211172017531" /></p><p>而<code>sub_160C</code>是一个比较函数，若是输入的值与最后存储的值相同，那么就是输入对了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">unsigned</span> __int64 __fastcall <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">char</span>* input, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+18h] [rbp-118h]</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+1Ch] [rbp-114h]</span><br>__int64 v5[<span class="hljs-number">33</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-110h] BYREF</span><br><span class="hljs-type">unsigned</span> __int64 v6; <span class="hljs-comment">// [rsp+128h] [rbp-8h]</span><br><br><span class="hljs-built_in">memset</span>(v5, <span class="hljs-number">0</span>, <span class="hljs-number">256</span>);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">255</span>; ++i)<br>*((BYTE*)v5 + i) = ~(i ^ len);<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; len &gt; j; ++j)<br>input[j] = *((BYTE*)v5 + (<span class="hljs-type">unsigned</span> __int8)input[j]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> enc[] =<br>&#123;<br>  <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x89</span>,<br>  <span class="hljs-number">0x92</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xD1</span>,<br>  <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x87</span>,<span class="hljs-number">0</span><br>&#125;;<br><span class="hljs-type">char</span> flag[<span class="hljs-number">56</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">25</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">256</span>; j++) &#123;<br>flag[i] = j;<br><span class="hljs-built_in">func</span>(flag, <span class="hljs-number">25</span>);<br><span class="hljs-keyword">if</span> (flag[i] == enc[i]) &#123;<br>cout &lt;&lt; (<span class="hljs-type">char</span>)j;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 66ccff#luotianyi#b074d58a</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="likemyasp"><a class="markdownIt-Anchor" href="#likemyasp"></a> Likemyasp</h1><h2 id="脱壳"><a class="markdownIt-Anchor" href="#脱壳"></a> 脱壳</h2><ul><li><p>有壳</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304230926089.png" alt="image-20230423092643020" /></p></li><li><p>upx尝试了脱不了，试试手动脱壳</p></li></ul><p>​直接在 x64dbg中脱壳，首先加载后按 F9 来到了加壳之后的 OEP处 (这里的 EP 是加壳后的EP，我们需要找到加壳前的 EP)</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304230931775.png" alt="image-20230423093143699" /></p><p>​之后 <code>Ctrl + n</code> 在 <code>VirtualProtect</code> 处右键/F2下断点。</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304230944510.png" alt="image-20230423094446475" /></p><p>​然后 <code>F9</code> 执行，发现总共会命中两次，在第二次命中的时候按 <code>ALT + F9</code> 退出此函数体</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304230947235.png" alt="image-20230423094701172" /></p><p>​之后一直 <code>F8</code> 单步调试，直到走不动了，这个就是等待IO操作的时候，可以重新调试发现 <code>main</code> 函数的地方就是在这个函数中</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304230950356.png" alt="image-20230423095011293" /></p><p>​再次观察可以发现前面两个是传参的地方，之后<code>F7</code> 步进函数内，发现有显示的文字，那么大概可以判断这里就是脱壳后的程序了，然后用 <code>Scylla</code> dump 并修复</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304230951176.png" alt="image-20230423095148133" /></p><ul><li>之后就可以看出来函数的逻辑了</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304230954433.png" alt="image-20230423095435400" /></p><h2 id="动调"><a class="markdownIt-Anchor" href="#动调"></a> 动调</h2><ul><li>不脱壳，直接动调。在最多逻辑的函数(猜测这是加密过程)中对最后下断点进行动调</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304231029385.png" alt="image-20230423102904343" /></p><ul><li><code>F8</code> 进行步过，然后一直走到卡住的地方(等待IO输入)，然后进入函数体就可以发现主函数逻辑了</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304231027691.png" alt="image-20230423102747612" /></p><h2 id="exp-3"><a class="markdownIt-Anchor" href="#exp-3"></a> exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">chipher = [<span class="hljs-number">0xD803C1FC098</span>, <span class="hljs-number">0xE20360BC097</span>, <span class="hljs-number">0xFE02A1C00A0</span>, <span class="hljs-number">0xFA0121040CB</span>, <span class="hljs-number">0xF2032104092</span>, <span class="hljs-number">0xD6015884082</span>]<br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(chipher)):<br>    flag += <span class="hljs-built_in">chr</span>(chipher[i] &gt;&gt; <span class="hljs-number">37</span> &amp; <span class="hljs-number">0xff</span> ^ <span class="hljs-number">0xa</span>)<br>    flag += <span class="hljs-built_in">chr</span>(chipher[i] &gt;&gt; <span class="hljs-number">23</span> &amp; <span class="hljs-number">0xff</span> ^ <span class="hljs-number">0x14</span>)<br>    flag += <span class="hljs-built_in">chr</span>(chipher[i] &gt;&gt; <span class="hljs-number">14</span> &amp; <span class="hljs-number">0xff</span> ^ <span class="hljs-number">0x1e</span>)<br>    flag += <span class="hljs-built_in">chr</span>(~(chipher[i])&amp; <span class="hljs-number">0xff</span>)<br><span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure><h1 id="ur_so_native"><a class="markdownIt-Anchor" href="#ur_so_native"></a> ur_so_native</h1><h2 id="分析-4"><a class="markdownIt-Anchor" href="#分析-4"></a> 分析</h2><ul><li>一个apk文件，直接在jadx中分析，去到<code>com.new_star_ctf.u_navie/MainActivity</code>查看程序的逻辑<ul><li>之后发现加密函数 <code>encry</code> ,它的前面有个 <code>native</code> 的关键字，代表函数在 <code>native</code> 层实现。而native层实现的函数保存在 <code>.so</code> 文件中， <code>.so</code> 文件位于apk文件解压后<code>\lib</code> 层下</li></ul></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304231039751.png" alt="image-20230423103941691" /></p><ul><li>將 <code>libencry.so</code> 拉入IDA，找到 <code>encry</code> 函数，会发现一堆奇怪的东西。这是一种名为 <code>JNI</code> 的东西导致 IDA分析错误 <a href="https://zh.wikipedia.org/zh-cn/Java%E6%9C%AC%E5%9C%B0%E6%8E%A5%E5%8F%A3">什么是JNI</a></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304231040054.png" alt="image-20230423104049001" /></p><ul><li>之后对应 <code>JNI</code> 函数原型，手动修改 <code>entry</code> 函数的参数类型(按<code>y</code>)</li><li><a href="https://blog.csdn.net/yb493071294/article/details/80378730">还原 JNI 函数名</a></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304231111060.png" alt="image-20230423111118023" /></p><p>这里查看加密很奇怪，就附上别人的链接(懒得写了)</p><p><a href="https://www.cnblogs.com/Only-xiaoxiao/p/16759891.html">NewStartCTF</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【NewStartCTF】Reverse_Week1</title>
    <link href="/posts/b6040276.html"/>
    <url>/posts/b6040276.html</url>
    
    <content type="html"><![CDATA[<h1 id="hello_reversing"><a class="markdownIt-Anchor" href="#hello_reversing"></a> Hello_Reversing</h1><h2 id="查壳"><a class="markdownIt-Anchor" href="#查壳"></a> 查壳</h2><ul><li>首先使用exeinfope查一下壳<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291142134.png" alt="202210282330917" /></li><li>由图所示，此程序是64位程序，没有壳(Not packed)</li></ul><h2 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h2><ul><li>使用ida打开程序，找到主函数(main)界面，按<span class="label label-info">Tab/F5</span>进入伪代码界面.<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291142425.png" alt="202210282333815" /></li><li>观察伪代码的信息，看到有&quot;3vers1ng_w0rld}&quot;，猜测此为flag的一半，另外一半可能也是这样的展示方式，则使用Shift+F12直接搜索程序中的字符串.<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291142526.png" alt="202210282337023" /></li><li>最后发现字符串的另一半在<a href="https://www.cnblogs.com/lsgxeva/p/8947829.html">.rdata</a>段中<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291142422.png" alt="202210290824478" /></li><li>找到了flag的前半部分，点击进入汇编界面。在相应显示flag前半段的位置处，直接按Shift+e进行提取，那么就得到了flag.</li></ul><h1 id="pyre"><a class="markdownIt-Anchor" href="#pyre"></a> Pyre</h1><h2 id="分析-2"><a class="markdownIt-Anchor" href="#分析-2"></a> 分析</h2><ul><li><p>得到文件pyre.exe，由文件名字可以看出这个是由py文件编译成的exe文件，则使用<a href="https://github.com/extremecoders-re/pyinstxtractor">pyinstxtractor.py</a>可以将pyre进行反编译</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> pyinstxtractor.<span class="hljs-keyword">py</span> <span class="hljs-symbol">&lt;filename&gt;</span><br></code></pre></td></tr></table></figure><p>运行成功<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291143942.png" alt="202210290851753" /></p></li><li><p>反编译后，会生成一个文件夹,其中的.pyc文件就是由.exe反编译得到的，现在需要将.pyc反编译成.py文件<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291143490.png" alt="202210290854071" /></p></li></ul><h2 id="反编译"><a class="markdownIt-Anchor" href="#反编译"></a> 反编译</h2><ol><li><p>直接使用<a href="https://tool.lu/pyc/">在线网站</a>进行反编译</p></li><li><p>使用<a href="https://github.com/rocky/python-uncompyle6">uncompyle6</a>进行反编译</p></li></ol><ul><li>uncompyle6可将python字节码转换回等效的python源代码，它接受python 1.3版到3.8版的字节码</li><li>安装</li></ul>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> uncompyle6<br></code></pre></td></tr></table></figure><ul><li>使用示例</li></ul>  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">uncompyle6 -<span class="hljs-keyword">o</span> fliename.<span class="hljs-keyword">py</span> <span class="hljs-keyword">file</span>.pyc #  对filename.pyc文件进行反编译，输出为<span class="hljs-keyword">file</span>.<span class="hljs-keyword">py</span>文件<br></code></pre></td></tr></table></figure><h2 id="exp"><a class="markdownIt-Anchor" href="#exp"></a> exp</h2><ul><li><p>查看反编译后的.py源代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = <span class="hljs-string">&#x27;&#x27;</span><br>encode = <span class="hljs-string">&#x27;REla&#123;PSF!!fg&#125;!Y_SN_1_0U&#x27;</span><br>table = [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>, <span class="hljs-number">16</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <br>        <span class="hljs-number">22</span>, <span class="hljs-number">19</span>, <span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">18</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">14</span>, <span class="hljs-number">17</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc</span>(<span class="hljs-params"><span class="hljs-built_in">input</span></span>):<br>    tmp = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">input</span>)):<br>        tmp += <span class="hljs-built_in">input</span>[table[i]]<br><br>    <span class="hljs-keyword">return</span> tmp<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Please input your flag:&#x27;</span>)<br>    flag = <span class="hljs-built_in">input</span>()<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(flag) != <span class="hljs-number">23</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Length Wrong!!&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        final = enc(flag)<br>        <span class="hljs-keyword">if</span> final == encode:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Wow,you get the right flag!!&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Sorry,Your input is Wrong&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>此加密为将flag打乱顺序，将table的值作为下标进行输出，则可以构造和encode等长的列表，进行逆操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">encode = <span class="hljs-string">&#x27;REla&#123;PSF!!fg&#125;!Y_SN_1_0U&#x27;</span><br>table = [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>, <span class="hljs-number">16</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <br>        <span class="hljs-number">22</span>, <span class="hljs-number">19</span>, <span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">18</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">14</span>, <span class="hljs-number">17</span>]<br><br>flag = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(encode))]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(encode)):<br>    flag[table[i]] = encode[i]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(flag))<br></code></pre></td></tr></table></figure></li></ul><h1 id="baby_re"><a class="markdownIt-Anchor" href="#baby_re"></a> Baby_Re</h1><h2 id="分析-3"><a class="markdownIt-Anchor" href="#分析-3"></a> 分析</h2><ul><li><p>64位程序.使用ida打开程序，找到主函数(main)界面，按<span class="label label-info">Tab/F5</span>进入伪代码界面.<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291143901.png" alt="202210291704483" /></p><p>由main函数界面，可以看出此题是输入一个字符串，先进行与i异或，之后经过compare函数，正确返回为1</p></li><li><p>跟进compare函数，发现是用final与s进行比较<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291143700.png" alt="202210291708684" /><br />可以知道flag(输入的字符串)为32位长，然后遍历输入的字符串，要求和final一样,跟进final，</p></li><li><p>按Shift+e提取数据<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291143724.png" alt="202210291712101" /></p></li></ul><h2 id="exp-2"><a class="markdownIt-Anchor" href="#exp-2"></a> exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">final = [<span class="hljs-number">102</span>, <span class="hljs-number">109</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>, <span class="hljs-number">127</span>,  <span class="hljs-number">86</span>, <span class="hljs-number">105</span>, <span class="hljs-number">106</span>, <span class="hljs-number">109</span>, <span class="hljs-number">125</span>,<br>  <span class="hljs-number">98</span>, <span class="hljs-number">98</span>,  <span class="hljs-number">98</span>, <span class="hljs-number">106</span>, <span class="hljs-number">81</span>, <span class="hljs-number">125</span>, <span class="hljs-number">101</span>, <span class="hljs-number">127</span>, <span class="hljs-number">77</span>, <span class="hljs-number">113</span>, <span class="hljs-number">113</span>, <span class="hljs-number">115</span>, <br>  <span class="hljs-number">121</span>, <span class="hljs-number">101</span>, <span class="hljs-number">125</span>, <span class="hljs-number">70</span>, <span class="hljs-number">119</span>, <span class="hljs-number">122</span>, <span class="hljs-number">117</span>, <span class="hljs-number">115</span>, <span class="hljs-number">33</span>, <span class="hljs-number">98</span>]<br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(final)):<br>    flag += <span class="hljs-built_in">chr</span>(final[i]^i)<br>    <br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><ul><li>运行出来的flag为flag{Something_run_before_main?}</li><li>提交发现这个flag是一个假的，之后根据题意与线索，发现有4个bytes不一样<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291143889.png" alt="202210291724280" /></li><li>跟进function进行查看<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291143970.png" alt="202210291726414" /><br />发现对于这四个位置进行了修改，之后更改exp,修改这4个位置的数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">final = [<span class="hljs-number">102</span>, <span class="hljs-number">109</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>, <span class="hljs-number">127</span>, <span class="hljs-number">86</span>, <span class="hljs-number">54</span>, <span class="hljs-number">106</span>, <span class="hljs-number">109</span>, <span class="hljs-number">125</span>, <br>  <span class="hljs-number">58</span>, <span class="hljs-number">98</span>, <span class="hljs-number">98</span>, <span class="hljs-number">106</span>, <span class="hljs-number">81</span>, <span class="hljs-number">125</span>, <span class="hljs-number">101</span>, <span class="hljs-number">127</span>,  <span class="hljs-number">77</span>, <span class="hljs-number">113</span>, <span class="hljs-number">113</span>, <span class="hljs-number">115</span>, <br>  <span class="hljs-number">38</span>, <span class="hljs-number">101</span>, <span class="hljs-number">125</span>, <span class="hljs-number">70</span>, <span class="hljs-number">119</span>, <span class="hljs-number">122</span>, <span class="hljs-number">117</span>, <span class="hljs-number">115</span>, <span class="hljs-number">63</span>, <span class="hljs-number">98</span>]<br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(final)):<br>    flag += <span class="hljs-built_in">chr</span>(final[i]^i)<br>    <br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h1 id="easyre"><a class="markdownIt-Anchor" href="#easyre"></a> EasyRe</h1><h2 id="分析-4"><a class="markdownIt-Anchor" href="#分析-4"></a> 分析</h2><ul><li>题目为.exe文件和.dll文件.对.exe查壳,无壳,64位,在ida中查看.<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291143629.png" alt="202210291954295" /><br />首先exe会加载dll，调用dll里的函数，图中的红框.同时这里的57行将ProcAddress定义为enc.dll中的encode函数<br />之后就是将输入的字符串经过encode后与Str2进行比较，相等则得到flag</li><li>继续分析enc.dll<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291144593.png" alt="202210292004505" /><br />跟进return进行查看<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291145266.png" alt="202210292004268" /><br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291146960.png" alt="202210292005284" /><br />则enc.dll大致是将输入的字符串a1进行一个加密操作之后赋值给a2，之后a2与Str(Reverse)进行异或输出a2</li><li>enc.dll的加密操作复杂，使用Shift+F12查看有没有可以使用的信息<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291146739.png" alt="202210292009641" /><br />看到一串字符，判定为base64编码，即加密就是base加密</li></ul><h2 id="exp-3"><a class="markdownIt-Anchor" href="#exp-3"></a> exp</h2><ul><li>这里final[14]题目中没有告知,先当0进行处理,成功获得flag;若是不能，可以爆破final[14],对其遍历所有ascii爆破最后的flag.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br>final = [<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">14</span>, <span class="hljs-number">13</span>, <span class="hljs-number">40</span>, <span class="hljs-number">64</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">60</span>, <span class="hljs-number">46</span>, <span class="hljs-number">43</span>, <span class="hljs-number">30</span>, <span class="hljs-number">61</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>,<br>        <span class="hljs-number">59</span>, <span class="hljs-number">61</span>, <span class="hljs-number">60</span>, <span class="hljs-number">21</span>, <span class="hljs-number">40</span>, <span class="hljs-number">5</span>, <span class="hljs-number">80</span>, <span class="hljs-number">70</span>, <span class="hljs-number">63</span>, <span class="hljs-number">42</span>, <span class="hljs-number">57</span>, <span class="hljs-number">9</span>, <span class="hljs-number">49</span>, <span class="hljs-number">86</span>, <span class="hljs-number">36</span>, <span class="hljs-number">28</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;?$P&lt;,%#K&#x27;</span>:<br>    final.append(<span class="hljs-built_in">ord</span>(i))<br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;Reverse&#x27;</span><br><br>flag = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(final)):<br>    flag.append(<span class="hljs-built_in">chr</span>(final[i] ^ <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i % <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)])))<br><br>content = base64.b64decode(<span class="hljs-string">&#x27;&#x27;</span>.join(flag).encode())<br><span class="hljs-built_in">print</span>(content)<br></code></pre></td></tr></table></figure><h1 id="艾克体悟题"><a class="markdownIt-Anchor" href="#艾克体悟题"></a> 艾克体悟题</h1><p>作者给了提示：<a href="https://note.youdao.com/ynoteshare/index.html?id=a006b246edc7fc65ed20abbc2d9c5351&amp;type=note&amp;%5C_time=1663716620460">点击这里</a></p><h2 id="分析-5"><a class="markdownIt-Anchor" href="#分析-5"></a> 分析</h2><ul><li>有题目可以得知，在模拟器中直接打开apk文件<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291146756.png" alt="202211072352571" /></li><li>则使用<span class="label label-info">adb shell</span>启动指定的Activity</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb <span class="hljs-keyword">shell</span>   进入<span class="hljs-keyword">shell</span><br><span class="hljs-keyword">am</span> start -n <span class="hljs-keyword">com</span>.droidlearn.activity_travel/.FlagActivity   按上述地址路径，打开指定控件<br></code></pre></td></tr></table></figure><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291146943.png" alt="202211072353036" /></p><h2 id="exp-4"><a class="markdownIt-Anchor" href="#exp-4"></a> exp</h2><ol><li>使用python中的 pyautogui 库控制鼠标自动进行连点操作</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pyautogui <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> time<br>pd.FAILSAFE = <span class="hljs-literal">True</span><br><br>time.sleep(<span class="hljs-number">3</span>)<br><span class="hljs-comment">#3秒时间自己移动到要点击的位置</span><br>pd.click(clicks=<span class="hljs-number">100000</span>,interval=<span class="hljs-number">0.0001</span>)<br><span class="hljs-comment"># pyautogui.click()</span><br><span class="hljs-comment"># (100,100, clicks=2,interval=0.5,button=‘right’,duration=0.2)</span><br><span class="hljs-comment"># 位置，点击次数，间隔时间，右键(默认左键)，移动间隔</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_61774705/article/details/127165732">exp参考此篇文章</a></p><ol start="2"><li>使用apk反编译后重新打包，将1w的数值修改为1</li></ol><ul><li><p>下载<a href="https://ibotpeaches.github.io/Apktool/">下载apktool</a>,此工具作用就是将apk反编译和重新打包<br />输入`</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>apktool_2.<span class="hljs-number">6</span>.<span class="hljs-number">1</span>.<span class="hljs-keyword">jar </span>d &lt;filepath&gt; -o &lt;newfilename&gt;<br></code></pre></td></tr></table></figure><p>生成文件夹.<br />进入文件夹 <code>demo\smali\com\droidlearn\activity_travel</code> 路径找 <code>FlagActivity$1.smali</code> 文件，此文件可以直接用编辑器打开<br />在此文件中寻找到到0x2710(10000)十六进制，修改为0x1即为点击1次即可.<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291146717.png" alt="202211080956544" /></p></li><li><p>重新打包</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">java -jar apktool_2<span class="hljs-number">.6</span><span class="hljs-number">.1</span>.jar b &lt;<span class="hljs-keyword">new</span><span class="hljs-type">filename</span>&gt; -o &lt;<span class="hljs-keyword">new</span><span class="hljs-type">file</span>&gt;.apk<br></code></pre></td></tr></table></figure><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291146071.png" alt="202211081009495" /><br />打包成功即生成一个.apk，但此时的apk不可使用，还需安装签名.</p></li><li><p>测试<br />安装至夜神模拟器，用/nox/bin目录下的adb工具进行安装，</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">adb install &lt;<span class="hljs-keyword">new</span><span class="hljs-type">file</span>&gt;.apk<br></code></pre></td></tr></table></figure><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291146818.png" alt="202211081012000" /><br />安装失败，这是没有签名导致的.</p></li><li><p>生成口令文件<br />使用JRE环境变量下的keytool生成口令文件,<a href="https://blog.csdn.net/w47_csdn/article/details/87564029">详细参考</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">keytool</span> -genkey -alias testalias -keyalg RSA -keysize <span class="hljs-number">2048</span> -validity <span class="hljs-number">36500</span> -keystore &lt;filename&gt;.keystore`<br></code></pre></td></tr></table></figure><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291147006.png" alt="202211081018301" /><br />输入回答，之后在当前目录下生成一个.keystore文件，使用<code>keytool -list -v -keystore &lt;filename&gt;.keystore</code>可以查看详细信息.</p></li><li><p>签名</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">jarsigner -<span class="hljs-keyword">verbose</span> -keystore <span class="hljs-symbol">&lt;filename&gt;</span>.keystore -storepass <span class="hljs-symbol">&lt;password&gt;</span> -signedjar <span class="hljs-symbol">&lt;newfile&gt;</span>.apk <span class="hljs-symbol">&lt;filename&gt;</span>.apk testalias<br></code></pre></td></tr></table></figure><p>其中<br />-<span class="label label-default">keystore + 签名文件</span><br><br />-<span class="label label-default">sotrepass + 签名口令密码</span> <br><br />-<span class="label label-default">signedjar后跟三个参数 分别是签名后的apk文件 需要签名的apk文件 签名的别名</span><br></p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291147430.png" alt="202211081027234" /></p><p>签名成功，之后下载此flag.apk,启动指定的<span class="label label-info">FlagActivity$1.smali</span>，则可以得到flag<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291147214.png" alt="202211081044884" /><br /><a href="https://www.anyiblog.top/2022/09/25/20220925/#Re5-%E8%89%BE%E5%85%8B%E4%BD%93%E6%82%9F%E9%A2%98">exp参考此篇文章</a></p></li><li><p>补充<br /><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291147062.png" alt="202211081042328" /><br />下载时若是出现此报错，需要删除之前下载的那个apk，<a href="https://blog.csdn.net/qq_42351033/article/details/122450733">解决方案</a><br />进入adb shell之后可以通过<code>pm list package</code>列出模拟器中所有的包</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Crypto &amp; 算法</title>
    <link href="/posts/108720dc.html"/>
    <url>/posts/108720dc.html</url>
    
    <content type="html"><![CDATA[<h1 id="基础操作"><a class="markdownIt-Anchor" href="#基础操作"></a> 基础操作</h1><h2 id="转化"><a class="markdownIt-Anchor" href="#转化"></a> 转化</h2><h3 id="-str"><a class="markdownIt-Anchor" href="#-str"></a> -&gt;Str</h3><ul><li><code>chr(a)</code><ul><li>将int类型的a根据其ascii码转化为str字符</li></ul></li><li><code>hex(a)</code><ul><li>将int类型的a转化为其十六进制str类型</li></ul></li><li><code>str(a)</code><ul><li>将所有类型的a按照其本身转化为str类型</li></ul></li><li><code>str = a.decode()</code><ul><li>将bytes类型的a转化为str类型</li></ul></li></ul><h3 id="-int"><a class="markdownIt-Anchor" href="#-int"></a> -&gt;Int</h3><ul><li><p><code>int(a,k)</code></p><ul><li>a为k进制数，使用 <code>int</code>将k进制数的a转化为十进制数</li><li><code>int(a)</code>直接将字符a转化为int类型，此时a必须为数字字符<ul><li>注意：不是转化为ascii码，而是转化为数字类型，即值不变，类型改变</li></ul></li></ul></li><li><p><code>eval(a)</code></p><ul><li>将str类型的十六进制数a转化为int类型(这里十六进制需要加上0x)</li></ul></li><li><p><code>ord(a)</code></p><ul><li>将字符类型的a按其ascii码转化为int类型</li></ul></li></ul><h3 id="-bytes"><a class="markdownIt-Anchor" href="#-bytes"></a> -&gt;Bytes</h3><ul><li><code>str.encode(encoding='utf-8')</code><ul><li>这里 <strong>utf-8是默认选项</strong>，也可以选择不填，即encode()<ul><li>str转换成 bytes 用 encode() 方法</li><li><code>bytes=b'\xe4\xba\xba\xe7\x94'</code>—bytes的形式</li></ul></li></ul></li></ul><h2 id="技巧"><a class="markdownIt-Anchor" href="#技巧"></a> 技巧</h2><ul><li><p><code>join()</code></p><ul><li><code>print(''.join(list))</code>直接输出将列表拼接成字符串的结果<ul><li>list存储的是字符，例如list = [‘a’,‘c’,‘r’]</li><li>本意为隔一个’‘输出list的一个值，由于’'中间没有间隔，则即直接将list进行拼接</li></ul></li></ul></li><li><p><code>flag = key.split(' ')</code></p><ul><li>将字符key切割为列表类型，分界线为 <code>' '</code></li></ul></li><li><p><code>key = [i for i in range(10)]</code></p><ul><li><code>key</code>初始化——遍历 <code>i</code>，同时将i赋值给key[i]</li></ul></li></ul><h1 id="crypto库"><a class="markdownIt-Anchor" href="#crypto库"></a> Crypto库</h1><h2 id="utilnumber"><a class="markdownIt-Anchor" href="#utilnumber"></a> Util.number</h2><ul><li><p><code>bytes_to_long</code>与 <code>long_to_bytes</code></p><ul><li><code>bytes_to_long</code>将字节流转换位long类型数字，即最后一位字符转为ASCii之后乘以2<code>&lt;sup&gt;</code>0<code>&lt;/sup&gt;</code>, 往前的字符乘以2<code>&lt;sup&gt;</code>1<code>&lt;/sup&gt;</code>, 2<code>&lt;sup&gt;</code>2<code>&lt;/sup&gt;</code>……</li><li><code>long_to_bytes</code>将long类型数字转换为bytes类型，是 <code>bytes_to_long</code>的逆运算</li></ul></li><li><p><code>getPrime(n_lebgth)</code></p><ul><li>反复使用素性检测算法验证以获素随机数,其长度为2<code>&lt;sup&gt;</code>n<code>&lt;/sup&gt;</code></li></ul></li><li><p><code>getStrongPrime(n_lebgth)</code></p><ul><li>获得满足RSA要求的大素数</li></ul></li><li><p><code>inverse(a,n)</code></p><ul><li>求a模n的逆元</li><li>对于正整数 a, n，如果有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>x</mi><mo>≡</mo><mn>1</mn><mtext> </mtext><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ax ≡ 1 \ (mod \ n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，则称 x 的最小正整数解为 a 模 n的逆元</li></ul></li><li><p><code>getRandomNBitInteger(N)</code></p><ul><li>获得N比特的随机数(也就是保证最高位非0，且长度为2<code>&lt;sup&gt;</code>N<code>&lt;/sup&gt;</code>)</li></ul></li><li><p><code>gad(a,b)</code></p><ul><li>获得a与b的最大公约数</li></ul></li></ul><h1 id="算法原理"><a class="markdownIt-Anchor" href="#算法原理"></a> 算法原理</h1><h2 id="base64"><a class="markdownIt-Anchor" href="#base64"></a> Base64</h2><h3 id="算法原理-2"><a class="markdownIt-Anchor" href="#算法原理-2"></a> 算法原理</h3><ul><li>原理：使用64个可打印字符表示二进制所有数据的方法。这里由于 $ 2^6 = 64$ ，则使用 6 个位元作为一个单元，对应一个可打印字符。那么可以使用 3 个字节来对应 4 个 Base64 的可打印字符来表示。</li><li>Base64的可打印字符包括 字母 <strong>A-Z</strong> 、<strong>a-z</strong>，数字 <strong>0-9</strong>、和 “ +/ ” 一共 64 个可打印字符</li><li>转换规则：</li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202304031958591.png" alt="image-20230403195843560" /></p><h3 id="算法实现"><a class="markdownIt-Anchor" href="#算法实现"></a> 算法实现</h3><h4 id="base32与base16"><a class="markdownIt-Anchor" href="#base32与base16"></a> base32与base16</h4><ul><li><code>b32encode(bytes)</code>与 <code>b32decode()</code><ul><li>bytes必须是由str类型经过str.encode()转换而得来</li></ul></li><li><code>b32hexencode(bytes)</code>与 <code>b32hexdecode()</code><ul><li>与上面的相同</li></ul></li><li><code>b16</code>与 <code>b32</code>相同</li></ul><h4 id="base64-2"><a class="markdownIt-Anchor" href="#base64-2"></a> base64</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br>encrypt = base64.b64encode(<span class="hljs-string">&#x27;AlwaysBeta&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-comment"># Python3 中字符都是 unicode 编码，而 b64encode函数的参数为 byte 类型，所以必须先转码</span><br>decrypt = base64.b64decode(a)<br><br><span class="hljs-comment"># 换表解密</span><br>new_table = <span class="hljs-string">&quot;ABCDEFQRSTUVWXYPGHIJKLMNOZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br>old_table = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br>cipher = <span class="hljs-string">&quot;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&quot;</span>.swapcase()<br><span class="hljs-comment">#swapcase是大小写转化，大写转小写等</span><br><span class="hljs-built_in">print</span>(base64.b64decode(cipher.translate(<span class="hljs-built_in">str</span>.maketrans(new_table, old_table))))<br></code></pre></td></tr></table></figure><h2 id="rc4"><a class="markdownIt-Anchor" href="#rc4"></a> RC4</h2><blockquote><pre><code class="hljs">RC4的最终实现还是使用构造出来的盒子和你的输入进行异或，那么可以直接动调找到那个盒子，记录盒子的值，直接和最后比对的数据进行异或就可以得到flag。</code></pre></blockquote><h3 id="算法原理-3"><a class="markdownIt-Anchor" href="#算法原理-3"></a> 算法原理</h3><ul><li><p>原理：<strong>对明文使用同一个密钥异或两次最后仍是得到原文</strong>。</p><ul><li>即生成密钥之后，由密钥与明文异或后生成密文(加密过程)，由同一密钥与密文异或后得到明文 (解密过程)</li></ul></li><li><p>过程：</p><ol><li>初始化状态向量S(256个字节)</li><li>初始化密钥得到向量T(256个字节)，初始化就是将密钥轮换填充到T中</li><li>对向量S进行置换操作</li><li>密钥流的生成和加密(最后依旧是S异或明文生成密文)</li></ol></li></ul><h3 id="算法实现-2"><a class="markdownIt-Anchor" href="#算法实现-2"></a> 算法实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ARC4 <span class="hljs-keyword">as</span> rc4cipher<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4</span>(<span class="hljs-params">pattern, data, key1</span>):<br>    <span class="hljs-keyword">if</span> pattern == <span class="hljs-string">&quot;encrypt&quot;</span>:<br>        key = <span class="hljs-built_in">bytes</span>(key1, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        enc = rc4cipher.new(key)<br>        res = enc.encrypt(data.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>        res=base64.b64encode(res)<br>        res = <span class="hljs-built_in">str</span>(res,<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">elif</span> pattern == <span class="hljs-string">&quot;decrypt&quot;</span>:<br>        data = base64.b64decode(data)<br>        key = <span class="hljs-built_in">bytes</span>(key1, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        enc = rc4cipher.new(key)<br>        res = enc.decrypt(data)<br>        res = <span class="hljs-built_in">str</span>(res,<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>        <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    data = <span class="hljs-string">&#x27;测试&#x27;</span><br>    key = <span class="hljs-string">&#x27;l2ru8181z&#x27;</span><br>  <br>    encrypt = rc4(<span class="hljs-string">&#x27;encrypt&#x27;</span>,data,key)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;加密的结果：<span class="hljs-subst">&#123;encrypt&#125;</span>&quot;</span>)<br>    decrypt = rc4(<span class="hljs-string">&#x27;decrypt&#x27;</span>, encrypt, key)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;解密的结果：<span class="hljs-subst">&#123;decrypt&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="tea"><a class="markdownIt-Anchor" href="#tea"></a> TEA</h2><h3 id="算法原理-4"><a class="markdownIt-Anchor" href="#算法原理-4"></a> 算法原理</h3><p><a href="https://taardisaa.github.io/2021/09/24/TEA/">TEA，XTEA，XXTEA加密算法概要</a></p><ul><li><p>关于TEA的一点心得</p><ol><li><p>解密时需要准确判断sum的状态(最后sum的数值是多少，要把它放在什么位置)</p></li><li><p>数据可以直接使用IDA伪代码里提供的数据，不需要再进行小端序转换(汇编需要用lazyida插件)。不过最后的时候需要每4个字节从后往前进行拼接</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">(ut32* m, ut32 n)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%08x &quot;</span>, m[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; len;j++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">3</span>; k &gt;= <span class="hljs-number">0</span>; k --)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,((m[j]&gt;&gt;( <span class="hljs-number">8</span> * k )) &amp; <span class="hljs-number">0xff</span>));<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>python实现也需要将每个 <code>int</code> 类型从而往前转化为字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">result = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>):<br>    result += <span class="hljs-built_in">chr</span>((res[i]) &amp; <span class="hljs-number">0xff</span>)<br>    result += <span class="hljs-built_in">chr</span>((res[i] &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span>)<br>    result += <span class="hljs-built_in">chr</span>((res[i] &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span>)<br>    result += <span class="hljs-built_in">chr</span>((res[i] &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure></li><li><p>python还可以使用内置函数进行操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">res = decrypt(n, v, k)<span class="hljs-comment"># res为数组</span><br>    <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> res:<br>        <span class="hljs-built_in">print</span>(r.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;little&#x27;</span>).decode(), end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment"># 参考 DASCTF &amp; CBCTF 2023 auuuu3的Exp</span><br><span class="hljs-comment"># 这里libnum.n2s()也可以转换，但是它是逆序输出，需要转换一下      </span><br></code></pre></td></tr></table></figure></li><li><p>python使用struct进行转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">res = [<span class="hljs-number">1767863401</span>, <span class="hljs-number">1700945779</span>, <span class="hljs-number">1633644133</span>, <span class="hljs-number">1852795999</span>, <span class="hljs-number">1633967975</span>, <span class="hljs-number">1769430905</span>, <span class="hljs-number">1970235508</span>, <span class="hljs-number">1870225268</span>, <span class="hljs-number">2037210997</span>, <span class="hljs-number">1769104991</span>, <span class="hljs-number">6581861</span>, <span class="hljs-number">0</span>]<br>result = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(res)):<br>        result += struct.pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, res[i]).decode(<span class="hljs-string">&#x27;ISO-8859-1&#x27;</span>) <span class="hljs-comment"># &lt;I为小端序，&gt;I为大端序。ISO-8859-1是转化字符为指定编码格式</span><br>    <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure></li></ol></li></ul><h3 id="算法实现-3"><a class="markdownIt-Anchor" href="#算法实现-3"></a> 算法实现</h3><h4 id="tea-2"><a class="markdownIt-Anchor" href="#tea-2"></a> Tea</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">v, k</span>):<br>    v0, v1 = c_uint32(v[<span class="hljs-number">0</span>]), c_uint32(v[<span class="hljs-number">1</span>])<br>    delta = <span class="hljs-number">0x9e3779b9</span> <br>    k0, k1, k2, k3 = k[<span class="hljs-number">0</span>], k[<span class="hljs-number">1</span>], k[<span class="hljs-number">2</span>], k[<span class="hljs-number">3</span>]<br><br>    total = c_uint32(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        total.value += delta <br>        v0.value += ((v1.value&lt;&lt;<span class="hljs-number">4</span>) + k0) ^ (v1.value + total.value) ^ ((v1.value&gt;&gt;<span class="hljs-number">5</span>) + k1)  <br>        v1.value += ((v0.value&lt;&lt;<span class="hljs-number">4</span>) + k2) ^ (v0.value + total.value) ^ ((v0.value&gt;&gt;<span class="hljs-number">5</span>) + k3)<br><br>    <span class="hljs-keyword">return</span> v0.value, v1.value <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">v, k</span>):<br>    v0, v1 = c_uint32(v[<span class="hljs-number">0</span>]), c_uint32(v[<span class="hljs-number">1</span>])<br>    delta = <span class="hljs-number">0x9e3779b9</span> <br>    k0, k1, k2, k3 = k[<span class="hljs-number">0</span>], k[<span class="hljs-number">1</span>], k[<span class="hljs-number">2</span>], k[<span class="hljs-number">3</span>]<br><br>    total = c_uint32(delta * <span class="hljs-number">32</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):                     <br>        v1.value -= ((v0.value&lt;&lt;<span class="hljs-number">4</span>) + k2) ^ (v0.value + total.value) ^ ((v0.value&gt;&gt;<span class="hljs-number">5</span>) + k3) <br>        v0.value -= ((v1.value&lt;&lt;<span class="hljs-number">4</span>) + k0) ^ (v1.value + total.value) ^ ((v1.value&gt;&gt;<span class="hljs-number">5</span>) + k1)  <br>        total.value -= delta<br><br>    <span class="hljs-keyword">return</span> v0.value, v1.value   <br>  <br><span class="hljs-comment"># test</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 待加密的明文，两个32位整型，即64bit的明文数据</span><br>    value = [<span class="hljs-number">0x12345678</span>, <span class="hljs-number">0x78563412</span>]<br>    <span class="hljs-comment"># 四个key，每个是32bit，即密钥长度为128bit</span><br>    key = [<span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x4</span>]<br>  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Data is : &quot;</span>, <span class="hljs-built_in">hex</span>(value[<span class="hljs-number">0</span>]), <span class="hljs-built_in">hex</span>(value[<span class="hljs-number">1</span>]))  <br>    res = encrypt(value, key)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Encrypted data is : &quot;</span>, <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">0</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">1</span>]))<br>    res = decrypt(res, key)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted data is : &quot;</span>, <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">0</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">1</span>]))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Data is :  0x12345678 0x78563412</span><br><span class="hljs-string">Encrypted data is :  0x9a65a69a 0x67ed00f6</span><br><span class="hljs-string">Decrypted data is :  0x12345678 0x78563412</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="xtea"><a class="markdownIt-Anchor" href="#xtea"></a> xTea</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> * <br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">v, key</span>):   <br>    v0, v1 = c_uint32(v[<span class="hljs-number">0</span>]), c_uint32(v[<span class="hljs-number">1</span>])<br>    delta = <span class="hljs-number">0x9E3779B9</span><br><br>    total = c_uint32(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):  <br>        v0.value += (((v1.value &lt;&lt; <span class="hljs-number">4</span>) ^ (v1.value &gt;&gt; <span class="hljs-number">5</span>)) + v1.value) ^ (total.value + key[total.value &amp; <span class="hljs-number">3</span>])<br>        total.value += delta <br>        v1.value += (((v0.value &lt;&lt; <span class="hljs-number">4</span>) ^ (v0.value &gt;&gt; <span class="hljs-number">5</span>)) + v0.value) ^ (total.value + key[(total.value&gt;&gt;<span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>])<br><br>    <span class="hljs-keyword">return</span> v0.value, v1.value <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">v, key</span>):<br>    v0, v1  = c_uint32(v[<span class="hljs-number">0</span>]), c_uint32(v[<span class="hljs-number">1</span>])<br>    delta = <span class="hljs-number">0x9E3779B9</span><br>  <br>    total = c_uint32(delta * <span class="hljs-number">32</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        v1.value -= (((v0.value &lt;&lt; <span class="hljs-number">4</span>) ^ (v0.value &gt;&gt; <span class="hljs-number">5</span>)) + v0.value) ^ (total.value + key[(total.value&gt;&gt;<span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>])<br>        total.value -= delta <br>        v0.value -= (((v1.value &lt;&lt; <span class="hljs-number">4</span>) ^ (v1.value &gt;&gt; <span class="hljs-number">5</span>)) + v1.value) ^ (total.value + key[total.value &amp; <span class="hljs-number">3</span>])<br><br>    <span class="hljs-keyword">return</span> v0.value, v1.value <br>  <br><span class="hljs-comment"># test</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 待加密的明文，两个32位整型，即64bit的明文数据</span><br>    value = [<span class="hljs-number">0x12345678</span>, <span class="hljs-number">0x78563412</span>]<br>    <span class="hljs-comment"># 四个key，每个是32bit，即密钥长度为128bit</span><br>    key = [<span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x4</span>]<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Data is : &quot;</span>, <span class="hljs-built_in">hex</span>(value[<span class="hljs-number">0</span>]), <span class="hljs-built_in">hex</span>(value[<span class="hljs-number">1</span>]))<br>    res = encrypt(value, key)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Encrypted data is : &quot;</span>, <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">0</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">1</span>]))<br>    res = decrypt(res, key)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted data is : &quot;</span>, <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">0</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">1</span>]))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Data is :  0x12345678 0x78563412</span><br><span class="hljs-string">Encrypted data is :  0xae685ec7 0x59af4238</span><br><span class="hljs-string">Decrypted data is :  0x12345678 0x78563412</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="xxtea"><a class="markdownIt-Anchor" href="#xxtea"></a> xxTea</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">MX</span>(<span class="hljs-params">z, y, total, key, p, e</span>):<br>    temp1 = (z.value&gt;&gt;<span class="hljs-number">5</span> ^ y.value&lt;&lt;<span class="hljs-number">2</span>) + (y.value&gt;&gt;<span class="hljs-number">3</span> ^ z.value&lt;&lt;<span class="hljs-number">4</span>)<br>    temp2 = (total.value ^ y.value) + (key[(p&amp;<span class="hljs-number">3</span>) ^ e.value] ^ z.value)<br>  <br>    <span class="hljs-keyword">return</span> c_uint32(temp1 ^ temp2)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">n, v, key</span>):<br>    delta = <span class="hljs-number">0x9e3779b9</span> <br>    rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span>//n<br><br>    total = c_uint32(<span class="hljs-number">0</span>)<br>    z = c_uint32(v[n-<span class="hljs-number">1</span>])<br>    e = c_uint32(<span class="hljs-number">0</span>)<br>  <br>    <span class="hljs-keyword">while</span> rounds &gt; <span class="hljs-number">0</span>:<br>        total.value += delta  <br>        e.value = (total.value &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span><br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<br>            y = c_uint32(v[p+<span class="hljs-number">1</span>])<br>            v[p] = c_uint32(v[p] + MX(z,y,total,key,p,e).value).value<br>            z.value = v[p]<br>        y = c_uint32(v[<span class="hljs-number">0</span>])<br>        v[n-<span class="hljs-number">1</span>] = c_uint32(v[n-<span class="hljs-number">1</span>] + MX(z,y,total,key,n-<span class="hljs-number">1</span>,e).value).value<br>        z.value = v[n-<span class="hljs-number">1</span>]<br>        rounds -= <span class="hljs-number">1</span> <br><br>    <span class="hljs-keyword">return</span> v<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">n, v, key</span>):<br>    delta = <span class="hljs-number">0x9e3779b9</span><br>    rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span>//n <br>  <br>    total = c_uint32(rounds * delta)<br>    y = c_uint32(v[<span class="hljs-number">0</span>])<br>    e = c_uint32(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">while</span> rounds &gt; <span class="hljs-number">0</span>:<br>        e.value = (total.value &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span><br>        <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>            z = c_uint32(v[p-<span class="hljs-number">1</span>])<br>            v[p] = c_uint32((v[p] - MX(z,y,total,key,p,e).value)).value<br>            y.value = v[p]<br>        z = c_uint32(v[n-<span class="hljs-number">1</span>])  <br>        v[<span class="hljs-number">0</span>] = c_uint32(v[<span class="hljs-number">0</span>] - MX(z,y,total,key,<span class="hljs-number">0</span>,e).value).value<br>        y.value = v[<span class="hljs-number">0</span>]  <br>        total.value -= delta<br>        rounds -= <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> v <br><br><br><span class="hljs-comment">#  test  </span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br><span class="hljs-comment"># 该算法中每次可加密不只64bit的数据，并且加密的轮数由加密数据长度决定</span><br>    v = [<span class="hljs-number">0x12345678</span>, <span class="hljs-number">0x78563412</span>]<br>    k = [<span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x4</span>]<br>    n = <span class="hljs-number">2</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Data is : &quot;</span>, <span class="hljs-built_in">hex</span>(v[<span class="hljs-number">0</span>]), <span class="hljs-built_in">hex</span>(v[<span class="hljs-number">1</span>]))<br>    res = encrypt(n, v, k)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Encrypted data is : &quot;</span>, <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">0</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">1</span>]))<br>    res = decrypt(n, res, k)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted data is : &quot;</span>, <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">0</span>]), <span class="hljs-built_in">hex</span>(res[<span class="hljs-number">1</span>]))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Data is :  0x12345678 0x78563412</span><br><span class="hljs-string">Encrypted data is :  0xef86c2bb 0x25f31b5e</span><br><span class="hljs-string">Decrypted data is :  0x12345678 0x78563412</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="md5"><a class="markdownIt-Anchor" href="#md5"></a> MD5</h2><h3 id="算法原理-5"><a class="markdownIt-Anchor" href="#算法原理-5"></a> 算法原理</h3><p><a href="https://blog.csdn.net/hawinlolo/article/details/94464237">MD5 加密算法详解</a></p><h3 id="算法实现-4"><a class="markdownIt-Anchor" href="#算法实现-4"></a> 算法实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br>obj = hashlib.md5()<br><span class="hljs-comment"># 构造一个hashlib的对象(obj)，此处的 md5 可以替换为SHA1, SHA224, SHA256, SHA384, SHA512等加密算法</span><br>obj.update(<span class="hljs-string">&quot;使用md5加密&quot;</span>.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><span class="hljs-comment"># update对指定字符串进行加密，但加密前需要对数据进行转码为 byte 类型</span><br>result = obj.hexdigest()<br><span class="hljs-comment"># 这里hexdigest与digest相同，使用二进制表示(实际转化为十六进制形式表示)</span><br><span class="hljs-built_in">print</span>(result)<br> <br><span class="hljs-comment"># 也可以不创建对象，直接进行加密</span><br>obj = hashlib.sha1(<span class="hljs-string">&quot;1231231231&quot;</span>.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br></code></pre></td></tr></table></figure><h2 id="aes"><a class="markdownIt-Anchor" href="#aes"></a> AES</h2><p><a href="https://blog.csdn.net/chouzhou9701/article/details/122019967">python实现AES加密解密</a></p><p>补充：这里还涉及到White box AES的问题，详细看博客中另一篇文章[白盒AES分析]</p>]]></content>
    
    
    <categories>
      
      <category>逆向笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>汇编基础</title>
    <link href="/posts/84aee333.html"/>
    <url>/posts/84aee333.html</url>
    
    <content type="html"><![CDATA[<h1 id="进制"><a class="markdownIt-Anchor" href="#进制"></a> 进制</h1><h2 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义：</h2><ul><li>N进制指逢N进1的一系列符号</li></ul><h2 id="进制之间的关系"><a class="markdownIt-Anchor" href="#进制之间的关系"></a> 进制之间的关系</h2><h3 id="0d-0x"><a class="markdownIt-Anchor" href="#0d-0x"></a> 0d -&gt; 0x</h3><table border="1">  <tr>    <td>二进制</td>    <td>0</td>    <td>1</td>    <td>10</td>    <td>11</td>    <td>100</td>    <td>101</td>    <td>110</td>    <td>111</td>  </tr>  <tr>    <td>十六进制</td>    <td>0</td>    <td>1</td>    <td>2</td>    <td>3</td>    <td>4</td>    <td>5</td>    <td>6</td>    <td>7</td>  </tr>  <tr>    <td>二进制</td>    <td>1000</td>    <td>1001</td>    <td>1010</td>    <td>1011</td>    <td>1100</td>    <td>1101</td>    <td>1110</td>    <td>1111</td>  </tr>  <tr>    <td>十六进制</td>    <td>8</td>    <td>9</td>    <td>A</td>    <td>B</td>    <td>C</td>    <td>D</td>    <td>E</td>    <td>F</td>  </tr></table><h3 id="八进制"><a class="markdownIt-Anchor" href="#八进制"></a> 八进制</h3><ul><li>八进制加法表</li></ul><table border="1">  <tr>    <td>1 + 1 = 2</td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 + 2 = 3</td>    <td>2 + 2 = 4</td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 + 3 = 4</td>    <td>2 + 3 = 5</td>    <td>3 + 3 = 6</td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 + 4 = 5</td>    <td>2 + 4 = 6</td>    <td>3 + 4 = 7</td>    <td>4 + 4 = 10</td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 + 5 = 6</td>    <td>2 + 5 = 7</td>    <td>3 + 5 = 10</td>    <td>4 + 5 = 11</td>    <td>5 + 5 = 12</td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 + 6 = 7</td>    <td>2 + 6 = 10</td>    <td>3 + 6 = 11</td>    <td>4 + 6 = 12</td>    <td>5 + 6 = 13</td>    <td>6 + 6 = 14</td>    <td></td>  </tr>  <tr>    <td>1 + 7 = 10</td>    <td>2 + 7 = 11</td>    <td>3 + 7 = 12</td>    <td>4 + 7 = 13</td>    <td>5 + 7 = 14</td>    <td>6 + 7 = 15</td>    <td>7 + 7 = 16</td>  </tr></table><ul><li>八进制乘法表</li></ul><table border="1">  <tr>    <td>1 * 1 = 1</td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 * 2 = 2</td>    <td>2 * 2 = 4</td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 * 3 = 3</td>    <td>2 * 3 = 6</td>    <td>3 * 3 = 11</td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 * 4 = 4</td>    <td>2 * 4 = 10</td>    <td>3 * 4 = 14</td>    <td>4 * 4 = 20</td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 * 5 = 5</td>    <td>2 * 5 = 12</td>    <td>3 * 5 = 17</td>    <td>4 * 5 = 24</td>    <td>5 * 5 = 31</td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 * 6 = 6</td>    <td>2 * 6 = 14</td>    <td>3 * 6 = 22</td>    <td>4 * 6 = 30</td>    <td>5 * 6 = 36</td>    <td>6 * 6 = 44</td>    <td></td>  </tr>  <tr>    <td>1 * 7 = 7</td>    <td>2 * 7 = 16</td>    <td>3 * 7 = 25</td>    <td>4 * 7 = 34</td>    <td>5 * 7 = 43</td>    <td>6 * 7 = 52</td>    <td>7 * 7 = 61</td>  </tr></table><hr /><h1 id="数据宽度与逻辑运算"><a class="markdownIt-Anchor" href="#数据宽度与逻辑运算"></a> 数据宽度与逻辑运算</h1><h2 id="数据宽度"><a class="markdownIt-Anchor" href="#数据宽度"></a> 数据宽度</h2><ul><li><p>字节/字(8bit)——可存储两个十六进制—8位二进制，例如FF</p><ul><li>十六进制占4位</li></ul></li><li><p>补：</p><ul><li>补码每一位取反加1为原码</li><li>原码每一位取反加1为补码</li></ul></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291118937.png" alt="202210031849487" /></p><h2 id="逻辑运算"><a class="markdownIt-Anchor" href="#逻辑运算"></a> 逻辑运算</h2><ul><li>在最底层中计算<span class="label label-primary">2 + 3 = 5</span><ul><li><p>先转换为二进制，0010赋值为X，0011赋值为Y</p></li><li><p>之后将X与Y进行xor与and，若and之后的结果左移一位后有一位不为0，则把xor的结果赋值为X，and的结果赋值为Y，再进行计算</p></li><li><p>若最后and的结果左移一位之后每一位都为0，那么xor就是最后的结果</p><div class="note note-info">            <p>一个数进行了两次异或还是它本身</p>          </div></li></ul></li></ul><h1 id="寄存器与内存"><a class="markdownIt-Anchor" href="#寄存器与内存"></a> 寄存器与内存</h1><h2 id="区别"><a class="markdownIt-Anchor" href="#区别"></a> 区别</h2><ul><li><p>1、寄存器位于CPU内部,执行速度快，但比较贵</p></li><li><p>2、内存速度相对较慢,但成本较低，所以可以做的很大</p></li><li><p>3、寄存器和内存没有本质区别,都是用于存储数据的容器,都是定宽的</p></li><li><p>4、寄存器常用的共8个：EAX,EBX,ECX,EDX,ESP,EBP,ESI,EDI</p></li><li><p>5、计算机中的几个常用的计量单位：BYTE,WORD,DWORD</p><ul><li><p>BYTE——字节——8(BIT)</p></li><li><p>WORD——字——16(BIT)</p></li><li><p>DWORD——双字——32(BIT)</p></li></ul>   <div class="note note-info">            <p>1 KB  =  1024 BYTE,<br />1 MB  =  1024 KB,<br />1 GB  =  1024 MB</p>          </div></li><li><p>6、内存的数量特别庞大，无法对每个内存单位都起一个名字，所以用编号代替，我们称计算机CPU32位或者64位</p><ul><li>计算机内存的每一个字节会有一个编号(即内存编号的单位是字节)<ul><li>如：<span class="label label-primary">0x00000000，0x00000001…… 0xFFFFFFFF</span></li></ul></li><li>32位计算机的编号最大是32位,也就是32个1,换成16进制为FFFFFFFF,也就是说,32位计算机内存寻址的最大范围是32位.而内存的单位是字节,那内存中能存储的信息最多位FFFFFFFF + 1字节,即4G(可以打补丁等进行扩展)</li></ul></li></ul><h2 id="内存"><a class="markdownIt-Anchor" href="#内存"></a> 内存</h2><ul><li><p>内存格式</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291118828.png" alt="202210032015464" /></p><ul><li>编号加<code>[]</code>表示这是内存编号，否则就是立即数</li><li>往往将多个字节连在一起命名为一个编号，这就导致一个编号(包含了4个字节的内存空间)可以存储32位</li></ul></li><li><p>从指定内存中写入/读取数据</p><ul><li><code>mov dword ptr ds:[0x0012FF34], 0x12345678</code>(mov是移动数据)<ul><li>遵循高位在后原则，即<code>[0x0012FF34]</code>对应的是78，而下一位<code>[0x0012FF35]</code>则是对应56(一个字节是8位，即两个十六进制数为一组)，同时这个就是将4个字节组成了一个内存空间并命名</li></ul></li><li><code>mov eax, dword ptr ds:[0x0012FF34]</code><ul><li><code>dword</code>：要读\写多少  此时是4字节，byte = 1字节，word = 2字节</li><li><code>ptr</code>: Point代表后面是一个指针(存的不是值，而是地址)</li><li><code>ds</code>：段寄存器</li><li><code>[0x0012FF34]</code>：内存编号，必须是32位，前面的0可以省略，会自动补0<ul><li>这是一个地址编号，相当于指针</li></ul></li></ul></li><li>注意：<ul><li>地址编号不要随便写，因为内存是由保护的，并不是所有的内存都可以直接读写(需要特别处理)，建议地址编号写成esp的值</li></ul></li></ul></li></ul><h2 id="通用寄存器"><a class="markdownIt-Anchor" href="#通用寄存器"></a> 通用寄存器</h2><h3 id="类别"><a class="markdownIt-Anchor" href="#类别"></a> 类别</h3><table><thead><tr><th>32位寄存器</th><th>16位寄存器</th><th>8位寄存器</th></tr></thead><tbody><tr><td>EAX</td><td>AX</td><td>AH    AL</td></tr><tr><td>EBX</td><td>BX</td><td>BH    BL</td></tr><tr><td>ECX</td><td>CX</td><td>CH    CL</td></tr><tr><td>EDX</td><td>DX</td><td>DH    DL</td></tr><tr><td>ESP</td><td>SP</td><td></td></tr><tr><td>EBP</td><td>BP</td><td></td></tr><tr><td>ESI</td><td>SI</td><td></td></tr><tr><td>EDI</td><td>DI</td><td></td></tr></tbody></table><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291119557.png" alt="202210031849381" /></p><blockquote><p>AX为EAX的低位</p><p>AH为AX的高位，AL为AX的低位</p></blockquote><h3 id="32位寄存器"><a class="markdownIt-Anchor" href="#32位寄存器"></a> 32位寄存器</h3><table><thead><tr><th>寄存器</th><th>主要用途</th><th>存储数据的范围</th></tr></thead><tbody><tr><td>EAX</td><td>累加器</td><td>0 – 0xFFFFFFFF</td></tr><tr><td>ECX</td><td>计数</td><td>0 – 0xFFFFFFFF</td></tr><tr><td>EDX</td><td>I/O指针</td><td>0 – 0xFFFFFFFF</td></tr><tr><td>EBX</td><td>DS段的数据指针</td><td>0 – 0xFFFFFFFF</td></tr><tr><td>ESP</td><td>堆栈指针</td><td>0 – 0xFFFFFFFF</td></tr><tr><td>EBP</td><td>SS段的数据指针</td><td>0 – 0xFFFFFFFF</td></tr><tr><td>ESI</td><td>字符串操作的源指针；SS段的数据指针</td><td>0 – 0xFFFFFFFF</td></tr><tr><td>EDI</td><td>字符串操作的目标指针；ES段的数据指针</td><td>0 – 0xFFFFFFFF</td></tr></tbody></table><h2 id="标志寄存器"><a class="markdownIt-Anchor" href="#标志寄存器"></a> 标志寄存器</h2><p>EFLAGS寄存器</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291119091.png" alt="202210032027304" /></p><h3 id="进位标志cfcarry-flag"><a class="markdownIt-Anchor" href="#进位标志cfcarry-flag"></a> 进位标志CF(Carry Flag)</h3><ul><li>如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0(无符号运算，AL中看超没超过FF  )<ul><li>最高位进位——CF=1<ul><li><code>MOV AL, 0xFE</code></li><li><code>ADD AL,2</code></li></ul></li><li>最高位不进位——CF=0<ul><li><code>MOV AL,0xEF</code></li><li><code>ADD AL,2</code></li></ul></li></ul></li></ul><h3 id="奇偶标志pfparity-flag"><a class="markdownIt-Anchor" href="#奇偶标志pfparity-flag"></a> 奇偶标志PF(Parity Flag)</h3><ul><li>奇偶标志PF用于反映运算结果中“1”的个数的奇偶性，如果“1”的个数为偶数，则PF的值为1，否则其值为0——二进制中的1的个数</li><li>最低有效字节——**只看二进制中后8位 **<ul><li><code>MOV AL, 3</code>——PE不变</li><li><code>ADD AL, 3</code>——PE=1(6=110)</li><li><code>ADD AL, 2</code>——PE=0(8=1000)</li></ul></li></ul><h3 id="辅助进位标志afauxiliary-carry-flag"><a class="markdownIt-Anchor" href="#辅助进位标志afauxiliary-carry-flag"></a> 辅助进位标志AF(Auxiliary Carry Flag)</h3><ul><li>在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：<ul><li>(1)、在字操作时，发生低字节向高字节进位或借位时</li><li>(2)、在字节操作时，发生低4位向高4位进位或借位时</li></ul></li><li>例一：32位<ul><li><code>MOV EAX, 0x55EEFFFF</code></li><li><code>ADD EAX, 2</code></li></ul></li><li>例二：16位<ul><li><code>MOV AX, 5EFE</code></li><li><code>ADD AX, 2</code></li></ul></li><li>例三：8位<ul><li><code>MOV AL, 4E</code></li><li><code>ADD AL, 2</code></li></ul></li></ul><h3 id="零标志zfzero-flag"><a class="markdownIt-Anchor" href="#零标志zfzero-flag"></a> 零标志ZF(Zero Flag)</h3><ul><li>零标志ZF用来反映运算结果是否为0，如果运算结果(mov是赋值，不是运算结果)为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位<ul><li><code>XOR EAX, EAX</code>——ZF变成0</li><li><code>MOV EAX, 2</code>——ZF不变，与mov没有关系</li><li><code>SUB EAX, 2</code></li></ul></li></ul><h3 id="符号标志sfsign-flag"><a class="markdownIt-Anchor" href="#符号标志sfsign-flag"></a> 符号标志SF(Sign Flag)</h3><ul><li>符号标志SF用来反映运算结果的符号位，它与运算结果的最高位(转换为2进制的最高位)相同<ul><li><code>MOV AL, 7F</code>——0111 1111</li><li><code>ADD AL, 2</code>—进位了</li></ul></li></ul><h3 id="溢出标志ofoverflow-flag"><a class="markdownIt-Anchor" href="#溢出标志ofoverflow-flag"></a> 溢出标志OF(Overflow Flag)</h3><ul><li>溢出标志OF用于反映有符号数加减运算所得结果是否溢出</li><li>如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0</li></ul><h4 id="溢出"><a class="markdownIt-Anchor" href="#溢出"></a> 溢出</h4><ul><li>进位标志<code>CF</code>表示无符号数运算结果是否超出范围</li><li>溢出标志<code>OF</code>表示有符号数运算结果是否超出范围</li><li>溢出主要是给有符号运算使用的，在有符号的运算中，有如下的规律：<ul><li>正 + 正 = 正 如果结果是负数，则说明有溢出</li><li>负 + 负 = 负 如果结果是正数，则说明有溢出</li><li>正 + 负 永远都不会有溢出</li><li><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210031849487.png" alt="" /></li></ul></li><li>例子<ul><li>1、无符号、有符号都不溢出<ul><li><code>MOV AL,8</code></li><li><code>ADD AL,8</code></li></ul></li><li>2、无符号溢出、有符号不溢出<ul><li><code>MOV AL,0FF</code></li><li><code>ADD AL,2</code></li></ul></li><li>3、无符号不溢出、有符号溢出<ul><li><code>MOV AL,7F</code></li><li><code>ADD AL,2</code></li></ul></li><li>4、无符号、有符号都溢出<ul><li><code>MOV AL,0FE</code></li><li><code>ADD AL,80</code></li></ul></li></ul></li></ul><h4 id="进位判断"><a class="markdownIt-Anchor" href="#进位判断"></a> 进位判断</h4><ul><li><p>比如80-40</p><ul><li><code>mov al,80</code></li><li><code>sub al,40</code></li></ul></li><li><p>相当于</p><ul><li><code>mov al, 80</code></li><li><code>add al,0c0</code></li></ul><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291119729.png" alt="202210032041035" /></p><ul><li>符号有效位指最左边的那一位</li><li>最高有效数值位指符号位后一位</li></ul></li></ul><h1 id="汇编指令"><a class="markdownIt-Anchor" href="#汇编指令"></a> 汇编指令</h1><div class="note note-blue">            <p>r—表示通用寄存器<br />m—表示内存<br />imm—表示立即数</p>          </div><h2 id="数据传递指令"><a class="markdownIt-Anchor" href="#数据传递指令"></a> 数据传递指令</h2><h3 id="mov"><a class="markdownIt-Anchor" href="#mov"></a> <code>MOV</code></h3><ul><li>移动数据</li><li>MOV使用<ul><li><code>MOV 目标操作数 源操作数</code></li><li>作用：拷贝源操作数到目标操作数<ul><li>源操作数可以是立即数，通用寄存器，段寄存器，或者内存单元</li><li>目标操作数可以是通用寄存器，段寄存器或内存单元</li><li>操作数的宽度必须一样</li><li>源操作数和目标操作数不能同时为内存单元</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Assembly">MOV r/m8, r8     <br>MOV r/m16, r16<br>MOV r/m32, r32<br><br>MOV r8, r/m8<br>MOV r16, r/m16<br>MOV r32, r/m32<br><br>MOV r8, imm8<br>MOV r16, imm16<br>MOV r32, imm32<br></code></pre></td></tr></table></figure><h3 id="xchg"><a class="markdownIt-Anchor" href="#xchg"></a> <code>XCHG</code></h3><ul><li>交换数据</li><li>格式：<code>XCHG  R/M,R/M</code>  两边不能同时为内存  宽度要一样</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">XCHG AL, CL<br>XCHG DWORD PTR DS:[12FFC4], EAX<br>XCHG BYTE PTR DS:[12FFC4], AL<br></code></pre></td></tr></table></figure><h2 id="逻辑运算指令"><a class="markdownIt-Anchor" href="#逻辑运算指令"></a> 逻辑运算指令</h2><h3 id="andorxor"><a class="markdownIt-Anchor" href="#andorxor"></a> <code>AND,OR,XOR</code></h3><ul><li>和,或,异或运算</li><li>对每一<strong>位</strong>进行比较</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;AND/OR/XOR用法相同<br>AND AL, imm8<br>AND AX, imm16<br>AND EAX, imm32<br><br>AND r/m8, imm8     <br>AND r/m16, imm16<br>AND r/m32, imm32<br>  <br>AND r/m16, imm8<br>AND r/m32, imm8<br><br>AND r/m8, r8     <br>AND r/m16, r16<br>AND r/m32, r32<br><br>AND r8, r/m8<br>AND r16, r/m16<br>AND r32, r/m32<br></code></pre></td></tr></table></figure><h3 id="not"><a class="markdownIt-Anchor" href="#not"></a> <code>NOT</code></h3><ul><li>非运算</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">NOT r/m8<br>NOT r/m16<br>NOT r/m32<br></code></pre></td></tr></table></figure><h2 id="算术运算指令"><a class="markdownIt-Anchor" href="#算术运算指令"></a> 算术运算指令</h2><h3 id="运算指令"><a class="markdownIt-Anchor" href="#运算指令"></a> 运算指令</h3><h4 id="add与sub"><a class="markdownIt-Anchor" href="#add与sub"></a> <code>ADD与SUB</code></h4><ul><li>加减运算</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Assembly">ADD/SUB AL, imm8<br>ADD/SUB AX, imm16<br>ADD/SUB EAX, imm32<br><br>ADD/SUB r/m8, imm8     <br>ADD/SUB r/m16, imm16<br>ADD/SUB r/m32, imm32<br>  <br>ADD/SUB r/m16, imm8<br>ADD/SUB r/m32, imm8<br><br>ADD/SUB r/m8, r8     <br>ADD/SUB r/m16, r16<br>ADD/SUB r/m32, r32<br><br>ADD/SUB r8, r/m8<br>ADD/SUB r16, r/m16<br>ADD/SUB r32, r/m32<br></code></pre></td></tr></table></figure><h4 id="adc"><a class="markdownIt-Anchor" href="#adc"></a> <code>ADC</code></h4><ul><li>带进位加法：加法之后再加1</li><li>格式：<code>ADC  R/M,R/M/IMM</code>两边不能同时为内存  宽度要一样</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ADC AL,CL<br>ADC BYTE PTR DS:[12FFC4],2<br>ADC BYTE PTR DS:[12FFC4],AL<br></code></pre></td></tr></table></figure><h4 id="sbb"><a class="markdownIt-Anchor" href="#sbb"></a> <code>SBB</code></h4><ul><li>带借位减法：减法之后再减1</li><li>格式：<code>SBB  R/M,R/M/IMM</code>两边不能同时为内存  宽度要一样</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SBB AL, CL<br>SBB BYTE PTR DS:[12FFC4], 2<br>SBB BYTE PTR DS:[12FFC4], AL<br></code></pre></td></tr></table></figure><h4 id="inc与dec"><a class="markdownIt-Anchor" href="#inc与dec"></a> <code>INC与DEC</code></h4><ul><li><strong>INC</strong>加一指令，对于目的操作数进行加一操作</li><li><strong>DEC</strong>减一指令，对于目的操作数进行减一操作</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">INC REG/MEM<br>DEC REG/MEM<br></code></pre></td></tr></table></figure><h3 id="移位指令"><a class="markdownIt-Anchor" href="#移位指令"></a> 移位指令</h3><h4 id="算术移位指令"><a class="markdownIt-Anchor" href="#算术移位指令"></a> 算术移位指令</h4><ul><li><p>指令格式：SAL/SAR Reg/Mem, CL/Imm</p></li><li><p>SAL(Shift Arithmetic Left): 算术左移----末尾补0</p><p>SAR(Shift Arithmetic Right): 算术右移----考虑符号，最高位符号为1，则补1；反之补0</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SAL Reg/Mem, CL/Imm<br>SAR Reg/Mem, CL/Imm<br></code></pre></td></tr></table></figure><h4 id="逻辑移位指令"><a class="markdownIt-Anchor" href="#逻辑移位指令"></a> 逻辑移位指令</h4><ul><li><p>指令格式：SHL/SHR Reg/Mem, CL/Imm</p></li><li><p>SHL(Shift Left): 逻辑左移----末尾补0</p><p>SHR(Shift Right): 逻辑右移----最高位补1</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SHL Reg/Mem, CL/Imm<br>SHR Reg/Mem, CL/Imm<br></code></pre></td></tr></table></figure><h4 id="循环移位指令"><a class="markdownIt-Anchor" href="#循环移位指令"></a> 循环移位指令</h4><ul><li><p>指令格式：ROL r/m, i8 ；ROR r/m, CL</p></li><li><p>ROL(Rotate Left): 循环左移</p><p>ROR(Rotate Right): 循环右移</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ROL r/m, i8<br>ROR r/m, CL<br></code></pre></td></tr></table></figure><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291120603.png" alt="202301052011851" /></p><h4 id="带进位的循环移位指令"><a class="markdownIt-Anchor" href="#带进位的循环移位指令"></a> 带进位的循环移位指令</h4><ul><li><p>指令格式：RCL r/m, i8 ； RCR r/m, CL</p></li><li><p>RCL(Rotate through Carry Left): 带进位循环左移</p><p>RCR(Rotate through Carry Right): 带进位循环右移</p></li><li><p><code>将CF看成数据的一部分进行循环移位操作</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">RCL r/m, i8 <br>RCR r/m, CL<br></code></pre></td></tr></table></figure><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291121306.png" alt="202301052016625" /></p><h2 id="堆栈操作指令"><a class="markdownIt-Anchor" href="#堆栈操作指令"></a> 堆栈操作指令</h2><ul><li><strong>堆栈的内存分配是由高地址向低地址延申的</strong></li></ul><h3 id="堆栈数据操作指令"><a class="markdownIt-Anchor" href="#堆栈数据操作指令"></a> 堆栈数据操作指令</h3><h4 id="push与pop"><a class="markdownIt-Anchor" href="#push与pop"></a> <code>PUSH与POP</code></h4><ul><li><strong>PUSH</strong>将数据入栈，ESP寄存器指向的地址减4，将数据存入栈中</li><li><strong>POP</strong>将数据出栈，ESP寄存器指向的地址会先将数据取出，ESP寄存器指向的地址加4</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">PUSH REG/MEM/IMM<br>POP  REG/MEM<br></code></pre></td></tr></table></figure><h3 id="保存恢复通用寄存器"><a class="markdownIt-Anchor" href="#保存恢复通用寄存器"></a> 保存/恢复通用寄存器</h3><h4 id="pushad与popad"><a class="markdownIt-Anchor" href="#pushad与popad"></a> <code>PUSHAD与POPAD</code></h4><ul><li><strong>PUSHAD</strong>指令再堆栈上按顺序压入所有的32位通用寄存器，顺序依次是EAX，ECX，EDX，EBX，ESP，EBP，ESI，EDI</li><li><strong>POPAD</strong>指令以相反的顺序从堆栈中弹出这些通用寄存器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">PUSHAD<br>POPAD<br></code></pre></td></tr></table></figure><h3 id="保存恢复标志寄存器"><a class="markdownIt-Anchor" href="#保存恢复标志寄存器"></a> 保存/恢复标志寄存器</h3><h4 id="pushfd与popfd"><a class="markdownIt-Anchor" href="#pushfd与popfd"></a> <code>PUSHFD与POPFD</code></h4><ul><li><strong>PUSHFD</strong>压入32位的EFLAGS标志寄存器的值</li><li><strong>POPFD</strong>将堆栈顶部的值弹出并送至EFLAGS标志寄存器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">PUSHFD<br>POPFD<br></code></pre></td></tr></table></figure><h2 id="转移指令"><a class="markdownIt-Anchor" href="#转移指令"></a> 转移指令</h2><h3 id="无条件转移指令"><a class="markdownIt-Anchor" href="#无条件转移指令"></a> 无条件转移指令</h3><h4 id="jmp"><a class="markdownIt-Anchor" href="#jmp"></a> <code>JMP</code></h4><ul><li>修改EIP的值，不影响寄存器和堆栈<ul><li><code>JMP 寄存器/立即数/内存</code>——相当于<code>MOV EIP， 寄存器/立即数/内存</code></li></ul></li><li>EIP决定CPU的指向，执行完一条语句后，其根据内存地址，再加上内存地址存储的数值大小，推测出下一条语句的内存地址编号，进而确定了要执行的语句</li></ul><h3 id="条件转移指令"><a class="markdownIt-Anchor" href="#条件转移指令"></a> 条件转移指令</h3><ul><li>条件转移指令又称为JCC指令集，根据EFLAGS标志寄存器中不同的标志位决定如何进行跳转</li></ul><h4 id="gcc"><a class="markdownIt-Anchor" href="#gcc"></a> <code>GCC</code></h4><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">指令</th><th style="text-align:center">含义</th><th style="text-align:center">测试条件</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center"><code>JE,JZ</code></td><td style="text-align:center">结果为零则跳转(相等时跳转)</td><td style="text-align:center">ZF=1才跳转，否则直接步进到下一条指令</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center"><code>JNE,JNZ</code></td><td style="text-align:center">结果不为零则跳转(不相等时跳转)</td><td style="text-align:center">ZF=0</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center"><code>JS</code></td><td style="text-align:center">结果为负则跳转</td><td style="text-align:center">SF=1</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center"><code>JNS</code></td><td style="text-align:center">结果为非负则跳转</td><td style="text-align:center">SF=0</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center"><code>JP,JPE</code></td><td style="text-align:center">结果中1的个数为偶数则跳转</td><td style="text-align:center">PF=1</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center"><code>JNP,JPE</code></td><td style="text-align:center">结果中1的个数为偶数则跳转</td><td style="text-align:center">PF=0</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center"><code>JO</code></td><td style="text-align:center">结果溢出了则跳转</td><td style="text-align:center">OF=1</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center"><code>JNO</code></td><td style="text-align:center">结果没有溢出则跳转</td><td style="text-align:center">OF=0</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center"><code>JB,JNAE</code></td><td style="text-align:center">小于则跳转 (无符号数)</td><td style="text-align:center">CF=1</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center"><code>JNB,JAE</code></td><td style="text-align:center">大于等于则跳转 (无符号数)</td><td style="text-align:center">CF=0</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center"><code>JBE,JNA</code></td><td style="text-align:center">小于等于则跳转 (无符号数)</td><td style="text-align:center">CF=1 or ZF=1</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center"><code>JNBE,JA</code></td><td style="text-align:center">大于则跳转(无符号数)</td><td style="text-align:center">CF=0 and ZF=0</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center"><code>JL,JNGE</code></td><td style="text-align:center">小于则跳转 (有符号数)</td><td style="text-align:center">SF≠OF</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center"><code>JNL,JGE</code></td><td style="text-align:center">大于等于则跳转 (有符号数)</td><td style="text-align:center">SF=OF</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center"><code>JLE,JNG</code></td><td style="text-align:center">小于等于则跳转 (有符号数)</td><td style="text-align:center">ZF=1 or SF≠ OF</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center"><code>JNLE,JG</code></td><td style="text-align:center">大于则跳转(有符号数)</td><td style="text-align:center">ZF=0 and SF=OF</td></tr></tbody></table><ul><li>经常和GCC指令搭配</li><li>补充:<ul><li><code>Z</code>–ZF，<code>S</code>–SF，<code>P</code>–PF，<code>O</code>–OF</li><li><code>E</code>----Equit(相等的)</li><li><code>L</code>----Low(低的)，<code>B</code>----Below(下面)</li><li><code>N</code>----Not(非)</li></ul></li></ul><h4 id="test"><a class="markdownIt-Anchor" href="#test"></a> <code>TEST</code></h4><ul><li><strong>TEST</strong>用于对两个操作数进行逻辑与运算，结果不送入目的操作数但影响标志位 OF、SF、ZF、PF 和 CF</li><li>通常用于测试一些条件是否满足。常见用法：用这个指令,可以确定某寄存器是否等于0<ul><li><code>TEST EAX,EAX</code>——观察Z位</li><li>如果EAX的二进制某些位为1的话,那么运算的结果就不为零</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">Test reg, imm/reg/mem<br>Test mem, imm/reg<br></code></pre></td></tr></table></figure><h4 id="cmp"><a class="markdownIt-Anchor" href="#cmp"></a> <code>CMP</code></h4><ul><li><strong>CMP</strong>对两个操作数进行比较，比较的方式相当于用目的操作数减源操作数的减法操作，但是 cmp 只影响相应的标志寄存器，不会将减法的结果送入目的操作数中。影响的标志位有 OF、SF、ZF、AF、PF 和 CF</li><li>该指令是比较两个操作数,实际上,它相当于SUB指令,但是相减的结构并不保存到第一个操作数中，只是根据相减的结果 来改变零标志位(ZF)的,当两个操作数相等的时候,零标志位为1</li><li>例一：观察Z位<ul><li><code>MOV EAX, 100</code></li><li><code>MOV ECX, 100</code></li><li><code>CMP EAX,ECX</code>——Z位变成1</li></ul></li><li>例二：观察S位<ul><li><code>MOV EAX, 100</code></li><li><code>MOV ECX, 200</code></li><li><code>CMP EAX,ECX</code>——S位改变，则前一个数比后一个小</li></ul></li><li>例三：<ul><li><code>CMP AX,WORD PTR DS:[405000]</code></li><li><code>CMP AL,BYTE PTR DS:[405000]</code></li><li><code>CMP EAX,DWORD PTR DS:[405000]</code>——注意数据宽度</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">Cmp reg, imm/reg/mem<br>Cmp mem, imm/reg<br></code></pre></td></tr></table></figure><h2 id="循环指令"><a class="markdownIt-Anchor" href="#循环指令"></a> 循环指令</h2><h3 id="loop"><a class="markdownIt-Anchor" href="#loop"></a> <code>LOOP</code></h3><ul><li><strong>LOOP</strong>是循环控制指令，需要使用 ecx 寄存器来进行循环计数，当执行到 loop 指令时，先将 ecx 寄存器中的值减 1，如果 ecx 寄存器中的值大于 0，则转移到 loop 指令后的地址处，如果 ecx 寄存器中的值等于 0，则执行 loop 指令的下一条指令</li><li>在使用汇编语言编写代码的时候，loop 后面跟随一个标号，而在反汇编代码中 loop 指令后跟随一个地址值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">LOOP s<br>LOOP 00403020<br></code></pre></td></tr></table></figure><h2 id="调用和返回指令"><a class="markdownIt-Anchor" href="#调用和返回指令"></a> 调用和返回指令</h2><h3 id="call"><a class="markdownIt-Anchor" href="#call"></a> <code>CALL</code></h3><ul><li><p><strong>CALL</strong>与JMP相似，但是在修改 EIP 寄存器的值之前，会将 call 指令的下一条指令的地址保存至堆栈，以便在调用过程(函数)后再继续从 call 指令处执行</p></li><li><p>按F7可以进行跳转，之后若是jmp指令，可以按回车进行跳转</p><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291121868.png" alt="202210032042660" /></p><ul><li>由<code>4183DC</code>得到<code>4183E1</code>是由<code>4183DC</code>加上此段的字节数<code>E8 26000000</code>共5个字节</li><li>之后ESP-4，ESP存储的是<code>004183E1</code>，EIP = <code>00418407</code></li></ul></li><li><p><code>CALL 地址A/寄存器</code>——相当于<code>MOV EIP,地址A/寄存器   Push 下一行地址</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">call reg/mem/imm<br></code></pre></td></tr></table></figure><h3 id="ret"><a class="markdownIt-Anchor" href="#ret"></a> <code>RET</code></h3><ul><li><strong>RET</strong>用于过程(函数)的返回，该指令从堆栈的栈顶中弹出 4 个字节(这里的 4 个字节特指 32 位系统)送入 EIP 寄存器中。一般该指令在过程(函数)需要返回的位置或者是过程(函数)的结尾处</li><li>与CALL相结合，call 指令调用过程(函数)时会将 call 指令的下一条指令压入栈顶，当过程(函数)执<br />行中遇到 ret 指令时，会将 call 指令压入的指令弹出送入 EIP 寄存器中，这样代码的流程就会接着 call 指令的下一条指令继续执行</li><li>返回到call指令所处节点的下一个节点(上图中的<code>004183E1</code>)，即产生了回溯，同时退栈</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">Ret<br>Retn imm<br></code></pre></td></tr></table></figure><h3 id="retn"><a class="markdownIt-Anchor" href="#retn"></a> <code>RETN</code></h3><ul><li>相当于<code>POP EIP</code></li><li>将<code>ESP</code>指向内存地址的值弹出到<code>EIP</code>指令指针寄存器中</li><li>同时ESP+4</li></ul><div class="note note-info">            <p>RET指令不需要修正堆栈栈顶的位置直接返回，RETN指令则需要修正堆栈栈顶的位置后再进行返回</p>          </div> <h2 id="串操作指令"><a class="markdownIt-Anchor" href="#串操作指令"></a> 串操作指令</h2><h3 id="串传送指令"><a class="markdownIt-Anchor" href="#串传送指令"></a> 串传送指令</h3><h4 id="movs"><a class="markdownIt-Anchor" href="#movs"></a> <code>MOVS</code></h4><ul><li><p><strong>MOVS</strong>是借助 ESI 寄存器和 EDI 寄存器，把内存中源地址(ESI指向源地址)的数据送入内存的目的地址(EDI指向目的地址)中，MOVS 指令有 MOVSB、MOVSW 和 MOVSD 三种宽度。</p></li><li><p>在执行了 MOVS 指令后，ESI 寄存器和 EDI 寄存器指向的地址会自动增加或减少 1 个单位(与数据宽度对应)。增加与减少依赖 EFLAGS 标志寄存器的 DF 标志位进行控制。DF = 0，增加；反之减少。</p></li><li><p><a href="https://blog.csdn.net/longintchar/article/details/50949923">movsb,movsw,movsd指令</a></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;BYTE/WORD/DWORD<br>  MOVS BYTE PTR ES:[EDI],BYTE PTR DS:[ESI]  ;简写为：MOVSB<br>  MOVS WORD PTR ES:[EDI],BYTE PTR DS:[ESI]  ;简写为：MOVSW<br>  MOVS DWORD PTR ES:[EDI],BYTE PTR DS:[ESI] ;简写为：MOVSD<br>;例子<br> ;例一：<br>  MOV EDI,12FFD8<br>  MOV ESI,12FFD0<br>  MOVS DWORD PTR ES:[EDI],DWORD PTR DS:[ESI]  ;观察EDI的值<br> ;例二：修改标志寄存器中D位的值，然后在执行下面的指令：<br>  MOV EDI,12FFD8<br>  MOV ESI,12FFD0<br>  MOVS DWORD PTR ES:[EDI],DWORD PTR DS:[ESI]  ;观察EDI的值<br></code></pre></td></tr></table></figure><h3 id="串存储指令"><a class="markdownIt-Anchor" href="#串存储指令"></a> 串存储指令</h3><h4 id="stos"><a class="markdownIt-Anchor" href="#stos"></a> <code>STOS</code></h4><ul><li><strong>STOS</strong>是将 <code>AL/AX/EAX</code> 的值存储到 EDI 寄存器指向的内存单元。STOS 指令有 STOSB、STOSW 和 STOSD 三种宽度</li></ul><ol><li>[EDI]指向的内存单元——EDI存储的地址编号指向的地址内存</li><li>使用后EDI<code>+4/-4</code>，看EFLAGS寄存器<ol><li>DF = 0, EDI + 4</li><li>DF = 1, EDI - 4</li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">STOS BYTE PTR ES:[EDI]  ;简写为STOSB，会自动补全<br>STOS WORD PTR ES:[EDI]  ;简写为STOSW<br>STOS DWORD PTR ES:[EDI] ;简写为STOSD<br>;例子：<br>  ;例一：<br>  MOV EAX,12345678<br>  MOV EDI,12FFC4<br>  STOS BYTE/WORD/DWORD PTR ES:[EDI]<br>  ;例二：修改标志寄存器中D位的值，然后再执行下面的指令：<br>  MOV EAX,12345678<br>  MOV EDI,12FFC4<br>  STOS BYTE/WORD/DWORD PTR ES:[EDI]<br></code></pre></td></tr></table></figure><h3 id="重复前缀指令"><a class="markdownIt-Anchor" href="#重复前缀指令"></a> 重复前缀指令</h3><h4 id="rep"><a class="markdownIt-Anchor" href="#rep"></a> <code>REP</code></h4><ul><li><p><strong>REP</strong>通过配合 ECX 寄存器即可实现重复执行的操作，当执行一次 REP 指令时，ECX寄存器的值都会自动减 1，如果 ECX 寄存器的值不为 0 则重复执行，如果 ECX 寄存器的值为 0 则重复执行结束</p></li><li><p>ECX后面的数字为十六进制，需转化为十进制，再重复执行</p></li><li><p><code>注意</code>：其余寄存器后面的数字也是十六进制</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">MOV ECX,10<br>REP MOVSD<br>REP STOSD<br></code></pre></td></tr></table></figure><hr /><h2 id="内存寻址公式"><a class="markdownIt-Anchor" href="#内存寻址公式"></a> 内存寻址公式</h2><h3 id="立即数"><a class="markdownIt-Anchor" href="#立即数"></a> [立即数]</h3><ul><li>读取内存中的值：<ul><li><code>MOV EAX, DWORD PTR DS:[0x13FFC4]</code><ul><li>读取了C4,C5,C6,C7四个字节(因为是dword，从C4开始读取存进eax中)</li></ul></li><li><code>MOV EAX, DWORD PTR DS:[0x13FFC8]</code></li></ul></li><li>向内存中写入数据<ul><li><code>MOV DWORD PTR DS:[0x13FFC4], EAX</code></li><li><code>MOV DWORD PTR DS:[0x13FFC4], EBX</code></li></ul></li><li>获取内存编号<ul><li><code>LEA EAX, DWORD PTR DS:[0x13FFC4]</code></li><li><code>LEA EAX, DWORD PTR DS:[ESP+8]</code><ul><li>lea可以获取此时[ESP+8]位置上存储的内存地址编号，并赋值给eax</li></ul></li></ul></li></ul><h3 id="reg"><a class="markdownIt-Anchor" href="#reg"></a> [reg]</h3><ul><li>reg表示寄存器，可以是8个通用寄存器中的任意一个</li><li>读取内存的值<ul><li><code>MOV ECX, 0x13FFD0</code></li><li><code>MOV EAX, DWORD PTR DS:[ECX]</code><ul><li>此时<code>[ECX]</code>指将ecx的内容当作指针，指向对应的内存编号，取此内存的值赋值给eax,相当于<code>[ECX]</code>存取的是指针，取指针指向地址的值</li></ul></li></ul></li><li>向内存中写入数据<ul><li><code>MOV EDX, 0x13FFD8</code></li><li><code>MOV DWORD PTR DS:[ECX], 0X87654321</code></li></ul></li><li>获取内存编号<ul><li><code>LEA EAX, DWORD PTR DS:[EDX]</code><ul><li>获取的是内存的编号，即<code>[EDX]</code>存储的值</li></ul></li><li><code>MOV EAX, DWORD PTR DS:[EDX]</code><ul><li>获取的是存储的数据，即<code>[EDX]</code>存储的值(地址)指向的数据</li></ul></li></ul></li></ul><h3 id="reg-立即数"><a class="markdownIt-Anchor" href="#reg-立即数"></a> [reg + 立即数]</h3><ul><li>读取内存的值<ul><li><code>MOV ECX, 0x13FFD0</code></li><li><code>MOV EAX, DWORD PTR DS:[ECX+4]</code></li></ul></li><li>向内存中写入数据<ul><li><code>MOV EDX, 0x13FFD8</code></li><li><code>MOV DWORD PTR DS:[ECX+0xC], 0x87654321</code></li></ul></li><li>获取内存编号<ul><li><code>LEA EAX, DWORD PYR DS:[EDX+4]</code></li><li><code>MOV EAX, DWORD PTY DS:[EDX+4]</code></li></ul></li></ul><h3 id="regreg1248"><a class="markdownIt-Anchor" href="#regreg1248"></a> [reg+reg*{1,2,4,8}]</h3><ul><li>读取内存的值<ul><li><code>MOV EAX, 13FFC4</code></li><li><code>MOV ECX,2</code></li><li><code>MOV EDX, DWORD PTR DS:[EAX+ECX*4]</code><ul><li>最大的上限就是<code>FFFFFFFF</code></li></ul></li></ul></li><li>向内存中写入数据<ul><li><code>MOV EAX, 13FFC4</code></li><li><code>MOV ECX,2</code></li><li><code>MOV DWORD PTR DS:[EAX+ECX*4], 87654321</code></li></ul></li><li>获取内存编号<ul><li><code>LEA EAX, DWORD PTR DS:[EAX+ECX*4]</code></li></ul></li></ul><h3 id="regreg1248立即数"><a class="markdownIt-Anchor" href="#regreg1248立即数"></a> [reg+reg*{1,2,4,8}+立即数]</h3><ul><li>读取内存的值<ul><li><code>MOV EAX, 13FFC4</code></li><li><code>MOV ECX,2</code></li><li><code>MOV EDX, DWORD PTR DS:[EAX+ECX*4+4]</code><ul><li>最大的上限就是<code>FFFFFFFF</code></li></ul></li></ul></li><li>向内存中写入数据<ul><li><code>MOV EAX, 13FFC4</code></li><li><code>MOV ECX,2</code></li><li><code>MOV DWORD PTR DS:[EAX+ECX*4+4], 87654321</code></li></ul></li><li>获取内存编号<ul><li><code>LEA EAX, DWORD PTR DS:[EAX+ECX*4+4]</code></li></ul></li></ul><hr /><h1 id="堆栈"><a class="markdownIt-Anchor" href="#堆栈"></a> 堆栈</h1><h2 id="堆栈引入"><a class="markdownIt-Anchor" href="#堆栈引入"></a> 堆栈引入</h2><p><img src="https://nuthecz.oss-cn-hangzhou.aliyuncs.com/file/202303291122016.png" alt="202210032020851" /></p><ul><li>1、BASE(栈底)，TOP(栈顶)是2个32位的通用寄存器，里面存储的是内存单元编号(内存地址)</li><li>2、BASE里面存储了一个地址，记录起始地址</li><li>3、TOP里面存储了一个地址，记录结束地址</li><li>4、存入数据的时候，TOP的值减4(这里每次存取的是4个字节)；释放数据的时候，TOP的值加4(这里每次存取的是4个字节)</li><li>5、因为WIndows分配是高地址向低地址分配，所以TOP加4才能进行释放数据</li><li>6、如果要读取中间的某个数据，可以通过TOP与BASE加上偏移的方式去读取</li><li>7、此方法为堆栈，优点就是临时存储大量的数据，便于查找</li></ul><h2 id="堆栈操作"><a class="markdownIt-Anchor" href="#堆栈操作"></a> 堆栈操作</h2><ul><li><code>MOV EBX, 13FFDC</code>——BASE</li><li><code>MOV EDX, 13FFDC</code>——TOP</li></ul><h3 id="压入数据"><a class="markdownIt-Anchor" href="#压入数据"></a> 压入数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;方法一<br>MOV DWORD PTR DS:[EDX-4], 0xBBBBBBBB<br>SUB EDX, 4<br>;方法二<br>LEA EDX, DWORD PTR DS:[EDX-4]<br>MOV DWORD PTR DS:[EDX], 0xDDDDDDDD<br></code></pre></td></tr></table></figure><blockquote><p><code>sub</code>与<code>lea</code>的两条语句等价，可以互换</p></blockquote><h3 id="读取第n个数"><a class="markdownIt-Anchor" href="#读取第n个数"></a> 读取第N个数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;读第四个压入的数据<br>MOV ESI, DWORD PTR DS:[EBX-0X10] ;0x10指4*4<br><br>MOV ESI, DWORD PTR DS:[EDX+0X10] ;0x10指4*4<br></code></pre></td></tr></table></figure><h3 id="弹出数据"><a class="markdownIt-Anchor" href="#弹出数据"></a> 弹出数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">MOV ECX, DWORD PTR DS:[EDX]<br>LAN EDX, DWORD PTR DS:[EDX+4] / ADD EDX, 4<br><br>LEA EDX, DWORD PTR DS:[EDX+4]<br>MOV EDI, DWORD PTR DS:[EDX-4]<br></code></pre></td></tr></table></figure><h2 id="默认堆栈"><a class="markdownIt-Anchor" href="#默认堆栈"></a> 默认堆栈</h2><ul><li><code>ESP</code>用于存储栈顶的值，<code>EBP</code>用于存储栈底的值</li><li><code>push 0x12345678/reg</code>将数据压入栈，同时偏移<code>ESP</code></li><li><code>pop reg</code>将数据弹出栈，赋值给寄存器<code>reg</code>，同时偏移<code>ESP</code></li><li><a href="https://blog.csdn.net/qq_44288506/article/details/104767511?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=push%E4%B8%8Epop%E6%8C%87%E4%BB%A4&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-7-104767511.142%5Ev47%5Epc_rank_34_1,201%5Ev3%5Econtrol_2&amp;spm=1018.2226.3001.4187">push与pop指令讲解</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">PUSH r32/m32<br>PUSH r16/m16<br>PUSH imm8/imm16/imm32<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">POP r32/m32<br>POP r16/m16<br>POP imm8/imm16/imm32<br>POP EBP #指EBP出栈，即将此时的内存编号赋值给EBP，同时ESP+4<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pushad ;保存当前通用寄存器到堆栈中<br>popad  ;将堆栈中的数据还原到通用寄存器中<br>;在此过程中堆栈的值不能发生变化，否则不能还原<br></code></pre></td></tr></table></figure><hr />]]></content>
    
    
    <categories>
      
      <category>逆向笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
