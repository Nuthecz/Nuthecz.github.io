<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机组成原理</title>
    <link href="/posts/8d4b7ae1.html"/>
    <url>/posts/8d4b7ae1.html</url>
    
    <content type="html"><![CDATA[<ul><li>参考自：</li></ul><p>​计算机组成原理(第三版)————唐朔飞</p><p>​计算机组成原理(第六版)————白中英 戴志涛</p><p>​计算机组成原理考研复习指导————王道论坛</p><h1 id="计算机系统概论"><a href="#计算机系统概论" class="headerlink" title="计算机系统概论"></a>计算机系统概论</h1><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211221638632.png" alt="image-20221122163857577"></p><h2 id="计算机系统简介"><a href="#计算机系统简介" class="headerlink" title="计算机系统简介"></a>计算机系统简介</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211192249834.png" alt="image-20221119224908771"></p><center><strong>图 1  多级层次结构的计算机系统</strong></center><ul><li>虚拟机M4将高级语言程序翻译成机器语言程序.其中翻译程序为<code>编译程序</code>和<code>解释程序</code>.<ul><li>编译程序将高级语言程序一次性全部翻译成机器语言程序,而后再执行机器语言程序.源程序不变,则之后不必翻译.</li><li>翻译程序一条条语句进行翻译，每一条翻译完后立即执行,之后执行程序需重新翻译.</li></ul></li></ul><h2 id="计算机的基本组成"><a href="#计算机的基本组成" class="headerlink" title="计算机的基本组成"></a>计算机的基本组成</h2><ol><li>冯•诺依曼计算机特点<ul><li>由运算器、存储器、控制器、输入设备和输出设备五大部件组成</li><li>指令和数据以同等低位存放于存储器内，并可按地址寻访</li><li>机器以<code>运算器</code>为中心，输入输出设备与存储器间的数据传送通过运算器完成</li></ul></li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211192325306.png" alt="image-20221119232514277"></p><center><strong>图 2  典型的冯•诺依曼计算机结构框图</strong></center><ol start="2"><li>计算机的硬件框图</li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211192326551.png" alt="image-20221119232615526"></p><center><strong>图 3  以存储器为中心的计算机结构框图</strong></center><ul><li><code>CPU</code>:运算器和控制器<ul><li><code>ALU</code>(算术逻辑单元):完成算数逻辑运算</li><li><code>CU</code>(控制单元):解释存储器中的指令，并发出各种操作命令来执行指令</li></ul></li><li><code>I/O 设备</code>(外部设备):输入设备与输出设备</li><li><code>主机</code>:CPU与主存储器</li></ul><ol start="3"><li>计算机组成</li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211221225086.png" alt="image-20221122122544036"></p><center><strong>图 4  细化的计算机组成框图</strong></center><ul><li><strong>主存储器(主存)</strong><ul><li><p>存储体由许多<code>存储单元</code>组成，每个存储单元又包含若干个存储元件(或称存储基元、存储元)，每个存储元件能寄存一位二进制代码 “0” 或 “1” </p></li><li><p>主存的工作方式就是按存储单元的地址号来实现对存储字各位的存(写入)、取(读出)</p></li><li><p>为了实现按地址访问的方式，主存中配置<code>MAR</code>(存储器地址寄存器),<code>MDR</code>(存储器数据寄存器),这两个寄存器后来都集成在CPU芯片中</p><ul><li>MAR——用来存放欲访问的存储单元的地址，其位数对应存储单元的个数</li><li>MDR——用来存放从存储体某单元取出的代码或者准备往某存储单元存入的代码，其位数与存储字长相等</li></ul></li></ul></li><li><strong>运算器</strong><ul><li>至少3个寄存器(ACC,MQ,X)和一个算数逻辑运算单元(ALU)<ul><li><code>ACC</code>——累加器</li><li><code>MQ</code>——乘商寄存器</li><li><code>X</code>——操作寄存器</li></ul></li></ul></li><li><strong>控制器</strong><ul><li>由程序计数器(PC),指令寄存器(IR),控制单元(CU)<ul><li><code>PC</code>——存放当前欲执行指令的地址,可自动加1</li><li><code>IR</code>——存放当前指令，来自主存的<code>MDR</code><ul><li>IR中的<code>操作码(OP (IR) )</code> 送至CU,记作 OP(IR)-&gt;CU,用来分析指令;其<code>地址码(Ad (IR) )</code> 作为操作数的地址送至存储器的MAR,记作 Ad(IR)—&gt;MAR</li></ul></li><li><code>CU</code>——分析当前指令所需完成的操作,并发出各种微操作命令序列,用以控制所有被控对象。</li></ul></li><li>完成一条指令操作的取指、分析和执行3个阶段</li></ul></li><li><strong>I&#x2F;O</strong><ul><li>接收 CU 发出的各种控制命令，并完成相应的操作</li></ul></li></ul><h2 id="计算机硬件的计数指标"><a href="#计算机硬件的计数指标" class="headerlink" title="计算机硬件的计数指标"></a>计算机硬件的计数指标</h2><ol><li><p><strong>机器字长</strong></p><ul><li>CPU一次能处理数据的位数，通常与 CPU 的寄存器位数有关</li></ul></li><li><p><strong>存储容量</strong></p><ul><li>存储器的容量包含主存容量域辅存容量</li><li>主存容量是指主存中存放二进制代码的总位数，即存储容量 &#x3D; 存储单元个数 X 存储字长</li></ul></li></ol><h1 id="系统总线"><a href="#系统总线" class="headerlink" title="系统总线"></a>系统总线</h1><h2 id="总线的基本概念"><a href="#总线的基本概念" class="headerlink" title="总线的基本概念"></a>总线的基本概念</h2><ul><li><p>计算机系统的五大部件之间的互连方式有两种，一种是各部件之间使用单独的连线，称为分连接(如图2，图3)；另一种是将各部件连到一组公共信息传输线上，称为总线连接.</p></li><li><p>总线是连接多个部件的信息传输线，是各部件共享的传输介质.实际上是由许多传输线或通路组成，每条线可一位一位地传输二进制代码，一串二进制代码可在一段时间内逐一传输完成，若干条传输线可以同时传输若干位二进制代码.</p></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211282229862.png" alt="image-20221128222935838"></p><center><strong>图 5  面向CPU的双总线结构框图</strong></center><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211282229223.png" alt="image-20221128222950198"></p><center><strong>图 6  单总线结构框图</strong></center><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211282230107.png" alt="image-20221128223002082"></p><center><strong>图 7  以存储器为中心的双总线结构框图</strong></center><h2 id="总线分类"><a href="#总线分类" class="headerlink" title="总线分类"></a>总线分类</h2><p>按<code>数据传送方式</code>分为传输总线和串行传输总线.</p><p>下面按<code>连接部件</code>的不同，分为三类总线：</p><ol><li><p><strong>片内总线</strong></p><ul><li>片内总线是指芯片内部的总线，如在 CPU 芯片内部，寄存器与寄存器之间、寄存器与算逻单元 ALU 之间都由片内总线连接</li></ul></li><li><p><strong>系统总线</strong></p><ul><li><p>系统总线是指 CPU、主存、 I&#x2F;0设备(通过 I&#x2F;0 接口)各大部件之间的信息传输线</p></li><li><p>按系统总线传输信息的不同，又可分为三类：数据总线、地址总线和控制总线:</p><ul><li><p>数据总线</p><p>数据总线用来传输各功能部件之间的数据信息，它是双向传输总线，其位数与机器字长、存储字长有关，一般为8位、16位或32位，其位数称为<code>数据总线宽度</code></p></li><li><p>地址总线</p><p>地址总线主要用来指出数据总线上的源数据或目的数据在主存单元的地址或 I&#x2F;0 设备的地址.其位数与存储单元的个数相一致.</p></li><li><p>控制总线</p><p>控制总线是用来发出各种控制信号的传输线，同时起到监视各部件状态的作用</p></li></ul></li></ul></li></ol><h2 id="总线特性及性能指标"><a href="#总线特性及性能指标" class="headerlink" title="总线特性及性能指标"></a>总线特性及性能指标</h2><p>总线的性能指标</p><ol><li><strong>总线宽度</strong>：数据总线的根数，用 bit(位) 表示</li><li><strong>总线带宽</strong>：总线的数据传输速率，即单位时间内总线上传输数据的位数，通常用每秒传输信息的字节数来衡量，单位可用 MBps(兆字节每秒) 表示</li></ol><h2 id="总线结构"><a href="#总线结构" class="headerlink" title="总线结构"></a>总线结构</h2><h3 id="单总线结构"><a href="#单总线结构" class="headerlink" title="单总线结构"></a>单总线结构</h3><p>单总线结构将 CPU、主存、I&#x2F;0 设备(通过 I&#x2F;0 接口)都挂在一组总线上，允许 I&#x2F;0 设备之间、 I&#x2F;0 设备与 CPU 之间或 I&#x2F;0 设备与主存之间直接交换信息(如图6).这种结构简单，也便于扩充，但所有的传送都通过这组共享总线，因此极易形成计算机系统的瓶颈。它也不允许两个以上的部件在同一时刻向总线传输信息，这就必然会影响系统工作效率的提高</p><h3 id="多总线结构"><a href="#多总线结构" class="headerlink" title="多总线结构"></a>多总线结构</h3><ul><li>双总线结构的特点是将速度较低的 I&#x2F;0 设备从单总线上分离出来，形成主存总线与 I&#x2F;0 总线分开的结构(如图8)</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211282251251.png" alt="image-20221128225144220"></p><center><strong>图 8  双总线结构</strong></center><p>如果将速率不同的 I&#x2F;0 设备进行分类，然后将它们连接在不同的通道上，那么计算机系统的工作效率将会更高，由此发展成多总线结构。</p><ul><li>主存总线用于 CPU 与主存之间的传输；I&#x2F;0 总线供 CPU 与各类 I&#x2F;0 设备之间传递<br>信息；DMA 总线用于高速 I&#x2F;0 设备（磁盘、磁带等）与主存之间直接交换信息。在三总线结构中，<code>任一时刻只能使用一种总线</code>。主存总线与 DMA 总线不能同时对主存进行存取， I&#x2F;0 总线只有在CPU 执行 I&#x2F;0 指令时才能用到(如图9)</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211282254288.png" alt="image-20221128225449256"></p><center><strong>图 9  三总线结构</strong></center><ul><li>处理器与 Cache 之间有一条局部总线，它将 CPU 与 Cache 或与更多的局部设备连接。Cache 的控制机构不仅将 Cache 连到局部总线上，而且还直接连到系统总线上，这样 Cache 就可通过系统总线与主存传输信息，而且 I&#x2F;0 设备与主存之间的传输也不必通过CPU(如图10).</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211282256078.png" alt="image-20221128225631045"></p><center><strong>图 10  另一种三总线结构</strong></center><ul><li>四总线结构增加了一条与计算机系统紧密相连的高速总线</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211282257523.png" alt="image-20221128225757492"></p><center><strong>图 11  四总线结构</strong></center><h1 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="存储器的分类"><a href="#存储器的分类" class="headerlink" title="存储器的分类"></a>存储器的分类</h3><p>按<code>存取方式</code>可以把存储器分为随机存储器,只读存储器,顺序存储器和直接存取存储器.</p><ol><li><strong>随机存储器</strong>( <code>RAM</code> , Random Access Memory)<ul><li>RAM 是一种可读／写存储器，其特点是存储器的任何一个存储单元的内容都可以随机存取，而且存取时间与存储单元的物理位置无关</li></ul></li><li><strong>只读存储器</strong>( <code>ROM</code> , Read Only Memol)<ul><li>只读存储器是能对其存储的内容读出，而不能对其重新写入的存储器。这种存储器一旦存入了原始信息后，在程序执行过程中，只能将内部信息读出，而不能随意重新写入新的信息去改变原始信息</li></ul></li><li><strong>串行访问存储器</strong><ul><li>如果对存储单元进行读／写操作时，需按其物理位置的先后顺序寻找地址，则这种存储器称为串行访问存储器</li></ul></li></ol><p>按在<code>计算机系统中的作用</code>不同，存储器主要分为主存储器、辅助存储器、缓冲存储器.</p><ol><li><strong>主存储器</strong>(简称主存,内存)的主要特点是它可以和 CPU 直接交换信息</li><li><strong>辅助存储器</strong>(简称辅存)是主存储器的后援存储器，用来存放当前暂时不用的程序和数据，它不能与 CPU 直接交换信息</li><li><strong>高速缓冲存储器</strong>(简称缓存_Cache)位于主存和CPU之间，用来存放正在执行的程序段和数据，以便CPU能高速地使用它们.</li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211282320611.png" alt="image-20221128232018576"></p><center><strong>图 12  存储器分类</strong></center><h3 id="存储器的性能指标"><a href="#存储器的性能指标" class="headerlink" title="存储器的性能指标"></a>存储器的性能指标</h3><ol><li><strong>存储容量</strong>：存储字数 X 字长(如 1M X 8 位)<ul><li>存储字数表示存储器的地址空间大小，字长表示一次存取操作的数据量</li></ul></li><li><strong>存储速度</strong>：数据传输率 &#x3D; 数据的宽度 &#x2F; 存储周期<ul><li>存取时间(T<sub>a</sub>)：存取时间是指从启动一次存储器操作到完成该操作所经历的时间，分为读入时间和写入时间</li><li>存取周期(T<sub>m</sub>)：存取周期又称为读写周期或访问周期.它是指存储器进行一次完整的读写操作所需的全部时间，即连续两次独立访问存储器操作(读或写操作)之间所需的最小时间间隔</li><li>主存带宽(B<sub>m</sub>)：主存带宽又称数据传输率，表示从主存进出信息的最大数量，单位为字&#x2F;秒，字节&#x2F;秒(B&#x2F;s)，位&#x2F;秒(b&#x2F;s)</li></ul></li></ol><h3 id="存储器的层次化结构"><a href="#存储器的层次化结构" class="headerlink" title="存储器的层次化结构"></a>存储器的层次化结构</h3><h2 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h2><h3 id="随机存储器"><a href="#随机存储器" class="headerlink" title="随机存储器"></a>随机存储器</h3><ol><li><strong>SRAM</strong><ul><li>静态随机存储器(SRAM)的存储元使用双稳态触发器(六晶体管MOS)来记忆信息，非破坏性读出</li><li>存取速度快，但集成度低，功耗较大，一般用来组成高速缓冲存储器</li></ul></li><li><strong>DRAM</strong></li></ol><ul><li>动态随机存储器(DRAM)是利用存储元电路中栅极电容上的电荷来存储信息，采用地址复用技术</li><li>更容易继承，但存取速度相较SRAM慢，一般用来组成大容量主存系统</li><li>DRAM电容上的电荷一般只能维持1~2ms,因此即使电源不断电，信息也会自动消失.所以需要每隔一定时间刷新，通常取2ms,称为刷新时间.<ul><li>刷新方式分为：集中刷新,分散刷新,异步刷新</li></ul></li></ul><h3 id="只读存储器"><a href="#只读存储器" class="headerlink" title="只读存储器"></a>只读存储器</h3><ul><li>ROM期间的显著优点：<ul><li>结构简单，所以位密度比可读可写存储器的高</li><li>具有非易失性，所以可靠性高</li></ul></li><li>ROM的类型<ul><li>掩模式只读存储器(MROM)</li><li>一次可编程只读存储器(PROM)</li><li>可擦除可编程只读存储器(EPROM)</li><li>闪存存储器(Flash Memory)</li><li>固态硬盘(Solid State Drives, SSD)</li></ul></li></ul><h3 id="多模块存储器"><a href="#多模块存储器" class="headerlink" title="多模块存储器"></a>多模块存储器</h3><ol><li><p><strong>单体多字存储器</strong></p><ul><li>单体多字系统的特点是存储器中只有一个存储体，每个存储单元存储 m 个字，总线宽度也为 m 个字。一次并行读出 m 个字，地址必须顺序排列并处千同一存储单元。</li></ul></li><li><p><strong>多体并行存储器</strong></p><ul><li><p>多体并行存储器由多体模块组成。每个模块都有相同的容扯和存取速度，各模块都有独立的读写控制电路、地址寄存器和数据寄存器。它们既能并行工作，又能交叉工作。</p></li><li><p>分为高位交叉编址和低位交叉编址</p></li></ul></li></ol><ul><li>高位交叉编址(顺序方式)<ul><li>高位地址表示体号，低位地址为体内地址</li><li>高位交叉方式下，总是把低位的体内地址送到由高位体号确定的模块内进行译码。访问一个连续主存块时，总是先在一个模块内访问，等到该模块访问完才转到下一个模块访问，CPU总是按顺序访问存储模块，各模块不能被并行访问，因而不能提高存储器的吞吐率。</li></ul></li></ul><img  src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211291106304.png"><center><strong>图 13  高位交叉编址的多体存储器</strong></center><ul><li>低位交叉编址(交叉方式)<ul><li>低位地址为体号，高位地址为体内地址</li><li>低位交叉方式下，总是把高位的体内地址送到由低位体号确定的模块内进行译码。程序连续存放在相邻模块中，因此称采用此编址方式的存储器为交叉存储器。采用低位交叉编址后，可在不改变每个模块存取周期的前提下，采用流水线的方式并行存取，提高存储器的带宽。</li></ul></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211291203333.png" alt="image-20221129120341299"></p><center><strong>图 14  低位交叉编址的多体存储器</strong></center><h2 id="主存储器与CPU的连接"><a href="#主存储器与CPU的连接" class="headerlink" title="主存储器与CPU的连接"></a>主存储器与CPU的连接</h2><h3 id="连接原理"><a href="#连接原理" class="headerlink" title="连接原理"></a>连接原理</h3><ol><li>主存储器通过数据总线、地址总线和控制总线与 CPU 连接</li></ol><ol start="2"><li>数据总线的位数与工作频率的乘积正比千数据传输率</li><li>地址总线的位数决定了可寻址的最大内存空间</li><li>控制总线（读／写）指出总线周期的类型和本次输入／输出操作完成的时刻</li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211291211638.png" alt="image-20221129121112611"></p><center><strong>图 15  主存储器与CPU的连接 </strong></center><h3 id="主存容量的扩展"><a href="#主存容量的扩展" class="headerlink" title="主存容量的扩展"></a>主存容量的扩展</h3><ol><li><strong>位扩展</strong><ul><li>CPU 的数据线数与存储芯片的数据位数不一定相等，此时必须对存储芯片扩位（即进行位扩展，用多个存储器件对字长进行扩充，增加<code>存储字长</code>），使其数据位数与 CPU 的数据线数相等。位扩展的连接方式是将多个存储芯片的地址端、片选端和读写控制端相应并联，数据端分</li></ul></li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211291220286.png" alt="image-20221129122040257"></p><center><strong>图 16  位扩展连接示意图</strong></center><ol start="2"><li><strong>字扩展</strong><ul><li>字扩展是指增加存储器中字的数量，而位数不变。字扩展将芯片的地址线、数据线、读写控制线相应并联，而由片选信号来区分各芯片的地址范围</li></ul></li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211291221696.png" alt="image-20221129122147667"></p><center><strong>图 17  字扩展连接示意图</strong></center><ol start="3"><li><strong>字位同时扩展法</strong><ul><li>字位同时扩展是指既增加存储字的数量，又增加存储字长</li></ul></li></ol><h2 id="高速缓冲存储器"><a href="#高速缓冲存储器" class="headerlink" title="高速缓冲存储器"></a>高速缓冲存储器</h2><h3 id="Cache的基本工作原理"><a href="#Cache的基本工作原理" class="headerlink" title="Cache的基本工作原理"></a>Cache的基本工作原理</h3><p>Cache 位千存储器层次结构的顶层，通常由 SRAM 构成</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211301438455.png" alt="image-20221130143802417"></p><center><strong>图 18  高速缓冲存储器的工作原理</strong></center><h3 id="Cache和主存的映射方式"><a href="#Cache和主存的映射方式" class="headerlink" title="Cache和主存的映射方式"></a>Cache和主存的映射方式</h3><p>Cache 行中的信息是主存中某个块的副本，地址映射是指把主存地址空间映射到 Cache 地址空间，即把存放在主存中的信息按照某种规则装入 Cache</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302112021003.png" alt="image-20230211202132953"></p><ol><li><strong>直接映射</strong><ul><li><code>Cache行号＝主存块号 mod Cache总行数</code></li></ul></li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211301447371.png" alt="image-20221130144707339"></p><center><strong>图 19  Cache和主存之间的直接映射方式</strong></center><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302112029523.png" alt="image-20230211202954500"></p><ol start="2"><li><strong>全相联映射方式</strong><ul><li>主存中的每一块可以装入Cache 中的任何位狸，每行的标记用于指出该行取自主存的哪一<br>块，所以CPU 访存时需要与所有Cache 行的标记进行比较</li></ul></li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211301449108.png" alt="image-20221130144914080"></p><center><strong>图 20  Cache和主存之间的全相联映射方式</strong></center><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302112029748.png" alt="image-20230211202932723"></p><ol start="3"><li><strong>组相联映射方式</strong><ul><li>将 Cache 分成 Q 个大小相等的组，每个主存块可以装入固定组中的任意一行，即组间采用直接映射、而组内采用全相联映射的方式</li></ul></li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211301453758.png" alt="image-20221130145321726"></p><center><strong>图 21  Cache和主存之间的组相联映射方式</strong></center><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302112030127.png" alt="image-20230211203015104"></p><h3 id="Cache的替换策略"><a href="#Cache的替换策略" class="headerlink" title="Cache的替换策略"></a>Cache的替换策略</h3><p>在采用<strong>全相联映射或组相联映射</strong>方式时，从主存向 Cache 传送一个新块，当 Cache 或 Cache组中的空间已被占满时，就需要使用替换算法置换Cache行,而直接映射会直接替换，无需考虑替换策略</p><ol><li><p><strong>随机算法</strong>：随机地确定替换的 Cache 块。它的实现比较简单，但未依据程序访问的局部性原理，因此可能命中率较低</p></li><li><p><strong>先进先出算法</strong>：选择最早调入的行进行替换。它比较容易实现，但也未依据程序访问的局部性原理，因为最早进入的主存块也可能是目前经常要用的</p></li><li><p><strong>近期最少使用算法LRU：</strong>将近期内长久未被访问过的行换出</p><p><strong>策略：</strong>每行设置一个计数器，每命中一次，命中行计数器清零，其它各行计数器增1；替换时，将计数值最大的行换出。保护了刚拷贝到cache的新数据行</p></li><li><p><strong>近期最少使用算法(LRU)：</strong>依据程序访问的局部性原理，选择近期内长久未访问过的Cache 行作为替换的行，平均命中率要比 FIFO 的高，是堆栈类算法—-<strong>最常用</strong></p><p><strong>策略：</strong>每行设置一个计数器，新行从0开始计数，每访问一次，计数器增1；替换时，把计数值最小的行换出，同时将这些特定行的计数器清零</p></li></ol><h3 id="Cache-的写策略"><a href="#Cache-的写策略" class="headerlink" title="Cache 的写策略"></a>Cache 的写策略</h3><p>由于 cache 的内容只是主存部分内容的副本，它应当与主存内容保持一致。而 CPU 对cache 的写入更改了 cache 的内容，则可采取写操作策略使 cache 与主存内容保持一致</p><ol><li><p><strong>写回法</strong>:</p><ul><li>当 CPU 写 cache 命中时，只修改 cache 的内容，而不立即写入主存；只有当此行被换出时才写回主存</li></ul></li><li><p><strong>全写法</strong>:</p><ul><li>当写 cache 命中时，cache 与主存同时发生写修改，因而较好地维护了 cache 与主存的内容的一致性</li></ul></li><li><p><strong>写一次法</strong>:</p><ul><li>写一次法是基于写回法并结合全写法的写策略：写命中与写未命中的处理方法和写回法基本相同，只是第一次写命中时要同时写入主存</li></ul></li></ol><h1 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h1><h2 id="指令系统的发展"><a href="#指令系统的发展" class="headerlink" title="指令系统的发展"></a>指令系统的发展</h2><ol><li><strong>指令系统</strong>(指令集)：一台计算机中所有机器指令的集合，称为这台计算机的指令系统</li><li><strong>指令系统体系结构</strong>(ISC)<ul><li>复杂指令系统计算机(<code>CISC</code>)：</li><li>精简指令系统计算机(<code>SISC</code>)：</li></ul></li></ol><h2 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h2><ol><li><p><strong>指令字</strong>：表示一条指令的机器字，通常简称指令</p></li><li><p><strong>指令格式</strong>：指令字用二进制代码表示的结构形式，通常由操作码字段和地址码字段组成</p></li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211301513956.png" alt="image-20221130151323928"></p><ul><li><p>指令的操作码 OP 表示该指令应进行什么性质的操作以及具有何种功能</p></li><li><p>地址码 A 给出被操作的信息(指令或数据)的地址，包括参加运算的一个或多个操作数所在的地址、运算结果的保存地址、程序的转移地址、被调用的子程序的入口地址等。</p></li></ul><p>根据指令中操作数地址码的数目的不同，可将指令分成以下几种格式</p><ol><li><p>零地址指令</p><ul><li>零地址指令的指令字中只有操作码，而没有地址码</li></ul></li><li><p>一地址指令</p><ul><li>一地址指令只有一个地址码，它指定一个操作数，另一个操作数地址是隐含的</li></ul></li><li><p>二地址指令</p><ul><li>适用于常用的算术和逻辑运算，包含目的操作数地址和源操作数地址(源寄存器和目的寄存器可以指定32个寄存器)</li><li><strong>SS型</strong>指：存储器-存储器型；<strong>RS型</strong>指：寄存器-存储器型；<strong>RR型</strong>指：寄存器-寄存器型</li></ul></li><li><p>三地址指令</p><ul><li>A3←(A1)OP(A2)</li><li>A1 为被操作数地址，也称源操作数地址；A2 为操作数地址，也称终点操作数地址；A3 为存放操作结果的地址</li><li>三地址指令中 A1，A2，A3 通常指定为运算器中通用寄存器的地址，这是为了加快指令执行速度</li></ul></li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211301521447.png" alt="image-20221130152142418"></p><center><strong>图 22  不同指令格式</strong></center><h2 id="指令和数据的寻址"><a href="#指令和数据的寻址" class="headerlink" title="指令和数据的寻址"></a>指令和数据的寻址</h2><h3 id="指令寻址"><a href="#指令寻址" class="headerlink" title="指令寻址"></a>指令寻址</h3><ol><li><p>顺序寻址</p><ul><li>通过程序计数器 PC 加 1 (1 个指令字长)，自动形成下一条指令的地址</li></ul></li><li><p>跳跃寻址</p><ul><li>通过转移类指令实现.</li><li>受到状态寄存器和操作数的控制，跳跃的地址分为绝对地址(由标记符直接得到)和相对地址(相对千当前指令地址的偏移量)，跳跃的结果是当前指令修改 PC 值</li></ul></li></ol><h3 id="数据寻址"><a href="#数据寻址" class="headerlink" title="数据寻址"></a>数据寻址</h3><ol><li><p>隐含寻址</p><ul><li>不明显地给出操作数的地址，而在指令中隐含操作数的地址</li></ul></li><li><p>立即数寻址</p><ul><li>指令的地址字段指出的不是操作数的地址，而是操作数本身，又称立即数，采用补码表示</li></ul></li><li><p>直接寻址</p><ul><li>在指令格式的地址字段中直接指出操作数在内存的地址 A</li><li>如果用 D 表示操作数，那么直接寻址的表达式为 EA &#x3D; D—-EA为有效地址</li></ul></li><li><p>间接寻址</p><ul><li>指令地址字段中的形式地址 A 不是操作数 D 的真正地址，而是操作数地址的指示器</li><li>EA &#x3D; ( A )</li></ul></li><li><p>寄存器寻址</p><ul><li>当操作数不在内存中，而是放在 CPU 的通用寄存器中时，可采用寄存器寻址方式</li><li>此时指令中给出的操作数地址不是内存的地址单元号，而是通用寄存器的编号，EA &#x3D; R</li></ul></li><li><p>寄存器间接寻址</p><ul><li>指令格式中的寄存器内容不是操作数，而是操作数的地址，该地址指明的操作数在内存中</li><li>EA &#x3D; ( R)</li></ul></li><li><p>偏移寻址</p><ul><li>EA &#x3D; A + ( R)</li><li>一个地址字段中的形式地址 A 直接被使用；另一个地址字段，或基于操作码的一个隐含用，指的是某个专用寄存器</li><li>相对寻址<ul><li>隐含引用的专用寄存器是程序计数器(PC)，即 EA &#x3D; A + ( PC)，它是当前 PC的内容加上指令地址字段中 A 的值</li></ul></li><li>基址寻址<ul><li>被引用的专用寄存器含有一个存储器地址，地址字段含有一个相对于该地址的偏移量(通常是无符号整数)</li></ul></li><li>变址寻址<ul><li>地址域引用一个主存地址，被引用的专用寄存器含有对那个地址的正偏移量。这意味着主存地址位数大于寄存器中的偏移量位数，与基址寻址刚好相反</li></ul></li></ul></li><li><p>段寻址</p></li><li><p>堆栈寻址</p></li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211301550644.png" alt="image-20221130155034604"></p><center><strong>图 23  基本寻址方式示意图</strong></center><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211301551586.png" alt="image-20221130155105554"></p><center><strong>图 24  基本寻址方式</strong></center><h1 id="中央处理器"><a href="#中央处理器" class="headerlink" title="中央处理器"></a>中央处理器</h1><h2 id="CPU的组成和功能"><a href="#CPU的组成和功能" class="headerlink" title="CPU的组成和功能"></a>CPU的组成和功能</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol><li><strong>指令控制</strong>：程序的顺序控制。</li><li><strong>操作控制</strong>：管理并产生每条指令的操作信号，并把它们送到相应部件，控制这些部件按要求进行动作。           </li><li><strong>时间控制</strong>:对各种操作实施时间上的定时。</li><li><strong>数据加工</strong>：对数据进行算术和逻辑运算处理</li></ol><h2 id="微程序控制器"><a href="#微程序控制器" class="headerlink" title="微程序控制器"></a>微程序控制器</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302120947440.png" alt="image-20230212094713385"></p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p><strong>微程序控制器的组成</strong>：控制存储器CM、地址转移逻辑、微指令寄存器（微地址寄存器和微命令寄存器）</p><ol><li>控制存储器(μCM)：存放实现全部指令系统的微程序，是一个只读存储器。μCM的字长就是微指令字长，其容量取决于微程序的数量，即取决于指令系统的规模。读出并执行一条微指令的时间为一个微指令周期。在串行方式的微程序控制器中，微指周期就是只读存储器的工作周期。</li><li>微指令寄存器(μIR)：存放由μCM读出的一条微指令。由微地址寄存器和微命令寄存器组成。前者决定下一条微指令的地址，后者存放一条微指令的操作控制字段和判别测试字段。</li><li>地址转移逻辑：承担自动完成修改微地址的任务。如果微程序不出现分支，那么下 一条微指令的地址就直接由微地址寄存器给出。当微程序出现分支时，则通过判别测试字段P和执行部件的“状态条件”反馈ؑ信息，修改微地址寄存器的内容，以形成下一条微指令的地址。</li><li>微地址寄存器(μMAR)：它接受微地址形成部件送来的微地址，为下一步从μCM读取微指令作准备。</li></ol><h3 id="工作过程实质"><a href="#工作过程实质" class="headerlink" title="工作过程实质"></a>工作过程实质</h3><p><strong>微程序控制器的工作过程实质</strong>：在微程序控制器的控制下， 执行机器指令的过程</p><p><strong>具体过程</strong>： </p><ol><li>执行取指令的公操作：机器开始运行时，自动地将取指微程序的入口微地址送入µAR，并从µCM中读出微指令，送往µIR，当取指微程序执行完以后，从主存中取出的机器指令就已经存入IR中了。 </li><li>由机器指令的操作码字段OP通过 “地址转移逻辑” 产生出䈕机器指令所对应的微程序的入口微地址，并送入µAR。 </li><li>从µCM中逐条取出相应的微指令并执行之。 </li><li>执行完对应于一条机器指令的一段微程序之后，又回到取指微程序的入口地址，继续第1步，以完成取下一条机器指令的公操作。</li></ol><h1 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h1><p>(@)<strong>第二章</strong>：定点数与浮点数的表示方法，定点数与浮点数的加减乘除法，浮点数的规格化</p><p><strong>第三章：</strong>(@)存储器容量扩充与和CPU的连接，DRAM的刷新，多模块交叉存储器带宽，cache的命中率，cache的替换策略，cache的写回策略，(@)cache与CPU的映射</p><p><strong>第四章：</strong>指令格式相关，(@)指令寻址方式</p><p><strong>第五章：</strong>CPU结构和流程，(@)微程序控制器相关，流水线CPU</p><p><strong>第六章：</strong>总线带宽，总线的仲裁</p><p><strong>第七章：</strong>磁盘存储器的技术指标相关</p><p><strong>第八章</strong>：程序中断</p><h2 id="第二章-运算方法和运算器"><a href="#第二章-运算方法和运算器" class="headerlink" title="第二章 运算方法和运算器"></a>第二章 运算方法和运算器</h2><p><strong>题型：</strong>定点数与浮点数的表示方法，定点数与浮点数的加减乘除法，浮点数的规格化</p><p><a href="https://www.bilibili.com/video/BV1P3411v7gd?p=4&vd_source=17ac9da9453dbd6d64b9616668574c5f">相关题目参考视频</a></p><h2 id="第三章-存储系统"><a href="#第三章-存储系统" class="headerlink" title="第三章 存储系统"></a>第三章 存储系统</h2><p><strong>题型：</strong>存储器容量的扩展，DRAM的刷新，多模块交叉存储器带宽，cache的命中率，cache的替换策略，cache的写回策略，cache与CPU的映射</p><h3 id="存储器与CPU的连接"><a href="#存储器与CPU的连接" class="headerlink" title="存储器与CPU的连接"></a>存储器与CPU的连接</h3><p>PPT—55</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302112034669.png" alt="image-20230211170110780"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302162008915.png" alt="image-20230216200841880"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302162008649.png" alt="image-20230216200854596"></p><p><strong>重点</strong>：</p><ol><li>知道字扩展和位扩展的含义，和它在存储器和CPU中的连接中是怎么体现的</li><li>着重关注题目要求的主存地址空间分配情况 <a href="https://www.bilibili.com/video/BV1P3411v7gd?p=1&vd_source=17ac9da9453dbd6d64b9616668574c5f">参照视频</a></li><li>关注最后2k地址的分配情况(与2重点相同，但是要学会怎么使用片选逻辑)</li></ol><h3 id="DRAM刷新"><a href="#DRAM刷新" class="headerlink" title="DRAM刷新"></a>DRAM刷新</h3><p>PPT—48</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302111700128.png" alt="image-20230211170050067"></p><h3 id="多模块交叉存储器"><a href="#多模块交叉存储器" class="headerlink" title="多模块交叉存储器"></a>多模块交叉存储器</h3><p>总复习pdf—89</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302111727242.png" alt="image-20230211172721150"></p><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><h4 id="命中率"><a href="#命中率" class="headerlink" title="命中率"></a>命中率</h4><p>PPT—95</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302111745908.png" alt="image-20230211174528868"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302111826191.png" alt="image-20230211182604134"></p><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><p><a href="https://www.bilibili.com/video/BV1h3411h7kV/?spm_id_from=333.337.search-card.all.click&vd_source=17ac9da9453dbd6d64b9616668574c5f">主存和cache的映射相关问题解决</a></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302112116386.png" alt="image-20230211202132953"></p><h2 id="第四章-指令系统"><a href="#第四章-指令系统" class="headerlink" title="第四章 指令系统"></a>第四章 指令系统</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302162007035.png" alt="image-20230216200745896"></p><p>一个类似的题型，可以参照进行复习。<strong>重点在于对于指令格式和寻址方式的理解</strong>。</p><h2 id="第五章-中央处理器"><a href="#第五章-中央处理器" class="headerlink" title="第五章 中央处理器"></a>第五章 中央处理器</h2><h3 id="CPU执行相关"><a href="#CPU执行相关" class="headerlink" title="CPU执行相关"></a>CPU执行相关</h3><ul><li>主要就是背图(cpu结构和流程中的)，然后根据图片进行CPU操作流程的分析</li><li>分析要与具体指令的指令周期联系起来，明白CPU是怎么执行指令的(指令周期中的)</li></ul><h4 id="CPU结构和流程"><a href="#CPU结构和流程" class="headerlink" title="CPU结构和流程"></a>CPU结构和流程</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302162015694.png" alt="image-20230216201502658"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302162014275.png" alt="image-20230216201447237"></p><h4 id="指令周期"><a href="#指令周期" class="headerlink" title="指令周期"></a>指令周期</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302162017854.png" alt="image-20230216201718800"></p><ul><li>方框语言表示指令周期</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302162018751.png" alt="image-20230216201820709"> </p><ul><li><p>例题</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302162020824.png" alt="image-20230216202012784"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302162020218.png" alt="image-20230216202024182"></p></li></ul><h3 id="微程序"><a href="#微程序" class="headerlink" title="微程序"></a>微程序</h3><h4 id="微程序组成-重点"><a href="#微程序组成-重点" class="headerlink" title="微程序组成(重点)"></a>微程序组成(重点)</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302121603944.png" alt="image-20230212160355843"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302121604815.png" alt="image-20230212160413767"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302121604066.png" alt="image-20230212160435967"></p><h4 id="微程序设计"><a href="#微程序设计" class="headerlink" title="微程序设计"></a>微程序设计</h4><p>微命令编码和微命令地址形成方式(考题一般不涉及)</p><h3 id="流水线CPU"><a href="#流水线CPU" class="headerlink" title="流水线CPU"></a>流水线CPU</h3><p>了解什么是流水线CPU</p><h4 id="流水线中的主要问题"><a href="#流水线中的主要问题" class="headerlink" title="流水线中的主要问题"></a>流水线中的主要问题</h4><p>资源冲突，数据冲突和控制冲突—-知道是什么和解决方法</p><ul><li><p>数据冲突引发的问题</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302162026951.png" alt="image-20230216202616892"></p></li></ul><h2 id="第六章-总线系统"><a href="#第六章-总线系统" class="headerlink" title="第六章 总线系统"></a>第六章 总线系统</h2><p>主要是总线的相关指标和仲裁</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302162028654.png" alt="image-20230216202806590"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302162028153.png" alt="image-20230216202821119"></p><h2 id="第七章-外围设备"><a href="#第七章-外围设备" class="headerlink" title="第七章 外围设备"></a>第七章 外围设备</h2><p>主要就是磁盘存储器的技术指标</p><p>掌握PPT16之后的指标和例题</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302162038774.png" alt="image-20230216203831719"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202302162038664.png" alt="image-20230216203847575"></p><h2 id="第八章-输入-x2F-输出系统"><a href="#第八章-输入-x2F-输出系统" class="headerlink" title="第八章 输入&#x2F;输出系统"></a>第八章 输入&#x2F;输出系统</h2><p>主要是程序中断</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【三校联合训练赛】Reverse</title>
    <link href="/posts/e8e18693.html"/>
    <url>/posts/e8e18693.html</url>
    
    <content type="html"><![CDATA[<h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="Petals-Level-Up"><a href="#Petals-Level-Up" class="headerlink" title="Petals_Level_Up"></a>Petals_Level_Up</h2><p><strong>main</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202301211054808.png" alt="image-20230115105741499"></p><p>0xCD^0xC4&#x3D;&#x3D;9,则1755+9&#x3D;175e,最后跳转到175e处，则nop掉173a到175d，然后F5反汇编</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202301211054798.png" alt="image-20230115110036807"></p><p><strong>sub_1209</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202301211054769.png" alt="image-20230115125028787"></p><p><strong>sub_13D5</strong></p><p>汇编中，sub_13C4引用的sub_13D5</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202301211054817.png" alt="image-20230115133654417"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202301211054815.png" alt="image-20230115133800372"></p><p>汇编结合着伪代码来看，rbp-128h(128h&#x3D;&#x3D;296d)是input，然后看伪代码，就是对于input的进行处理，其中(v0-276)有自加操作，猜测是i，那么整个过程就类似于input[i]&#x3D;enc[input[i]]这个样子</p><p><strong>sub_1439</strong></p><p>sub_1755里面，去除花指令后，可以看出是对于input进行异或等操作，直接反着来就行</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202301211054811.png" alt="image-20230115104456417"></p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode2</span>(<span class="hljs-params">c</span>):<br>    enc = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">300</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">256</span>):<br>        enc[i] = (~(i ^ <span class="hljs-number">32</span>) &amp; <span class="hljs-number">0xff</span>) <span class="hljs-comment"># 转化为无符号数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">256</span>):<br>            <span class="hljs-keyword">if</span> enc[j] == c[i]:<br>                c[i] = j<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> c<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode1</span>(<span class="hljs-params">c</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        c[i] ^= c[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">32</span>]<br>        c[i] ^= <span class="hljs-number">0x7a</span><br>        c[i] = (((c[i] &gt;&gt; <span class="hljs-number">4</span>) | (c[i] &lt;&lt; <span class="hljs-number">4</span>)) &amp; <span class="hljs-number">0xff</span>)<br>        c[i] ^= <span class="hljs-number">0x64</span><br>        c[i] = (((c[i] &gt;&gt; <span class="hljs-number">5</span>) | (c[i] &lt;&lt; <span class="hljs-number">3</span>)) &amp; <span class="hljs-number">0xff</span>)<br>        c[i] ^= <span class="hljs-number">0x73</span><br>        c[i] = (((c[i] &gt;&gt; <span class="hljs-number">6</span>) | (c[i] &lt;&lt; <span class="hljs-number">2</span>)) &amp; <span class="hljs-number">0xff</span>)<br>        c[i] ^= <span class="hljs-number">0x71</span><br>        c[i] = (((c[i] &gt;&gt; <span class="hljs-number">7</span>) | (c[i] &lt;&lt; <span class="hljs-number">1</span>)) &amp; <span class="hljs-number">0xff</span>)<br>    <span class="hljs-keyword">return</span> c<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    ida = [<span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xC4</span>,<br>           <span class="hljs-number">0x73</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xBD</span>,<br>           <span class="hljs-number">0x61</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xF5</span>,<br>           <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3C</span>]<br>    decode1(ida)<br>    decode2(ida)<br>    flag= <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ida)):<br>        flag += <span class="hljs-built_in">chr</span>(ida[i])<br>    <span class="hljs-built_in">print</span>(flag)<br>    <span class="hljs-built_in">print</span>(hashlib.md5(flag.encode()).hexdigest())<br></code></pre></td></tr></table></figure><h2 id="Virtual-Self"><a href="#Virtual-Self" class="headerlink" title="Virtual Self"></a>Virtual Self</h2><p>VMre</p><p>找到op_code的所有操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br></pre></td><td class="code"><pre><code class="hljs python">op_code = [<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xb5</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xde</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xa1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xa</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0x61</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x71</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x7a</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0xa</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x11</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xc5</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xa2</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x7b</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x16</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0x8c</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xe6</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xfc</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x16</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x5</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0x4a</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x70</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x17</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x5</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0x1f</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xb</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd9</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x7</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xb7</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xf0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x56</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x7</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x19</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xc6</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x80</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x4e</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x19</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x17</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xc6</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd4</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x29</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x17</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xe</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0x50</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xe4</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xf9</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0xe</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x13</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0x6d</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x7</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1a</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xb1</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x3a</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x4f</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x1a</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x14</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0x95</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x4</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x46</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xf4</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x7a</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x18</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x12</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xda</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x13</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x9a</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x4</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd8</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x2a</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xbc</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x6</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0x6e</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x4a</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x35</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xb</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0x70</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x4</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xae</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0xb</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x15</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0x99</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x7</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xe5</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x15</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x9</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0x77</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xa</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x9</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1c</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0x1c</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x12</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xf6</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x1c</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xf</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xa5</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x35</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xb1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0xf</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x10</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xe3</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xbe</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x61</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x8</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0x2b</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x35</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd4</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x8</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xb0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xb2</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x5b</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xe8</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x39</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xf4</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0xd</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x18</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0x72</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xa1</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x7c</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x18</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xc</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0x98</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xb5</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x2b</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd1</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0xc</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1b</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0x8d</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd2</span>,<span class="hljs-number">0x39</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0x4e</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x3</span>,<br><span class="hljs-number">0xa0</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0xd3</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa2</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0x1</span>,<br><span class="hljs-number">0xa1</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xd0</span>,<span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xe0</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x1b</span>,<span class="hljs-number">0xd0</span>,<br><span class="hljs-number">0x0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0xff</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(op_code))<br>flag = []<br>reg = [<span class="hljs-number">0</span>]*<span class="hljs-number">4</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(op_code), <span class="hljs-number">4</span>):<br><span class="hljs-keyword">if</span> op_code[i] == <span class="hljs-number">0xe0</span>:<br><span class="hljs-keyword">if</span> op_code[i + <span class="hljs-number">1</span>] == <span class="hljs-number">1</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;reg[<span class="hljs-subst">&#123;op_code[i + <span class="hljs-number">2</span>] - <span class="hljs-number">208</span>&#125;</span>] = flag[<span class="hljs-subst">&#123;op_code[i + <span class="hljs-number">3</span>]&#125;</span>]&quot;</span>)<br><span class="hljs-keyword">elif</span> op_code[i + <span class="hljs-number">1</span>] == <span class="hljs-number">2</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;flag[<span class="hljs-subst">&#123;op_code[i + <span class="hljs-number">2</span>]&#125;</span>] = reg[<span class="hljs-subst">&#123;op_code[i + <span class="hljs-number">3</span>] - <span class="hljs-number">208</span>&#125;</span>]&quot;</span>)<br><span class="hljs-keyword">elif</span> op_code[i + <span class="hljs-number">1</span>] == <span class="hljs-number">3</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;reg[<span class="hljs-subst">&#123;op_code[i + <span class="hljs-number">2</span>] - <span class="hljs-number">208</span>&#125;</span>] = <span class="hljs-subst">&#123;op_code[i + <span class="hljs-number">3</span>]&#125;</span>&quot;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;wrong!&quot;</span>)<br><span class="hljs-keyword">elif</span> op_code[i] == <span class="hljs-number">0xa2</span>:<br><span class="hljs-keyword">if</span> op_code[i + <span class="hljs-number">1</span>] == <span class="hljs-number">0</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;reg[<span class="hljs-subst">&#123;op_code[i + <span class="hljs-number">2</span>] - <span class="hljs-number">208</span>&#125;</span>] -= reg[<span class="hljs-subst">&#123;op_code[i + <span class="hljs-number">3</span>] - <span class="hljs-number">208</span>&#125;</span>]&quot;</span>)<br><span class="hljs-keyword">elif</span> op_code[i + <span class="hljs-number">1</span>] == <span class="hljs-number">1</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;reg[<span class="hljs-subst">&#123;op_code[i + <span class="hljs-number">2</span>] - <span class="hljs-number">208</span>&#125;</span>] -= <span class="hljs-subst">&#123;op_code[i + <span class="hljs-number">3</span>]&#125;</span>&quot;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wrong!&quot;</span>)<br><span class="hljs-keyword">elif</span> op_code[i] == <span class="hljs-number">0xa0</span>:<br><span class="hljs-keyword">if</span> op_code[i + <span class="hljs-number">1</span>] == <span class="hljs-number">0</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;reg[<span class="hljs-subst">&#123;op_code[i + <span class="hljs-number">2</span>] - <span class="hljs-number">208</span>&#125;</span>] ^= reg[<span class="hljs-subst">&#123;op_code[i + <span class="hljs-number">3</span>] - <span class="hljs-number">208</span>&#125;</span>]&quot;</span>)<br><span class="hljs-keyword">elif</span> op_code[i + <span class="hljs-number">1</span>] == <span class="hljs-number">1</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;reg[<span class="hljs-subst">&#123;op_code[i + <span class="hljs-number">2</span>] - <span class="hljs-number">208</span>&#125;</span>] ^= <span class="hljs-subst">&#123;op_code[i + <span class="hljs-number">3</span>]&#125;</span>&quot;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wrong!&quot;</span>)<br><span class="hljs-keyword">elif</span> op_code[i] == <span class="hljs-number">0xa1</span>:<br><span class="hljs-keyword">if</span> op_code[i + <span class="hljs-number">1</span>] == <span class="hljs-number">0</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;reg[<span class="hljs-subst">&#123;op_code[i + <span class="hljs-number">2</span>] - <span class="hljs-number">208</span>&#125;</span>] += reg[<span class="hljs-subst">&#123;op_code[i + <span class="hljs-number">3</span>] - <span class="hljs-number">208</span>&#125;</span>]&quot;</span>)<br><span class="hljs-keyword">elif</span> op_code[i + <span class="hljs-number">1</span>] == <span class="hljs-number">1</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;reg[<span class="hljs-subst">&#123;op_code[i + <span class="hljs-number">2</span>] - <span class="hljs-number">208</span>&#125;</span>] += <span class="hljs-subst">&#123;op_code[i + <span class="hljs-number">3</span>]&#125;</span>&quot;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;wrong!&quot;</span>)<br></code></pre></td></tr></table></figure><p>使用z3爆破出来flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>m = [<span class="hljs-number">0x84</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x6D</span>,<br><span class="hljs-number">0x8C</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x7E</span>,<br><span class="hljs-number">0x8B</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x5C</span>,<br><span class="hljs-number">0x69</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x81</span>]<br>s = Solver()<br>flag = [BitVec(<span class="hljs-string">f&quot;flag[<span class="hljs-subst">&#123;i&#125;</span>]&quot;</span>,<span class="hljs-number">8</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">29</span>)]<br><span class="hljs-built_in">print</span>(flag)<br>reg = [<span class="hljs-number">0</span>]*<span class="hljs-number">4</span><br><br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">181</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">222</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">161</span><br>reg[<span class="hljs-number">1</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">3</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">2</span><br>reg[<span class="hljs-number">0</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">3</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">3</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">1</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">2</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">0</span><br>flag[<span class="hljs-number">3</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">10</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">97</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">113</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">122</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">3</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">2</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">2</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">2</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">1</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">2</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">0</span><br>flag[<span class="hljs-number">10</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">17</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">197</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">162</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">123</span><br>reg[<span class="hljs-number">1</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">2</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">0</span><br>reg[<span class="hljs-number">1</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">3</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">2</span><br>reg[<span class="hljs-number">1</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">3</span><br>flag[<span class="hljs-number">17</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">22</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">140</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">230</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">252</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">2</span><br>reg[<span class="hljs-number">2</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">2</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">2</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">1</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">1</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">3</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] ^= reg[<span class="hljs-number">1</span>]<br>flag[<span class="hljs-number">22</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">5</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">74</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">112</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">23</span><br>reg[<span class="hljs-number">0</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">0</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span><br>flag[<span class="hljs-number">5</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">31</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">11</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">217</span><br>reg[<span class="hljs-number">0</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">2</span><br>reg[<span class="hljs-number">3</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">3</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">2</span><br>flag[<span class="hljs-number">0</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">7</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">183</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">240</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">86</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">1</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">2</span><br>reg[<span class="hljs-number">2</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">3</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">3</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">2</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">2</span><br>flag[<span class="hljs-number">7</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">25</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">198</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">128</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">78</span><br>reg[<span class="hljs-number">0</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">2</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">2</span><br>reg[<span class="hljs-number">2</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">2</span><br>reg[<span class="hljs-number">1</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">2</span><br>flag[<span class="hljs-number">25</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">23</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">198</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">212</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">41</span><br>reg[<span class="hljs-number">1</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">2</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">3</span><br>reg[<span class="hljs-number">3</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">2</span>] ^= reg[<span class="hljs-number">1</span>]<br>flag[<span class="hljs-number">23</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">14</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">80</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">228</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">249</span><br>reg[<span class="hljs-number">0</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">3</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">2</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span><br>reg[<span class="hljs-number">0</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">3</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] += reg[<span class="hljs-number">2</span>]<br>flag[<span class="hljs-number">14</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">19</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">109</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">7</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">1</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">1</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">2</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">3</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">0</span><br>reg[<span class="hljs-number">2</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">0</span><br>reg[<span class="hljs-number">1</span>] += reg[<span class="hljs-number">2</span>]<br>flag[<span class="hljs-number">19</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">26</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">177</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">58</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">79</span><br>reg[<span class="hljs-number">0</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">2</span><br>reg[<span class="hljs-number">2</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">1</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">3</span><br>flag[<span class="hljs-number">26</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">20</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">149</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">4</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">70</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">2</span><br>reg[<span class="hljs-number">2</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">2</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">2</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">3</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">1</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] += reg[<span class="hljs-number">2</span>]<br>flag[<span class="hljs-number">20</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">244</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">122</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">24</span><br>reg[<span class="hljs-number">1</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">3</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">2</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">0</span><br>reg[<span class="hljs-number">3</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">2</span><br>reg[<span class="hljs-number">0</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">3</span><br>flag[<span class="hljs-number">2</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">18</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">218</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">19</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">154</span><br>reg[<span class="hljs-number">1</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">3</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">2</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">3</span><br>reg[<span class="hljs-number">1</span>] -= reg[<span class="hljs-number">3</span>]<br>flag[<span class="hljs-number">18</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">4</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">216</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">42</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">188</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">2</span><br>reg[<span class="hljs-number">1</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span><br>reg[<span class="hljs-number">0</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">3</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">3</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">2</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">0</span><br>flag[<span class="hljs-number">4</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">6</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">110</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">74</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">53</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">2</span><br>reg[<span class="hljs-number">1</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">3</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">3</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">2</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">1</span><br>flag[<span class="hljs-number">6</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">11</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">112</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">4</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">174</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">2</span><br>reg[<span class="hljs-number">0</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">1</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">1</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">2</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">1</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">0</span><br>flag[<span class="hljs-number">11</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">21</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">153</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">7</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">229</span><br>reg[<span class="hljs-number">1</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">3</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">2</span><br>reg[<span class="hljs-number">3</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">3</span><br>flag[<span class="hljs-number">21</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">9</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">119</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">10</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">2</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">2</span><br>reg[<span class="hljs-number">3</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">3</span><br>reg[<span class="hljs-number">1</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">2</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">2</span><br>flag[<span class="hljs-number">9</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">28</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">28</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">18</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">246</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">3</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">3</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span><br>reg[<span class="hljs-number">0</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">1</span>] -= reg[<span class="hljs-number">3</span>]<br>flag[<span class="hljs-number">28</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">15</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">165</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">53</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">177</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">0</span><br>reg[<span class="hljs-number">3</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">2</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">2</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">1</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">3</span>] ^= reg[<span class="hljs-number">1</span>]<br>flag[<span class="hljs-number">15</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">16</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">227</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">190</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">97</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">2</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">2</span><br>reg[<span class="hljs-number">1</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">2</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">1</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">3</span><br>flag[<span class="hljs-number">16</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">8</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">43</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">53</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">212</span><br>reg[<span class="hljs-number">0</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">3</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">2</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">2</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] += reg[<span class="hljs-number">2</span>]<br>flag[<span class="hljs-number">8</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">176</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">178</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">91</span><br>reg[<span class="hljs-number">1</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">1</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">2</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">1</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">1</span><br>flag[<span class="hljs-number">1</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">13</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">232</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">57</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">244</span><br>reg[<span class="hljs-number">2</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">2</span><br>reg[<span class="hljs-number">3</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">2</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">2</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">2</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">1</span><br>flag[<span class="hljs-number">13</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">24</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">114</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">161</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">124</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">2</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">3</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">3</span>] -= reg[<span class="hljs-number">3</span>]<br>flag[<span class="hljs-number">24</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">12</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">152</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">181</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">43</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">2</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">3</span><br>reg[<span class="hljs-number">3</span>] ^= reg[<span class="hljs-number">1</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">2</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span><br>reg[<span class="hljs-number">2</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">0</span><br>flag[<span class="hljs-number">12</span>] = reg[<span class="hljs-number">0</span>]<br>reg[<span class="hljs-number">0</span>] = flag[<span class="hljs-number">27</span>]<br>reg[<span class="hljs-number">1</span>] = <span class="hljs-number">141</span><br>reg[<span class="hljs-number">2</span>] = <span class="hljs-number">57</span><br>reg[<span class="hljs-number">3</span>] = <span class="hljs-number">78</span><br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">3</span><br>reg[<span class="hljs-number">0</span>] ^= <span class="hljs-number">1</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">2</span><br>reg[<span class="hljs-number">1</span>] -= reg[<span class="hljs-number">3</span>]<br>reg[<span class="hljs-number">3</span>] += reg[<span class="hljs-number">2</span>]<br>reg[<span class="hljs-number">0</span>] -= <span class="hljs-number">0</span><br>reg[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span><br>reg[<span class="hljs-number">0</span>] += reg[<span class="hljs-number">2</span>]<br>flag[<span class="hljs-number">27</span>] = reg[<span class="hljs-number">0</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">29</span>):<br>    s.add(m[i] == flag[i])<br><br><span class="hljs-keyword">assert</span> s.check() == z3.sat<br><span class="hljs-built_in">print</span>(s.model())<br><br></code></pre></td></tr></table></figure><p>得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = [<span class="hljs-number">0</span>]*<span class="hljs-number">30</span><br>flag[<span class="hljs-number">5</span>] = <span class="hljs-number">118</span><br>flag[<span class="hljs-number">11</span>] = <span class="hljs-number">108</span><br>flag[<span class="hljs-number">8</span>] = <span class="hljs-number">116</span><br>flag[<span class="hljs-number">16</span>] = <span class="hljs-number">104</span><br>flag[<span class="hljs-number">18</span>] = <span class="hljs-number">110</span><br>flag[<span class="hljs-number">21</span>] = <span class="hljs-number">115</span><br>flag[<span class="hljs-number">27</span>] = <span class="hljs-number">100</span><br>flag[<span class="hljs-number">28</span>] = <span class="hljs-number">125</span><br>flag[<span class="hljs-number">6</span>] = <span class="hljs-number">105</span><br>flag[<span class="hljs-number">4</span>] = <span class="hljs-number">123</span><br>flag[<span class="hljs-number">3</span>] = <span class="hljs-number">103</span><br>flag[<span class="hljs-number">10</span>] = <span class="hljs-number">97</span><br>flag[<span class="hljs-number">23</span>] = <span class="hljs-number">95</span><br>flag[<span class="hljs-number">7</span>] = <span class="hljs-number">114</span><br>flag[<span class="hljs-number">17</span>] = <span class="hljs-number">105</span><br>flag[<span class="hljs-number">26</span>] = <span class="hljs-number">114</span><br>flag[<span class="hljs-number">24</span>] = <span class="hljs-number">104</span><br>flag[<span class="hljs-number">1</span>] = <span class="hljs-number">108</span><br>flag[<span class="hljs-number">20</span>] = <span class="hljs-number">95</span><br>flag[<span class="hljs-number">0</span>] = <span class="hljs-number">102</span><br>flag[<span class="hljs-number">12</span>] = <span class="hljs-number">95</span><br>flag[<span class="hljs-number">9</span>] = <span class="hljs-number">117</span><br>flag[<span class="hljs-number">15</span>] = <span class="hljs-number">99</span><br>flag[<span class="hljs-number">22</span>] = <span class="hljs-number">111</span><br>flag[<span class="hljs-number">25</span>] = <span class="hljs-number">97</span><br>flag[<span class="hljs-number">19</span>] = <span class="hljs-number">101</span><br>flag[<span class="hljs-number">14</span>] = <span class="hljs-number">97</span><br>flag[<span class="hljs-number">13</span>] = <span class="hljs-number">109</span><br>flag[<span class="hljs-number">2</span>] = <span class="hljs-number">97</span><br><br>f = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    f+=<span class="hljs-built_in">chr</span>(flag[i])<br><span class="hljs-built_in">print</span>(f)<br></code></pre></td></tr></table></figure><h2 id="艾克体悟题"><a href="#艾克体悟题" class="headerlink" title="艾克体悟题"></a>艾克体悟题</h2><p>用jadx打开，找到关键代码</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202301211054432.png" alt="image-20230115134433441"></p><p>再使用adb shell启动指定的Activity(FlagActivity)打开apk，看到点击10000次，之后使用python中的 pyautogui 库控制鼠标自动进行连点操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pyautogui <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> time<br>pd.FAILSAFE = <span class="hljs-literal">True</span><br><br>time.sleep(<span class="hljs-number">3</span>)<br><span class="hljs-comment">#3秒时间自己移动到要点击的位置</span><br>pd.click(clicks=<span class="hljs-number">100000</span>,interval=<span class="hljs-number">0.0001</span>)<br><span class="hljs-comment"># pyautogui.click()</span><br><span class="hljs-comment"># (100,100, clicks=2,interval=0.5,button=‘right’,duration=0.2)</span><br><span class="hljs-comment"># 位置，点击次数，间隔时间，右键(默认左键)，移动间隔</span><br></code></pre></td></tr></table></figure><p>看到了结果</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202301211054313.png" alt="image-20230115134624644"></p><h2 id="pyre"><a href="#pyre" class="headerlink" title="pyre"></a>pyre</h2><p>得到文件pyre.exe，由文件名字可以看出这个是由py文件编译成的exe文件，则使用pyinstxtractor.py将pyre进行反编译</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202301211054363.png" alt="image-20230115135106877"></p><p>.pyc文件是由.exe反编译得到的，现在将.pyc反编译成.py文件。则使用uncompyle6进行反编译，得到源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># uncompyle6 version 3.8.0</span><br><span class="hljs-comment"># Python bytecode 3.7.0 (3394)</span><br><span class="hljs-comment"># Decompiled from: Python 3.10.4 (tags/v3.10.4:9d38120, Mar 23 2022, 23:13:41) [MSC v.1929 64 bit (AMD64)]</span><br><span class="hljs-comment"># Embedded file name: 1.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>():<br>    a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;plz input your flag:&#x27;</span>)<br>    c = [<span class="hljs-number">144</span>, <span class="hljs-number">163</span>, <span class="hljs-number">158</span>, <span class="hljs-number">177</span>, <span class="hljs-number">121</span>, <span class="hljs-number">39</span>, <span class="hljs-number">58</span>, <span class="hljs-number">58</span>, <span class="hljs-number">91</span>, <span class="hljs-number">111</span>, <span class="hljs-number">25</span>, <span class="hljs-number">158</span>, <span class="hljs-number">72</span>, <span class="hljs-number">53</span>, <span class="hljs-number">152</span>, <span class="hljs-number">78</span>, <span class="hljs-number">171</span>, <span class="hljs-number">12</span>, <span class="hljs-number">53</span>, <span class="hljs-number">105</span>, <span class="hljs-number">45</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">53</span>, <span class="hljs-number">12</span>, <span class="hljs-number">171</span>, <span class="hljs-number">111</span>, <span class="hljs-number">91</span>, <span class="hljs-number">53</span>, <span class="hljs-number">152</span>, <span class="hljs-number">105</span>, <span class="hljs-number">45</span>, <span class="hljs-number">152</span>, <span class="hljs-number">144</span>, <span class="hljs-number">39</span>, <span class="hljs-number">171</span>, <span class="hljs-number">45</span>, <span class="hljs-number">91</span>, <span class="hljs-number">78</span>, <span class="hljs-number">45</span>, <span class="hljs-number">158</span>, <span class="hljs-number">8</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a) != <span class="hljs-number">42</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;wrong length&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    b = <span class="hljs-number">179</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(a[i]) * <span class="hljs-number">33</span> % b != c[i]:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;wrong&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;win&#x27;</span>)<br><br><br>check()<br></code></pre></td></tr></table></figure><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>():<br>    <span class="hljs-comment"># a = input(&#x27;plz input your flag:&#x27;)</span><br>     c = [<span class="hljs-number">144</span>, <span class="hljs-number">163</span>, <span class="hljs-number">158</span>, <span class="hljs-number">177</span>, <span class="hljs-number">121</span>, <span class="hljs-number">39</span>, <span class="hljs-number">58</span>, <span class="hljs-number">58</span>, <span class="hljs-number">91</span>, <span class="hljs-number">111</span>, <span class="hljs-number">25</span>, <span class="hljs-number">158</span>, <span class="hljs-number">72</span>, <span class="hljs-number">53</span>, <span class="hljs-number">152</span>, <span class="hljs-number">78</span>, <span class="hljs-number">171</span>, <span class="hljs-number">12</span>, <span class="hljs-number">53</span>, <span class="hljs-number">105</span>, <span class="hljs-number">45</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">53</span>, <span class="hljs-number">12</span>, <span class="hljs-number">171</span>, <span class="hljs-number">111</span>, <span class="hljs-number">91</span>, <span class="hljs-number">53</span>, <span class="hljs-number">152</span>, <span class="hljs-number">105</span>, <span class="hljs-number">45</span>, <span class="hljs-number">152</span>, <span class="hljs-number">144</span>, <span class="hljs-number">39</span>, <span class="hljs-number">171</span>, <span class="hljs-number">45</span>, <span class="hljs-number">91</span>, <span class="hljs-number">78</span>, <span class="hljs-number">45</span>, <span class="hljs-number">158</span>, <span class="hljs-number">8</span>]<br>    b = <span class="hljs-number">179</span><br>    flag = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c)):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">127</span>):<br>            <span class="hljs-keyword">if</span> i * <span class="hljs-number">33</span> % b == c[j]:<br>                flag += <span class="hljs-built_in">chr</span>(i)<br>    <span class="hljs-built_in">print</span>(flag)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;win&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    check()<br></code></pre></td></tr></table></figure><h1 id="Ctypto"><a href="#Ctypto" class="headerlink" title="Ctypto"></a>Ctypto</h1><h2 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h2><p>低加密指数广播攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 低加密指数广播攻击</span><br>c1 = <span class="hljs-number">77937096404205748707848524886584448875850991827343762526842406540095217122340186495689211639828709391945949367937807271989380621205927758510933126500505054808568907096277587733504527004989540192102817350162653327738752567421665823335926005488693142837878096354060091537341990136608834743278747493863446666197</span><br>n1 = <span class="hljs-number">107989488160641116069258755726919642310995622971320810931229976617363670913430848643226601224445019244805049211933010752793341309990647442336933014662106243627708296174945051939266215681549528478373545224168593919209027574243547010372826678924942796912347762261037037484582254766990954174589955363369189090399</span><br><br>c2 = <span class="hljs-number">7276602020665889334794215148531934461749112206055059910962638654184213321972035400589202963910482132917837173287607044149988689038680798685913736924732333000849241133198834292456065684469670168034504801714436868635463395084515108303601635405492109481833597324835118390661666034872939252135801362868058700724</span><br>n2 = <span class="hljs-number">79602063241962220077123225665715953184764598454710572433874090423012632497610124685325935018074776782090955402497254766431878552489640215145140764072928762426258494109102346866654796870634407422381285732052829978261254477615754123714872707788291050604476877320819548250882625532334133321363182184246116929133</span><br><br>c3 = <span class="hljs-number">18423115833442719578533847231415864950147894781994212479867407735840312470592184278002775330496315700862555728703720019016521024628253579085637761865286805920229859443675563119404656660501552663346565960760118560902555354990529477311479003605217763411730574979769519768235800112466821766256478476711255190702</span><br>n3 = <span class="hljs-number">141207884057317982280058782568584837832603372980321076356762716231617772818721347076948995333628046725417092416249315317068924451013585668922500290895361880721113788488739618688388068942202567698110393467446807774956560597782169974464585368675511859087856510532832552909177857187622263032240443467850876263367</span><br><br>c4 = <span class="hljs-number">25204620836995785230585687784031124449448753764975783500647980844364600362232602130613389842797301007058534199373369311823150943339468193049840169226776616294726949069347083517243232444645931898163799794285728882359813818949304454607541074919639997876940015601639280648842591596114192799870402814034943071801</span><br>n4 = <span class="hljs-number">65031279806511127286885058988567499713321620836616273226883379753395121285687195698080292923031599713454528462738596379472693795628451161173873856219128242673808927735196614314741303674349836531360325980945295655549853481879567096772853091342358695561194106066865988451351482666477119615070360324665769337297</span><br><br>c5 = <span class="hljs-number">45121837279327129407413344257290149255968747821861598099741181881450024741208024741142195381257350494715483012463302572786981161828362999324658995027174268613352761408487704781321241521225823805035111099677379789785626646171478374563829785299603648474958334884221197554910353506975592684965381477415428346648</span><br>n5 = <span class="hljs-number">69589117067845238222927374665569176694756247886712698262398814876318236167286339566931718259793161296577880195050053391979992985101223424008276932393777314656567788018758215601781609502524960783240218013859294467033017222560302601151406316521081708906702833398705958473163118247440069739008860080942839719177</span><br><br>e = <span class="hljs-number">5</span><br><span class="hljs-keyword">import</span> binascii,gmpy2<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">import</span> libnum<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CRT</span>(<span class="hljs-params">mi, ai</span>):<br>    <span class="hljs-keyword">assert</span>(reduce(gmpy2.gcd,mi)==<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">assert</span> (<span class="hljs-built_in">isinstance</span>(mi, <span class="hljs-built_in">list</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(ai, <span class="hljs-built_in">list</span>))<br>    M = reduce(<span class="hljs-keyword">lambda</span> x, y: x * y, mi)<br>    ai_ti_Mi = [a * (M // m) * gmpy2.invert(M // m, m) <span class="hljs-keyword">for</span> (m, a) <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(mi, ai)]<br>    <span class="hljs-keyword">return</span> reduce(<span class="hljs-keyword">lambda</span> x, y: x + y, ai_ti_Mi) % M<br>n= [n1,n2,n3,n4,n5]<br>c = [c1,c2,c3,c4,c5]<br>m=gmpy2.iroot(CRT(n, c), e)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)))<br><br></code></pre></td></tr></table></figure><h2 id="TooSmall"><a href="#TooSmall" class="headerlink" title="TooSmall"></a>TooSmall</h2><p>低加密指数攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 低加密指数攻击</span><br>c = <span class="hljs-number">175676150266632410616162762356687205410801778521204061743824614501521491467321354537176339497891794582100832374569450295870775955534149743951983884456205267484513946757664236830826982324882175943807461330356022724784422149420936260702459587777726723507198511480127366711488924436543581920264478202612069</span><br><br>n = <span class="hljs-number">17272900470295565772687696456154628174886900407827086304906459522243645797222164333699196612311334314012345085575691219349997263507454537323874793204306761725417918998859603461948454526864291518045714095352686711865919563559305046664260596538346694160305176227904100056852494273287347491199905045334948079086441368329923430887677352152991598581861563902296796509628766299492942985724913669235716836859692427060169487880079642957296574840839925023235301322392941444654039541522571885255427577113097442512837060479221710454189132874375918458894597324191159180023010551730555761323922315735799001241292635800382055106913</span><br><br>e = <span class="hljs-number">3</span><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">de</span>(<span class="hljs-params">c, e, n</span>):<br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        mm = c + n*k<br>        result, flag = gmpy2.iroot(mm, e)<br>        <span class="hljs-keyword">if</span> <span class="hljs-literal">True</span> == flag:<br>            <span class="hljs-keyword">return</span> result<br>        k += <span class="hljs-number">1</span><br><br><br>m=de(c,e,n)<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)).decode())<br></code></pre></td></tr></table></figure><h2 id="leak"><a href="#leak" class="headerlink" title="leak"></a>leak</h2><p>dp泄露</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># dp泄露</span><br>dp = <span class="hljs-number">4675286590736785312764932023953146786247818178042471304442876876031065774090900102675264716029626559826455944052892783056906863982954631993105723538850683</span><br>c = <span class="hljs-number">44404244383690472578173495931795608322312248021673657573465165312463751634535594482163718595342944976010534901124414214532222763685201540777059575993125274719759682327768686418160168144045290484053266124868036831780752525062256756405476726071200457575917418992881150196955460859434467213477010040409378914481</span><br><br>n = <span class="hljs-number">59459113382916810454933704117396246822540033287883642075375099103415799912062698237745554287158163075545268712317248537909279798521697195875045709667699812973147649745159928197471387351805491093804355019473850516661236047728823019214428423814286381115580707709354498484075493054527628608193155531959162725691</span><br><br>e = <span class="hljs-number">65537</span><br><br><br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">65535</span>):<br>    p=(dp*e-<span class="hljs-number">1</span>)//i+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> n%p==<span class="hljs-number">0</span>:<br>        q=n//p<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(p)<br><span class="hljs-built_in">print</span>(q)<br>phi_n= (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi_n)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(m)<br>flag=libnum.n2s(<span class="hljs-built_in">int</span>(m)).decode()<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h2><p><strong>vanu vmceqgglg bx uh jcld vh dqn fpw yjx pgr nu vyhbxuhtqhnpmjtxxvbsi</strong>给的这个信息不知道是什么，最后删去空格尝试维吉尼亚爆破，出来了密钥ctf，得到<strong>this challenge is so easy to you and the key is ctf is soooo interesting</strong></p><p>然后用key进行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> cycle<br><br>key1 = <span class="hljs-string">&quot;vanuvmceqgglgbxuhjcldvhdqnfpwyjxpgrnuvyhbxuhtqhnpmjtxxvbsi&quot;</span><br>key2 = <span class="hljs-string">&#x27;this challenge is so easy to you and the key is ctf is soooo interesting&#x27;</span><br>enc = <span class="hljs-string">&#x27;BRgHDggWWF1aXwgPRUhHU0QRRFoBW0FLCEURWUJbXVFYTVQRAxYQCFoa&#x27;</span><br>temp = base64.b64decode(enc).decode()<br>key = <span class="hljs-string">&quot;ctfissoooointeresting&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encry</span>(<span class="hljs-params">data, key</span>):<br>   enc = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(x) ^ <span class="hljs-built_in">ord</span>(y)) <span class="hljs-keyword">for</span> (x,y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(data, cycle(key)))<br>   <span class="hljs-keyword">return</span> enc<br><br><span class="hljs-built_in">print</span>(encry(temp,key))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【滴水逆向】PE</title>
    <link href="/posts/d7f95dad.html"/>
    <url>/posts/d7f95dad.html</url>
    
    <content type="html"><![CDATA[<h1 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h1><ul><li>分析PE格式工具—-<a href="https://blog.csdn.net/u013908944/article/details/103356615">PETool</a></li><li><strong>引用</strong><ul><li><a href="https://blog.csdn.net/freeking101/article/details/102752048">PE文件结构详解</a></li><li><a href="https://blog.csdn.net/weixin_43655282/article/details/104291312">PE文件结构详解精华</a></li></ul></li></ul><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="PE文件"><a href="#PE文件" class="headerlink" title="PE文件"></a>PE文件</h2><ul><li><p>PE (Portable Execute) 文件是Windows下可执行文件的总称，常见的有 <strong>DLL，EXE，OCX，SYS</strong> 等。它是微软在 UNIX 平台的 COFF (通用对象文件格式) 基础上制作而成。<strong>最初设计用来提高程序在不同操作系统上的移植性，但实际上这种文件格式仅用在 Windows 系列操作系统下</strong>。<strong>PE文件是指 32 位可执行文件，也称为PE32。64位的可执行文件称为 PE+ 或 PE32+，是PE(PE32)的一种扩展形式（请注意不是PE64)</strong></p></li><li><p>早期磁盘空间不足，PE磁盘文件与内存映像结构不同，磁盘每200h为一节，内存则是1000h为一节。后来随之发展，二者相一致</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202301121246317.png" alt="image-20230112124638285"></p></li><li><p>PE文件的结构一般来说如下图所示：从起始位置开始依次是 <strong>DOS头</strong>，<strong>NT头</strong>，<strong>节表</strong> 以及<strong>具体的节</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202301121244920.png" alt="image-20230112124420891"></p></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202301121155957.png"></p><h2 id="PE文件执行顺序"><a href="#PE文件执行顺序" class="headerlink" title="PE文件执行顺序"></a>PE文件执行顺序</h2><ol><li>当一个 PE 文件被执行时，<strong>PE 装载器</strong>首先检查 DOS header 里的 PE header 的偏移量。如果找到，则直接跳转到 PE header 的位置。</li><li>当<strong>PE 装载器</strong>跳转到 PE header 后，第二步要做的就是检查 PE header 是否有效。如果该 PE header 有效，就跳转到 PE header 的尾部。</li><li>紧跟 PE header 尾部的是节表。PE装载器 执行完第二步后开始读取节表中的节段信息，并采用文件映射的方法将这些节段映射到内存，<strong>同时附上节表里指定节段的读写属性</strong>。<ul><li><strong>文件映射</strong>—-在执行一个PE文件的时候，Windows并不在一开始就将整个文件读入内存，而是采用与内存映射的机制，也就是说，<strong>Windows装载器在装载的时候仅仅建立好虚拟地址和PE文件之间的映射关系，只有真正执行到某个内存页中的指令或者访问某一页中的数据时，这个页面才会被从磁盘提交到物理内存</strong>，这种机制使文件装入的速度和文件大小没有太大的关系</li></ul></li><li>PE文件映射入内存后，PE装载器 将继续处理PE文件中类似 import table （输入表）的逻辑部分。</li></ol><h2 id="PE文件结构"><a href="#PE文件结构" class="headerlink" title="PE文件结构"></a>PE文件结构</h2><ol><li><strong>DOS头</strong> 是用来兼容 MS-DOS 操作系统的，目的是当这个文件在 MS-DOS 上运行时提示一段文字，大部分情况下是：This program cannot be run in DOS mode. 同时指明 NT 头在文件中的位置。</li><li><strong>NT头</strong> 包含 windows PE 文件的主要信息，其中包括一个 <strong>‘PE’ 字样的签名</strong>，<strong>PE文件头（IMAGE_FILE_HEADER）</strong>和 <strong>PE可选头（IMAGE_OPTIONAL_HEADER32）。</strong></li><li><strong>节表</strong>：是 PE 文件后续节的描述，windows 根据节表的描述加载每个节。</li><li><strong>节</strong>：每个节实际上是一个容器，可以包含代码、数据等等，每个节可以有独立的内存权限，比如代码节默认有读&#x2F;执行权限，节的名字和数量可以自己定义，未必是上图中的三个。</li></ol><h1 id="可执行文件头"><a href="#可执行文件头" class="headerlink" title="可执行文件头"></a>可执行文件头</h1><p>win采用小端序存储，查看十六进制时需要从右往左</p><h2 id="DOS头"><a href="#DOS头" class="headerlink" title="DOS头"></a>DOS头</h2><h3 id="IMAGE-DOS-HEADER"><a href="#IMAGE-DOS-HEADER" class="headerlink" title="IMAGE_DOS_HEADER"></a>IMAGE_DOS_HEADER</h3><p>所有的PE文件都是以一个<strong>64字节</strong>(一个字节8位)的<strong>DOS头</strong>(MZ文件头)开始。这个DOS头只是为了兼容早期的DOS操作系统。该结构体中需要掌握的字段只有2个，分别是第一个字段 <code>e_magic</code> 和最后一个字段 <code>e_lfanew</code> 字段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_DOS_HEADER</span> &#123;</span>　<span class="hljs-comment">// DOS .EXE header</span><br>WORD　e_magic;　　　　<span class="hljs-comment">// Magic number</span><br>WORD　e_cblp;　　　　 <span class="hljs-comment">// Bytes on last page of file</span><br>WORD　e_cp;　　　　　 <span class="hljs-comment">// Pages in file</span><br>WORD　e_crlc;　　　　 <span class="hljs-comment">// Relocations</span><br>WORD　e_cparhdr;　　　<span class="hljs-comment">// Size of header in paragraphs</span><br>WORD　e_minalloc;　　 <span class="hljs-comment">// Minimum extra paragraphs needed</span><br>WORD　e_maxalloc;　　 <span class="hljs-comment">// Maximum extra paragraphs needed</span><br>WORD　e_ss;　　　　　　<span class="hljs-comment">// Initial (relative) SS value</span><br>WORD　e_sp;　　　　　　<span class="hljs-comment">// Initial SP value</span><br>WORD　e_csum;　　　　　<span class="hljs-comment">// ChecksumWORD e_ip;Initial IP valueWORD　e_cs;Initial (relative) CS value</span><br>WORD　e_lfarlc;　　　　<span class="hljs-comment">// File address of relocation table</span><br>WORD　e_ovno;　　　　　<span class="hljs-comment">// Overlay number</span><br>WORD　e_res[<span class="hljs-number">4</span>];　　　　<span class="hljs-comment">// Reserved words</span><br>WORD　e_oemid;　　　　 <span class="hljs-comment">// OEM identifier (for e_oeminfo)</span><br>WORD　e_oeminfo;　　　 <span class="hljs-comment">// OEM information; e_oemid specific</span><br>WORD　e_res2[<span class="hljs-number">10</span>];　　　<span class="hljs-comment">// Reserved words</span><br>LONG　e_lfanew;　　　　<span class="hljs-comment">// File address of new exe header</span><br>&#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;<br><br></code></pre></td></tr></table></figure><ul><li><p><code>e_magic</code> 字段</p><p>DOS 可执行文件的标识符，占用2字节。该位置保存着的字符是“MZ”。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_DOS_SIGNATURE　　　　<span class="hljs-comment">//0x5A4D　MZ</span></span><br></code></pre></td></tr></table></figure></li><li><p><code>e_lfanew</code> 字段：<br>PE头相对于文件的偏移，定位PE文件</p></li><li><p>作用：</p><ul><li><strong>定位PE文件头开始位置</strong>，也可用于<strong>PE文件合法性检测</strong></li></ul></li></ul><h2 id="NT头"><a href="#NT头" class="headerlink" title="NT头"></a>NT头</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_NT_HEADERS</span> &#123;</span> <br>        DWORD Signature;                         <br>      <span class="hljs-comment">//该结构体中的Signature就是PE标识符,标识该文件是否是PE文件。4字节，即 50 45 0000 -&gt; 00 00 45 50 -&gt; PE</span><br>        IMAGE_FILE_HEADER FileHeader;             <br>      <span class="hljs-comment">// IMAGE_FILE_HEADER是PE文件头</span><br>        IMAGE_OPTIONAL_HEADER32 OptionalHeader;   <span class="hljs-comment">// </span><br>&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;  <br></code></pre></td></tr></table></figure><ul><li><p><code>Signature(签名)</code>字段</p><ul><li>类似于 DOS头中的 e_magic，其高16位是0，低16是0x4550，用字符表示是 “PE”。</li></ul></li><li><p>为简单分析，此时PE头(file与optional)只看32位，64位的暂且不看</p></li></ul><h3 id="IMAGE-FILE-HEADER"><a href="#IMAGE-FILE-HEADER" class="headerlink" title="IMAGE_FILE_HEADER"></a>IMAGE_FILE_HEADER</h3><p><strong>标准PE头</strong>，共20H个字节，其中需要掌握的字段有5个(注意NT头有个4字节的Signature)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_FILE_HEADER</span> &#123;</span> <br>        WORD    Machine;              <br>        <span class="hljs-comment">// 每个CPU拥有唯一的Machine码 -&gt; 4C 01 -&gt; PE -&gt; 兼容32位Intel X86芯片</span><br><br>        WORD    NumberOfSections;     <br>        <span class="hljs-comment">// 指文件中存在的节段(又称节区)数量，也就是节表中的项数 -&gt; 00 04 -&gt; 4</span><br>        <span class="hljs-comment">// 该值一定要大于0，且当定义的节段数与实际不符时，将发生运行错误。</span><br><br>        DWORD   TimeDateStamp;         <br>        <span class="hljs-comment">// PE文件的创建时间，一般有连接器填写 -&gt; 38 D1 29 1E</span><br>    <br>        DWORD   PointerToSymbolTable;<br>        <span class="hljs-comment">// COFF文件符号表在文件中的偏移 -&gt; 00 00 00 00</span><br>        DWORD   NumberOfSymbols;       <br>        <span class="hljs-comment">// 符号表的数量 -&gt; 00 00 00 00</span><br><br>        WORD    SizeOfOptionalHeader; <br>        <span class="hljs-comment">// 指出IMAGE_OPTIONAL_HEADER32结构体的长度。-&gt;  00 E0 -&gt; 224字节</span><br>        <span class="hljs-comment">// PE32+ 格式文件中使用的是IMAGE_OPTIONAL_HEADER64结构体，</span><br>        <span class="hljs-comment">// 这两个结构体尺寸是不相同的，所以需要在SizeOfOptionalHeader中指明大小。</span><br><br>        WORD    Characteristics;      <br>        <span class="hljs-comment">// 标识文件的属性，二进制中每一位代表不同属性 -&gt; 0F 01</span><br>    <br>&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;<br></code></pre></td></tr></table></figure><ul><li><p><code>Machine</code>字段</p><ul><li>指明程序能够运行的CPU型号(运行平台)：0x0000 任何处理器，0x014C x86及后续处理器</li></ul></li><li><p><code>NumberOfSections</code>字段</p><ul><li>文件中存在的节的总数，如果要新增节或者合并节，就要修改这个值</li></ul></li><li><p><strong>TimeDateStamp</strong>字段</p><ul><li>时间戳：文件的创建时间(和操作系统的创建时间无关)，编译器填写的</li></ul></li><li><p><code>SizeOfOptionalHeader</code>字段</p><ul><li>可选PE头的大小，32位PE文件默认E0h，64位PE文件默认为F0h，大小可以自定义</li></ul></li><li><p><strong>Characteristics</strong>字段</p><ul><li>文件属性，每个位(十六进制转化为二进制)有不同的含义，可执行文件值为10F 即0 1 2 3 8位置1</li></ul></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202301121638095.png" alt="img"></p><h3 id="IMAGE-OPTIONAL-HEADER"><a href="#IMAGE-OPTIONAL-HEADER" class="headerlink" title="IMAGE_OPTIONAL_HEADER"></a>IMAGE_OPTIONAL_HEADER</h3><p><strong>可选PE头</strong>，32位下大小为E0个字节，64位下大小为F0个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_OPTIONAL_HEADER</span> &#123;</span> <br>        WORD    Magic;                     <br>        <span class="hljs-comment">// 魔数 32位为0x10B，64位为0x20B，ROM镜像为0x107&#x27;</span><br>        BYTE    MajorLinkerVersion;         <br>        <span class="hljs-comment">// 链接器的主版本号 -&gt; 05</span><br>        BYTE    MinorLinkerVersion;         <br>        <span class="hljs-comment">// 链接器的次版本号 -&gt; 0C</span><br>        DWORD   SizeOfCode;                 <br>        <span class="hljs-comment">// 代码节大小，一般放在“.text”节里，必须是FileAlignment的整数倍 -&gt; 40 00 04 00</span><br>        DWORD   SizeOfInitializedData;      <br>        <span class="hljs-comment">// 已初始化数大小，一般放在“.data”节里，必须是FileAlignment的整数倍 -&gt; 40 00 0A 00</span><br>        DWORD   SizeOfUninitializedData;    <br>        <span class="hljs-comment">// 未初始化数大小，一般放在“.bss”节里，必须是FileAlignment的整数倍 -&gt; 00 00 00 00</span><br>        DWORD   AddressOfEntryPoint;       <br>        <span class="hljs-comment">// 指出程序最先执行的代码起始地址(RVA) -&gt; 00 00 10 00&#x27;</span><br>        DWORD   BaseOfCode;                 <br>        <span class="hljs-comment">// 代码基址，当镜像被加载进内存时代码节的开头RVA。必须是SectionAlignment的整数倍 -&gt; 40 00 10 00</span><br> <br>        DWORD   BaseOfData;                 <br>        <span class="hljs-comment">// 数据基址，当镜像被加载进内存时数据节的开头RVA。必须是SectionAlignment的整数倍 -&gt; 40 00 20 00</span><br>        <span class="hljs-comment">// 在64位文件中此处被并入紧随其后的ImageBase中。</span><br> <br>        DWORD   ImageBase;                 <br>        <span class="hljs-comment">// 当加载进内存时，镜像的第1个字节的首选地址。</span><br>        <span class="hljs-comment">// WindowEXE默认ImageBase值为00400000，DLL文件的ImageBase值为10000000，也可以指定其他值。</span><br>        <span class="hljs-comment">// 执行PE文件时，PE装载器先创建进程，再将文件载入内存，</span><br>        <span class="hljs-comment">// 然后把EIP寄存器的值设置为ImageBase+AddressOfEntryPoint&#x27;</span><br>        <span class="hljs-comment">// PE文件的Body部分被划分成若干节段，这些节段储存着不同类别的数据。</span><br>        DWORD   SectionAlignment;          <br>        <span class="hljs-comment">// SectionAlignment指定了节段在内存中的最小单位， -&gt; 00 00 10 00&#x27;</span><br>        DWORD   FileAlignment;             <br>        <span class="hljs-comment">// FileAlignment指定了节段在磁盘文件中的最小单位，-&gt; 00 00 02 00</span><br>        <span class="hljs-comment">// SectionAlignment必须大于或者等于FileAlignment&#x27;</span><br> <br>        WORD    MajorOperatingSystemVersion;<span class="hljs-comment">// 主系统的主版本号 -&gt; 00 04</span><br>        WORD    MinorOperatingSystemVersion;<span class="hljs-comment">// 主系统的次版本号 -&gt; 00 00</span><br>        WORD    MajorImageVersion;          <span class="hljs-comment">// 镜像的主版本号 -&gt; 00 00</span><br>        WORD    MinorImageVersion;          <span class="hljs-comment">// 镜像的次版本号 -&gt; 00 00</span><br>        WORD    MajorSubsystemVersion;      <span class="hljs-comment">// 子系统的主版本号 -&gt; 00 04</span><br>        WORD    MinorSubsystemVersion;      <span class="hljs-comment">// 子系统的次版本号 -&gt; 00 00</span><br>        DWORD   Win32VersionValue;          <span class="hljs-comment">// 保留，必须为0 -&gt; 00 00 00 00</span><br> <br>        DWORD   SizeOfImage;               <br>        <span class="hljs-comment">// 当镜像被加载进内存时的大小，包括所有的文件头。向上舍入为SectionAlignment的倍数。</span><br>        <span class="hljs-comment">// 一般文件大小与加载到内存中的大小是不同的。 -&gt; 00 00 50 00&#x27;</span><br> <br>        DWORD   SizeOfHeaders;             <br>        <span class="hljs-comment">// 所有头的总大小，向上舍入为FileAlignment的倍数。                                     </span><br>        <span class="hljs-comment">// 可以以此值作为PE文件第一节的文件偏移量。-&gt; 00 00 04 00&#x27;</span><br> <br>        DWORD   CheckSum;                   <span class="hljs-comment">// 镜像文件的校验和 -&gt; 00 00 B4 99</span><br> <br>        WORD    Subsystem;                 <br>        <span class="hljs-comment">// 运行此镜像所需的子系统 -&gt; 00 02 -&gt; 窗口应用程序</span><br>        <span class="hljs-comment">// 用来区分系统驱动文件（*.sys)与普通可执行文件（*.exe，*.dll），</span><br><br> <br>        WORD    DllCharacteristics;         <span class="hljs-comment">// DLL标识 -&gt; 00 00</span><br>        DWORD   SizeOfStackReserve;         <span class="hljs-comment">// 最大栈大小。CPU的堆栈。默认是1MB。-&gt; 00 10 00 00</span><br>        DWORD   SizeOfStackCommit;          <span class="hljs-comment">// 初始提交的堆栈大小。默认是4KB -&gt; 00 00 10 00</span><br>        DWORD   SizeOfHeapReserve;          <span class="hljs-comment">// 最大堆大小。编译器分配的。默认是1MB -&gt;00 10 00 00</span><br>        DWORD   SizeOfHeapCommit;           <span class="hljs-comment">// 初始提交的局部堆空间大小。默认是4K -&gt;00 00 10 00</span><br>        DWORD   LoaderFlags;                <span class="hljs-comment">// 保留，必须为0 -&gt; 00 00 00 00</span><br> <br>        DWORD   NumberOfRvaAndSizes;       <br>        <span class="hljs-comment">// 指定DataDirectory的数组个数，由于以前发行的Windows NT的原因，它只能为16。 -&gt; 00 00 00 10&#x27;</span><br>        IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]; <br>        <span class="hljs-comment">// 数据目录数组。详见下文。</span><br>    <br>&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;<br> <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_DATA_DIRECTORY</span> &#123;</span>  <br>    DWORD   VirtualAddress;  <br>    DWORD   Size;  <br>&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;<br></code></pre></td></tr></table></figure><ul><li><p><code>Magic</code>字段</p><ul><li>说明文件类型：<strong>10B</strong> 32位下的PE文件，<strong>20B</strong> 64位下的PE文件</li></ul></li><li><p><strong>SizeOfCode</strong>字段</p><ul><li>所有代码节的和，必须是FileAlignment的整数倍  编译器填的</li></ul></li><li><p><strong>SizeOfInitializedData</strong>字段</p><ul><li>已初始化数据大小的和，必须是FileAlignment的整数倍  编译器填的</li></ul></li><li><p><strong>SizeOfUninitializedData</strong>字段</p><ul><li>未初始化数据大小的和，必须是FileAlignment的整数倍  编译器填的</li></ul></li><li><p><code>AddressOfEntryPoint</code>字段</p><ul><li>程序入口</li></ul></li><li><p><strong>BaseOfCode</strong>字段</p><ul><li>代码开始的基址，编译器填的</li></ul></li><li><p><strong>BaseOfData</strong>字段</p><ul><li>数据开始的基址，编译器填的</li></ul></li><li><p><code>ImageBase</code>字段</p><ul><li>内存镜像基址</li></ul></li><li><p><code>SectionAlignment</code>字段</p><ul><li>内存对齐</li></ul></li><li><p><code>FileAlignment</code>字段</p><ul><li>文件对齐</li></ul></li><li><p><code>SizeOfImage</code>字段</p><ul><li>内存中整个PE文件的映射的尺寸，可以比实际的值大，但必须是SectionAlignment的整数倍</li></ul></li><li><p><code>SizeOfHeaders</code>字段</p><ul><li>所有头与节表按照<strong>文件对齐</strong>后的大小，否则加载会出错</li></ul></li><li><p><strong>CheckSum</strong>字段</p><ul><li>校验和，一些系统文件有要求.用来判断文件是否被修改</li></ul></li><li><p><strong>SizeOfStackReserve</strong>字段</p><ul><li>初始化时保留的堆栈大小</li></ul></li><li><p><strong>SizeOfStackCommit</strong>字段</p><ul><li>初始化时实际提交的大小</li></ul><p> </p></li><li><p><strong>SizeOfHeapReserve</strong>字段</p><ul><li>初始化时保留的堆大小</li></ul></li><li><p><strong>SizeOfHeapCommit</strong>字段</p><ul><li>初始化时实践提交的大小</li></ul></li><li><p><code>NumberOfRvaAndSizes</code>字段</p><ul><li>目录项数目</li></ul></li></ul><h2 id="节表"><a href="#节表" class="headerlink" title="节表"></a>节表</h2><p><strong>IMAGE_SECTION_HEADER</strong></p><p>在PE文件头与原始数据之间存在一个区块表（Section Table），它是一个IMAGE_SECTION_HEADER结构数组，<code>区块表包含每个块在映像中的信息</code>（如位置、长度、属性），分别指向不同的区块实体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IMAGE_SECTION_HEADER</span> &#123;</span><br>    Name<span class="hljs-comment">//8个字节的块名</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">    &#123;</span><br>        DWORD PhysicalAddress;<br>        DWORD VirtualSize;<br>    &#125; Misc;                     <span class="hljs-comment">//区块尺寸(真实)</span><br>    DWORD VirtualAddress;<span class="hljs-comment">//区块的RVA地址</span><br>    DWORD SizeOfRawData;<span class="hljs-comment">//在文件中对齐后的尺寸</span><br>    DWORD PointerToRawData;<span class="hljs-comment">//在文件中偏移</span><br>    DWORD PointerToRelocations;<span class="hljs-comment">//在OBJ文件中使用，重定位的偏移</span><br>    DWORD PointerToLinenumbers;<span class="hljs-comment">//行号表的偏移（供调试使用地）</span><br>    WORD NumberOfRelocations;<span class="hljs-comment">//在OBJ文件中使用，重定位项数目</span><br>    WORD NumberOfLinenumbers;<span class="hljs-comment">//行号表中行号的数目</span><br>    DWORD Characteristics;<span class="hljs-comment">//区块属性如可读，可写，可执行等</span><br>&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;<br></code></pre></td></tr></table></figure><ul><li><code>Name</code><ul><li><strong>8个字节</strong> 一般情况下是以”\0”结尾的ASCII吗字符串来标识的名称，内容可以自定义</li></ul></li><li><code>Misc</code><ul><li><strong>双字</strong> 是该节在没有对齐前的真实尺寸,该值可以不准确</li></ul></li><li><code>VirtualAddress</code><ul><li>节区在<strong>内存中</strong>的偏移地址。加上ImageBase才是在内存中的真正地址</li></ul></li><li><code>SizeOfRawData</code><ul><li>节在<strong>文件中</strong>对齐后的尺寸</li></ul></li><li><code>PointerToRawData</code><ul><li>节区在<strong>文件中</strong>的偏移</li></ul></li><li><code>Characteristics</code> <ul><li>节的属性</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【滴水逆向】C&amp;C++</title>
    <link href="/posts/91cb19e7.html"/>
    <url>/posts/91cb19e7.html</url>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h2><h3 id="函数概念"><a href="#函数概念" class="headerlink" title="函数概念"></a>函数概念</h3><ul><li>计算机的函数，是一个固定的一个程序段，或称其为一个子程序，它在可以实现固定运算功能的同时还带有一入口和一个出口，所谓的入口，就是函数所带的各个参数，我们可以通过这个入口，把函数的参数值代入子程序，供计算机处理，所谓出口，就是指函数的计算结果,也称为返回值，在计算机求得之后，由此口带回给调用它的程序。</li><li>汇编中的函数<ul><li><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210032043850.png"></li></ul></li><li>函数的入口<ul><li><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210032043993.png"></p></li><li><p>存储变量传递给函数除了存入堆栈中，也可以存入其余的寄存器中</p></li></ul></li><li>函数的出口<ul><li><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210032044374.png"></li><li>函数的计算结果除了放在寄存器中，还可以放到堆栈中</li></ul></li></ul><h3 id="Winodws堆栈"><a href="#Winodws堆栈" class="headerlink" title="Winodws堆栈"></a>Winodws堆栈</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210032045557.png"></p><ul><li>特点：<ul><li>先进后出</li><li>向低地址扩展（ESP向上移动要-4）</li></ul></li><li>堆栈平衡：<ul><li>Windows中的堆栈，是一块普通的内存，主要用来存储一些临时的数据和参数等</li><li>可以把Windows中的堆栈想象成是一个公用的书箱，函数就像是使用箱子的人，函数在执行的时候，会用到这个书箱，把一些数据存到里面。但用完的时候，一定要记得把书拿走，否则会乱的，也就是说，你放进去几本书，走的时候也要拿走几本书，这个就是堆栈平衡.</li></ul></li></ul><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li>按Ctrl+G进行查找内存地址，按F2进行CPU定位（加断点），之后按住OD上的暂停按钮使CPU达到此内存处，之后可以正常按F8进行步进</li><li>call需要按F7进行步入，遇到<code>jmp</code>按回车进行跳转<ul><li>F7指遇到函数跳入函数内部执行——单步步入</li><li>F8指直接执行函数，执行完之后到下一行——单步步过</li></ul></li><li>函数调用函数时，编译器会自动增加一个函数，用以检测是否堆栈平衡，按<code>enter</code>进入函数，按<code>-</code>退出</li></ul><h2 id="函数特点"><a href="#函数特点" class="headerlink" title="函数特点"></a>函数特点</h2><h3 id="函数分类"><a href="#函数分类" class="headerlink" title="函数分类"></a>函数分类</h3><p><a href="https://learn.microsoft.com/zh-cn/cpp/cpp/naked-cpp?view=msvc-170">naked (C++)</a></p><h4 id="裸函数"><a href="#裸函数" class="headerlink" title="裸函数"></a>裸函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __declspec(naked) Function()<br>&#123;<br>  <span class="hljs-comment">// 编译器不对裸函数进行任何处理，无法堆栈平衡，需要自己平衡堆栈</span><br>  __asm<br>    &#123;<br>        ret<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="无参数无返回值函数"><a href="#无参数无返回值函数" class="headerlink" title="无参数无返回值函数"></a>无参数无返回值函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __declspec(naked) Function()  <br>&#123;<br>__asm<br>&#123;<br>  <span class="hljs-comment">// 提升堆栈，为函数执行提供空间</span><br>push ebp<br>mov ebp,esp<br>sub esp,<span class="hljs-number">0x40</span><br>  <span class="hljs-comment">// 保留现场</span><br>push ebx<br>push esi<br>push edi<br>  <span class="hljs-comment">// 向分配空间填充数据</span><br>lea edi,dword ptr ds:[ebp<span class="hljs-number">-0x40</span>]<br>mov eax,<span class="hljs-number">0xCCCCCCCC</span><br>mov ecx,<span class="hljs-number">0x10</span><br>rep stosd<br>    <span class="hljs-comment">/*此处实现函数功能*/</span><br>  <span class="hljs-comment">// 恢复现场，将之前保留的寄存器值恢复</span><br>pop edi<br>pop esi<br>pop ebx<br>  <span class="hljs-comment">// 降低堆栈   </span><br>mov esp,ebp<br>  <span class="hljs-comment">// 恢复栈底   </span><br>pop ebp<br>  <span class="hljs-comment">// 函数执行完毕，返回到调用处</span><br>ret<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="有参数有返回值函数"><a href="#有参数有返回值函数" class="headerlink" title="有参数有返回值函数"></a>有参数有返回值函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __declspec(naked) Function(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)  <br>&#123;<br>__asm<br>&#123;<br>push ebp<br>mov ebp,esp<br>sub esp,<span class="hljs-number">0x40</span><br>push ebx<br>push esi<br>push edi<br>lea edi,dword ptr ds:[ebp<span class="hljs-number">-0x40</span>]<br>mov eax,<span class="hljs-number">0xCCCCCCCC</span><br>mov ecx,<span class="hljs-number">0x10</span><br>rep stosd<br>            <br><span class="hljs-comment">/*函数功能实现*/</span><br>mov eax,dword ptr ds:[ebp+<span class="hljs-number">8</span>]<br>add eax,dword ptr ds:[ebp+<span class="hljs-number">0xC</span>]<br><br>pop edi<br>pop esi<br>pop ebx<br>mov esp,ebp<br>pop ebp<br><br>ret<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="带局部变量的函数"><a href="#带局部变量的函数" class="headerlink" title="带局部变量的函数"></a>带局部变量的函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __declspec(naked) Function(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)  <br>&#123;<br>__asm<br>&#123;<br>push ebp<br>mov ebp,esp<br>sub esp,<span class="hljs-number">0x40</span><br>push ebx<br>push esi<br>push edi<br>lea edi,dword ptr ds:[ebp<span class="hljs-number">-0x40</span>]<br>mov eax,<span class="hljs-number">0xCCCCCCCC</span><br>mov ecx,<span class="hljs-number">0x10</span><br>rep stosd<br>          <br>  <span class="hljs-comment">/*局部变量引入*/</span><br>mov dword ptr ds:[ebp<span class="hljs-number">-4</span>],<span class="hljs-number">2</span><br>mov dword ptr ds:[ebp<span class="hljs-number">-8</span>],<span class="hljs-number">3</span><br><br>mov eax,dword ptr ds:[ebp+<span class="hljs-number">8</span>]<br>add eax,dword ptr ds:[ebp+<span class="hljs-number">0xC</span>]<br><br>pop edi<br>pop esi<br>pop ebx<br>mov esp,ebp<br>pop ebp<br><br>ret<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h3><table><thead><tr><th>调用约定</th><th>参数压栈顺序</th><th>平衡堆栈</th></tr></thead><tbody><tr><td>__cdecl</td><td>从右至左入栈</td><td>调用者清理栈(外平栈)</td></tr><tr><td>__stdcall</td><td>从右至左入栈</td><td>自身清理栈(内平栈)</td></tr><tr><td>__fastcall</td><td>ECX&#x2F;EDX传送前两个，剩下:从右至左入栈</td><td>自身清理栈(内平栈)</td></tr></tbody></table><span class="label label-info">__fastcall的参数只有大于两个才需要內平栈，两个参数直接传递寄存器，不需要平衡堆栈</span><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><h4 id="一般方式"><a href="#一般方式" class="headerlink" title="一般方式"></a>一般方式</h4><ol><li><p>观察调用处的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push        3<br>push        2<br>push        1<br>call       0040100f<br></code></pre></td></tr></table></figure></li><li><p>找到平衡堆栈的代码(外平栈)或者函数内部(內平栈)继续论证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">call        0040100f<br>add         esp,0Ch<br><br>ret 4/8/0xC/0x10<br></code></pre></td></tr></table></figure></li><li><p>将二者结合，确定参数个数</p></li></ol><h4 id="观察代码"><a href="#观察代码" class="headerlink" title="观察代码"></a>观察代码</h4><ol><li><p>不考虑ebp、esp</p></li><li><p>只找给别人赋值的寄存器eax&#x2F;ecx&#x2F;edx&#x2F;ebx&#x2F;esi&#x2F;edi</p></li><li><p>找到以后追查其来源，如果该寄存器中的值不是在<strong>函数内存赋值</strong>的，那一定是传进来的参数</p></li><li><p>获得参数数量</p><ul><li><p>公式一：寄存器 + ret  4 &#x3D; 参数个数</p></li><li><p>公式二：寄存器 + [ebp+8] + [ebp+0x] &#x3D; 参数个数</p></li></ul></li></ol><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="if……else"><a href="#if……else" class="headerlink" title="if……else"></a>if……else</h3><ul><li>反汇编语句与if语句含义相反，即若if(x&gt;&#x3D;1)，则反汇编中表达x&lt;1时跳转，否则继续顺序执行</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Fun</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br><span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">3</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212241152274.png" alt="image-20221224115216179"></p><center><strong> if……else语句</strong></center><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><ol><li><p>分支小于4或者数据无规律时，用switch无意义，生成类似if……else的反汇编</p></li><li><p>Switch语句中数值相近时，会自动生成大表(连续数值中多个不存在时，会生成小表)</p><p><a href="https://www.cnblogs.com/Reverse-xiaoyu/p/11711393.html">switch…case…语句分析（大表跟小表何时产生）</a></p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Fun</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br><span class="hljs-keyword">switch</span> (x) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;Error&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212241120544.png" alt="image-20221224112033456"></p><center><strong> Switch语句中的大表</strong></center><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Fun</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br><span class="hljs-keyword">switch</span> (x) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">101</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">108</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;X&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">109</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">110</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-string">&quot;Error&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212241139348.png" alt="image-20221224113940294"></p><center><strong> Switch语句中的小表</strong></center><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><ol><li>根据条件跳转指令所跳转到的地址，可以得到循环语句块的结束地址</li><li>根据 jmp 指令所跳转到的地址，可以得到循环语句块的起始地址</li><li>在还原while 比较时，条件跳转的逻辑与源码相反</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Fun</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br><span class="hljs-keyword">while</span> (x &lt; y)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, x);<br>x++;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212241157555.png" alt="image-20221224115755527"></p><center><strong> while语句</strong></center><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><ol><li>第一个 jmp 指令之前为赋初值部分</li><li>第一个 jmp 指令所跳转的地址为循环条件判定部分起始</li><li>判断条件后面的跳转指令条件成立时跳转的循环体外面</li><li>条件判断跳转指令所指向的地址上面有一个 jmp， jmp地址为表达式3的起始位置</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Fun</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=x;i&lt;y;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,i);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212241200812.png" alt="image-20221224120045773"></p><center><strong> for语句</strong></center><h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><h2 id="数据类型及存储"><a href="#数据类型及存储" class="headerlink" title="数据类型及存储"></a>数据类型及存储</h2><h3 id="c语言数据类型"><a href="#c语言数据类型" class="headerlink" title="c语言数据类型"></a>c语言数据类型</h3><ol><li><p><strong>基本类型</strong></p><ul><li><p>整数类型</p></li><li><p>浮点类型</p></li></ul></li><li><p><strong>构造类型</strong></p><ul><li><p>数组类型</p></li><li><p>结构体类型</p></li><li><p>共用体(联合)类型</p></li></ul></li><li><p><strong>指针类型</strong></p></li><li><p><strong>空类型(void)</strong></p></li></ol><ul><li>数据类型三个要素<ul><li>存储数据的宽度</li><li>存储数据的格式</li><li>作用范围(作用域)</li></ul></li></ul><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><table><thead><tr><th>数据类型</th><th>长度(bit)</th><th>长度(字节)</th><th>汇编中表示</th></tr></thead><tbody><tr><td>char</td><td>8BIT</td><td>1字节</td><td>BYTE</td></tr><tr><td>short</td><td>16BIT</td><td>2字节</td><td>WORD</td></tr><tr><td>int</td><td>32BIT</td><td>4字节</td><td>DWORD</td></tr><tr><td>long</td><td>32BIT</td><td>4字节</td><td></td></tr></tbody></table><ul><li>认为划分为**有符号(signed)<strong>与</strong>无符号(unsigned)**，其在计算机中存储方式相同，但是根据需求认定为不同的数值</li></ul><h4 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h4><ul><li><strong>float</strong>和<strong>double</strong></li><li>二者在存储方式上遵从<strong>IEEE</strong>规范</li></ul><ol><li>float的存储方式</li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212222043652.png" alt="image-20221222204359622"></p><ol start="2"><li>double的存储方式</li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212222044090.png" alt="image-20221222204446061"></p><ol start="3"><li>将一个float型转化为内存存储格式：<ul><li>先将这个实数的绝对值化为二进制格式</li><li>将这个二进制格式实数的小数点左移或右移n位，直到小数点移动到第一个有效数字(1)的右边</li><li>从小数点右边第一位开始数出二十三位数字放入第22到第0位</li><li>将移动位数+127并转化为二进制放入第30到23位(例如:右移3位，即127+(-3) &#x3D; 124)</li><li>若原本数字为负数，则在符号位填入“1”；否则，填入“0”</li></ul></li></ol><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><ul><li><p><code>MOVSX</code>先符号扩展，再传送，适用于有符号类型转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al,0xFF<br>movsx cx,al<br>;此时cx == 0XFFFF(看0xFF的第一位是什么，FF == 1111 1111，首位是1，扩展8个1)<br></code></pre></td></tr></table></figure></li><li><p><code>MOVZX</code>先零扩展，再传送，适用于无符号类型转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al,0xFF<br>movsx cx,al<br>;此时cx == 0XFF(直接在FF前面补8个0)<br></code></pre></td></tr></table></figure></li><li><p>小数据类型向大数据类型转换</p><ul><li>采用保留低位数据，舍弃高位数据</li></ul></li></ul><h3 id="构造类型"><a href="#构造类型" class="headerlink" title="构造类型"></a>构造类型</h3><h4 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h4><ul><li><p>一组相同类型的变量，为了方便读写，采用另外一种表示形式。其在声明的时候，必须用常量来指明长度，不能使用变量(<strong>常量是因为在编译的时候，编译器就要知道开辟的缓冲区的大小，所以必须是常量</strong>)</p></li><li><p>数组在使用时，可以通过变量来定位数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//例如：</span><br><span class="hljs-type">int</span> arr[m][n][k] = &#123;&#123;&#125;,&#123;&#125;……&#125;;<br><br><span class="hljs-comment">//寻找arr[3][2][1]</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">在编译器中，寻找方式为arr[3*n+2*k+1]。</span><br><span class="hljs-comment">一维数组与多维数组的本质没有区别，arr[m*n*k]与arr[m][n][k]开辟相同</span><br><span class="hljs-comment">*/</span>  <br></code></pre></td></tr></table></figure></li></ul><h4 id="结构体类型"><a href="#结构体类型" class="headerlink" title="结构体类型"></a>结构体类型</h4><ul><li>本质是大量数据的内存复制</li></ul><h3 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h3><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><ol><li><p>格式：<code>数据类型* 变量名</code></p></li><li><p>宽度为4字节， * 可以是任意数量</p></li><li><p>加减操作(+&#x2F;-&#x2F;++&#x2F;–)都是<code>以数据类型的宽度为标准</code>进行增加或减少，例如：char为1，int为4。</p><p><code>总结</code>：加减增加的是去掉一个 * 之后的数据宽度，若是char **，增加的就是4字节</p></li><li><p><code>两种类型相互加减</code>：</p><ul><li>两个类型相同的带 * 类型的变量可以进行减法操作，减完后的数据类型是去掉 * 的数据类型</li><li>相减的结果要除以去掉一个 * 的数据类型的宽度</li></ul></li></ol><h4 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h4><ol><li><p><code>&amp;</code> 是地址符，类型是其后面的类型加一个 * ，任何变量都可以使用&amp;来获取地址，但不能用在常量上</p></li><li><p><code>带 * 类型的变量</code>，可以通过在其变量前加 * 来获取<code>其指向内存中存储的值</code>，即在带 * 类型的变量前面加*，类型是其原来的类型减去一个 * 。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> x;<br>&amp;x<span class="hljs-comment">//(int*)</span><br>    <br><span class="hljs-type">int</span>* y;<br>*y<span class="hljs-comment">//(int)</span><br></code></pre></td></tr></table></figure><h4 id="结合"><a href="#结合" class="headerlink" title="结合"></a>结合</h4><ol><li>指针函数<ul><li>返回值为指针的函数—-函数</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span>* <span class="hljs-title function_">strcpy</span> <span class="hljs-params">(<span class="hljs-type">char</span>* dest,<span class="hljs-type">char</span>* src)</span><br>&#123;<br><span class="hljs-keyword">while</span>((*(dest++)=*(src++))!=<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">return</span> dest;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>函数指针<ul><li>声明—-返回类型(*函数名)(参数表)</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//声明</span><br><span class="hljs-type">int</span> (*pFun)(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>);<br><span class="hljs-comment">//赋值</span><br>pFun = (<span class="hljs-type">int</span> (*)(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>))<span class="hljs-number">10</span>;<br>pFun = 函数名;<br></code></pre></td></tr></table></figure><ol start="2"><li>指针数组<ul><li>数组的类型是指针类型—-数组</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span>* arr[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>数组指针<ul><li>本质是指针，<code>不必指向数组</code>，只是使用定义的数组的宽度</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//变量名px，数据类型 int[5]</span><br><span class="hljs-type">int</span>(*px)[<span class="hljs-number">5</span>];<br><br><span class="hljs-comment">//例子</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">15</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br><span class="hljs-type">int</span>(*p)[<span class="hljs-number">2</span>];<br>p = (<span class="hljs-type">int</span>(*) [<span class="hljs-number">2</span>])arr;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, *(*(p+<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>), *(p + <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>], p[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure><ol start="3"><li>结构体指针<ul><li>结构体</li></ul></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c">Struct Arg<br>&#123;<br>   <span class="hljs-type">int</span> a;<br>   <span class="hljs-type">int</span> b;<br>   <span class="hljs-type">int</span> c;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">function</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//创建结构体</span><br>    Student s;<br>    s.a = <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//声明结构体指针</span><br>    Student* ps;<br>    <span class="hljs-comment">//为结构体指针赋值</span><br>    ps = &amp;s;<br>    <span class="hljs-comment">//通过指针读取数据</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ps-&gt;a);<br>    <br>    <span class="hljs-comment">//还可以使用其他指针类型对结构体指针进行赋值，此时结构体指针可以利用自己的构造遍历未知空间数据</span><br>    <span class="hljs-type">int</span> x = <span class="hljs-number">100</span>;<br>    Arg* px = (Arg*)&amp;x;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>,px-&gt;a,px-&gt;b,px-&gt;c);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212222123177.png" alt="image-20221222212351150"></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> g_n = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> x = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> y = <span class="hljs-number">3</span>;<br><br><span class="hljs-keyword">return</span> g_n+x+y;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>全局变量在程序编译完成后地址就已经确定下来了，只要程序启动，全局变量就已经存在了，启动后里面是否有值取决于声明时是否给定了初始值，如果没有，默认为0</li><li>全局变量的值可以被所有函数所修改，里面存储的是最后一次修改的值</li><li>全局变量所占内存会一直存在，知道整个进程结束</li><li>全局变量的反汇编识别，通过寄存器的宽度，或者byte&#x2F;word&#x2F;dword 来判断全局变量的宽度<ul><li><code>MOV REG,byte/word/dword ptr ds:[0x12345678]</code></li></ul></li><li><strong>全局变量就是所谓的基址</strong></li></ol><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> x = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> y = <span class="hljs-number">3</span>;<br><br><span class="hljs-keyword">return</span> g_n+x+y;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>局部变量在程序编译完成后并没有分配固定的地址</li><li>在所属的方法没有被调用时，局部变量并不会分配内存地址，只有当所属的程序被调用了，才会在堆栈中分配内存</li><li>当局部变量所属的方法执行完毕后，局部变量所占用的内存将变成垃圾数据。局部变量消失</li><li>局部变量只能在方法内部使用，函数A无法使用函数B的局部变量</li><li>局部变量的反汇编识别<ul><li><code>[ebp-4]</code>，<code>[ebp-8]</code>，<code>[ebp-0xC]</code>等</li></ul></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>全局变量—-一个固定的地址，类似<code>byte/word/dword ptr ds:[0x12345678]</code>类型</p></li><li><p>局部变量—-<code>[ebp-x]</code>，类似<code>[ebp-4]</code>，<code>[ebp-8]</code>，<code>[ebp-0xC]</code>等</p></li><li><p>传入参数—-<code>[ebp+x]</code>，类似<code>[ebp+8]</code>，<code>[ebp+0xC]</code>等(x≠4)</p></li><li><p>特殊—-</p><ul><li><code>[ebp]</code>存储的是ebp在被push前的数值</li><li><code>[ebp+4]</code>存储是call返回时的EIP指向的地址</li></ul></li></ul><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//样例一</span><br><span class="hljs-type">char</span>* x = <span class="hljs-string">&quot;china&quot;</span>;<br><span class="hljs-type">char</span> y[] = <span class="hljs-string">&quot;china&quot;</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//报错，其中&quot;china&quot;存储在常量区，不能对其进行修改，但是可以修改x的指向(地址)</span><br>*(x+<span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-comment">//正常，y[]存储的字符串存储在全局变量区域(从常量区复制过来的)，可以进行修改</span><br>y[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;A&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//样例二</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Function</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span>* x = <span class="hljs-string">&quot;china&quot;</span>;<br><span class="hljs-type">char</span> y[] = <span class="hljs-string">&quot;china&quot;</span>;<br><span class="hljs-comment">//报错</span><br>*(x+<span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-comment">//正常</span><br>y[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;A&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>“china”字符串存储在常量区内，不可以进行修改</li><li><code>*(x+1)</code>中的x指向的是”china”在常量区的地址，直接对x进行修改就是修改常量区的数据，报错</li><li><code>y[1]</code>中的数组在堆栈中开辟，常量区中的”china”被复制到了eax等寄存器中，成为了变量，修改y就是修改堆栈中的变量部分，所以正常运行。即y[1]不修改常量区内容，而是复制到变量区再进行修改</li></ul><h2 id="内存分配与释放"><a href="#内存分配与释放" class="headerlink" title="内存分配与释放"></a>内存分配与释放</h2><ul><li>自动分配内存(c语言)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* ptr;<span class="hljs-comment">//声明指针</span><br><br><span class="hljs-comment">//在堆中申请内存,分配128个int</span><br>ptr = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*<span class="hljs-number">128</span>);<br><br><span class="hljs-comment">//无论申请的空间大小 一定要进行校验 判断是否申请成功</span><br><span class="hljs-keyword">if</span>(ptr == <span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//初始化分配的内存空间</span><br><span class="hljs-built_in">memset</span>(ptr,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*<span class="hljs-number">128</span>);<br><br><span class="hljs-comment">//使用。。。</span><br>*(ptr) = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">//使用完毕 释放申请的堆空间</span><br><span class="hljs-built_in">free</span>(ptr);<br><br><span class="hljs-comment">//将指针设置为NULL</span><br>ptr = <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><ul><li>注意事项：<ol><li>使用 sizeof(类型)*n 来定义申请内存的大小</li><li>malloc 返回类型为 void* 类型  需要强制转换</li><li>无论申请的内存有多小，一定要判断是否申请成功</li><li>申请完空间后要记得初始化</li><li>使用完一定要是否申请的空间</li><li>将指针的值设置为NULL</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>逆向分析实战</title>
    <link href="/posts/6e5d5d10.html"/>
    <url>/posts/6e5d5d10.html</url>
    
    <content type="html"><![CDATA[<h1 id="数据相关"><a href="#数据相关" class="headerlink" title="数据相关"></a>数据相关</h1><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><h3 id="数据宽度"><a href="#数据宽度" class="headerlink" title="数据宽度"></a>数据宽度</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212102310024.png" alt="image-20221210231053930"></p><center><strong>图 1  常用存储单位所在字节数与位数</strong></center><h3 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h3><ul><li><p>数据在内存中存储的方式分为<strong>大端存储</strong>和<strong>小端存储</strong></p></li><li><p>例如：0x12345678，其中<strong>12为高位字节数据，78为低位字节数据</strong></p></li></ul><h4 id="大端存储"><a href="#大端存储" class="headerlink" title="大端存储"></a>大端存储</h4><ul><li>内存<strong>高</strong>位地址存放<strong>低</strong>位字节数据，内存<strong>低</strong>位地址存放数据<strong>高</strong>位字节数据</li><li><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212110040864.png" alt="image-20221211004020838"></li></ul><center><strong>图 2  大端存储</strong></center><h4 id="小端存储"><a href="#小端存储" class="headerlink" title="小端存储"></a>小端存储</h4><ul><li>内存<strong>高</strong>位地址存放<strong>高</strong>位字节数据，内存<strong>低</strong>位地址存放数据<strong>低</strong>位字节数据</li><li><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212110042944.png" alt="image-20221211004205917"></li></ul><center><strong>图 3  小端存储</strong></center><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>通常情况下</p><ul><li>Windows操作系统兼容的CPU采用小端存储</li><li>UNIX操作系统兼容的CPU多采用大端存储</li><li>网络中传递数据时采用大端存储</li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>对于数据0x01020304,左边为<strong>高位字节</strong></li><li>对于内存存储顺序,一般默认为<strong>低地址到高地址</strong></li></ul><h1 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h1><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>与逆向相关的寄存器</p><ul><li>基本寄存器<ul><li>8个通用寄存器,6个段寄存器,1个指令指针寄存器,1个标志寄存器</li></ul></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212111532648.png" alt="image-20221211153203542"></p><center><strong>图 4  x86 CPU中的基本寄存器</strong></center><ul><li>调试寄存器</li><li>控制寄存器</li></ul><h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><p>通用寄存器主要用于各种运算和数据的传输,又分为<strong>数据寄存器</strong>和<strong>指针变址寄存器</strong></p><table style="border:none;text-align:center;width:auto;margin: 0 auto;">    <tbody>        <tr>            <td style="padding: 6px"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212111535516.png" ></td><td><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212111536898.png" ></td>        </tr>        <tr><td><strong>图 5  数据寄存器</strong></td><td><strong>图 6  指针变址寄存器</strong></td></tr>    </tbody></table><h4 id="数据寄存器"><a href="#数据寄存器" class="headerlink" title="数据寄存器"></a>数据寄存器</h4><p>主要用在算数运算与逻辑运算指令中，常用来保存各种需要计算的值</p><ul><li><strong>EAX</strong>：累加器，在乘法和除法指令中被自动使用；在 Win32 中，一般用在函数的返回值中</li><li><strong>EBX</strong>：基址寄存器，DS 段中的数据指针</li><li><strong>ECX</strong>：计数器，CPU 自动使用 ECX 作为循环计数器，在字符串和循环操作中常用，在循环指令（LOOP）或串操作中，ECX 用来进行循环计数，每执行一次循环，ECX 都会被 CPU 自动减一</li><li><strong>EDX</strong>：数据寄存器</li></ul><h4 id="指针变址寄存器"><a href="#指针变址寄存器" class="headerlink" title="指针变址寄存器"></a>指针变址寄存器</h4><p>主要用作保存内存地址的指针</p><ul><li><strong>EBP</strong>：扩展基址指针寄存器，SS 段中堆栈内数据指针。EBP 由高级语言用来引用参数和局部变量，通常称为堆栈基址指针寄存器。</li><li><strong>ESP</strong>：堆栈指针寄存器，SS 段中堆栈指针。ESP 用来寻址堆栈上的数据，ESP 寄存器一般不参与算数运算，通常称为堆栈指针寄存器。</li><li><strong>ESI</strong>：源变址寄存器，字符串操作源指针。</li><li><strong>EDI</strong>：目的变址寄存器，字符串操作目标指针。</li></ul><h3 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h3><p>段寄存器用于存放段的基地址，段是一块预分配的内存区域。有些段存放有程序的指令，有些则存放有程序的变量，另外还有其他的段，如堆栈段存放着函数变量和函数参数等</p><ul><li>16位 CPU 中，段寄存器只有4个，分别是 CS（代码段）、DS（数据段）、SS（堆栈段）和ES（附加数据段）</li><li>32 位的 CPU 中，段寄存器从 4 个扩展为 6 个，分别是 CS、DS、SS、ES、FS 和 GS。FS 和 GS 段寄存器也属于附加的段寄存器</li></ul><h3 id="指令指针寄存器"><a href="#指令指针寄存器" class="headerlink" title="指令指针寄存器"></a>指令指针寄存器</h3><ul><li><p>指令指针寄存器 <strong>EIP</strong> 是一个 32 位的寄存器，在 16 位的环境中，它的名称是 IP。EIP 寄存器保存着下一条要执行的指令的地址</p></li><li><p>EIP 寄存器的值在程序中是无法直接修改的，只能通过影响 EIP 的指令间接地进行修改，如 JMP、CALL、RET 等指令。此外，通过中断或异常也可以影响 EIP 的值</p></li></ul><h3 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h3><p>在 16 位 CPU 中，标志寄存器称为 <strong>FLAGS</strong>（有的书上是 <strong>PSW</strong>，即程序状态字寄存器）。在 32 位 CPU 中，标志寄存器也扩展为 32 位，被称为 <strong>EFLAGS</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212111545235.png" alt="image-20221211154550208"></p><center><strong>图 7  16位的标志寄存器</strong></center><h4 id="条件标志"><a href="#条件标志" class="headerlink" title="条件标志"></a>条件标志</h4><ol><li><strong>OF(OverFlow Flag)</strong>:溢出标志位，用来反映有符号数加减法运算所得结果是否溢出。如果运算超过当前运算位数所能表示的范围，则称为溢出，该标志位被置为 1，否则为 0</li><li><strong>SF(Sign Flag)</strong>:符号标志位，用来反映运算结果的符号位。运算结果为负时为 1，否则为 0</li><li><strong>ZF(Zero Flag)</strong>:零标志位，用来反映运算结果是否为 0。运算结果为 0 时该标志位被置为 1，否则为 0</li><li><strong>AF(Auxiliary carry Flag)</strong>:辅助进位标志位。在字操作时，发生低字节向高字节进位或借位时该标志位被置为 1，否则为 0（注意：在字节操作时，发生低 4 位向高 4 位进位或借位时该标志位被置为 1，否则为 0）</li><li><strong>PF(Parity Flag)</strong>:奇偶标志位，用于反映结果中“1”的个数的奇偶性。如果“1”的个数为偶数，该标志位被置为 1，否则为 0</li><li><strong>CF(Carry Flag)</strong>:进位标志位,运算结果的最高位产生了一个进位或借位，则该标志位被置为 1，否则为 0</li></ol><h4 id="控制标志"><a href="#控制标志" class="headerlink" title="控制标志"></a>控制标志</h4><ol><li><strong>DF(Direction Flag)</strong>:方向标志位，用于串操作指令中，控制地址的变化方向。当 DF 为 0 时，存储器地址自动增加；当 DF 为 1 时，存储器地址自动减少。操作 DF 标志寄存器可以使用指令 CLD 和 STD 进行复位和置位</li><li><strong>IF(Interrupt Flag)</strong>:中断标志位，用于控制外部可屏蔽中断是否可以被处理器响应。当 IF 为 1 时，允许中断；当 IF 为 0 时，则不允许中断。操作 IF 标志寄存器可以使用 CLI 和 STI 进行复位和置位</li><li><strong>TF(Trap Flag)</strong>:陷阱标志位，用于控制处理器是否进入单步操作方式。当 TF 为 0 时，处理器在正常模式下运行；当 TF 为 1 时，处理器单步执行指令，调试器可以逐条指令进行执行就是使用了该标志位</li></ol><h1 id="OD使用"><a href="#OD使用" class="headerlink" title="OD使用"></a>OD使用</h1><h2 id="按键"><a href="#按键" class="headerlink" title="按键"></a>按键</h2><ul><li><code>F8</code>进行单步调试</li><li><code>Alt + M</code>观察当前被调试进程所使用的地址</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>汇编语言</title>
    <link href="/posts/8e41db39.html"/>
    <url>/posts/8e41db39.html</url>
    
    <content type="html"><![CDATA[<ul><li>参考自：</li></ul><p>​汇编语言(第四版)————王爽</p><h1 id="关于8086CPU"><a href="#关于8086CPU" class="headerlink" title="关于8086CPU"></a>关于8086CPU</h1><p>本书以 <code>8086CPU</code> 为例，这里描述下简单的性质</p><p><a href="https://blog.csdn.net/qq_50918834/article/details/123476647?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-123476647-blog-103859037.pc_relevant_vip_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-123476647-blog-103859037.pc_relevant_vip_default&utm_relevant_index=1">win10(64位)安装汇编环境(masm)及使用</a></p><h2 id="16位结构的CPU"><a href="#16位结构的CPU" class="headerlink" title="16位结构的CPU"></a>16位结构的CPU</h2><ul><li>运算器一次最多可以处理16位的数据</li><li>寄存器的最大宽度为16位</li><li>寄存器和运算器之间的通路为16位</li></ul><h2 id="物理地址的方法"><a href="#物理地址的方法" class="headerlink" title="物理地址的方法"></a>物理地址的方法</h2><ul><li>8086CPU 有20条地址总线，但是其为16位结构，则其采用一种在内部用两个16位地址合成的方法来形成一个20位的物理地址</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211302137983.png" alt="image-20221130213721942"></p><center><strong>图 1  8086CPU 相关部件的逻辑结构</strong></center><ul><li>地址加法器采用 <strong>物理地址 &#x3D; 段地址(SA) X 16 + 偏移地址(EA)</strong>(段地址与偏移地址都是16位)<ul><li>本质含义为<strong>基础地址 + 偏移地址 &#x3D; 物理地址</strong></li><li>其中16为在二进制下左移4位，16进制下左移1位，与偏移量结合相当于增加了4条地址总线</li><li>一个X进制的数据左移1位，相当于乘以X</li></ul></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211302151831.png" alt="image-20221130215138787"></p><center><strong>图 2  地址加法器的工作过程</strong></center><h1 id="Debug使用"><a href="#Debug使用" class="headerlink" title="Debug使用"></a>Debug使用</h1><ul><li><strong>R</strong> 命令查看，改变CPU寄存器的内容</li><li><strong>D</strong> 查看内存中的内容—-<strong>d 段地址:偏移地址</strong></li><li><strong>E</strong> 改写内存中的内容</li><li><strong>U</strong> 将内存中的机器指令翻译成汇编指令</li><li><strong>T</strong> 执行一条机器指令</li><li><strong>G</strong> 修改IP的值,即跳转.例如:g 0012</li><li><strong>A</strong> 以汇编指令的格式在内存中写入一条机器指令</li><li><strong>P</strong> 使Debug自动重复执行”loop”相关指令至cx&#x3D;&#x3D;0.也可以执行程序返回(int 21)</li><li><strong>Q</strong> 退出Debug模式，返回命令行</li></ul><h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><p>数据寄存器</p><h3 id="AX"><a href="#AX" class="headerlink" title="AX"></a>AX</h3><ul><li>累加器</li></ul><h3 id="BX"><a href="#BX" class="headerlink" title="BX"></a>BX</h3><ul><li><p><code>mov ax,[bx]</code></p><ul><li><p>bx中存放的数据作为一个偏移地址EA,<strong>段地址SA默认在ds中</strong>,将SA:EA处的数据送入ax中.即:</p><p>(ax) &#x3D; ( ( ds ) * 16 + ( bx ) )</p></li></ul></li><li><p><code>mov ax,[0]</code></p><ul><li><p>debug和汇编编译器masm对此指令有不用的处理</p><ul><li>debug中[0]表示ds:0处的数据</li><li>masm中[0]表示数字0</li></ul></li><li><p><strong>解决冲突</strong>: 在”[ ]”的前面显式地给出段地址所在的段寄存器</p><ol><li><p>在汇编源程序中,如果用指令访问一个内存单元,则在指令中必须用”[…]”来表示内存单元,如果在”[]”里用一个常量idata直接给出内存单元的拍内衣地址,就要在”[]”的前面显式地给出段地址所在的段寄存器,比如: </p><p>mov ax,ds:[0]</p></li><li><p>如果在”[]”里用寄存器,比如bx,简介给出内存单元地偏移地址,则段地址默认在ds中.当然,也可以显式地给出段地址所在地段寄存器,比如: mov ax,ds:[bx]</p></li></ol></li></ul></li><li><p><code>mov ax,[bx+idata]</code></p><ul><li>idata表示常量</li><li>偏移地址位(bx)+idata,也可以写成<code>mov ax,idata[bx]</code>或者<code>mov ax,[bx].idata</code></li><li>可以简化代码长度</li></ul></li><li><p><code>mov ax,[bx+si+idata]</code></p><ul><li>与上面含义相同,展示不同的寻址方式</li></ul></li><li><p><strong>只有bx,si,di,bp四个寄存器可以在”[…]”中进行内存单元的寻址</strong></p><ul><li>例如:<code>mov ax,[bp+si]</code>,其余寄存器都不可以</li></ul></li></ul><h3 id="CX"><a href="#CX" class="headerlink" title="CX"></a>CX</h3><ul><li>计数器，CPU 自动使用 CX 作为循环计数器，在字符串和循环操作中常用，在循环指令（LOOP）或串操作中，CX 用来进行循环计数，每执行一次循环，ECX 都会被 CPU 自动减一</li></ul><p>指针变址寄存器</p><h3 id="SI与DI"><a href="#SI与DI" class="headerlink" title="SI与DI"></a>SI与DI</h3><ul><li>与bx功能相近,si和di不能够分成两个8位寄存器</li></ul><h2 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h2><ul><li><p>8086CPU的标志寄存器(flag)有16位,其中存储的信息通常被称为程序状态字(PSW)</p><ul><li><p>作用:</p><ol><li><p>用来存储相关指令的某些执行结果</p></li><li><p>用来为CPU执行相关指令提供行为依据</p></li><li><p>用来控制CPU的相关工作方式</p></li></ol></li></ul></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212152021020.png" alt="image-20221215202131982"></p><center><strong>8086CPU的标志寄存器结构</strong></center><ul><li>flag按位起作用,其中1,3,5,12,13,14,14没有作用,不具有任何含义.而<strong>0,2,4,6,7,8,9,10,11</strong>位具有特殊的含义.</li></ul><h3 id="CF标志"><a href="#CF标志" class="headerlink" title="CF标志"></a>CF标志</h3><p><strong>Carry Flag</strong></p><ul><li>flag的第0位是CF,进位标志位.一般情况下,在进行无符号数运算的时候,它记录了运算结果的最高有效位向更高位的进位值,或从更高位的借位值.</li></ul><h3 id="PF标志"><a href="#PF标志" class="headerlink" title="PF标志"></a>PF标志</h3><p><strong>Parity Even Flag</strong></p><ul><li>flag的第2位是PF,奇偶标志位.它记录相关指令执行后,其结果的所有bit位中1的个数是否位偶数.如果1的个数为偶数,pf &#x3D; 1;如果为奇数,那么pf &#x3D; 0.</li></ul><h3 id="ZF标志"><a href="#ZF标志" class="headerlink" title="ZF标志"></a>ZF标志</h3><p><strong>Zero Flag</strong></p><ul><li>flag的第6位是ZF,零标志位.它记录相关指令执行后,其结果是否为0.如果结果为0,那么zf &#x3D; 1;如果结果不为0,zf &#x3D; 0.</li><li>一般add,sub,mul,div,inc,or,and等进行逻辑或算术运算指令会对ZF产生影响.</li></ul><h3 id="SF标志"><a href="#SF标志" class="headerlink" title="SF标志"></a>SF标志</h3><p><strong>Sign Flag</strong></p><ul><li>flag的第7位是SF,符号标志位.它记录相关指令执行后,其结果是否为负.如果结果为负,sf &#x3D; 1;如果非负,sf &#x3D; 0.</li><li>它是CPU对有符号数运算结果的一种记录,记录数据的正负,只在有符号数计算中起作用.</li></ul><h3 id="DF标志"><a href="#DF标志" class="headerlink" title="DF标志"></a>DF标志</h3><p><strong>Direction Flag</strong></p><ul><li>flag的第10位是DF,方向标志位.在<strong>串处理指令</strong>中,控制每次操作后si,di的增减<ul><li>df &#x3D; 0,每次操作后si,di递增</li><li>df &#x3D; 1,每次操作后si,di递减</li></ul></li></ul><h3 id="OF标志"><a href="#OF标志" class="headerlink" title="OF标志"></a>OF标志</h3><p><strong>Overflow Flag</strong></p><ul><li>flag的第11位是OF,溢出标志位.一般情况下,OF记录了<strong>有符号数</strong>运算的结果是否发生了溢出.如果发生溢出,of &#x3D; 1;如果没有,of &#x3D; 0.</li><li><strong>注意CF和OF的区别</strong>:CF是对无符号数运算有意义,而OF是对有符号数运算有意义</li></ul><h2 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h2><h3 id="CS和IP"><a href="#CS和IP" class="headerlink" title="CS和IP"></a>CS和IP</h3><ul><li>CS为代码段寄存器，IP为指令指针寄存器<ul><li>若设CS中内容为M，IP中内容为N，则8086CPU将从内存 <code>M X 16 + N</code> 单元开始，读取一条指令并执行</li></ul></li><li>8086CPU工作过程<ol><li>从<strong>CS:IP</strong>指向的内存单元读取指令，读取的指令进入指令缓冲器</li><li>IP &#x3D; IP + 所读取指令的长度，从而指向下一条指令</li><li>执行指令。转到步骤1，重复这个过程</li></ol></li></ul><h4 id="修改CS、IP的指令"><a href="#修改CS、IP的指令" class="headerlink" title="修改CS、IP的指令"></a>修改CS、IP的指令</h4><ul><li>转移指令:能够改变CS，IP的内容的指令,例如：<strong>jmp指令</strong><ul><li><strong>jmp 段地址:偏移地址</strong><ul><li>用指令中给出的段地址修改CS,偏移地址修改IP</li><li>jmp 2AE3:3  执行后,CS&#x3D;2AE3H,IP&#x3D;0003H,CPU将从2AE33H处读取指令</li></ul></li><li><strong>jmp 某一合法寄存器</strong>,功能为：用寄存器中的值修改IP—-类似mov IP,ax<ul><li>jmp ax<ul><li>执行前:ax&#x3D;1000H,CS&#x3D;2000H,IP&#x3D;0003H</li><li>执行后:ax&#x3D;1000H,CS&#x3D;2000H,<code>IP=1000H</code></li></ul></li></ul></li></ul></li></ul><h3 id="DS"><a href="#DS" class="headerlink" title="DS"></a>DS</h3><ul><li><p><strong>DS</strong>用来存放要访问数据的段地址</p></li><li><p><code>mov al,[0]</code> […]表示一个内存单元，[0]中的0表示内存单元的偏移地址，这个时候的<strong>段地址</strong>默认是在ds中( <strong>物理地址 &#x3D; 段地址 X 16 + 偏移地址</strong>)</p></li></ul><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>8086CPU的入栈和出栈都是以**字(两个字节)**为单位进行的，高地址单元存放高8位(<strong>前面的两字节</strong>)，低地址单元存放低8位(<strong>小端存储</strong>)</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212021508126.png" alt="image-20221202150812086"></p><center><strong>图 3  8086CPU的栈操作</strong></center><h3 id="SS和SP"><a href="#SS和SP" class="headerlink" title="SS和SP"></a>SS和SP</h3><ul><li><p>段寄存器SS和寄存器SP</p></li><li><p>栈顶的段地址存放在SS中，偏移地址存放在SP中</p></li><li><p><strong>任何时刻，SS:SP 指向栈顶元素</strong></p></li><li><p>入栈时，栈顶从高地址向低地址方向增长</p></li><li><p>栈为空时，以<code>10000H~1000FH</code>为栈空间</p><ul><li>SS:SP指向栈空间最高地址单元的下一个单元<ul><li>例如：SS&#x3D;1000H,SP&#x3D;0010H —-10H-FH &#x3D;&#x3D; 1H(字节)</li></ul></li><li>该单元的地址为栈最底部的<code>字</code>单元的地址+2。<ul><li>例如：栈最底部<code>字</code>单元的地址为1000:000E,所以栈空时，SP &#x3D; 0010H</li></ul></li></ul></li><li><p><code>push</code> 先将记录栈顶偏移地址的SP寄存器中的内容减2，使得SS:SP指向新的栈顶单元，然后再将寄存器中的数据送入SS：SP指向的新的栈顶单元</p></li><li><p>注意栈顶超界问题</p></li></ul><h3 id="BP"><a href="#BP" class="headerlink" title="BP"></a>BP</h3><ul><li><strong>基数指针寄存器BP(base pointer)</strong> 是一个寄存器，它的用途有点特殊，是和堆栈指针SP联合使用的，作为SP校准使用的，只有在寻找堆栈里的数据和使用个别的寻址方式时候才能用到,例如:堆栈中压入了很多数据或者地址，你肯定想通过SP来访问这些数据或者地址，但SP是要指向栈顶的，是不能随便乱改的，这时候你就需要使用BP，把SP的值传递给BP，通过BP来寻找堆栈里数据或者地址</li><li>只要在[…]中使用寄存器bp,而指令中没有显性地给出段地址,<strong>段地址就默认在ss中</strong></li></ul><h2 id="段的综述"><a href="#段的综述" class="headerlink" title="段的综述"></a>段的综述</h2><ul><li>用段存放数据,定义为:”<strong>数据段</strong>“ —-DS + []</li><li>用段存放代码,定义为:”<strong>代码段</strong>“ —-CS + IP</li><li>用段充当栈,  定义为:”<strong>栈段</strong>“   —-SS + SP</li></ul><h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><h2 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h2><ul><li><p>汇编指令与伪指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;assume为假设，假设某一段寄存器和程序中的某一个用segment…ends定义的段相联系<br>;此代码将用作代码段的段codesg和CPU中的段寄存器cs联系起来<br>assume cs:codesg<br><br>;定义一个段，段的名称为“codesg”，这个段从此开始<br>;&quot;codesg&quot;为标号，指代了一个地址<br>codesg segment<br><br>mov ax,0123H<br>mov bx,0456H<br>add ax,bx<br>add ax,ax<br><br>;这两条指令实现程序返回<br>mov ax,4c00H<br>int 21H<br><br>;名称为“codesg”的段到此结束<br>codesg ends<br><br>;汇编程序结束<br>end<br><br></code></pre></td></tr></table></figure></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212021629583.png" alt="image-20221202162931534"></p><center><strong>图 4  与结束相关的概念</strong></center><h2 id="编译与连接"><a href="#编译与连接" class="headerlink" title="编译与连接"></a>编译与连接</h2><ul><li><strong>编译</strong>:使用编译器对源程序文件(.asm)中的<strong>源程序</strong>进行编译,产生<strong>目标文件</strong>(.obj)</li><li>连接:使用连接程序对<strong>目标文件</strong>进行连接,生成可在操作系统中直接运行的<strong>可执行文件</strong>(.exe)</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212042046362.png" alt="image-20221204204616313"></p><center><strong>图 5  汇编程序从写出到执行的过程</strong></center><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><ul><li>DOS系统的shell(<strong>command</strong>.com,也称为命令解释器)将可执行文件的程序加载入内存,设置CS:IP指向程序入口,此后command停止,CPU运行程序</li><li>DOS系统中.EXE文件中程序的加载过程<ul><li><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212121618376.png" alt="image-20221212161826290"></li></ul></li></ul><center><strong>图 6  EXE文件中程序加载过程</strong></center><ol><li><p>程序加载后,ds中存放着程序所在内存区的段地址,这个内存区的偏移地址为0,则程序所在的内存区的地址为ds:0</p></li><li><p>这个内存区的前256个字节中存放的是PSP,DOS用来和程序及进行通信.从256字节处向后的空间存放的是程序</p><p>(即 <strong>( CS ) &#x3D; ( DS ) + 10H</strong> )</p></li></ol><h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212130940356.png" alt="image-20221213094011306"></p><center><strong>图 7  寻址方式小结</strong></center><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><h2 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h2><ul><li>格式: <code>loop 标号</code></li><li>循环指令,所有的循环指令都是短转移,在对应的机器码中<strong>包含转移的位移,而不是目的地址</strong>(即包含到目的地址的位移)</li><li>CPU执行loop指令的时候,要进行两部操作<ul><li>(1) ( cx ) &#x3D; ( cx ) - 1</li><li>(2) 判断 cx 中的值,不为零则转至标号处执行程序,如果为零则向下执行</li></ul></li></ul><h2 id="and"><a href="#and" class="headerlink" title="and"></a>and</h2><ul><li>逻辑与指令,<strong>按位进行与运算</strong></li><li>可将操作对象的相应位设为0,其他位不变</li><li>例如:将al的第六位设为0:and al,10111111B,可适用于大小写转化</li></ul><h2 id="or"><a href="#or" class="headerlink" title="or"></a>or</h2><ul><li>逻辑或指令,<strong>按位进行或运算</strong></li><li>可将操作对象的相应位设为1,其他位不变</li></ul><h2 id="inc和dec"><a href="#inc和dec" class="headerlink" title="inc和dec"></a>inc和dec</h2><ul><li><code>inc dx</code>—-dx中的数据加1</li><li><code>dec dx</code>—-dx中的数据减1</li></ul><h2 id="div"><a href="#div" class="headerlink" title="div"></a>div</h2><ul><li><p>除法指令</p><ol><li>除数:有8位和16位两种,在一个reg或内存单元中</li><li>被除数:默认放在AX或DX和AX中,如果除数为8位,被除数则为16位,默认在AX中存放;如果除数为16位,被除数则为32位,在DX和AX中存放,DX存放高16位,AX存放低16位</li><li>结果:如果除数为8位,则AL存储除法操作的商,AH存储除法操作的余数;如果除数为16位,则AX存储除法操作的商,DX存储除法操作的余数</li></ol></li><li><p>例如:<code>div byte ptr ds:[0]</code></p><ul><li>(al) &#x3D; (ax) &#x2F;  ( (ds) * 16 + 0) )的商</li><li>(ah) &#x3D; (ax) &#x2F;  ( (ds) * 16 + 0) )的余数</li></ul></li></ul><h2 id="mul"><a href="#mul" class="headerlink" title="mul"></a>mul</h2><ul><li><p>乘法指令</p><ol><li>两个相乘的数:两个数要么都是8位,要么都是16位.如果是8位,一个默认放在AL中,另一个放在8位reg或内存字节单元中;如果是16位,一个默认在AX中,另一个放在16位reg或内存单元中.</li><li>结果:如果8位乘法,结果默认放在AX中;如果16位乘法,结果高位默认在DX中存放,低位在AX中放.</li></ol></li><li><p>格式</p><ul><li><code>mul reg</code></li><li><code>mul 内存单元</code>(内存单元可以用不同寻址方式给出)</li></ul></li></ul><h2 id="jmp"><a href="#jmp" class="headerlink" title="jmp"></a>jmp</h2><ul><li><p>无条件转义指令,可以只修改IP,也可以同时修改CS和IP</p></li><li><p>需要:</p><ol><li>转移的目的地址</li><li>转移的距离(段间转移,段内短转移,段内近转移)</li></ol></li><li><p>面向地址</p><ul><li><p>段内转移(只修改IP的值)</p><ul><li><p><code>jmp short 标号</code>的功能为:(IP) &#x3D; (IP) + 8位位移,机器码为<code>EB XX</code>(XX指位移)</p><ul><li><strong>8位位移 &#x3D; 标号处的地址 - jmp指令后的第一个字节的地址</strong></li><li>short指明此处的位移为8位位移,进行<strong>段内短转移</strong></li><li>8位位移的范围为-128~127,用补码表示</li><li>8位位移有编译程序在编译时算出</li></ul></li><li><p><code>jmp near ptr 标号</code></p><ul><li>与jmp short 标号相同,不过是16位位移,进行<strong>段内近转移</strong></li></ul></li></ul></li><li><p>段间转移(修改CS:IP的值)</p><ul><li>(CS) &#x3D; 标号所在段的段地址,(IP) &#x3D; 标号在段中的偏移地址</li><li><code>jmp far ptr 标号</code></li></ul></li></ul></li><li><p>面向寄存器</p><ul><li><code>jmp 16位reg</code></li><li>功能:( IP ) &#x3D; ( 16位reg )</li></ul></li><li><p>面向内存</p><ul><li><p><code>jmp word ptr 内存单元地址(段内转移)</code></p><ul><li>功能:从内存单元地址处开始存放着一个字,是转移的目的偏移地址</li></ul></li><li><p><code>jmp dword ptr 内存单元地址(段间转移)</code></p><ul><li>功能:从内存单元地址处开始存放着两个字,高地址处的字是转移的目的段地址,低地址处是转移的目的偏移地址</li></ul></li></ul></li></ul><h2 id="jcxz"><a href="#jcxz" class="headerlink" title="jcxz"></a>jcxz</h2><ul><li>有条件转移指令,所有的有条件转移转移指令都是短转移,在对应的机器码中包含转移的位移,而不是目的地址.</li><li><code>jcxz 标号</code>(如果 (cx) &#x3D; 0, 转移到标号处执行),<strong>使用格式参考jmp</strong><ul><li>当 (cx) &#x3D; 0 时,(IP) &#x3D; (IP) + 8 位位移(8位参考jmp中的8位)</li><li>当 (cx) ≠ 0 时,程序向下执行,不跳转</li></ul></li></ul><h2 id="CALL与RET"><a href="#CALL与RET" class="headerlink" title="CALL与RET"></a>CALL与RET</h2><h3 id="ret和retf"><a href="#ret和retf" class="headerlink" title="ret和retf"></a>ret和retf</h3><ul><li><p><code>ret</code>指令用栈中的数据,修改IP的内容,从而实现近转移</p><ul><li>CPU操作<ol><li>(IP) &#x3D; ((ss) * 16 + (sp))</li><li>(sp) &#x3D; (sp) + 2</li></ol></li><li>汇编语法解释<ul><li>pop IP</li></ul></li></ul></li><li><p><code>retf</code>指令用栈中的数据,修改CS和IP的内容,从而实现远转移</p><ul><li>CPU操作<ol><li>(IP) &#x3D; ((ss) * 16 + (sp))</li><li>(sp) &#x3D; (sp) + 2</li><li>(CS) &#x3D; ((ss) * 16 + (sp))</li><li>(sp) &#x3D; (sp) + 2</li></ol></li><li>汇编语法解释<ul><li>pop IP</li><li>pop CS</li></ul></li></ul></li></ul><h3 id="CALL"><a href="#CALL" class="headerlink" title="CALL"></a>CALL</h3><ul><li>CPU操作<ol><li>将当前的IP或CS和IP压入栈中__(执行CALL时,IP已经指向下一条语句,即将下一条语句的IP地址压入栈中)__</li><li>转移</li></ol></li><li>依据位移转移<ul><li><code>call 标号</code>(将当前的IP压栈后,转到标号处执行指令)<ol><li>(sp) &#x3D; (sp) - 2</li><li>((ss) * 16 + (sp)) &#x3D; (IP)<strong>(此处的IP为CALL指令的下一条IP地址)</strong></li><li>(IP) &#x3D; (IP) + 16位位移</li></ol></li><li>16位位移 &#x3D; 标号处的地址 - call指令后的第一个字节的地址</li><li>16位位移的范围为 - 32768~32767,用补码表示</li><li>16位位移由编译程序在编译时算出</li><li>汇编语法表示<ul><li>push IP</li><li>jmp near ptr 标号</li></ul></li></ul></li><li>转移的目的地址在指令中<ul><li><code>call far ptr 标号</code>实现段间转移<ol><li>(sp) &#x3D; (sp) - 2</li><li>((ss) * 16 + (sp)) &#x3D; (CS)</li><li>(sp) &#x3D; (sp) - 2</li><li>((ss) * 16 + (sp)) &#x3D; (IP)<strong>(此处的IP为CALL指令的下一条IP地址)</strong></li><li>(CS) &#x3D; 标号所在段的段地址</li><li>(IP) &#x3D; 标号所在段中的偏移地址</li></ol></li><li>汇编语法<ul><li>push CS</li><li>push IP</li><li>jmp far ptr 标号</li></ul></li></ul></li><li>转移地址在寄存器中<ul><li><code>call 16位reg</code><ol><li>(sp) &#x3D; (sp) - 2</li><li>((ss) * 16 + (sp)) &#x3D; (IP)<strong>(此处的IP为CALL指令的下一条IP地址)</strong></li><li>(IP) &#x3D; (16位reg)</li></ol></li><li>汇编语法<ul><li>push IP</li><li>jmp 16位reg</li></ul></li></ul></li><li>转移地址在内存中<ul><li><code>call word/dword ptr 内存单元地址</code><ul><li>dword 注意转移的内存高地址为段地址,低地址为偏移地址</li></ul></li></ul></li></ul><h3 id="CALL和RET配合使用"><a href="#CALL和RET配合使用" class="headerlink" title="CALL和RET配合使用"></a>CALL和RET配合使用</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202212151734080.png" alt="image-20221215173449989"></p><center><strong>图 8  具有子程序的源程序的框架</strong></center><ul><li>具体程序实现时需要避免寄存器冲突—-寄存器入栈和出栈操作</li></ul><h2 id="adc"><a href="#adc" class="headerlink" title="adc"></a>adc</h2><ul><li>带进位加法指令,利用了CF位上记录的进位值</li><li>格式: <code>adc 操作对象1 操作对象2</code></li><li>功能: 操作对象1 &#x3D; 操作对象1 + 操作对象2 + CF</li></ul><h2 id="sbb"><a href="#sbb" class="headerlink" title="sbb"></a>sbb</h2><ul><li>带借位减法指令,利用了CF位上记录的进位值</li><li>格式: <code>adc 操作对象1 操作对象2</code></li><li>功能: 操作对象1 &#x3D; 操作对象1 - 操作对象2 - CF</li></ul><h2 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a>cmp</h2><ul><li>比较指令,功能相当于减法指令,知识不保存结果.cmp执行后,将对标志寄存器产生影响</li><li>格式: <code>cmp 操作对象1 操作对象2</code></li><li>功能: 计算操作对象1 - 操作对象2</li></ul><h2 id="串传送指令"><a href="#串传送指令" class="headerlink" title="串传送指令"></a>串传送指令</h2><ul><li><p><code>movsb</code></p><ul><li>功能:以字节为单位传送</li><li>操作<ol><li>((ex) * 16 + (di)) &#x3D; ((ds) * 16 + (si))</li><li>如果df &#x3D; 0,(si) &#x3D; (si) + 1,(di) &#x3D; (di) + 1</li><li>如果df &#x3D; 1,(si) &#x3D; (si) - 1,(di) &#x3D; (di) - 1</li></ol></li></ul></li><li><p><code>movsw</code></p><ul><li><p>功能:以字为单位传送</p></li><li><p>操作</p><ol><li>((ex) * 16 + (di)) &#x3D; ((ds) * 16 + (si))</li><li>如果df &#x3D; 0,(si) &#x3D; (si) + 2,(di) &#x3D; (di) + 2</li><li>如果df &#x3D; 1,(si) &#x3D; (si) - 2,(di) &#x3D; (di) - 2</li></ol></li></ul></li><li><p><code>cld</code></p><ul><li>将标志寄存器的DF位设为0(clear)</li></ul></li><li><p><code>std</code></p><ul><li>将标志寄存器的DF位设为1(setup)</li></ul></li></ul><h2 id="rep"><a href="#rep" class="headerlink" title="rep"></a>rep</h2><ul><li><p>常和串传送指令搭配使用</p></li><li><p>功能:根据cx的值,重复执行后面的指令</p></li><li><p>用法:</p><ul><li><p><code>rep movsb</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">s:movsb<br>  loop s<br></code></pre></td></tr></table></figure></li><li><p><code>rep movsw</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">s:movsw<br>  loop s<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="pushf和popf"><a href="#pushf和popf" class="headerlink" title="pushf和popf"></a>pushf和popf</h2><ul><li>功能是将标志寄存器的值压栈,而popf是从栈中弹出数据,送入标志寄存器中</li><li>为直接访问标志寄存器提供一种方法</li></ul><h2 id="定义数据类型"><a href="#定义数据类型" class="headerlink" title="定义数据类型"></a>定义数据类型</h2><h3 id="db-dw-dd"><a href="#db-dw-dd" class="headerlink" title="db,dw,dd"></a>db,dw,dd</h3><ul><li>db定义**字节型(word)<strong>数据,dw定义</strong>字型(byte)<strong>数据,dd定义</strong>双字节型(dword)**数据</li></ul><h3 id="dup"><a href="#dup" class="headerlink" title="dup"></a>dup</h3><ul><li>操作符,在汇编语言中同db,dw,dd等一样,也是由编译器识别处理的符号.它是和db,dw,dd等数据定义伪指令配合使用的,用来进行数据的重复</li><li>例如:<ul><li><code>db 3 dup (0)</code>,定义了3个字节,它们的值都是0,相当于db 0,0,0</li><li><code>db 3 dup (0,1,2)</code>定义了9个字节,相当于db 0,1,2,0,1,2,0,1,2</li></ul></li></ul><h2 id="操作符offset"><a href="#操作符offset" class="headerlink" title="操作符offset"></a>操作符offset</h2><ul><li>再汇编语言中是由编译器处理的符号,功能是取得标号的偏移地址</li><li>例如:<code>mov ax,offset s</code> 取得标号s的偏移地址(相对于此时地址CS:IP的偏移量)</li></ul><h2 id="ptr"><a href="#ptr" class="headerlink" title="ptr"></a>ptr</h2><ul><li>功能:临时指定类型的<ul><li>指明数据的尺寸<ul><li>通过寄存器名指明要处理的数据的尺寸.(即有寄存器，可以不用ptr来限制了，系统会自动分析的)</li><li>在没有寄存器名存在的情况下，即都是在内存，得用操作符 X ptr 指明内存单元的长度，X在汇编指令中可以为byte，word或者DWORD。</li></ul></li><li>临时的类型转换<ul><li>例如:jmp far ptr 标号(far ptr说明转移的类型)</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【NewStartCTF】Reverse_Week3</title>
    <link href="/posts/580a635a.html"/>
    <url>/posts/580a635a.html</url>
    
    <content type="html"><![CDATA[<h1 id="Zzzzzz3333"><a href="#Zzzzzz3333" class="headerlink" title="Zzzzzz3333"></a>Zzzzzz3333</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>32位，无壳，直接IDA分析<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211102038340.png"><br>由图，需要对<span class="label label-primary">Arglist</span>的一系列方程进行解密，然后将<span class="label label-primary">Arglist</span>放入加密过程中进行加密之后就可以得到flag<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211102050613.png"><span class="label label-primary">byte_402168</span>中的数据此时可以使用z3求解器来解方程组来得到<span class="label label-primary">Arglist</span></li></ul><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><ul><li><p>z3下载</p><ol><li>打开文件管理器，在地址栏中输入 <span class="label label-warning">%APPDATA%</span> </li><li>搜索pip文件夹，在pip文件夹中打开pip.ini文件,将其修改为下面形式（这是阿里源）  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[<span class="hljs-keyword">global</span>]<br><span class="hljs-keyword">index</span>-url = http://mirrors.aliyun.com/pypi/simple/<br><span class="hljs-keyword">trusted</span>-host = mirrors.aliyun.com<br></code></pre></td></tr></table></figure></li><li>直接使用pip下载  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> z3-solver<br></code></pre></td></tr></table></figure>之后就可以在pycharm中导入z3的包并且不报错了<br>若是直接可以pip下载，则直接下载即可,我是pip源出现了问题,所以写此来提醒自己应该怎么正确换源不报错</li></ol></li><li><p>直接使用z3解决  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#创建容器</span><br>a=Solver()<br><br><span class="hljs-comment">#设置未知量</span><br>s=[Int(<span class="hljs-string">&#x27;s[%d]&#x27;</span> %i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br><span class="hljs-built_in">print</span>(s)<br><br><span class="hljs-comment">#添加约束条件</span><br>a.add((s[<span class="hljs-number">0</span>]*<span class="hljs-number">12</span>+s[<span class="hljs-number">1</span>]*<span class="hljs-number">11</span>+s[<span class="hljs-number">2</span>]*<span class="hljs-number">20</span>+s[<span class="hljs-number">3</span>]*<span class="hljs-number">5</span>+s[<span class="hljs-number">4</span>]*<span class="hljs-number">3</span>+s[<span class="hljs-number">5</span>]*<span class="hljs-number">2</span>+s[<span class="hljs-number">6</span>]*<span class="hljs-number">8</span>+s[<span class="hljs-number">7</span>]*<span class="hljs-number">1</span>)==<span class="hljs-number">0x191a</span>)<br>a.add((s[<span class="hljs-number">0</span>]*<span class="hljs-number">11</span>+s[<span class="hljs-number">1</span>]*<span class="hljs-number">45</span>+s[<span class="hljs-number">2</span>]*<span class="hljs-number">1</span>+s[<span class="hljs-number">3</span>]*<span class="hljs-number">11</span>+s[<span class="hljs-number">4</span>]*<span class="hljs-number">8</span>+s[<span class="hljs-number">5</span>]*<span class="hljs-number">4</span>+s[<span class="hljs-number">6</span>]*<span class="hljs-number">7</span>+s[<span class="hljs-number">7</span>]*<span class="hljs-number">11</span>)==<span class="hljs-number">0x2649</span>)<br>a.add((s[<span class="hljs-number">0</span>]*<span class="hljs-number">16</span>+s[<span class="hljs-number">1</span>]*<span class="hljs-number">5</span>+s[<span class="hljs-number">2</span>]*<span class="hljs-number">2</span>+s[<span class="hljs-number">3</span>]*<span class="hljs-number">12</span>+s[<span class="hljs-number">4</span>]*<span class="hljs-number">2</span>+s[<span class="hljs-number">5</span>]*<span class="hljs-number">6</span>+s[<span class="hljs-number">6</span>]*<span class="hljs-number">6</span>+s[<span class="hljs-number">7</span>]*<span class="hljs-number">12</span>)==<span class="hljs-number">0x1785</span>)<br>a.add((s[<span class="hljs-number">0</span>]*<span class="hljs-number">19</span>+s[<span class="hljs-number">1</span>]*<span class="hljs-number">9</span>+s[<span class="hljs-number">2</span>]*<span class="hljs-number">5</span>+s[<span class="hljs-number">3</span>]*<span class="hljs-number">28</span>+s[<span class="hljs-number">4</span>]*<span class="hljs-number">4</span>+s[<span class="hljs-number">5</span>]*<span class="hljs-number">7</span>+s[<span class="hljs-number">6</span>]*<span class="hljs-number">5</span>+s[<span class="hljs-number">7</span>]*<span class="hljs-number">67</span>)==<span class="hljs-number">0x386c</span>)<br>a.add((s[<span class="hljs-number">0</span>]*<span class="hljs-number">20</span>+s[<span class="hljs-number">1</span>]*<span class="hljs-number">10</span>+s[<span class="hljs-number">2</span>]*<span class="hljs-number">6</span>+s[<span class="hljs-number">3</span>]*<span class="hljs-number">10</span>+s[<span class="hljs-number">4</span>]*<span class="hljs-number">5</span>+s[<span class="hljs-number">5</span>]*<span class="hljs-number">22</span>+s[<span class="hljs-number">6</span>]*<span class="hljs-number">4</span>+s[<span class="hljs-number">7</span>]*<span class="hljs-number">4</span>)==<span class="hljs-number">0x1c53</span>)<br>a.add((s[<span class="hljs-number">0</span>]*<span class="hljs-number">12</span>+s[<span class="hljs-number">1</span>]*<span class="hljs-number">4</span>+s[<span class="hljs-number">2</span>]*<span class="hljs-number">9</span>+s[<span class="hljs-number">3</span>]*<span class="hljs-number">19</span>+s[<span class="hljs-number">4</span>]*<span class="hljs-number">0</span>+s[<span class="hljs-number">5</span>]*<span class="hljs-number">12</span>+s[<span class="hljs-number">6</span>]*<span class="hljs-number">3</span>+s[<span class="hljs-number">7</span>]*<span class="hljs-number">45</span>)==<span class="hljs-number">0x2746</span>)<br>a.add((s[<span class="hljs-number">0</span>]*<span class="hljs-number">7</span>+s[<span class="hljs-number">1</span>]*<span class="hljs-number">34</span>+s[<span class="hljs-number">2</span>]*<span class="hljs-number">10</span>+s[<span class="hljs-number">3</span>]*<span class="hljs-number">17</span>+s[<span class="hljs-number">4</span>]*<span class="hljs-number">11</span>+s[<span class="hljs-number">5</span>]*<span class="hljs-number">22</span>+s[<span class="hljs-number">6</span>]*<span class="hljs-number">2</span>+s[<span class="hljs-number">7</span>]*<span class="hljs-number">12</span>)==<span class="hljs-number">0x29ef</span>)<br>a.add((s[<span class="hljs-number">0</span>]*<span class="hljs-number">43</span>+s[<span class="hljs-number">1</span>]*<span class="hljs-number">2</span>+s[<span class="hljs-number">2</span>]*<span class="hljs-number">11</span>+s[<span class="hljs-number">3</span>]*<span class="hljs-number">15</span>+s[<span class="hljs-number">4</span>]*<span class="hljs-number">1</span>+s[<span class="hljs-number">5</span>]*<span class="hljs-number">21</span>+s[<span class="hljs-number">6</span>]*<span class="hljs-number">1</span>+s[<span class="hljs-number">7</span>]*<span class="hljs-number">30</span>)==<span class="hljs-number">0x2d7e</span>)<br><br><span class="hljs-comment">#判断是否有解(a.model()前必須先調用a.check())</span><br><span class="hljs-keyword">if</span> a.check()==sat:<br>    <span class="hljs-built_in">print</span>(a.model())<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No resolve&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">得到了s的数值</span><br><span class="hljs-string">s[7] = 100, s[3] = 108, s[5] = 49, s[0] = 102,</span><br><span class="hljs-string">s[2] = 108, s[6] = 110, s[1] = 97, s[4] = 119,</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>key = [<span class="hljs-number">0</span>,  <span class="hljs-number">13</span>,  <span class="hljs-number">13</span>,  <span class="hljs-number">11</span>,  <span class="hljs-number">12</span>, <span class="hljs-number">107</span>,  <span class="hljs-number">20</span>,  <span class="hljs-number">30</span>,  <span class="hljs-number">28</span>,  <span class="hljs-number">82</span>,<br> <span class="hljs-number">95</span>,  <span class="hljs-number">95</span>,  <span class="hljs-number">40</span>, <span class="hljs-number">120</span>,  <span class="hljs-number">29</span>,  <span class="hljs-number">59</span>,  <span class="hljs-number">37</span>,  <span class="hljs-number">14</span>,   <span class="hljs-number">3</span>,   <span class="hljs-number">0</span>,<br> <span class="hljs-number">86</span>,  <span class="hljs-number">16</span>,  <span class="hljs-number">79</span>,  <span class="hljs-number">25</span>]<br>k = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key)):<br>    k += <span class="hljs-built_in">chr</span>((key[i] &amp; (s[i &amp; <span class="hljs-number">7</span>] ^ key[i]) | ~key[i] &amp; (~key[i] ^ ~s[i &amp; <span class="hljs-number">7</span>])))<br><br><span class="hljs-built_in">print</span>(k)<br></code></pre></td></tr></table></figure></li><li><p>使用矩阵方法求解（实质与使用z3一样）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#导入 numpy 模块</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment">#行交换</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">swap_row</span>(<span class="hljs-params">matrix, i, j</span>):<br>      m, n = matrix.shape<br>      <span class="hljs-keyword">if</span> i &gt;= m <span class="hljs-keyword">or</span> j &gt;= m:<br>          <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;错误! : 行交换超出范围 ...&#x27;</span>)<br>      <span class="hljs-keyword">else</span>:<br>          matrix[i],matrix[j] = matrix[j].copy(),matrix[i].copy()<br>      <span class="hljs-keyword">return</span> matrix<br><br><br>  <span class="hljs-comment">#变成阶梯矩阵</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_change</span>(<span class="hljs-params">matrix</span>):<br>      m, n = matrix.shape<br>      main_factor = []<br>      main_col = main_row = <span class="hljs-number">0</span><br>      <span class="hljs-keyword">while</span> main_row &lt; m <span class="hljs-keyword">and</span> main_col &lt; n:<br>          <span class="hljs-comment"># 选择进行下一次主元查找的列</span><br>          main_row = <span class="hljs-built_in">len</span>(main_factor)<br>          <span class="hljs-comment"># 寻找列中非零的元素</span><br>          not_zeros = np.where(<span class="hljs-built_in">abs</span>(matrix[main_row:,main_col]) &gt; <span class="hljs-number">0</span>)[<span class="hljs-number">0</span>]<br>          <span class="hljs-comment"># 如果该列向下全部数据为零，则直接跳过列</span><br>          <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(not_zeros) == <span class="hljs-number">0</span>:<br>              main_col += <span class="hljs-number">1</span><br>              <span class="hljs-keyword">continue</span><br>          <span class="hljs-keyword">else</span>:<br>              <span class="hljs-comment"># 将主元列号保存在列表中</span><br>              main_factor.append(main_col)<br>              <span class="hljs-comment"># 将第一个非零行交换至最前</span><br>              <span class="hljs-keyword">if</span> not_zeros[<span class="hljs-number">0</span>] != [<span class="hljs-number">0</span>]:<br>                  matrix = swap_row(matrix,main_row,main_row+not_zeros[<span class="hljs-number">0</span>])<br>              <span class="hljs-comment"># 将该列主元下方所有元素变为零</span><br>              <span class="hljs-keyword">if</span> main_row &lt; m-<span class="hljs-number">1</span>:<br>                  <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(main_row+<span class="hljs-number">1</span>,m):<br>                      a = <span class="hljs-built_in">float</span>(matrix[k, main_col] / matrix[main_row, main_col])<br>                      matrix[k] = matrix[k] - matrix[main_row] * matrix[k, main_col] / matrix[main_row, main_col]<br>              main_col += <span class="hljs-number">1</span><br>      <span class="hljs-keyword">return</span> matrix,main_factor<br><br><br>  <span class="hljs-comment">#回代求解</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">back_solve</span>(<span class="hljs-params">matrix, main_factor</span>):<br>      <span class="hljs-comment"># 判断是否有解</span><br>      <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(main_factor) == <span class="hljs-number">0</span>:<br>          <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主元错误,无主元！ ...&#x27;</span>)<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>      m, n = matrix.shape<br>      <span class="hljs-keyword">if</span> main_factor[-<span class="hljs-number">1</span>] == n - <span class="hljs-number">1</span>:<br>          <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;无解！ ...&#x27;</span>)<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>      <span class="hljs-comment"># 把所有的主元元素上方的元素变成0</span><br>      <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(main_factor) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>          factor = matrix[i, main_factor[i]]<br>          matrix[i] = matrix[i] / <span class="hljs-built_in">float</span>(factor)<br>          <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>              times = matrix[j, main_factor[i]]<br>              matrix[j] = matrix[j] - <span class="hljs-built_in">float</span>(times) * matrix[i]<br>      <span class="hljs-comment"># 先看看结果对不对</span><br>      <span class="hljs-keyword">return</span> matrix<br><br><br>  <span class="hljs-comment">#结果打印</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_result</span>(<span class="hljs-params">matrix, main_factor</span>):<br>      <span class="hljs-keyword">if</span> matrix <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>          <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;阶梯矩阵为空！ ...&#x27;</span>)<br>          <span class="hljs-keyword">return</span><br>      m, n = matrix.shape<br>      result = [<span class="hljs-string">&#x27;&#x27;</span>] * (n - <span class="hljs-number">1</span>)<br>      main_factor = <span class="hljs-built_in">list</span>(main_factor)<br>      <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>):<br>          <span class="hljs-comment"># 如果不是主元列，则为自由变量</span><br>          <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> main_factor:<br>              result[i] = <span class="hljs-string">&#x27;x_&#x27;</span> + <span class="hljs-built_in">str</span>(i + <span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;(free var)&#x27;</span><br>          <span class="hljs-comment"># 否则是主元变量，从对应的行，将主元变量表示成非主元变量的线性组合</span><br>          <span class="hljs-keyword">else</span>:<br>              <span class="hljs-comment"># row_of_main表示该主元所在的行</span><br>              row_of_main = main_factor.index(i)<br>              result[i] = <span class="hljs-built_in">str</span>(matrix[row_of_main, -<span class="hljs-number">1</span>])<br>              <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>):<br>                  ratio = matrix[row_of_main, j]<br>                  <span class="hljs-keyword">if</span> ratio &gt; <span class="hljs-number">0</span>:<br>                      result[i] = result[i] + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-built_in">str</span>(ratio) + <span class="hljs-string">&#x27;x_&#x27;</span> + <span class="hljs-built_in">str</span>(j + <span class="hljs-number">1</span>)<br>                  <span class="hljs-keyword">if</span> ratio &lt; <span class="hljs-number">0</span>:<br>                      result[i] = result[i] + <span class="hljs-string">&#x27;+&#x27;</span> + <span class="hljs-built_in">str</span>(-ratio) + <span class="hljs-string">&#x27;x_&#x27;</span> + <span class="hljs-built_in">str</span>(j + <span class="hljs-number">1</span>)<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;方程的通解是:&#x27;</span>, )<br>      <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">1</span>):<br>          <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x_&#x27;</span> + <span class="hljs-built_in">str</span>(i + <span class="hljs-number">1</span>), <span class="hljs-string">&#x27;=&#x27;</span>, result[i])<br><br><br>  <span class="hljs-comment">#得到简化的阶梯矩阵和主元列</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">Handle</span>(<span class="hljs-params">matrix_a, matrix_b</span>):<br>      <span class="hljs-comment"># 拼接成增广矩阵</span><br>      matrix_01 = np.hstack([matrix_a, matrix_b])<br>      matrix_01, main_factor = matrix_change(matrix_01)<br>      matrix_01 = back_solve(matrix_01, main_factor)<br>      print_result(matrix_01, main_factor)<br>      <span class="hljs-keyword">return</span> matrix_01, main_factor<br><br><br>  <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>      <span class="hljs-comment">#a = np.array([[0, 1, 1], [0, 1, 0], [1, 0, 0]])</span><br>      a = np.array([[<span class="hljs-number">12</span>,<span class="hljs-number">11</span>,<span class="hljs-number">20</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>], [<span class="hljs-number">11</span>,<span class="hljs-number">45</span>,<span class="hljs-number">1</span>,<span class="hljs-number">11</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>], [<span class="hljs-number">16</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">12</span>],[<span class="hljs-number">19</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">28</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">67</span>],[<span class="hljs-number">20</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,<span class="hljs-number">22</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">19</span>,<span class="hljs-number">0</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">45</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">34</span>,<span class="hljs-number">10</span>,<span class="hljs-number">17</span>,<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>],[<span class="hljs-number">43</span>,<span class="hljs-number">2</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">21</span>,<span class="hljs-number">1</span>,<span class="hljs-number">30</span>]],dtype=<span class="hljs-built_in">float</span>)<br>      b = np.array([[<span class="hljs-number">6426</span>],[<span class="hljs-number">9801</span>],[<span class="hljs-number">6021</span>],[<span class="hljs-number">14444</span>],[<span class="hljs-number">7251</span>],[<span class="hljs-number">10054</span>],[<span class="hljs-number">10735</span>],[<span class="hljs-number">11646</span>]],dtype=<span class="hljs-built_in">float</span>)<br>      Handle(a, b)<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span> * <span class="hljs-number">20</span>)<br><br></code></pre></td></tr></table></figure><p>得到的x[1..8]就是解出来的Arglist，也是上文的s[0..8],使用上面的代码代入求解即可.<br>ps:解出来的为浮点数，记得需要进位操作</p></li></ul><h1 id="EzTea"><a href="#EzTea" class="headerlink" title="EzTea"></a>EzTea</h1><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><ul><li>查壳,放到IDA中查看,之后可以看出来是将输入进行加密,之后和原有之进行比较<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211121540089.png"></li><li>然后根据查看tea中的内容，知道使用的就是xxtea加密，只不过将一些数据进行了修改<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211121555569.png"><br>对比后发现修改的地方为:<span class="label label-primary">DELTA,z>>5变成z>>4,z<<4变成z<<5</span></li></ul><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><ul><li>xxtea的通用代码,根据题意进行了修改<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*原来</span><br><span class="hljs-comment">  DELTA 0x9e3779b9  </span><br><span class="hljs-comment">  MX (((z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z))) </span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//修改后 </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DELTA 0x11451400</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MX (((z^key[(p&amp;3)^e]) + (y^sum)) ^ ((z<span class="hljs-string">&lt;&lt;5^y&gt;</span>&gt;3) + (y<span class="hljs-string">&lt;&lt;2^z&gt;</span>&gt;4))) </span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">xxtea</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">int</span> n, <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">uint32_t</span> y, z, sum;<br>    <span class="hljs-type">unsigned</span> p, rounds, e;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>)            <span class="hljs-comment">/* Coding Part */</span><br>    &#123;<br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br>        sum = <span class="hljs-number">0</span>;<br>        z = v[n - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            sum += DELTA;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; p &lt; n - <span class="hljs-number">1</span>; p++)<br>            &#123;<br>                y = v[p + <span class="hljs-number">1</span>];<br>                z = v[p] += MX;<br>            &#125;<br>            y = v[<span class="hljs-number">0</span>];<br>            z = v[n - <span class="hljs-number">1</span>] += MX;<br>        &#125; <span class="hljs-keyword">while</span> (--rounds);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">-1</span>)      <span class="hljs-comment">/* Decoding Part */</span><br>    &#123;<br>        n = -n;<br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br>        sum = rounds * DELTA;<br>        y = v[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = n - <span class="hljs-number">1</span>; p &gt; <span class="hljs-number">0</span>; p--)<br>            &#123;<br>                z = v[p - <span class="hljs-number">1</span>];<br>                y = v[p] -= MX;<br>            &#125;<br>            z = v[n - <span class="hljs-number">1</span>];<br>            y = v[<span class="hljs-number">0</span>] -= MX;<br>            sum -= DELTA;<br>        &#125; <span class="hljs-keyword">while</span> (--rounds);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> enc[] =<br>    &#123;<br>      <span class="hljs-number">0x82</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x96</span>,<br>      <span class="hljs-number">0x40</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x71</span>,<br>      <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x88</span>,<br>      <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span><br>    &#125;;<br>    <span class="hljs-type">uint32_t</span> key[] = &#123; <span class="hljs-number">0x19</span>,<span class="hljs-number">0x19</span>,<span class="hljs-number">0x8</span>,<span class="hljs-number">0x10</span> &#125;;<br>    <span class="hljs-comment">// 传入-9代表解密，9为v的长度，即n</span><br>    <span class="hljs-built_in">xxtea</span>((<span class="hljs-type">uint32_t</span>*)enc, <span class="hljs-number">-9</span>, (<span class="hljs-type">uint32_t</span>*)key);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,enc);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【NewStartCTF】Reverse_Week2</title>
    <link href="/posts/2f0d53cc.html"/>
    <url>/posts/2f0d53cc.html</url>
    
    <content type="html"><![CDATA[<h1 id="前…人，后…者"><a href="#前…人，后…者" class="headerlink" title="前…人，后…者"></a>前…人，后…者</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>查壳之后是32位程序，IDA打开<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211081105733.png"></li><li>使用<span class="label label-primary">sub_4113DE</span>对输入进行加密<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211081110311.png"></li><li>观察特点，上面是凯撒加密，之后价格结果与0x22异或<br>查看<span class="label label-primary">byte_41A004</span><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211081113384.png"><br>得到经过凯撒加密，然后异或之后的结果</li></ul><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">81</span>, <span class="hljs-number">91</span>,  <span class="hljs-number">76</span>,  <span class="hljs-number">86</span>,  <span class="hljs-number">89</span>,  <span class="hljs-number">77</span>,  <span class="hljs-number">80</span>,  <span class="hljs-number">86</span>,  <span class="hljs-number">84</span>,  <span class="hljs-number">67</span>, <span class="hljs-number">125</span>,<br>  <span class="hljs-number">76</span>,  <span class="hljs-number">67</span>,  <span class="hljs-number">83</span>, <span class="hljs-number">125</span>,  <span class="hljs-number">80</span>,  <span class="hljs-number">67</span>,  <span class="hljs-number">83</span>, <span class="hljs-number">125</span>,  <span class="hljs-number">71</span>,  <span class="hljs-number">80</span>,<br>  <span class="hljs-number">125</span>,  <span class="hljs-number">76</span>,  <span class="hljs-number">67</span>,  <span class="hljs-number">83</span>, <span class="hljs-number">125</span>,  <span class="hljs-number">78</span>,  <span class="hljs-number">64</span>,  <span class="hljs-number">74</span>,  <span class="hljs-number">95</span>]<br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-built_in">str</span>+=<span class="hljs-built_in">chr</span>(a[i]^<span class="hljs-number">0x22</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i]) &gt;= <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i]) &lt;= <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;z&#x27;</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i]) - k - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i]) &gt;= <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i]) &lt;= <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;Z&#x27;</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i]) - k - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[i], end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211081130028.png"></p><h1 id="FindMe"><a href="#FindMe" class="headerlink" title="FindMe"></a>FindMe</h1><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211092056077.png"><br>该程序经过<span class="label label-primary">sub_1BCD</span>使得dword_5040 &#x3D;&#x3D; 1即可得到flag</p><p>怎经过调试，可以看到关键的函数<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211092101605.png"><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211092101271.png"><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211092102474.png"><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211092103231.png"><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211092103704.png"><br>大致的含义是首先对s进行赋0，然后经过位运算，异或之后进行得到dword_5020，求解就是逆推进行求解</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><ul><li><p>首先由dword_5020获得最后的数据<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211092108307.png"><br>则首先经过异或右移17，之后再右移0x2022</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">s = [<span class="hljs-number">1734442996</span>,<span class="hljs-number">1848660801</span>,<span class="hljs-number">1701596640</span>,<span class="hljs-number">1769229292</span>,<span class="hljs-number">1650422880</span>,<span class="hljs-number">1869826292</span>,<span class="hljs-number">1701343689</span>,<span class="hljs-number">2099343059</span>]<br>key = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)):<br>    s[i]^=(s[i]&gt;&gt;<span class="hljs-number">17</span>)<br><span class="hljs-built_in">print</span>(s)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)):<br>    s[i] ^= <span class="hljs-number">0x2022</span><br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure></li><li><p>之后经过位运算<br>|为按位或运算，只要对应两个二进制位有一个为1时，结果就为1</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">s = [<span class="hljs-number">1734442996</span>,<span class="hljs-number">1848660801</span>,<span class="hljs-number">1701596640</span>,<span class="hljs-number">1769229292</span>,<span class="hljs-number">1650422880</span>,<span class="hljs-number">1869826292</span>,<span class="hljs-number">1701343689</span>,<span class="hljs-number">2099343059</span>]<br>key = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)):<br>    s[i]^=(s[i]&gt;&gt;<span class="hljs-number">17</span>)<br><span class="hljs-built_in">print</span>(s)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)):<br>    s[i] ^= <span class="hljs-number">0x2022</span><br><span class="hljs-built_in">print</span>(s)<br>flag = [<span class="hljs-string">&#x27;&#x27;</span>]*<span class="hljs-number">32</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">32</span>,<span class="hljs-number">4</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-built_in">ascii</span> = s[i//<span class="hljs-number">4</span>] &gt;&gt; (<span class="hljs-number">8</span>*(<span class="hljs-number">4</span>-j-<span class="hljs-number">1</span>))<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        还原或运算，每次左移在后面补零，又与之后的s[i]位运算将零替换成s[i]的值</span><br><span class="hljs-string">        即最后的s[i]由s[i]本身与s[i]左移之后的数相加而成(左移位数远远超过本身，按位或就成为了相加),则逆推需要减去</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        s[i//<span class="hljs-number">4</span>] = s[i//<span class="hljs-number">4</span>] - (<span class="hljs-built_in">ascii</span> &lt;&lt; <span class="hljs-number">8</span>*(<span class="hljs-number">4</span>-j-<span class="hljs-number">1</span>))<br>        flag[i+(<span class="hljs-number">4</span>-j-<span class="hljs-number">1</span>)] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ascii</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(flag))<br></code></pre></td></tr></table></figure><h1 id="Petals"><a href="#Petals" class="headerlink" title="Petals"></a>Petals</h1><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211172010055.png" alt="image-20221117201025285"></p><p>找到main函数，观察<code>loc_1209</code>是指令，可能反编译有问题，点击进去看看</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211172012817.png" alt="image-20221117201207882"></p><p>在下面找到一个错误的提示，按D转换成原始数据形式</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211172013376.png" alt="image-20221117201340361"></p><p>对E8使用Patcher直接nop掉，之后按c转换为代码，同时将此指令<code>loc_1209</code>按P转换为函数，之后就转换成函数</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211172017531.png" alt="image-20221117201740510"></p><p>而<code>sub_160C</code>是一个比较函数，若是输入的值与最后存储的值相同，那么就是输入对了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">unsigned</span> __int64 __fastcall <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">char</span>* input, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+18h] [rbp-118h]</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+1Ch] [rbp-114h]</span><br>__int64 v5[<span class="hljs-number">33</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-110h] BYREF</span><br><span class="hljs-type">unsigned</span> __int64 v6; <span class="hljs-comment">// [rsp+128h] [rbp-8h]</span><br><br><span class="hljs-built_in">memset</span>(v5, <span class="hljs-number">0</span>, <span class="hljs-number">256</span>);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">255</span>; ++i)<br>*((BYTE*)v5 + i) = ~(i ^ len);<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; len &gt; j; ++j)<br>input[j] = *((BYTE*)v5 + (<span class="hljs-type">unsigned</span> __int8)input[j]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">char</span> enc[] =<br>&#123;<br>  <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x89</span>,<br>  <span class="hljs-number">0x92</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xD1</span>,<br>  <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x87</span>,<span class="hljs-number">0</span><br>&#125;;<br><span class="hljs-type">char</span> flag[<span class="hljs-number">56</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">25</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">256</span>; j++) &#123;<br>flag[i] = j;<br><span class="hljs-built_in">func</span>(flag, <span class="hljs-number">25</span>);<br><span class="hljs-keyword">if</span> (flag[i] == enc[i]) &#123;<br>cout &lt;&lt; (<span class="hljs-type">char</span>)j;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 66ccff#luotianyi#b074d58a</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【NewStartCTF】Reverse_Week1</title>
    <link href="/posts/b6040276.html"/>
    <url>/posts/b6040276.html</url>
    
    <content type="html"><![CDATA[<h1 id="Hello-Reversing"><a href="#Hello-Reversing" class="headerlink" title="Hello_Reversing"></a>Hello_Reversing</h1><h2 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h2><ul><li>首先使用exeinfope查一下壳<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210282330917.png"></li><li>由图所示，此程序是64位程序，没有壳（Not packed）</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>使用ida打开程序，找到主函数（main）界面，按<span class="label label-info">Tab/F5</span>进入伪代码界面.<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210282333815.png"></li><li>观察伪代码的信息，看到有”3vers1ng_w0rld}”，猜测此为flag的一半，另外一半可能也是这样的展示方式，则使用Shift+F12直接搜索程序中的字符串.<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210282337023.png"></li><li>最后发现字符串的另一半在<a href="https://www.cnblogs.com/lsgxeva/p/8947829.html">.rdata</a>段中<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210290824478.png"></li><li>找到了flag的前半部分，点击进入汇编界面。在相应显示flag前半段的位置处，直接按Shift+e进行提取，那么就得到了flag.</li></ul><h1 id="Pyre"><a href="#Pyre" class="headerlink" title="Pyre"></a>Pyre</h1><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><ul><li><p>得到文件pyre.exe，由文件名字可以看出这个是由py文件编译成的exe文件，则使用<a href="https://github.com/extremecoders-re/pyinstxtractor">pyinstxtractor.py</a>可以将pyre进行反编译</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> pyinstxtractor.<span class="hljs-keyword">py</span> <span class="hljs-symbol">&lt;filename&gt;</span><br></code></pre></td></tr></table></figure><p>运行成功<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210290851753.png" alt="运行成功"></p></li><li><p>反编译后，会生成一个文件夹,其中的.pyc文件就是由.exe反编译得到的，现在需要将.pyc反编译成.py文件<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210290854071.png"></p></li></ul><h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><ol><li><p>直接使用<a href="https://tool.lu/pyc/">在线网站</a>进行反编译</p></li><li><p>使用<a href="https://github.com/rocky/python-uncompyle6">uncompyle6</a>进行反编译</p></li></ol><ul><li><p>uncompyle6可将python字节码转换回等效的python源代码，它接受python 1.3版到3.8版的字节码</p></li><li><p>安装</p>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> uncompyle6<br></code></pre></td></tr></table></figure></li><li><p>使用示例</p>  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">uncompyle6 -<span class="hljs-keyword">o</span> fliename.<span class="hljs-keyword">py</span> <span class="hljs-keyword">file</span>.pyc #  对filename.pyc文件进行反编译，输出为<span class="hljs-keyword">file</span>.<span class="hljs-keyword">py</span>文件<br></code></pre></td></tr></table></figure></li></ul><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><ul><li><p>查看反编译后的.py源代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = <span class="hljs-string">&#x27;&#x27;</span><br>encode = <span class="hljs-string">&#x27;REla&#123;PSF!!fg&#125;!Y_SN_1_0U&#x27;</span><br>table = [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>, <span class="hljs-number">16</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <br>        <span class="hljs-number">22</span>, <span class="hljs-number">19</span>, <span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">18</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">14</span>, <span class="hljs-number">17</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc</span>(<span class="hljs-params"><span class="hljs-built_in">input</span></span>):<br>    tmp = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">input</span>)):<br>        tmp += <span class="hljs-built_in">input</span>[table[i]]<br><br>    <span class="hljs-keyword">return</span> tmp<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Please input your flag:&#x27;</span>)<br>    flag = <span class="hljs-built_in">input</span>()<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(flag) != <span class="hljs-number">23</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Length Wrong!!&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        final = enc(flag)<br>        <span class="hljs-keyword">if</span> final == encode:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Wow,you get the right flag!!&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Sorry,Your input is Wrong&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>此加密为将flag打乱顺序，将table的值作为下标进行输出，则可以构造和encode等长的列表，进行逆操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">encode = <span class="hljs-string">&#x27;REla&#123;PSF!!fg&#125;!Y_SN_1_0U&#x27;</span><br>table = [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>, <span class="hljs-number">16</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <br>        <span class="hljs-number">22</span>, <span class="hljs-number">19</span>, <span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">11</span>, <span class="hljs-number">18</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">14</span>, <span class="hljs-number">17</span>]<br><br>flag = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(encode))]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(encode)):<br>    flag[table[i]] = encode[i]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(flag))<br></code></pre></td></tr></table></figure></li></ul><h1 id="Baby-Re"><a href="#Baby-Re" class="headerlink" title="Baby_Re"></a>Baby_Re</h1><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><ul><li><p>64位程序.使用ida打开程序，找到主函数（main）界面，按<span class="label label-info">Tab/F5</span>进入伪代码界面.<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210291704483.png"></p><p>由main函数界面，可以看出此题是输入一个字符串，先进行与i异或，之后经过compare函数，正确返回为1</p></li><li><p>跟进compare函数，发现是用final与s进行比较<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210291708684.png"><br>可以知道flag（输入的字符串）为32位长，然后遍历输入的字符串，要求和final一样,跟进final，</p></li><li><p>按Shift+e提取数据<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210291712101.png"></p></li></ul><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">final = [<span class="hljs-number">102</span>, <span class="hljs-number">109</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>, <span class="hljs-number">127</span>,  <span class="hljs-number">86</span>, <span class="hljs-number">105</span>, <span class="hljs-number">106</span>, <span class="hljs-number">109</span>, <span class="hljs-number">125</span>,<br>  <span class="hljs-number">98</span>, <span class="hljs-number">98</span>,  <span class="hljs-number">98</span>, <span class="hljs-number">106</span>, <span class="hljs-number">81</span>, <span class="hljs-number">125</span>, <span class="hljs-number">101</span>, <span class="hljs-number">127</span>, <span class="hljs-number">77</span>, <span class="hljs-number">113</span>, <span class="hljs-number">113</span>, <span class="hljs-number">115</span>, <br>  <span class="hljs-number">121</span>, <span class="hljs-number">101</span>, <span class="hljs-number">125</span>, <span class="hljs-number">70</span>, <span class="hljs-number">119</span>, <span class="hljs-number">122</span>, <span class="hljs-number">117</span>, <span class="hljs-number">115</span>, <span class="hljs-number">33</span>, <span class="hljs-number">98</span>]<br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(final)):<br>    flag += <span class="hljs-built_in">chr</span>(final[i]^i)<br>    <br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><ul><li>运行出来的flag为flag{Something_run_before_main?}</li><li>提交发现这个flag是一个假的，之后根据题意与线索，发现有4个bytes不一样<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210291724280.png"></li><li>跟进function进行查看<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210291726414.png"><br>发现对于这四个位置进行了修改，之后更改exp,修改这4个位置的数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">final = [<span class="hljs-number">102</span>, <span class="hljs-number">109</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>, <span class="hljs-number">127</span>, <span class="hljs-number">86</span>, <span class="hljs-number">54</span>, <span class="hljs-number">106</span>, <span class="hljs-number">109</span>, <span class="hljs-number">125</span>, <br>  <span class="hljs-number">58</span>, <span class="hljs-number">98</span>, <span class="hljs-number">98</span>, <span class="hljs-number">106</span>, <span class="hljs-number">81</span>, <span class="hljs-number">125</span>, <span class="hljs-number">101</span>, <span class="hljs-number">127</span>,  <span class="hljs-number">77</span>, <span class="hljs-number">113</span>, <span class="hljs-number">113</span>, <span class="hljs-number">115</span>, <br>  <span class="hljs-number">38</span>, <span class="hljs-number">101</span>, <span class="hljs-number">125</span>, <span class="hljs-number">70</span>, <span class="hljs-number">119</span>, <span class="hljs-number">122</span>, <span class="hljs-number">117</span>, <span class="hljs-number">115</span>, <span class="hljs-number">63</span>, <span class="hljs-number">98</span>]<br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(final)):<br>    flag += <span class="hljs-built_in">chr</span>(final[i]^i)<br>    <br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h1 id="EasyRe"><a href="#EasyRe" class="headerlink" title="EasyRe"></a>EasyRe</h1><h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><ul><li>题目为.exe文件和.dll文件.对.exe查壳,无壳,64位,在ida中查看.<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210291954295.png"><br>首先exe会加载dll，调用dll里的函数，图中的红框.同时这里的57行将ProcAddress定义为enc.dll中的encode函数<br>之后就是将输入的字符串经过encode后与Str2进行比较，相等则得到flag</li><li>继续分析enc.dll<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210292004505.png"><br>跟进return进行查看<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210292004268.png"><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210292005284.png"><br>则enc.dll大致是将输入的字符串a1进行一个加密操作之后赋值给a2，之后a2与Str(Reverse)进行异或输出a2</li><li>enc.dll的加密操作复杂，使用Shift+F12查看有没有可以使用的信息<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210292009641.png"><br>看到一串字符，判定为base64编码，即加密就是base加密</li></ul><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><ul><li>这里final[14]题目中没有告知,先当0进行处理,成功获得flag;若是不能，可以爆破final[14],对其遍历所有ascii爆破最后的flag.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br>final = [<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">14</span>, <span class="hljs-number">13</span>, <span class="hljs-number">40</span>, <span class="hljs-number">64</span>, <span class="hljs-number">17</span>, <span class="hljs-number">17</span>, <span class="hljs-number">60</span>, <span class="hljs-number">46</span>, <span class="hljs-number">43</span>, <span class="hljs-number">30</span>, <span class="hljs-number">61</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>,<br>        <span class="hljs-number">59</span>, <span class="hljs-number">61</span>, <span class="hljs-number">60</span>, <span class="hljs-number">21</span>, <span class="hljs-number">40</span>, <span class="hljs-number">5</span>, <span class="hljs-number">80</span>, <span class="hljs-number">70</span>, <span class="hljs-number">63</span>, <span class="hljs-number">42</span>, <span class="hljs-number">57</span>, <span class="hljs-number">9</span>, <span class="hljs-number">49</span>, <span class="hljs-number">86</span>, <span class="hljs-number">36</span>, <span class="hljs-number">28</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;?$P&lt;,%#K&#x27;</span>:<br>    final.append(<span class="hljs-built_in">ord</span>(i))<br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;Reverse&#x27;</span><br><br>flag = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(final)):<br>    flag.append(<span class="hljs-built_in">chr</span>(final[i] ^ <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i % <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)])))<br><br>content = base64.b64decode(<span class="hljs-string">&#x27;&#x27;</span>.join(flag).encode())<br><span class="hljs-built_in">print</span>(content)<br></code></pre></td></tr></table></figure></li></ul><h1 id="艾克体悟题"><a href="#艾克体悟题" class="headerlink" title="艾克体悟题"></a>艾克体悟题</h1><p>作者给了提示：<a href="https://note.youdao.com/ynoteshare/index.html?id=a006b246edc7fc65ed20abbc2d9c5351&type=note&%5C_time=1663716620460">点击这里</a></p><h2 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h2><ul><li>有题目可以得知，在模拟器中直接打开apk文件<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211072352571.png"></li><li>则使用<span class="label label-info">adb shell</span>启动指定的Activity<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb <span class="hljs-keyword">shell</span>   进入<span class="hljs-keyword">shell</span><br><span class="hljs-keyword">am</span> start -n <span class="hljs-keyword">com</span>.droidlearn.activity_travel/.FlagActivity   按上述地址路径，打开指定控件<br></code></pre></td></tr></table></figure><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211072353036.png"></li></ul><h2 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h2><ol><li><p>使用python中的 pyautogui 库控制鼠标自动进行连点操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pyautogui <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> time<br>pd.FAILSAFE = <span class="hljs-literal">True</span><br><br>time.sleep(<span class="hljs-number">3</span>)<br><span class="hljs-comment">#3秒时间自己移动到要点击的位置</span><br>pd.click(clicks=<span class="hljs-number">100000</span>,interval=<span class="hljs-number">0.0001</span>)<br><span class="hljs-comment"># pyautogui.click()</span><br><span class="hljs-comment"># (100,100, clicks=2,interval=0.5,button=‘right’,duration=0.2)</span><br><span class="hljs-comment"># 位置，点击次数，间隔时间，右键(默认左键)，移动间隔</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_61774705/article/details/127165732">exp参考此篇文章</a></p></li><li><p>使用apk反编译后重新打包，将1w的数值修改为1</p></li></ol><ul><li><p>下载<a href="https://ibotpeaches.github.io/Apktool/">下载apktool</a>,此工具作用就是将apk反编译和重新打包<br>输入&#96;</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>apktool_2.<span class="hljs-number">6</span>.<span class="hljs-number">1</span>.<span class="hljs-keyword">jar </span>d &lt;filepath&gt; -o &lt;newfilename&gt;<br></code></pre></td></tr></table></figure><p>生成文件夹.<br>进入文件夹 demo\smali\com\droidlearn\activity_travel 路径找 FlagActivity$1.smali 文件，此文件可以直接用编辑器打开<br>在此文件中寻找到到0x2710（10000）十六进制，修改为0x1即为点击1次即可.<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211080956544.png"></p></li><li><p>重新打包</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">java -jar apktool_2<span class="hljs-number">.6</span><span class="hljs-number">.1</span>.jar b &lt;<span class="hljs-keyword">new</span><span class="hljs-type">filename</span>&gt; -o &lt;<span class="hljs-keyword">new</span><span class="hljs-type">file</span>&gt;.apk<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211081009495.png"><br>打包成功即生成一个.apk，但此时的apk不可使用，还需安装签名.</p></li><li><p>测试<br>安装至夜神模拟器，用&#x2F;nox&#x2F;bin目录下的adb工具进行安装，</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">adb install &lt;<span class="hljs-keyword">new</span><span class="hljs-type">file</span>&gt;.apk<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211081012000.png"><br>安装失败，这是没有签名导致的.</p></li><li><p>生成口令文件<br>使用JRE环境变量下的keytool生成口令文件,<a href="https://blog.csdn.net/w47_csdn/article/details/87564029">详细参考</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">keytool</span> -genkey -alias testalias -keyalg RSA -keysize <span class="hljs-number">2048</span> -validity <span class="hljs-number">36500</span> -keystore &lt;filename&gt;.keystore`<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211081018301.png"><br>输入回答，之后在当前目录下生成一个.keystore文件，使用<code>keytool -list -v -keystore &lt;filename&gt;.keystore</code>可以查看详细信息.</p></li><li><p>签名</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">jarsigner -<span class="hljs-keyword">verbose</span> -keystore <span class="hljs-symbol">&lt;filename&gt;</span>.keystore -storepass <span class="hljs-symbol">&lt;password&gt;</span> -signedjar <span class="hljs-symbol">&lt;newfile&gt;</span>.apk <span class="hljs-symbol">&lt;filename&gt;</span>.apk testalias<br></code></pre></td></tr></table></figure><p>其中<br>-<span class="label label-default">keystore + 签名文件</span><br><br>-<span class="label label-default">sotrepass + 签名口令密码</span> <br><br>-<span class="label label-default">signedjar后跟三个参数 分别是签名后的apk文件 需要签名的apk文件 签名的别名</span><br><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211081027234.png"><br>签名成功，之后下载此flag.apk,启动指定的<span class="label label-info">FlagActivity$1.smali</span>，则可以得到flag<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211081044884.png"><br><a href="https://www.anyiblog.top/2022/09/25/20220925/#Re5-%E8%89%BE%E5%85%8B%E4%BD%93%E6%82%9F%E9%A2%98">exp参考此篇文章</a></p></li><li><p>补充<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202211081042328.png"><br>下载时若是出现此报错，需要删除之前下载的那个apk，<a href="https://blog.csdn.net/qq_42351033/article/details/122450733">解决方案</a><br>进入adb shell之后可以通过<code>pm list package</code>列出模拟器中所有的包</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Crypto &amp; Python</title>
    <link href="/posts/108720dc.html"/>
    <url>/posts/108720dc.html</url>
    
    <content type="html"><![CDATA[<h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><h2 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h2><ul><li><code>int(a,k)</code><ul><li>a为k进制数，使用<code>int</code>将k进制数转化为十进制数</li><li><code>int(a)</code>直接将字符a转化为int类型，此时a必须为数字字符，<ul><li>注意：不是转化为ascii码，而是转化为数字类型，即值不变，类型改变</li></ul></li></ul></li><li><code>str(a)</code><ul><li>与<code>int(a)</code>是相反的操作，但是范围扩大</li></ul></li><li><code>ord(a)</code><ul><li>将字符a按其ascii码转化为int类型</li></ul></li><li><code>chr(a)</code><ul><li>将int类型的a根据其ascii码转化为字符</li></ul></li><li><code>str.encode(encoding=&#39;utf-8&#39;, errors=&#39;strict&#39;)</code><ul><li>以指定的编码格式编码字符串，默认编码为 ‘utf-8’</li></ul></li><li><code>bytes</code>与<code>str</code><ul><li><code>bytes = str.encode()</code><ul><li>str 转换成 bytes 用 encode() 方法</li><li><code>bytes=b&#39;\xe4\xba\xba\xe7\x94&#39;</code>bytes的形式</li></ul></li><li><code>str = bytes.decode()</code><ul><li>反转换</li></ul></li></ul></li><li><code>hex()</code><ul><li><code>a.hex()</code>将bytes类型（即a）转化为十六进制</li><li><code>bytes.fromhex(a.hex())</code>可以将十六进制数转化为bytes类型</li></ul></li><li><code>join()</code><ul><li><code>print(&#39;&#39;.join(list))</code>直接输出将列表拼接成字符串的结果<ul><li>list存储的是字符，例如list &#x3D; [‘a’,’c’,’r’]</li><li>本意为隔一个’’输出list的一个值，由于’’中间没有间隔，则即直接将list进行拼接</li></ul></li></ul></li></ul><h2 id="切割"><a href="#切割" class="headerlink" title="切割"></a>切割</h2><ul><li><code>flag = key.split(&#39; &#39;)</code><ul><li>将字符key切割为列表类型，分界线为<code>&#39; &#39;</code></li></ul></li></ul><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><ul><li><code>key = [i for i in range(10)]</code><ul><li><code>key</code>初始化——遍历<code>i</code>，同时将i赋值给key[i]</li></ul></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><code>pow(a,b,c)</code><ul><li>$pow(a,b,c) &#x3D;&#x3D; a^{b}\  % \ c$</li></ul></li></ul><h1 id="Crypto库"><a href="#Crypto库" class="headerlink" title="Crypto库"></a>Crypto库</h1><h2 id="Util-number"><a href="#Util-number" class="headerlink" title="Util.number"></a>Util.number</h2><ul><li><p><code>bytes_to_long</code>与<code>long_to_bytes</code></p><ul><li><code>bytes_to_long</code>将字节流转换位long类型数字，即最后一位字符转为ASCii之后乘以2<sup>0</sup>, 往前的字符乘以2<sup>1</sup>, 2<sup>2</sup>……</li><li><code>long_to_bytes</code>将long类型数字转换为bytes类型，是<code>bytes_to_long</code>的逆运算</li></ul></li><li><p><code>getPrime(n_lebgth)</code></p><ul><li>反复使用素性检测算法验证以获素随机数,其长度为2<sup>n</sup></li></ul></li><li><p><code>getStrongPrime(n_lebgth)</code></p><ul><li>获得满足RSA要求的大素数</li></ul></li><li><p><code>inverse(a,n)</code></p><ul><li>求a模n的逆元</li><li>对于正整数 a, n，如果有 $ax ≡ 1 \ (mod \ n)$，则称 x 的最小正整数解为 a 模 n的逆元</li></ul></li><li><p><code>getRandomNBitInteger(N)</code></p><ul><li>获得N比特的随机数（也就是保证最高位非0，且长度为2<sup>N</sup>）</li></ul></li><li><p><code>gad(a,b)</code></p><ul><li>获得a与b的最大公约数</li></ul></li></ul><h1 id="base64库"><a href="#base64库" class="headerlink" title="base64库"></a>base64库</h1><h2 id="base32与base16"><a href="#base32与base16" class="headerlink" title="base32与base16"></a>base32与base16</h2><ul><li><code>b32encode(bytes)</code>与<code>b32decode()</code><ul><li>bytes必须是由str类型经过str.encode()转换而得来</li></ul></li><li><code>b32hexencode(bytes)</code>与<code>b32hexdecode()</code><ul><li>与上面的相同</li></ul></li><li><code>b16</code>与<code>b32</code>相同</li></ul><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><p>- </p>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【滴水逆向】汇编基础</title>
    <link href="/posts/84aee333.html"/>
    <url>/posts/84aee333.html</url>
    
    <content type="html"><![CDATA[<h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><ul><li>N进制指逢N进1的一系列符号</li></ul><h2 id="进制之间的关系"><a href="#进制之间的关系" class="headerlink" title="进制之间的关系"></a>进制之间的关系</h2><h3 id="0d-gt-0x"><a href="#0d-gt-0x" class="headerlink" title="0d -&gt; 0x"></a>0d -&gt; 0x</h3><table border="1">  <tr>    <td>二进制</td>    <td>0</td>    <td>1</td>    <td>10</td>    <td>11</td>    <td>100</td>    <td>101</td>    <td>110</td>    <td>111</td>  </tr>  <tr>    <td>十六进制</td>    <td>0</td>    <td>1</td>    <td>2</td>    <td>3</td>    <td>4</td>    <td>5</td>    <td>6</td>    <td>7</td>  </tr>  <tr>    <td>二进制</td>    <td>1000</td>    <td>1001</td>    <td>1010</td>    <td>1011</td>    <td>1100</td>    <td>1101</td>    <td>1110</td>    <td>1111</td>  </tr>  <tr>    <td>十六进制</td>    <td>8</td>    <td>9</td>    <td>A</td>    <td>B</td>    <td>C</td>    <td>D</td>    <td>E</td>    <td>F</td>  </tr></table><h3 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h3><ul><li>八进制加法表</li></ul><table border="1">  <tr>    <td>1 + 1 = 2</td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 + 2 = 3</td>    <td>2 + 2 = 4</td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 + 3 = 4</td>    <td>2 + 3 = 5</td>    <td>3 + 3 = 6</td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 + 4 = 5</td>    <td>2 + 4 = 6</td>    <td>3 + 4 = 7</td>    <td>4 + 4 = 10</td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 + 5 = 6</td>    <td>2 + 5 = 7</td>    <td>3 + 5 = 10</td>    <td>4 + 5 = 11</td>    <td>5 + 5 = 12</td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 + 6 = 7</td>    <td>2 + 6 = 10</td>    <td>3 + 6 = 11</td>    <td>4 + 6 = 12</td>    <td>5 + 6 = 13</td>    <td>6 + 6 = 14</td>    <td></td>  </tr>  <tr>    <td>1 + 7 = 10</td>    <td>2 + 7 = 11</td>    <td>3 + 7 = 12</td>    <td>4 + 7 = 13</td>    <td>5 + 7 = 14</td>    <td>6 + 7 = 15</td>    <td>7 + 7 = 16</td>  </tr></table><ul><li>八进制乘法表</li></ul><table border="1">  <tr>    <td>1 * 1 = 1</td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 * 2 = 2</td>    <td>2 * 2 = 4</td>    <td></td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 * 3 = 3</td>    <td>2 * 3 = 6</td>    <td>3 * 3 = 11</td>    <td></td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 * 4 = 4</td>    <td>2 * 4 = 10</td>    <td>3 * 4 = 14</td>    <td>4 * 4 = 20</td>    <td></td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 * 5 = 5</td>    <td>2 * 5 = 12</td>    <td>3 * 5 = 17</td>    <td>4 * 5 = 24</td>    <td>5 * 5 = 31</td>    <td></td>    <td></td>  </tr>  <tr>    <td>1 * 6 = 6</td>    <td>2 * 6 = 14</td>    <td>3 * 6 = 22</td>    <td>4 * 6 = 30</td>    <td>5 * 6 = 36</td>    <td>6 * 6 = 44</td>    <td></td>  </tr>  <tr>    <td>1 * 7 = 7</td>    <td>2 * 7 = 16</td>    <td>3 * 7 = 25</td>    <td>4 * 7 = 34</td>    <td>5 * 7 = 43</td>    <td>6 * 7 = 52</td>    <td>7 * 7 = 61</td>  </tr></table><hr><h1 id="数据宽度与逻辑运算"><a href="#数据宽度与逻辑运算" class="headerlink" title="数据宽度与逻辑运算"></a>数据宽度与逻辑运算</h1><h2 id="数据宽度"><a href="#数据宽度" class="headerlink" title="数据宽度"></a>数据宽度</h2><ul><li><p>字节&#x2F;字（8bit）——可存储两个十六进制—8位二进制，例如FF</p><ul><li>十六进制占4位</li></ul></li><li><p>补：</p><ul><li>补码每一位取反加1为原码</li><li>原码每一位取反加1为补码</li></ul></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210031849487.png"></p><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><ul><li>在最底层中计算<span class="label label-primary">2 + 3 = 5</span><ul><li><p>先转换为二进制，0010赋值为X，0011赋值为Y</p></li><li><p>之后将X与Y进行xor与and，若and之后的结果左移一位后有一位不为0，则把xor的结果赋值为X，and的结果赋值为Y，再进行计算</p></li><li><p>若最后and的结果左移一位之后每一位都为0，那么xor就是最后的结果</p><div class="note note-info">            <p>一个数进行了两次异或还是它本身  </p>          </div></li></ul></li></ul><h1 id="寄存器与内存"><a href="#寄存器与内存" class="headerlink" title="寄存器与内存"></a>寄存器与内存</h1><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li><p>1、寄存器位于CPU内部,执行速度快，但比较贵</p></li><li><p>2、内存速度相对较慢,但成本较低，所以可以做的很大</p></li><li><p>3、寄存器和内存没有本质区别,都是用于存储数据的容器,都是定宽的</p></li><li><p>4、寄存器常用的共8个：EAX,EBX,ECX,EDX,ESP,EBP,ESI,EDI</p></li><li><p>5、计算机中的几个常用的计量单位：BYTE,WORD,DWORD</p><ul><li><p>BYTE——字节——8（BIT）</p></li><li><p>WORD——字——16（BIT）</p></li><li><p>DWORD——双字——32（BIT）</p>   <div class="note note-info">            <p>1 KB  &#x3D;  1024 BYTE,<br>1 MB  &#x3D;  1024 KB,<br>1 GB  &#x3D;  1024 MB    </p>          </div></li></ul></li><li><p>6、内存的数量特别庞大，无法对每个内存单位都起一个名字，所以用编号代替，我们称计算机CPU32位或者64位</p><ul><li>计算机内存的每一个字节会有一个编号（即内存编号的单位是字节）<ul><li>如：<span class="label label-primary">0x00000000，0x00000001…… 0xFFFFFFFF</span></li></ul></li><li>32位计算机的编号最大是32位,也就是32个1,换成16进制为FFFFFFFF,也就是说,32位计算机内存寻址的最大范围是32位.而内存的单位是字节,那内存中能存储的信息最多位FFFFFFFF + 1字节,即4G（可以打补丁等进行扩展）</li></ul></li></ul><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><ul><li>内存格式<ul><li><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210032015464.png"><ul><li>编号加<code>[]</code>表示这是内存编号，否则就是立即数</li><li>往往将多个字节连在一起命名为一个编号，这就导致一个编号（包含了4个字节的内存空间）可以存储32位</li></ul></li></ul></li><li>从指定内存中写入&#x2F;读取数据<ul><li><code>mov dword ptr ds:[0x0012FF34], 0x12345678</code>(mov是移动数据)<ul><li>遵循高位在后原则，即<code>[0x0012FF34]</code>对应的是78，而下一位<code>[0x0012FF35]</code>则是对应56（一个字节是8位，即两个十六进制数为一组），同时这个就是将4个字节组成了一个内存空间并命名</li></ul></li><li><code>mov eax, dword ptr ds:[0x0012FF34]</code><ul><li><code>dword</code>：要读\写多少  此时是4字节，byte &#x3D; 1字节，word &#x3D; 2字节</li><li><code>ptr</code>: Point代表后面是一个指针（存的不是值，而是地址）</li><li><code>ds</code>：段寄存器</li><li><code>[0x0012FF34]</code>：内存编号，必须是32位，前面的0可以省略，会自动补0<ul><li>这是一个地址编号，相当于指针</li></ul></li></ul></li><li>注意：<ul><li>地址编号不要随便写，因为内存是由保护的，并不是所有的内存都可以直接读写（需要特别处理），建议地址编号写成esp的值</li></ul></li></ul></li></ul><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><h3 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h3><table><thead><tr><th>32位寄存器</th><th>16位寄存器</th><th>8位寄存器</th></tr></thead><tbody><tr><td>EAX</td><td>AX</td><td>AH    AL</td></tr><tr><td>EBX</td><td>BX</td><td>BH    BL</td></tr><tr><td>ECX</td><td>CX</td><td>CH    CL</td></tr><tr><td>EDX</td><td>DX</td><td>DH    DL</td></tr><tr><td>ESP</td><td>SP</td><td></td></tr><tr><td>EBP</td><td>BP</td><td></td></tr><tr><td>ESI</td><td>SI</td><td></td></tr><tr><td>EDI</td><td>DI</td><td></td></tr></tbody></table><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210031849381.png"></p><blockquote><p>AX为EAX的低位</p><p>AH为AX的高位，AL为AX的低位</p></blockquote><h3 id="32位寄存器"><a href="#32位寄存器" class="headerlink" title="32位寄存器"></a>32位寄存器</h3><table><thead><tr><th>寄存器</th><th>主要用途</th><th>存储数据的范围</th></tr></thead><tbody><tr><td>EAX</td><td>累加器</td><td>0 – 0xFFFFFFFF</td></tr><tr><td>ECX</td><td>计数</td><td>0 – 0xFFFFFFFF</td></tr><tr><td>EDX</td><td>I&#x2F;O指针</td><td>0 – 0xFFFFFFFF</td></tr><tr><td>EBX</td><td>DS段的数据指针</td><td>0 – 0xFFFFFFFF</td></tr><tr><td>ESP</td><td>堆栈指针</td><td>0 – 0xFFFFFFFF</td></tr><tr><td>EBP</td><td>SS段的数据指针</td><td>0 – 0xFFFFFFFF</td></tr><tr><td>ESI</td><td>字符串操作的源指针；SS段的数据指针</td><td>0 – 0xFFFFFFFF</td></tr><tr><td>EDI</td><td>字符串操作的目标指针；ES段的数据指针</td><td>0 – 0xFFFFFFFF</td></tr></tbody></table><h2 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h2><p>EFLAGS寄存器</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210032027304.png"></p><h3 id="进位标志CF-Carry-Flag"><a href="#进位标志CF-Carry-Flag" class="headerlink" title="进位标志CF(Carry Flag)"></a>进位标志CF(Carry Flag)</h3><ul><li>如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0（无符号运算，AL中看超没超过FF  ）<ul><li>最高位进位——CF&#x3D;1<ul><li><code>MOV AL, 0xFE</code></li><li><code>ADD AL,2</code></li></ul></li><li>最高位不进位——CF&#x3D;0<ul><li><code>MOV AL,0xEF</code></li><li><code>ADD AL,2</code></li></ul></li></ul></li></ul><h3 id="奇偶标志PF-Parity-Flag"><a href="#奇偶标志PF-Parity-Flag" class="headerlink" title="奇偶标志PF(Parity Flag)"></a>奇偶标志PF(Parity Flag)</h3><ul><li>奇偶标志PF用于反映运算结果中“1”的个数的奇偶性，如果“1”的个数为偶数，则PF的值为1，否则其值为0——二进制中的1的个数</li><li>最低有效字节——**只看二进制中后8位 **<ul><li><code>MOV AL, 3</code>——PE不变</li><li><code>ADD AL, 3</code>——PE&#x3D;1（6&#x3D;110）</li><li><code>ADD AL, 2</code>——PE&#x3D;0（8&#x3D;1000）</li></ul></li></ul><h3 id="辅助进位标志AF-Auxiliary-Carry-Flag"><a href="#辅助进位标志AF-Auxiliary-Carry-Flag" class="headerlink" title="辅助进位标志AF(Auxiliary Carry Flag)"></a>辅助进位标志AF(Auxiliary Carry Flag)</h3><ul><li>在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：<ul><li>(1)、在字操作时，发生低字节向高字节进位或借位时</li><li>(2)、在字节操作时，发生低4位向高4位进位或借位时</li></ul></li><li>例一：32位<ul><li><code>MOV EAX, 0x55EEFFFF</code></li><li><code>ADD EAX, 2</code></li></ul></li><li>例二：16位<ul><li><code>MOV AX, 5EFE</code></li><li><code>ADD AX, 2</code></li></ul></li><li>例三：8位<ul><li><code>MOV AL, 4E</code></li><li><code>ADD AL, 2</code></li></ul></li></ul><h3 id="零标志ZF-Zero-Flag"><a href="#零标志ZF-Zero-Flag" class="headerlink" title="零标志ZF(Zero Flag)"></a>零标志ZF(Zero Flag)</h3><ul><li>零标志ZF用来反映运算结果是否为0，如果运算结果（mov是赋值，不是运算结果）为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位<ul><li><code>XOR EAX, EAX</code>——ZF变成0</li><li><code>MOV EAX, 2</code>——ZF不变，与mov没有关系</li><li><code>SUB EAX, 2</code></li></ul></li></ul><h3 id="符号标志SF-Sign-Flag"><a href="#符号标志SF-Sign-Flag" class="headerlink" title="符号标志SF(Sign Flag)"></a>符号标志SF(Sign Flag)</h3><ul><li>符号标志SF用来反映运算结果的符号位，它与运算结果的最高位（转换为2进制的最高位）相同<ul><li><code>MOV AL, 7F</code>——0111 1111</li><li><code>ADD AL, 2</code>—进位了</li></ul></li></ul><h3 id="溢出标志OF-Overflow-Flag"><a href="#溢出标志OF-Overflow-Flag" class="headerlink" title="溢出标志OF(Overflow Flag)"></a>溢出标志OF(Overflow Flag)</h3><ul><li>溢出标志OF用于反映有符号数加减运算所得结果是否溢出</li><li>如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0</li></ul><h4 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h4><ul><li>进位标志<code>CF</code>表示无符号数运算结果是否超出范围</li><li>溢出标志<code>OF</code>表示有符号数运算结果是否超出范围</li><li>溢出主要是给有符号运算使用的，在有符号的运算中，有如下的规律：<ul><li>正 + 正 &#x3D; 正 如果结果是负数，则说明有溢出</li><li>负 + 负 &#x3D; 负 如果结果是正数，则说明有溢出</li><li>正 + 负 永远都不会有溢出</li><li><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210031849487.png"></li></ul></li><li>例子<ul><li>1、无符号、有符号都不溢出<ul><li><code>MOV AL,8</code></li><li><code>ADD AL,8</code></li></ul></li><li>2、无符号溢出、有符号不溢出<ul><li><code>MOV AL,0FF</code></li><li><code>ADD AL,2</code></li></ul></li><li>3、无符号不溢出、有符号溢出<ul><li><code>MOV AL,7F</code></li><li><code>ADD AL,2</code></li></ul></li><li>4、无符号、有符号都溢出<ul><li><code>MOV AL,0FE</code></li><li><code>ADD AL,80</code></li></ul></li></ul></li></ul><h4 id="进位判断"><a href="#进位判断" class="headerlink" title="进位判断"></a>进位判断</h4><ul><li>比如80-40<ul><li><code>mov al,80</code></li><li><code>sub al,40</code></li></ul></li><li>相当于<ul><li><code>mov al, 80</code></li><li><code>add al,0c0</code></li></ul></li><li><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210032041035.png"><ul><li>符号有效位指最左边的那一位</li><li>最高有效数值位指符号位后一位</li></ul></li></ul><h1 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h1><div class="note note-blue">            <p>r—表示通用寄存器<br>m—表示内存<br>imm—表示立即数</p>          </div><h2 id="数据传递指令"><a href="#数据传递指令" class="headerlink" title="数据传递指令"></a>数据传递指令</h2><h3 id="MOV"><a href="#MOV" class="headerlink" title="MOV"></a><code>MOV</code></h3><ul><li>移动数据</li><li>MOV使用<ul><li><code>MOV 目标操作数 源操作数</code></li><li>作用：拷贝源操作数到目标操作数<ul><li>源操作数可以是立即数，通用寄存器，段寄存器，或者内存单元</li><li>目标操作数可以是通用寄存器，段寄存器或内存单元</li><li>操作数的宽度必须一样</li><li>源操作数和目标操作数不能同时为内存单元</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Assembly">MOV r/m8, r8     <br>MOV r/m16, r16<br>MOV r/m32, r32<br><br>MOV r8, r/m8<br>MOV r16, r/m16<br>MOV r32, r/m32<br><br>MOV r8, imm8<br>MOV r16, imm16<br>MOV r32, imm32<br></code></pre></td></tr></table></figure><h3 id="XCHG"><a href="#XCHG" class="headerlink" title="XCHG"></a><code>XCHG</code></h3><ul><li>交换数据</li><li>格式：<code>XCHG  R/M,R/M</code>  两边不能同时为内存  宽度要一样</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">XCHG AL, CL<br>XCHG DWORD PTR DS:[12FFC4], EAX<br>XCHG BYTE PTR DS:[12FFC4], AL<br></code></pre></td></tr></table></figure><h2 id="逻辑运算指令"><a href="#逻辑运算指令" class="headerlink" title="逻辑运算指令"></a>逻辑运算指令</h2><h3 id="AND-OR-XOR"><a href="#AND-OR-XOR" class="headerlink" title="AND,OR,XOR"></a><code>AND,OR,XOR</code></h3><ul><li>和,或,异或运算</li><li>对每一<strong>位</strong>进行比较</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;AND/OR/XOR用法相同<br>AND AL, imm8<br>AND AX, imm16<br>AND EAX, imm32<br><br>AND r/m8, imm8     <br>AND r/m16, imm16<br>AND r/m32, imm32<br>  <br>AND r/m16, imm8<br>AND r/m32, imm8<br><br>AND r/m8, r8     <br>AND r/m16, r16<br>AND r/m32, r32<br><br>AND r8, r/m8<br>AND r16, r/m16<br>AND r32, r/m32<br></code></pre></td></tr></table></figure><h3 id="NOT"><a href="#NOT" class="headerlink" title="NOT"></a><code>NOT</code></h3><ul><li>非运算</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">NOT r/m8<br>NOT r/m16<br>NOT r/m32<br></code></pre></td></tr></table></figure><h2 id="算术运算指令"><a href="#算术运算指令" class="headerlink" title="算术运算指令"></a>算术运算指令</h2><h3 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h3><h4 id="ADD与SUB"><a href="#ADD与SUB" class="headerlink" title="ADD与SUB"></a><code>ADD与SUB</code></h4><ul><li>加减运算</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Assembly">ADD/SUB AL, imm8<br>ADD/SUB AX, imm16<br>ADD/SUB EAX, imm32<br><br>ADD/SUB r/m8, imm8     <br>ADD/SUB r/m16, imm16<br>ADD/SUB r/m32, imm32<br>  <br>ADD/SUB r/m16, imm8<br>ADD/SUB r/m32, imm8<br><br>ADD/SUB r/m8, r8     <br>ADD/SUB r/m16, r16<br>ADD/SUB r/m32, r32<br><br>ADD/SUB r8, r/m8<br>ADD/SUB r16, r/m16<br>ADD/SUB r32, r/m32<br></code></pre></td></tr></table></figure><h4 id="ADC"><a href="#ADC" class="headerlink" title="ADC"></a><code>ADC</code></h4><ul><li>带进位加法：加法之后再加1 </li><li>格式：<code>ADC  R/M,R/M/IMM</code>两边不能同时为内存  宽度要一样</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ADC AL,CL<br>ADC BYTE PTR DS:[12FFC4],2<br>ADC BYTE PTR DS:[12FFC4],AL<br></code></pre></td></tr></table></figure><h4 id="SBB"><a href="#SBB" class="headerlink" title="SBB"></a><code>SBB</code></h4><ul><li>带借位减法：减法之后再减1</li><li>格式：<code>SBB  R/M,R/M/IMM</code>两边不能同时为内存  宽度要一样</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SBB AL, CL<br>SBB BYTE PTR DS:[12FFC4], 2<br>SBB BYTE PTR DS:[12FFC4], AL<br></code></pre></td></tr></table></figure><h4 id="INC与DEC"><a href="#INC与DEC" class="headerlink" title="INC与DEC"></a><code>INC与DEC</code></h4><ul><li><strong>INC</strong>加一指令，对于目的操作数进行加一操作</li><li><strong>DEC</strong>减一指令，对于目的操作数进行减一操作</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">INC REG/MEM<br>DEC REG/MEM<br></code></pre></td></tr></table></figure><h3 id="移位指令"><a href="#移位指令" class="headerlink" title="移位指令"></a>移位指令</h3><h4 id="算术移位指令"><a href="#算术移位指令" class="headerlink" title="算术移位指令"></a>算术移位指令</h4><ul><li><p>指令格式：SAL&#x2F;SAR Reg&#x2F;Mem, CL&#x2F;Imm</p></li><li><p>SAL(Shift Arithmetic Left): 算术左移—-末尾补0</p><p>SAR(Shift Arithmetic Right): 算术右移—-考虑符号，最高位符号为1，则补1；反之补0</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SAL Reg/Mem, CL/Imm<br>SAR Reg/Mem, CL/Imm<br></code></pre></td></tr></table></figure><h4 id="逻辑移位指令"><a href="#逻辑移位指令" class="headerlink" title="逻辑移位指令"></a>逻辑移位指令</h4><ul><li><p>指令格式：SHL&#x2F;SHR Reg&#x2F;Mem, CL&#x2F;Imm</p></li><li><p>SHL(Shift Left): 逻辑左移—-末尾补0</p><p>SHR(Shift Right): 逻辑右移—-最高位补1</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SHL Reg/Mem, CL/Imm<br>SHR Reg/Mem, CL/Imm<br></code></pre></td></tr></table></figure><h4 id="循环移位指令"><a href="#循环移位指令" class="headerlink" title="循环移位指令"></a>循环移位指令</h4><ul><li><p>指令格式：ROL r&#x2F;m, i8 ；ROR r&#x2F;m, CL</p></li><li><p>ROL(Rotate Left): 循环左移</p><p>ROR(Rotate Right): 循环右移</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ROL r/m, i8<br>ROR r/m, CL<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202301052011851.png" alt="image-20230105201129799"></p><h4 id="带进位的循环移位指令"><a href="#带进位的循环移位指令" class="headerlink" title="带进位的循环移位指令"></a>带进位的循环移位指令</h4><ul><li><p>指令格式：RCL r&#x2F;m, i8 ； RCR r&#x2F;m, CL</p></li><li><p>RCL(Rotate through Carry Left): 带进位循环左移</p><p>RCR(Rotate through Carry Right): 带进位循环右移</p></li><li><p><code>将CF看成数据的一部分进行循环移位操作</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">RCL r/m, i8 <br>RCR r/m, CL<br></code></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202301052016625.png" alt="image-20230105201639593"></p><h2 id="堆栈操作指令"><a href="#堆栈操作指令" class="headerlink" title="堆栈操作指令"></a>堆栈操作指令</h2><ul><li><strong>堆栈的内存分配是由高地址向低地址延申的</strong></li></ul><h3 id="堆栈数据操作指令"><a href="#堆栈数据操作指令" class="headerlink" title="堆栈数据操作指令"></a>堆栈数据操作指令</h3><h4 id="PUSH与POP"><a href="#PUSH与POP" class="headerlink" title="PUSH与POP"></a><code>PUSH与POP</code></h4><ul><li><strong>PUSH</strong>将数据入栈，ESP寄存器指向的地址减4，将数据存入栈中</li><li><strong>POP</strong>将数据出栈，ESP寄存器指向的地址会先将数据取出，ESP寄存器指向的地址加4</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">PUSH REG/MEM/IMM<br>POP  REG/MEM<br></code></pre></td></tr></table></figure><h3 id="保存-x2F-恢复通用寄存器"><a href="#保存-x2F-恢复通用寄存器" class="headerlink" title="保存&#x2F;恢复通用寄存器"></a>保存&#x2F;恢复通用寄存器</h3><h4 id="PUSHAD与POPAD"><a href="#PUSHAD与POPAD" class="headerlink" title="PUSHAD与POPAD"></a><code>PUSHAD与POPAD</code></h4><ul><li><strong>PUSHAD</strong>指令再堆栈上按顺序压入所有的32位通用寄存器，顺序依次是EAX，ECX，EDX，EBX，ESP，EBP，ESI，EDI</li><li><strong>POPAD</strong>指令以相反的顺序从堆栈中弹出这些通用寄存器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">PUSHAD<br>POPAD<br></code></pre></td></tr></table></figure><h3 id="保存-x2F-恢复标志寄存器"><a href="#保存-x2F-恢复标志寄存器" class="headerlink" title="保存&#x2F;恢复标志寄存器"></a>保存&#x2F;恢复标志寄存器</h3><h4 id="PUSHFD与POPFD"><a href="#PUSHFD与POPFD" class="headerlink" title="PUSHFD与POPFD"></a><code>PUSHFD与POPFD</code></h4><ul><li><strong>PUSHFD</strong>压入32位的EFLAGS标志寄存器的值</li><li><strong>POPFD</strong>将堆栈顶部的值弹出并送至EFLAGS标志寄存器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">PUSHFD<br>POPFD<br></code></pre></td></tr></table></figure><h2 id="转移指令"><a href="#转移指令" class="headerlink" title="转移指令"></a>转移指令</h2><h3 id="无条件转移指令"><a href="#无条件转移指令" class="headerlink" title="无条件转移指令"></a>无条件转移指令</h3><h4 id="JMP"><a href="#JMP" class="headerlink" title="JMP"></a><code>JMP</code></h4><ul><li>修改EIP的值，不影响寄存器和堆栈<ul><li><code>JMP 寄存器/立即数/内存</code>——相当于<code>MOV EIP， 寄存器/立即数/内存</code></li></ul></li><li>EIP决定CPU的指向，执行完一条语句后，其根据内存地址，再加上内存地址存储的数值大小，推测出下一条语句的内存地址编号，进而确定了要执行的语句</li></ul><h3 id="条件转移指令"><a href="#条件转移指令" class="headerlink" title="条件转移指令"></a>条件转移指令</h3><ul><li>条件转移指令又称为JCC指令集，根据EFLAGS标志寄存器中不同的标志位决定如何进行跳转</li></ul><h4 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a><code>GCC</code></h4><table><thead><tr><th align="center">序号</th><th align="center">指令</th><th align="center">含义</th><th align="center">测试条件</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>JE,JZ</code></td><td align="center">结果为零则跳转(相等时跳转)</td><td align="center">ZF&#x3D;1才跳转，否则直接步进到下一条指令</td></tr><tr><td align="center">2</td><td align="center"><code>JNE,JNZ</code></td><td align="center">结果不为零则跳转(不相等时跳转)</td><td align="center">ZF&#x3D;0</td></tr><tr><td align="center">3</td><td align="center"><code>JS</code></td><td align="center">结果为负则跳转</td><td align="center">SF&#x3D;1</td></tr><tr><td align="center">4</td><td align="center"><code>JNS</code></td><td align="center">结果为非负则跳转</td><td align="center">SF&#x3D;0</td></tr><tr><td align="center">5</td><td align="center"><code>JP,JPE</code></td><td align="center">结果中1的个数为偶数则跳转</td><td align="center">PF&#x3D;1</td></tr><tr><td align="center">6</td><td align="center"><code>JNP,JPE</code></td><td align="center">结果中1的个数为偶数则跳转</td><td align="center">PF&#x3D;0</td></tr><tr><td align="center">7</td><td align="center"><code>JO</code></td><td align="center">结果溢出了则跳转</td><td align="center">OF&#x3D;1</td></tr><tr><td align="center">8</td><td align="center"><code>JNO</code></td><td align="center">结果没有溢出则跳转</td><td align="center">OF&#x3D;0</td></tr><tr><td align="center">9</td><td align="center"><code>JB,JNAE</code></td><td align="center">小于则跳转 (无符号数)</td><td align="center">CF&#x3D;1</td></tr><tr><td align="center">10</td><td align="center"><code>JNB,JAE</code></td><td align="center">大于等于则跳转 (无符号数)</td><td align="center">CF&#x3D;0</td></tr><tr><td align="center">11</td><td align="center"><code>JBE,JNA</code></td><td align="center">小于等于则跳转 (无符号数)</td><td align="center">CF&#x3D;1 or ZF&#x3D;1</td></tr><tr><td align="center">12</td><td align="center"><code>JNBE,JA</code></td><td align="center">大于则跳转(无符号数)</td><td align="center">CF&#x3D;0 and ZF&#x3D;0</td></tr><tr><td align="center">13</td><td align="center"><code>JL,JNGE</code></td><td align="center">小于则跳转 (有符号数)</td><td align="center">SF≠OF</td></tr><tr><td align="center">14</td><td align="center"><code>JNL,JGE</code></td><td align="center">大于等于则跳转 (有符号数)</td><td align="center">SF&#x3D;OF</td></tr><tr><td align="center">15</td><td align="center"><code>JLE,JNG</code></td><td align="center">小于等于则跳转 (有符号数)</td><td align="center">ZF&#x3D;1 or SF≠ OF</td></tr><tr><td align="center">16</td><td align="center"><code>JNLE,JG</code></td><td align="center">大于则跳转(有符号数)</td><td align="center">ZF&#x3D;0 and SF&#x3D;OF</td></tr></tbody></table><ul><li>经常和GCC指令搭配</li><li>补充:<ul><li><code>Z</code>–ZF，<code>S</code>–SF，<code>P</code>–PF，<code>O</code>–OF</li><li><code>E</code>—-Equit(相等的)</li><li><code>L</code>—-Low(低的)，<code>B</code>—-Below(下面)</li><li><code>N</code>—-Not(非)</li></ul></li></ul><h4 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a><code>TEST</code></h4><ul><li><strong>TEST</strong>用于对两个操作数进行逻辑与运算，结果不送入目的操作数但影响标志位 OF、SF、ZF、PF 和 CF</li><li>通常用于测试一些条件是否满足。常见用法：用这个指令,可以确定某寄存器是否等于0<ul><li><code>TEST EAX,EAX</code>——观察Z位</li><li>如果EAX的二进制某些位为1的话,那么运算的结果就不为零</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">Test reg, imm/reg/mem<br>Test mem, imm/reg<br></code></pre></td></tr></table></figure><h4 id="CMP"><a href="#CMP" class="headerlink" title="CMP"></a><code>CMP</code></h4><ul><li><strong>CMP</strong>对两个操作数进行比较，比较的方式相当于用目的操作数减源操作数的减法操作，但是 cmp 只影响相应的标志寄存器，不会将减法的结果送入目的操作数中。影响的标志位有 OF、SF、ZF、AF、PF 和 CF</li><li>该指令是比较两个操作数,实际上,它相当于SUB指令,但是相减的结构并不保存到第一个操作数中，只是根据相减的结果 来改变零标志位（ZF）的,当两个操作数相等的时候,零标志位为1</li><li>例一：观察Z位<ul><li><code>MOV EAX, 100</code></li><li><code>MOV ECX, 100</code></li><li><code>CMP EAX,ECX</code>——Z位变成1</li></ul></li><li>例二：观察S位<ul><li><code>MOV EAX, 100</code></li><li><code>MOV ECX, 200</code></li><li><code>CMP EAX,ECX</code>——S位改变，则前一个数比后一个小</li></ul></li><li>例三：<ul><li><code>CMP AX,WORD PTR DS:[405000]</code></li><li><code>CMP AL,BYTE PTR DS:[405000]</code></li><li><code>CMP EAX,DWORD PTR DS:[405000]</code>——注意数据宽度</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">Cmp reg, imm/reg/mem<br>Cmp mem, imm/reg<br></code></pre></td></tr></table></figure><h2 id="循环指令"><a href="#循环指令" class="headerlink" title="循环指令"></a>循环指令</h2><h3 id="LOOP"><a href="#LOOP" class="headerlink" title="LOOP"></a><code>LOOP</code></h3><ul><li><strong>LOOP</strong>是循环控制指令，需要使用 ecx 寄存器来进行循环计数，当执行到 loop 指令时，先将 ecx 寄存器中的值减 1，如果 ecx 寄存器中的值大于 0，则转移到 loop 指令后的地址处，如果 ecx 寄存器中的值等于 0，则执行 loop 指令的下一条指令</li><li>在使用汇编语言编写代码的时候，loop 后面跟随一个标号，而在反汇编代码中 loop 指令后跟随一个地址值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">LOOP s<br>LOOP 00403020<br></code></pre></td></tr></table></figure><h2 id="调用和返回指令"><a href="#调用和返回指令" class="headerlink" title="调用和返回指令"></a>调用和返回指令</h2><h3 id="CALL"><a href="#CALL" class="headerlink" title="CALL"></a><code>CALL</code></h3><ul><li><p><strong>CALL</strong>与JMP相似，但是在修改 EIP 寄存器的值之前，会将 call 指令的下一条指令的地址保存至堆栈，以便在调用过程(函数)后再继续从 call 指令处执行</p></li><li><p>按F7可以进行跳转，之后若是jmp指令，可以按回车进行跳转</p><ul><li><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210032042660.png#pic_left"></li><li>由<code>4183DC</code>得到<code>4183E1</code>是由<code>4183DC</code>加上此段的字节数<code>E8 26000000</code>共5个字节</li><li>之后ESP-4，ESP存储的是<code>004183E1</code>，EIP &#x3D; <code>00418407</code></li></ul></li><li><p><code>CALL 地址A/寄存器</code>——相当于<code>MOV EIP,地址A/寄存器   Push 下一行地址</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">call reg/mem/imm<br></code></pre></td></tr></table></figure><h3 id="RET"><a href="#RET" class="headerlink" title="RET"></a><code>RET</code></h3><ul><li><strong>RET</strong>用于过程(函数)的返回，该指令从堆栈的栈顶中弹出 4 个字节(这里的 4 个字节特指 32 位系统)送入 EIP 寄存器中。一般该指令在过程(函数)需要返回的位置或者是过程(函数)的结尾处</li><li>与CALL相结合，call 指令调用过程(函数)时会将 call 指令的下一条指令压入栈顶，当过程(函数)执<br>行中遇到 ret 指令时，会将 call 指令压入的指令弹出送入 EIP 寄存器中，这样代码的流程就会接着 call 指令的下一条指令继续执行</li><li>返回到call指令所处节点的下一个节点（上图中的<code>004183E1</code>），即产生了回溯，同时退栈</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">Ret<br>Retn imm<br></code></pre></td></tr></table></figure><h3 id="RETN"><a href="#RETN" class="headerlink" title="RETN"></a><code>RETN</code></h3><ul><li>相当于<code>POP EIP</code></li><li>将<code>ESP</code>指向内存地址的值弹出到<code>EIP</code>指令指针寄存器中</li><li>同时ESP+4</li></ul><div class="note note-info">            <p>RET指令不需要修正堆栈栈顶的位置直接返回，RETN指令则需要修正堆栈栈顶的位置后再进行返回</p>          </div> <h2 id="串操作指令"><a href="#串操作指令" class="headerlink" title="串操作指令"></a>串操作指令</h2><h3 id="串传送指令"><a href="#串传送指令" class="headerlink" title="串传送指令"></a>串传送指令</h3><h4 id="MOVS"><a href="#MOVS" class="headerlink" title="MOVS"></a><code>MOVS</code></h4><ul><li><p><strong>MOVS</strong>是借助 ESI 寄存器和 EDI 寄存器，把内存中源地址(ESI指向源地址)的数据送入内存的目的地址(EDI指向目的地址)中，MOVS 指令有 MOVSB、MOVSW 和 MOVSD 三种宽度。</p></li><li><p>在执行了 MOVS 指令后，ESI 寄存器和 EDI 寄存器指向的地址会自动增加或减少 1 个单位(与数据宽度对应)。增加与减少依赖 EFLAGS 标志寄存器的 DF 标志位进行控制。DF &#x3D; 0，增加；反之减少。</p></li><li><p><a href="https://blog.csdn.net/longintchar/article/details/50949923">movsb,movsw,movsd指令</a></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;BYTE/WORD/DWORD<br>  MOVS BYTE PTR ES:[EDI],BYTE PTR DS:[ESI]  ;简写为：MOVSB<br>  MOVS WORD PTR ES:[EDI],BYTE PTR DS:[ESI]  ;简写为：MOVSW<br>  MOVS DWORD PTR ES:[EDI],BYTE PTR DS:[ESI] ;简写为：MOVSD<br>;例子<br> ;例一：<br>  MOV EDI,12FFD8<br>  MOV ESI,12FFD0<br>  MOVS DWORD PTR ES:[EDI],DWORD PTR DS:[ESI]  ;观察EDI的值<br> ;例二：修改标志寄存器中D位的值，然后在执行下面的指令：<br>  MOV EDI,12FFD8<br>  MOV ESI,12FFD0<br>  MOVS DWORD PTR ES:[EDI],DWORD PTR DS:[ESI]  ;观察EDI的值<br></code></pre></td></tr></table></figure><h3 id="串存储指令"><a href="#串存储指令" class="headerlink" title="串存储指令"></a>串存储指令</h3><h4 id="STOS"><a href="#STOS" class="headerlink" title="STOS"></a><code>STOS</code></h4><ul><li><strong>STOS</strong>是将 <code>AL/AX/EAX</code> 的值存储到 EDI 寄存器指向的内存单元。STOS 指令有 STOSB、STOSW 和 STOSD 三种宽度</li></ul><ol><li>[EDI]指向的内存单元——EDI存储的地址编号指向的地址内存</li><li>使用后EDI<code>+4/-4</code>，看EFLAGS寄存器<ol><li>DF &#x3D; 0, EDI + 4</li><li>DF &#x3D; 1, EDI - 4</li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">STOS BYTE PTR ES:[EDI]  ;简写为STOSB，会自动补全<br>STOS WORD PTR ES:[EDI]  ;简写为STOSW<br>STOS DWORD PTR ES:[EDI] ;简写为STOSD<br>;例子：<br>  ;例一：<br>  MOV EAX,12345678<br>  MOV EDI,12FFC4<br>  STOS BYTE/WORD/DWORD PTR ES:[EDI]<br>  ;例二：修改标志寄存器中D位的值，然后再执行下面的指令：<br>  MOV EAX,12345678<br>  MOV EDI,12FFC4<br>  STOS BYTE/WORD/DWORD PTR ES:[EDI]<br></code></pre></td></tr></table></figure><h3 id="重复前缀指令"><a href="#重复前缀指令" class="headerlink" title="重复前缀指令"></a>重复前缀指令</h3><h4 id="REP"><a href="#REP" class="headerlink" title="REP"></a><code>REP</code></h4><ul><li><p><strong>REP</strong>通过配合 ECX 寄存器即可实现重复执行的操作，当执行一次 REP 指令时，ECX寄存器的值都会自动减 1，如果 ECX 寄存器的值不为 0 则重复执行，如果 ECX 寄存器的值为 0 则重复执行结束</p></li><li><p>ECX后面的数字为十六进制，需转化为十进制，再重复执行</p></li><li><p><code>注意</code>：其余寄存器后面的数字也是十六进制</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">MOV ECX,10<br>REP MOVSD<br>REP STOSD<br></code></pre></td></tr></table></figure><hr><h2 id="内存寻址公式"><a href="#内存寻址公式" class="headerlink" title="内存寻址公式"></a>内存寻址公式</h2><h3 id="立即数"><a href="#立即数" class="headerlink" title="[立即数]"></a>[立即数]</h3><ul><li>读取内存中的值：<ul><li><code>MOV EAX, DWORD PTR DS:[0x13FFC4]</code><ul><li>读取了C4,C5,C6,C7四个字节（因为是dword，从C4开始读取存进eax中）</li></ul></li><li><code>MOV EAX, DWORD PTR DS:[0x13FFC8]</code></li></ul></li><li>向内存中写入数据<ul><li><code>MOV DWORD PTR DS:[0x13FFC4], EAX</code></li><li><code>MOV DWORD PTR DS:[0x13FFC4], EBX</code></li></ul></li><li>获取内存编号<ul><li><code>LEA EAX, DWORD PTR DS:[0x13FFC4]</code></li><li><code>LEA EAX, DWORD PTR DS:[ESP+8]</code><ul><li>lea可以获取此时的内存地址编号，并赋值给eax</li></ul></li></ul></li></ul><h3 id="reg"><a href="#reg" class="headerlink" title="[reg]"></a>[reg]</h3><ul><li>reg表示寄存器，可以是8个通用寄存器中的任意一个</li><li>读取内存的值<ul><li><code>MOV ECX, 0x13FFD0</code></li><li><code>MOV EAX, DWORD PTR DS:[ECX]</code><ul><li>此时<code>[ECX]</code>指将ecx的内容当作指针，指向对应的内存编号，取此内存的值赋值给eax,相当于<code>[ECX]</code>存取的是指针，取指针指向地址的值</li></ul></li></ul></li><li>向内存中写入数据<ul><li><code>MOV EDX, 0x13FFD8</code></li><li><code>MOV DWORD PTR DS:[ECX], 0X87654321</code></li></ul></li><li>获取内存编号<ul><li><code>LEA EAX, DWORD PTR DS:[EDX]</code><ul><li>获取的是内存的编号，即<code>[EDX]</code>存储的值</li></ul></li><li><code>MOV EAX, DWORD PTR DS:[EDX]</code></li></ul></li></ul><h3 id="reg-立即数"><a href="#reg-立即数" class="headerlink" title="[reg + 立即数]"></a>[reg + 立即数]</h3><ul><li>读取内存的值<ul><li><code>MOV ECX, 0x13FFD0</code></li><li><code>MOV EAX, DWORD PTR DS:[ECX+4]</code></li></ul></li><li>向内存中写入数据<ul><li><code>MOV EDX, 0x13FFD8</code></li><li><code>MOV DWORD PTR DS:[ECX+0xC], 0x87654321</code></li></ul></li><li>获取内存编号<ul><li><code>LEA EAX, DWORD PYR DS:[EDX+4]</code></li><li><code>MOV EAX, DWORD PTY DS:[EDX+4]</code></li></ul></li></ul><h3 id="reg-reg-1-2-4-8"><a href="#reg-reg-1-2-4-8" class="headerlink" title="[reg+reg*{1,2,4,8}]"></a>[reg+reg*{1,2,4,8}]</h3><ul><li>读取内存的值<ul><li><code>MOV EAX, 13FFC4</code></li><li><code>MOV ECX,2</code></li><li><code>MOV EDX, DWORD PTR DS:[EAX+ECX*4]</code><ul><li>最大的上限就是<code>FFFFFFFF</code></li></ul></li></ul></li><li>向内存中写入数据<ul><li><code>MOV EAX, 13FFC4</code></li><li><code>MOV ECX,2</code></li><li><code>MOV DWORD PTR DS:[EAX+ECX*4], 87654321</code></li></ul></li><li>获取内存编号<ul><li><code>LEA EAX, DWORD PTR DS:[EAX+ECX*4]</code></li></ul></li></ul><h3 id="reg-reg-1-2-4-8-立即数"><a href="#reg-reg-1-2-4-8-立即数" class="headerlink" title="[reg+reg*{1,2,4,8}+立即数]"></a>[reg+reg*{1,2,4,8}+立即数]</h3><ul><li>读取内存的值<ul><li><code>MOV EAX, 13FFC4</code></li><li><code>MOV ECX,2</code></li><li><code>MOV EDX, DWORD PTR DS:[EAX+ECX*4+4]</code><ul><li>最大的上限就是<code>FFFFFFFF</code></li></ul></li></ul></li><li>向内存中写入数据<ul><li><code>MOV EAX, 13FFC4</code></li><li><code>MOV ECX,2</code></li><li><code>MOV DWORD PTR DS:[EAX+ECX*4+4], 87654321</code></li></ul></li><li>获取内存编号<ul><li><code>LEA EAX, DWORD PTR DS:[EAX+ECX*4+4]</code></li></ul></li></ul><hr><h1 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h1><h2 id="堆栈引入"><a href="#堆栈引入" class="headerlink" title="堆栈引入"></a>堆栈引入</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4991/202210032020851.png"></p><ul><li>1、BASE（栈底），TOP（栈顶）是2个32位的通用寄存器，里面存储的是内存单元编号（内存地址）</li><li>2、BASE里面存储了一个地址，记录起始地址</li><li>3、TOP里面存储了一个地址，记录结束地址</li><li>4、存入数据的时候，TOP的值减4（这里每次存取的是4个字节）；释放数据的时候，TOP的值加4（这里每次存取的是4个字节）</li><li>5、因为WIndows分配是高地址向低地址分配，所以TOP加4才能进行释放数据</li><li>6、如果要读取中间的某个数据，可以通过TOP与BASE加上偏移的方式去读取</li><li>7、此方法为堆栈，优点就是临时存储大量的数据，便于查找</li></ul><h2 id="堆栈操作"><a href="#堆栈操作" class="headerlink" title="堆栈操作"></a>堆栈操作</h2><ul><li><code>MOV EBX, 13FFDC</code>——BASE</li><li><code>MOV EDX, 13FFDC</code>——TOP</li></ul><h3 id="压入数据"><a href="#压入数据" class="headerlink" title="压入数据"></a>压入数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;方法一<br>MOV DWORD PTR DS:[EDX-4], 0xBBBBBBBB<br>SUB EDX, 4<br>;方法二<br>LEA EDX, DWORD PTR DS:[EDX-4]<br>MOV DWORD PTR DS:[EDX], 0xDDDDDDDD<br></code></pre></td></tr></table></figure><blockquote><p><code>sub</code>与<code>lea</code>的两条语句等价，可以互换 </p></blockquote><h3 id="读取第N个数"><a href="#读取第N个数" class="headerlink" title="读取第N个数"></a>读取第N个数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;读第四个压入的数据<br>MOV ESI, DWORD PTR DS:[EBX-0X10] ;0x10指4*4<br><br>MOV ESI, DWORD PTR DS:[EDX+0X10] ;0x10指4*4<br></code></pre></td></tr></table></figure><h3 id="弹出数据"><a href="#弹出数据" class="headerlink" title="弹出数据"></a>弹出数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">MOV ECX, DWORD PTR DS:[EDX]<br>LAN EDX, DWORD PTR DS:[EDX+4] / ADD EDX, 4<br><br>LEA EDX, DWORD PTR DS:[EDX+4]<br>MOV EDI, DWORD PTR DS:[EDX-4]<br></code></pre></td></tr></table></figure><h2 id="默认堆栈"><a href="#默认堆栈" class="headerlink" title="默认堆栈"></a>默认堆栈</h2><ul><li><code>ESP</code>用于存储栈顶的值，<code>EBP</code>用于存储栈底的值</li><li><code>push 0x12345678/reg</code>将数据压入栈，同时偏移<code>ESP</code></li><li><code>pop reg</code>将数据弹出栈，赋值给寄存器<code>reg</code>，同时偏移<code>ESP</code></li><li><a href="https://blog.csdn.net/qq_44288506/article/details/104767511?ops_request_misc=&request_id=&biz_id=102&utm_term=push%E4%B8%8Epop%E6%8C%87%E4%BB%A4&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-7-104767511.142%5Ev47%5Epc_rank_34_1,201%5Ev3%5Econtrol_2&spm=1018.2226.3001.4187">push与pop指令讲解</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">PUSH r32/m32<br>PUSH r16/m16<br>PUSH imm8/imm16/imm32<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">POP r32/m32<br>POP r16/m16<br>POP imm8/imm16/imm32<br>POP EBP #指EBP出栈，即将此时的内存编号赋值给EBP，同时ESP+4<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pushad ;保存当前通用寄存器到堆栈中<br>popad  ;将堆栈中的数据还原到通用寄存器中<br>;在此过程中堆栈的值不能发生变化，否则不能还原<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
